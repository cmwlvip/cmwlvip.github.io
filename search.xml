<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue</title>
      <link href="/2023/03/01/vue/"/>
      <url>/2023/03/01/vue/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue官网"><a href="#Vue官网" class="headerlink" title="Vue官网"></a>Vue官网</h2><p><a href="https://cn.vuejs.org/">中文官网</a><br><a href="https://vuejs.org/">英文官网</a><br><div class="note info modern"><p>官网有<strong>快速入门教程</strong>，也可查阅<strong>API文档</strong></p></div></p><h2 id="Vue简介"><a href="#Vue简介" class="headerlink" title="Vue简介"></a>Vue简介</h2><h3 id="Vue是什么"><a href="#Vue是什么" class="headerlink" title="Vue是什么"></a>Vue是什么</h3><p><code>Vue</code>是一套用来动态<strong>构建用户界面</strong>的<strong>渐进式</strong>JavaScript框架</p><ul><li><strong>构建用户界面</strong>：把数据通过某种办法变成用户界面</li><li><strong>渐进式</strong>：Vue可以自底向上逐层的应用，简单应用只需要一个轻量小巧的核心库，复杂应用可以引入各式各样的<code>Vue</code>插件<div class="note info modern"><p>后起之秀，生态完善，已然成为前端工程师必备技能</p></div></li></ul><h3 id="Vue是谁开发的"><a href="#Vue是谁开发的" class="headerlink" title="Vue是谁开发的"></a>Vue是谁开发的</h3><p><img src="/2023/03/01/vue/2023-03-01-15-42-43.png" alt="尤雨溪"></p><h3 id="Vue的特点"><a href="#Vue的特点" class="headerlink" title="Vue的特点"></a>Vue的特点</h3><ol><li>采用<strong>组件化</strong>模式，提高代码复用率、且让代码更好维护<br><img src="/2023/03/01/vue/2023-03-01-15-44-58.png" alt="组件化"></li><li><strong>声明式</strong>编码，让编码人员无需直接操作DOM，提高开发效率<br><img src="/2023/03/01/vue/2023-03-01-15-46-27.png" alt="对比"></li><li><strong>Diff算法</strong><br><img src="/2023/03/01/vue/2023-03-01-15-48-19.png" alt="Diff算法"></li></ol><h2 id="搭建Vue开发环境"><a href="#搭建Vue开发环境" class="headerlink" title="搭建Vue开发环境"></a>搭建Vue开发环境</h2><ol><li>引入Vue包<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;../js/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li>给浏览器安装<code>Vue Devtools</code> 插件</li><li>（可选）阻止vue在启动时生成生产提示<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Vue核心"><a href="#Vue核心" class="headerlink" title="Vue核心"></a>Vue核心</h2><h3 id="Vue快速上手——Hello小案例"><a href="#Vue快速上手——Hello小案例" class="headerlink" title="Vue快速上手——Hello小案例"></a>Vue快速上手——Hello小案例</h3><ol><li>想让<code>Vue</code>工作，就必须创建一个<code>Vue</code>实例，且要传入一个配置对象</li><li>root 容器里的代码依然符合html规范，只不过混入了一些特殊的<code>Vue</code>语法</li><li>root 容器里的代码被称为<code>Vue</code>模板</li><li><code>Vue</code>实例与容器是<strong>一一对应</strong>的</li><li>真实开发中只有一个<code>Vue</code>实例，并且会配合着组件一起使用</li><li><code>&#123;&#123;xxx&#125;&#125;</code>中的 xxx 要写 <strong>js表达式</strong>，且 xxx 可以自动读取到data中的所有属性，<strong>注意区分</strong>：js表达式 和 js代码（语句</li><li>一旦<code>data</code>中的数据发生变化，那么模板中用到该数据的地方也会自动更新</li></ol><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p><code>Vue</code>模板语法包括两大类<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>你好，<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;school.url&quot;</span> <span class="attr">x</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>我去学习1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;school.url&quot;</span> <span class="attr">x</span>=<span class="string">&quot;hello&quot;</span>&gt;</span>我去尚硅谷学习1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;HSQ&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">school</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">url</span>:<span class="string">&#x27;http://www.atguigu.com&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="插值语法"><a href="#插值语法" class="headerlink" title="插值语法"></a>插值语法</h4><p>功能：用于解析标签体内容<br>写法：<code>&#123;&#123;xxx&#125;&#125;</code>，xxx 是 <strong>js表达式</strong>，可以直接读取到 data 中的所有区域</p><h4 id="指令语法"><a href="#指令语法" class="headerlink" title="指令语法"></a>指令语法</h4><p>功能：用于解析标签（包括：标签属性、标签体内容、绑定事件…）<br>举例：<code>&lt;a v-bind:href=&quot;xxx&quot;&gt;</code>或简写为<code>&lt;a :href=&quot;xxx&quot;&gt;</code>，xxx 同样要写 <strong>js表达式</strong>，可以直接读取到 data 中的所有属性</p><div class="note info modern"><p>Vue中有很多的指令，且形式都是<code>v-xxx</code>，此处只是拿v-bind举例</p></div><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p><code>Vue</code>中有2种<strong>数据绑定</strong>的方式</p><p>单向绑定<code>v-bind</code>数据只能从 data 流向页面<br>双向绑定<code>v-model</code>数据不仅能从 data 流向页面，还可以从页面流向 data<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>  <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;name&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        //如下代码是错误的，应为v-model只能应用在表单类元素（输入类元素）上</span><br><span class="line">        //<span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-model:x</span>=<span class="string">&quot;name&quot;</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><div class="note info modern"><p>双向绑定一般都应用在表单类元素上，如 <code>&lt;input&gt;&lt;select&gt;&lt;textarea&gt;</code>等<br><code>v-model:value</code>可以简写为<code>v-model</code>，因为<code>v-model</code>默认收集的就是<code>value</code>值</p></div><h3 id="el与data的两种写法"><a href="#el与data的两种写法" class="headerlink" title="el与data的两种写法"></a>el与data的两种写法</h3><h4 id="el两种写法"><a href="#el两种写法" class="headerlink" title="el两种写法"></a>el两种写法</h4><ol><li>创建Vue实例对象的时候配置<code>el</code>属性</li><li>先创建Vue实例，随后再通过<code>vm.$mount(&#39;#root&#39;)</code>指定<code>el</code>的值</li></ol><h4 id="dtat两种写法"><a href="#dtat两种写法" class="headerlink" title="dtat两种写法"></a>dtat两种写法</h4><ol><li>对象式：<code>data： &#123; &#125;</code></li><li>函数式：<code>data() &#123; return &#123; &#125; &#125;</code></li></ol><div class="note warning modern"><p>目前哪种写法都可以，以后到组件时，data必须使用函数，否则会报错</p></div><div class="note primary modern"><p>由<code>Vue</code>管理的函数，<strong>一定不要写箭头函数</strong>，否则 this 就不再是<code>Vue实例</code>了</p></div><h3 id="MVVM模型"><a href="#MVVM模型" class="headerlink" title="MVVM模型"></a>MVVM模型</h3><p><img src="/2023/03/01/vue/2023-03-01-20-36-26.png" alt="MVVM"></p><ul><li>M：模型 <strong>Model</strong>，data中的数据</li><li>V：视图 <strong>View</strong>，模板代码</li><li>VM：视图模型 <strong>ViewModel</strong>，Vue实例</li></ul><p><code>data</code>中所有的属性，最后都出现在了<code>vm</code>身上<br><code>vm</code>身上所有的属性 及<code>Vue原型</code>身上所有的属性，在 <code>Vue模板</code>中都可以直接使用</p><h3 id="Vue中的数据代理"><a href="#Vue中的数据代理" class="headerlink" title="Vue中的数据代理"></a>Vue中的数据代理</h3><h3 id="Object-defineproperty方法"><a href="#Object-defineproperty方法" class="headerlink" title="Object.defineproperty方法"></a><code>Object.defineproperty</code>方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">18</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(person, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">    <span class="comment">// value:18,</span></span><br><span class="line">    <span class="comment">// enumerable:true,// 控制属性是否可以枚举，默认值是false</span></span><br><span class="line">    <span class="comment">// writable:true,// 控制属性是否可以被修改，默认值是false</span></span><br><span class="line">    <span class="comment">// configurable:true// 控制属性是否可以被删除，默认值是false</span></span><br><span class="line">    <span class="comment">// 当有人读取person的age属性时，get函数(getter)就会被调用，且返回值就是age的值</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人读取age属性了&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> number</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 当有人修改person的age属性时，set函数(setter)就会被调用，且会收到修改的具体值</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;有人修改了age属性，且值是&#x27;</span>, value)</span><br><span class="line">        number = value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// console.log(Object.keys(person))</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span><br></pre></td></tr></table></figure><h4 id="数据代理"><a href="#数据代理" class="headerlink" title="数据代理"></a>数据代理</h4><p><strong>数据代理</strong>：通过一个对象代理对另一个对象中属性的操作（读/写）<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">x</span>: <span class="number">100</span> &#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">y</span>: <span class="number">200</span> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj2, <span class="string">&#x27;x&#x27;</span>, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> obj.<span class="property">x</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    obj.<span class="property">x</span> = value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="数据代理图示"><a href="#数据代理图示" class="headerlink" title="数据代理图示"></a>数据代理图示</h4><ol><li>Vue中的数据代理通过<code>vm</code>对象来代理<code>data</code>对象中属性的操作（读/写）</li><li>Vue中数据代理的好处：更加方便的操作<code>data</code>中的数据</li><li>基本原理<ol><li>通过<code>object.defineProperty()</code>把data对象中所有属性添加到vm上</li><li>为每一个添加到<code>vm</code>上的属性，都指定一个<code>getter</code> <code>setter</code></li><li>在<code>getter</code> <code>setter</code>内部去操作（读/写）<code>data</code>中对应的属性<br><img src="/2023/03/01/vue/2023-03-01-21-44-15.png" alt="数据代理图示"><br>Vue将<code>data</code>中的数据拷贝了一份到<code>_data</code>属性中，又将<code>_data</code>里面的属性提到<strong>Vue实例</strong>中（如name），通过<code>defineProperty</code>实现数据代理，这样通过<code>geter/setter</code>操作 name，进而操作<code>_data</code>中的 <code>name</code>。而<code>_data</code>又对<code>data</code>进行数据劫持，实现<strong>响应式</strong>。</li></ol></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;江西财经大学大学&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">address</span>: <span class="string">&#x27;南昌&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>acwing</title>
      <link href="/2023/02/26/acwing/"/>
      <url>/2023/02/26/acwing/</url>
      
        <content type="html"><![CDATA[<h2 id="A-B"><a href="#A-B" class="headerlink" title="A+B"></a>A+B</h2><div class="tabs" id="a+b"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#a+b-1">题目</button></li><li class="tab"><button type="button" data-href="#a+b-2">java</button></li><li class="tab"><button type="button" data-href="#a+b-3">python</button></li><li class="tab"><button type="button" data-href="#a+b-4">(python)map函数</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="a+b-1"><p><img src="/2023/02/26/acwing/1.jpg" alt="A+B"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a+b-2"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        Scanner cin=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> cin.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> cin.nextInt();</span><br><span class="line">        System.out.println(a + b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a+b-3"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a,b=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">print</span>(a+b)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="a+b-4"><div class="note default modern"><p><code>map</code>函数，Python内置函数，映射函数</p></div><p><b>语法</b></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">map</span>(function,iterable)</span><br><span class="line"><span class="comment"># function -- 函数</span></span><br><span class="line"><span class="comment"># iterable -- 序列</span></span><br></pre></td></tr></table></figure><ol><li>列表做参<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,[<span class="number">2.34</span>,<span class="number">13.14</span>,<span class="number">66</span>]))</span><br><span class="line">[<span class="number">2</span>,<span class="number">13</span>,<span class="number">66</span>]</span><br></pre></td></tr></table></figure></li><li>自定义函数做参<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x+<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(<span class="built_in">map</span>(my,&#123;<span class="number">2</span>,<span class="number">3.6</span>,<span class="number">6</span>&#125;)))</span><br><span class="line"><span class="comment"># (3,4.6,7)</span></span><br></pre></td></tr></table></figure></li><li>map函数返回的是一个<code>map</code>类型的序列，而不是列表<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,[<span class="number">3</span>,<span class="number">4</span>]))</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;map&#x27;</span>&gt;</span><br></pre></td></tr></table></figure></li><li>当function函数没有返回值的时候，返回一个由None组成的序列<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">map</span>(my,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])))</span><br><span class="line"><span class="comment">#[None,None,None]</span></span><br></pre></td></tr></table></figure></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h2><div class="tabs" id="01knapsnack"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#01knapsnack-1">图解背包问题</button></li><li class="tab"><button type="button" data-href="#01knapsnack-2">题目</button></li><li class="tab"><button type="button" data-href="#01knapsnack-3">java</button></li><li class="tab"><button type="button" data-href="#01knapsnack-4">python</button></li><li class="tab"><button type="button" data-href="#01knapsnack-5">(python)定义二维数组</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="01knapsnack-1"><p>假设你是个小偷，背着一个可以装4磅东西的背包。<br>可偷窃的商品入下：<br><img src="/2023/02/26/acwing/IMG_0395.JPG" alt="可偷窃的东西"><br>为了让偷窃的商品价值最高就是<strong>01背包问题</strong><br>枚举法在商品多到一定程度的时候肯定是行不通的，如何找到最优解呢？答案是使用动态规划</p><p><blockquote><p>动态规划</p></blockquote><br>对于背包问题，先解决小背包（子背包）问题，再逐步解决原来的问题。<br><img src="/2023/02/26/acwing/IMG_0396.JPG" alt="先解决小背包问题"><br><img src="/2023/02/26/acwing/IMG_0397.JPG" alt="每个动态规划算法都从一个网格开始"><br><mark class="hl-label green">吉他行</mark><br><img src="/2023/02/26/acwing/IMG_0398.JPG" alt="只有吉他可供选择"><br><mark class="hl-label green">音响行</mark><br><img src="/2023/02/26/acwing/IMG_0399.JPG" alt="可偷的商品有吉他和音响"><br><img src="/2023/02/26/acwing/IMG_0401.JPG" alt="更新了最大值"><br><mark class="hl-label green">笔记本电脑行</mark><br><img src="/2023/02/26/acwing/IMG_0402.JPG" alt="3磅的背包，选择偷窃价值2000美元的笔记本电脑而不是吉他"><br><img src="/2023/02/26/acwing/IMG_0403.JPG" alt="4磅背包"><br><img src="/2023/02/26/acwing/IMG_0404.JPG" alt="最终答案"></p><p><blockquote><p>公式</p></blockquote><br><img src="/2023/02/26/acwing/IMG_0405.JPG" alt="单元格公式"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="01knapsnack-2"><p><img src="/2023/02/26/acwing/2.jpg" alt="01背包"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="01knapsnack-3"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">cin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">N</span> <span class="operator">=</span> cin.nextInt();</span><br><span class="line">        <span class="type">int</span> <span class="variable">V</span> <span class="operator">=</span> cin.nextInt();</span><br><span class="line">        <span class="type">int</span>[] v = <span class="keyword">new</span> <span class="title class_">int</span>[N + <span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span>[] w = <span class="keyword">new</span> <span class="title class_">int</span>[N + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; N + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            v[i] = cin.nextInt();</span><br><span class="line">            w[i] = cin.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[][] cell = <span class="keyword">new</span> <span class="title class_">int</span>[N + <span class="number">1</span>][V + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; N + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; V + <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt;= v[i]) &#123;</span><br><span class="line">                    cell[i][j] = Math.max(cell[i - <span class="number">1</span>][j - v[i]] + w[i], cell[i - <span class="number">1</span>][j]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cell[i][j] = cell[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(cell[N][V]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="01knapsnack-4"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">N,V=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">things=[[<span class="number">0</span>]*<span class="number">2</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N+<span class="number">1</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,N+<span class="number">1</span>):</span><br><span class="line">    things[i][<span class="number">0</span>],things[i][<span class="number">1</span>]=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">cell=[[<span class="number">0</span>]*(V+<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N+<span class="number">1</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,N+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,V+<span class="number">1</span>):</span><br><span class="line">        <span class="comment">#j空间大的背包，j大于物品体积的时候才有剩余空间价值</span></span><br><span class="line">        <span class="keyword">if</span>(j&gt;=things[i][<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">if</span>(cell[i-<span class="number">1</span>][j]&gt;things[i][<span class="number">1</span>]+cell[i-<span class="number">1</span>][j-things[i][<span class="number">0</span>]]):</span><br><span class="line">               cell[i][j]=cell[i-<span class="number">1</span>][j]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cell[i][j]=things[i][<span class="number">1</span>]+cell[i-<span class="number">1</span>][j-things[i][<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cell[i][j]=cell[i-<span class="number">1</span>][j]</span><br><span class="line"><span class="built_in">print</span>(cell[N][V])</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="01knapsnack-5"><div class="note default modern"><p>python定义二维数组</p></div><p><mark class="hl-label green">使用numpy</mark> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr=[[<span class="number">0</span>]*<span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line">arr1=np.zeros([<span class="number">3</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">[[0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0.]</span></span><br><span class="line"><span class="string"> [0. 0. 0.]]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><mark class="hl-label green">使用for循环</mark> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr=[[<span class="number">0</span>]*<span class="number">3</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"><span class="comment">#[[0, 0, 0], [0, 0, 0], [0, 0, 0]]</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h2><div class="tabs" id="completeknapsack"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#completeknapsack-1">分析</button></li><li class="tab"><button type="button" data-href="#completeknapsack-2">题目</button></li><li class="tab"><button type="button" data-href="#completeknapsack-3">java</button></li><li class="tab"><button type="button" data-href="#completeknapsack-4">python</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="completeknapsack-1"><p>结合<strong>01背包问题</strong>图解我们得到了<strong>01背包问题</strong>的递推式子<br><strong>完全背包问题</strong>就是物品数量无限，其实也可以强行<strong>01背包问题</strong>求解$cell[i][j]$</p><ul><li>$v[i]$表示物品体积</li><li>$w[i]$表示物品价值</li><li><strong>不选第i种物品</strong>：$cell[i-1][j]$</li><li><strong>选1个第i种物品</strong>：$cell[i-1][j-v[i]]+w[i]$</li><li><strong>选2个第i种物品</strong>：$cell[i-1][j-2v[i]]+2w[i]$</li><li>因为过程有限，过程不能无限下去，对于第i个物品，最多可以装$\frac{j}{v[i]}$个</li><li>所以递推式子其实就是</li></ul><script type="math/tex; mode=display">cell[i][j]=max_{ (0{\leq}k{\leq}t)}(cell[i-1][j],cell[i-1][j-kv[i]]+kw[i])</script><div class="note danger modern"><p>到这一步，已经能写出代码了，见python，只不过时间复杂度太大了，运行不通过</p></div><p>继续往下分析</p><script type="math/tex; mode=display">cell[i][j]=max_{ (0{\leq}k{\leq}t)}(cell[i-1][j],cell[i-1][j-v[i]]+w[i],cell[i-1][j-2v[i]]+2w[i],...)①</script><script type="math/tex; mode=display">cell[i][j-v[i]]=max_{ (0{\leq}k{\leq}t)}(cell[i-1][j-v[i]],cell[i-1][j-v[i]-v[i]]+w[i],...)②</script><p>等式两边同时加上$w[i]$</p><script type="math/tex; mode=display">cell[i][j-v[i]]+w[i]=max_{ (0{\leq}k{\leq}t)}(cell[i-1][j-v[i]]+w[i],cell[i-1][j-v[i]-v[i]]+w[i]+w[i],...)③</script><p>仔细看③与①相比就少了$cell[i-1][j]$,于是有了<strong>完全背包</strong>递推公式如下：</p><script type="math/tex; mode=display">cell[i][j]=max(cell[i][j-v[i]]+w[i],cell[i-1][j])</script><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="completeknapsack-2"><p><img src="/2023/02/26/acwing/3.jpg" alt="完全背包"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="completeknapsack-3"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="completeknapsack-4"><figure class="highlight python"><figcaption><span>未优化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">N,V=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">v=[<span class="number">0</span>]*(N+<span class="number">1</span>)</span><br><span class="line">w=[<span class="number">0</span>]*(N+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,N+<span class="number">1</span>):</span><br><span class="line">    v[i],w[i]=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">cell=[[<span class="number">0</span>]*(V+<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N+<span class="number">1</span>)]</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">findMax</span>(<span class="params">i,j</span>):</span><br><span class="line">    <span class="built_in">max</span>=cell[i-<span class="number">1</span>][j]</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(j/v[i]+<span class="number">1</span>)):   </span><br><span class="line">        <span class="keyword">if</span>(cell[i-<span class="number">1</span>][j-k*v[i]]+k*w[i]&gt;<span class="built_in">max</span>):</span><br><span class="line">            <span class="built_in">max</span>=cell[i-<span class="number">1</span>][j-k*v[i]]+k*w[i]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,N+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,V+<span class="number">1</span>):</span><br><span class="line">       cell[i][j]=findMax(i,j)</span><br><span class="line"><span class="built_in">print</span>(cell[N][V])</span><br></pre></td></tr></table></figure><figure class="highlight python"><figcaption><span>优化</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,N+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,V+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span>(j&gt;=v[i]):</span><br><span class="line">            <span class="keyword">if</span>(cell[i][j-v[i]]+w[i]&gt;cell[i-<span class="number">1</span>][j]):</span><br><span class="line">                cell[i][j]=cell[i][j-v[i]]+w[i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                cell[i][j]=cell[i-<span class="number">1</span>][j]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cell[i][j]=cell[i-<span class="number">1</span>][j]</span><br><span class="line"><span class="built_in">print</span>(cell[N][V])</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h2><div class="tabs" id="mutipleknapsack"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#mutipleknapsack-1">分析</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="mutipleknapsack-1"><p>如果$s[i]v[i]&gt;V$，不就是一个<strong>完全背包</strong><br>所以<strong>多重背包</strong>问题就是要转换成<strong>01背包</strong>+<strong>完全背包</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> acwing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo-plugins</title>
      <link href="/2023/02/23/hexo-plugins/"/>
      <url>/2023/02/23/hexo-plugins/</url>
      
        <content type="html"><![CDATA[<h2 id="音乐-hexo-tag-aplayer"><a href="#音乐-hexo-tag-aplayer" class="headerlink" title="音乐(hexo-tag-aplayer)"></a>音乐(hexo-tag-aplayer)</h2><p>音乐界面使用了插件 <code>hexo-tag-aplayer</code></p><h3 id="hexo-tag-aplayer下载"><a href="#hexo-tag-aplayer下载" class="headerlink" title="hexo-tag-aplayer下载"></a>hexo-tag-aplayer下载</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-tag-aplayer</span><br></pre></td></tr></table></figure><h3 id="hexo-tag-aplayer基本使用"><a href="#hexo-tag-aplayer基本使用" class="headerlink" title="hexo-tag-aplayer基本使用"></a>hexo-tag-aplayer基本使用</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% aplayer title author url [picture<span class="emphasis">_url, narrow, autoplay, width:xxx, lrc:xxx] %&#125;</span></span><br></pre></td></tr></table></figure><p>使用参考插件<a href="https://github.com/MoePlayer/hexo-tag-aplayer/blob/master/docs/README-zh_cn.md">文档</a></p><div class="note danger modern"><p>不知道怎么错了，搞不定！！ 加载本地音乐就没成功过！！！</p></div><p>但是3.0新版本的Aplayer已经支持<code>MeingJS</code>了，<strong>MetingJS</strong>是基于Meting API 的 APlayer 衍生播放器，引入 MetingJS 后，播放器将支持对于 QQ音乐、网易云音乐、虾米、酷狗、百度等平台的音乐播放。</p><h3 id="Meing-JS支持-3-0-新功能"><a href="#Meing-JS支持-3-0-新功能" class="headerlink" title="Meing JS支持(3.0 新功能)"></a>Meing JS支持(3.0 新功能)</h3><p>修改Hexo配置文件<code>_config.yml</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>接着就可以通过 <code>&#123;% meting ...%&#125;</code> 在文章中使用 MetingJS 播放器了：</p><mark class="hl-label green">简单示例(id,server,type)</mark> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% meting &quot;0009DtA34CLrKk&quot; &quot;tencent&quot; &quot;song&quot; %&#125;</span><br></pre></td></tr></table></figure>    <div id="aplayer-oItUsiOE" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="0009DtA34CLrKk" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div><mark class="hl-label green">进阶示例</mark> <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% meting &quot;0009DtA34CLrKk&quot; &quot;tencent&quot; &quot;song&quot; &quot;autoplay&quot; &quot;mutex:false&quot; &quot;preload:none&quot; &quot;theme:#ad7a86&quot;%&#125;</span><br></pre></td></tr></table></figure>    <div id="aplayer-PNIAmYkJ" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="0009DtA34CLrKk" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="false" data-listmaxheight="340px" data-preload="none" data-theme="#ad7a86"></div><p>有关 <code>&#123;% meting %&#125;</code> 的选项列表如下:</p><div class="table-container"><table><thead><tr><th>选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td><strong>必须值</strong></td><td>歌曲 id / 播放列表 id / 相册 id / 搜索关键字</td></tr><tr><td>server</td><td><strong>必须值</strong></td><td>音乐平台: <code>netease</code> ,<code>tencent</code>, <code>kugou</code>, <code>xiami</code>, <code>baidu</code></td></tr><tr><td>type</td><td><strong>必须值</strong></td><td><code>song</code>, <code>playlist</code>, <code>album</code>, <code>search</code>, <code>artist</code></td></tr><tr><td>fixed</td><td><code>false</code></td><td>开启固定模式，加入<code>fixed</code>开启固定（左下角）用于全局</td></tr><tr><td>mini</td><td><code>false</code></td><td>开启迷你模式，加入<code>mini</code>开启，只有小图标呈现</td></tr><tr><td>loop</td><td><code>all</code></td><td>列表循环模式：<code>all</code>, <code>one</code>,<code>none</code></td></tr><tr><td>order</td><td><code>list</code></td><td>列表播放模式： <code>list</code>, <code>random</code></td></tr><tr><td>volume</td><td>0.7</td><td>播放器音量</td></tr><tr><td>lrctype</td><td>0</td><td>歌词格式类型，好像不为0会没有歌词</td></tr><tr><td>listfolded</td><td><code>false</code></td><td>指定音乐播放列表是否折叠</td></tr><tr><td>storagename</td><td><code>metingjs</code></td><td>LocalStorage 中存储播放器设定的键名</td></tr><tr><td>autoplay</td><td><code>true</code></td><td>自动播放，移动端浏览器暂时不支持此功能，加<code>autoplay</code>表示自动播放</td></tr><tr><td>mutex</td><td><code>true</code></td><td>该选项开启时，如果同页面有其他 aplayer 播放，点击播放，其他播放器会暂停</td></tr><tr><td>listmaxheight</td><td><code>340px</code></td><td>播放列表的最大长度</td></tr><tr><td>preload</td><td><code>auto</code></td><td>音乐文件预载入模式(进度条)，可选项： <code>none</code>, <code>metadata</code>, <code>auto</code></td></tr><tr><td>theme</td><td><code>#ad7a86</code></td><td>播放器风格色彩设置</td></tr></tbody></table></div><h3 id="添加全局吸底Aplayer"><a href="#添加全局吸底Aplayer" class="headerlink" title="添加全局吸底Aplayer"></a>添加全局吸底Aplayer</h3><h4 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h4><p>如果想使用aplayer，很多人都会推荐安装 <a href="https://github.com/MoePlayer/hexo-tag-aplayer">hexo-tag-aplayer</a> 这款插件。这款插件通过 Hexo 独有的标签外挂，我们可以很方便的写入一些参数，插件就会帮我们生成对应的 html。如果你只是使用一些简单的功能，其实无需使用到这个插件，只需以 html 格式书写就行，不用插件去转换。</p><p><strong>For example：</strong><br>如果使用插件，在 markdown 中要这样写</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% meting &quot;000PeZCQ1i4XVs&quot; &quot;tencent&quot; &quot;artist&quot; &quot;theme:#3F51B5&quot; &quot;mutex:true&quot; &quot;preload:auto&quot; %&#125;</span><br></pre></td></tr></table></figure><p>会被插件渲染为<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;aplayer-uxAIfEUs&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aplayer aplayer-tag-marker meting-tag-marker&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;000PeZCQ1i4XVs&quot;</span> <span class="attr">data-server</span>=<span class="string">&quot;tencent&quot;</span> <span class="attr">data-type</span>=<span class="string">&quot;artist&quot;</span> <span class="attr">data-mode</span>=<span class="string">&quot;circulation&quot;</span> <span class="attr">data-autoplay</span>=<span class="string">&quot;false&quot;</span> <span class="attr">data-mutex</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-listmaxheight</span>=<span class="string">&quot;340px&quot;</span> <span class="attr">data-preload</span>=<span class="string">&quot;auto&quot;</span> <span class="attr">data-theme</span>=<span class="string">&quot;#3F51B5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><div class="note info modern"><p>如果我们不想使用插件，就需要在markdown中用html的格式书写，同时把主题配置文件中的<code>aplayerInject</code>开启</p></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;aplayer&quot;</span> <span class="attr">data-id</span>=<span class="string">&quot;000PeZCQ1i4XVs&quot;</span> <span class="attr">data-server</span>=<span class="string">&quot;tencent&quot;</span> <span class="attr">data-type</span>=<span class="string">&quot;artist&quot;</span> <span class="attr">data-mutex</span>=<span class="string">&quot;true&quot;</span> <span class="attr">data-preload</span>=<span class="string">&quot;auto&quot;</span> <span class="attr">data-theme</span>=<span class="string">&quot;#3F51B5&quot;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="关闭asset-inject"><a href="#关闭asset-inject" class="headerlink" title="关闭asset_inject"></a>关闭<code>asset_inject</code></h4><p>由于需要全局都插入 aplayer 和 meting 资源，为了防止插入重复的资源，需要把 asset_inject 设为 <code>false</code></p><p>修改<code>Hexo配置文件</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><h4 id="开启主题的aplayerInject"><a href="#开启主题的aplayerInject" class="headerlink" title="开启主题的aplayerInject"></a>开启主题的<code>aplayerInject</code></h4><p>修改<code>主题配置文件</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h4 id="插入-Aplayer-html"><a href="#插入-Aplayer-html" class="headerlink" title="插入 Aplayer html"></a>插入 Aplayer html</h4><p>把 <code>aplayer</code>代码 插入到主题配置文件的 <code>inject.bottom</code> 去<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line"> <span class="attr">head:</span></span><br><span class="line"> <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class=&quot;aplayer</span> <span class="literal">no</span><span class="string">-destroy&quot;</span> <span class="string">data-id=&quot;8332009741&quot;</span> <span class="string">data-server=&quot;tencent&quot;</span> <span class="string">data-type=&quot;playlist&quot;</span> <span class="string">data-fixed=&quot;true&quot;</span> <span class="string">data-mini=&quot;true&quot;</span> <span class="string">data-autoplay=&quot;false&quot;</span> <span class="string">&gt;</span> <span class="string">&lt;/div&gt;</span></span><br></pre></td></tr></table></figure></p><div class="note info modern"><p>参数使用同上面aplayer标签参数，只是前面加上<code>data-</code>即可</p></div><p>运行 Hexo 就可以看到网页左下角出现了 Aplayer</p><p>最后，如果你想切换页面时，音乐不会中断。设置<code>主题配置文件</code>的<code>pjax: true</code></p><h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><div class="tabs" id="comment"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#comment-1">通用设置</button></li><li class="tab"><button type="button" data-href="#comment-2">livere(来比力)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="comment-1"><p>支持双评论显示，只需要配置两个评论（第一个为默认显示）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># Up to two comments system, the first will be shown as default</span></span><br><span class="line">  <span class="comment"># Choose: Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">Valine,Disqus</span></span><br><span class="line">  <span class="attr">text:</span> <span class="literal">true</span> <span class="comment"># Display the comment name next to the button</span></span><br><span class="line">  <span class="comment"># lazyload: The comment system will be load when comment element enters the browser&#x27;s viewport.</span></span><br><span class="line">  <span class="comment"># If you set it to true, the comment count will be invalid</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">true</span> <span class="comment"># Display comment count in top_img</span></span><br><span class="line">  <span class="attr">card_post_count:</span> <span class="literal">false</span> <span class="comment"># Display comment count in Home Page</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>use</td><td>使用的评论（请注意，最多支持两个，如果不需要请留空）<br>注意：双评论不能是 Disqus 和 Disqusjs 一起，由于其共用同一个 ID，会出错</td></tr><tr><td>text</td><td>是否显示评论服务商的名字</td></tr><tr><td>lazyload</td><td>是否为评论开启lazyload，开启后，只有滚动到评论位置时才会加载评论所需要的资源（开启 lazyload 后，评论数将不显示）</td></tr><tr><td>count</td><td>是否在文章顶部显示评论数<br>livere、Giscus 和 utterances 不支持评论数显示</td></tr><tr><td>card_post_count</td><td>是否在首页文章卡片显示评论数<br>gitalk、livere 、Giscus 和 utterances 不支持评论数显示</td></tr></tbody></table></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="comment-2"><p>注册<a href="https://livere.com/">来必力</a>，配置你自己的来必力设置，然后在<code>Butterfly</code>里开启它。</p><p>修改<code>主题配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">livere:</span></span><br><span class="line">  <span class="attr">uid:</span></span><br></pre></td></tr></table></figure><p><img src="/2023/02/23/hexo-plugins/2023-02-25-17-39-46.png" alt="livere.id"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p><img src="/2023/02/23/hexo-plugins/2023-02-25-20-43-23.png" alt="monsterid"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Butterfly</title>
      <link href="/2023/02/21/Butterfly/"/>
      <url>/2023/02/21/Butterfly/</url>
      
        <content type="html"><![CDATA[<div class="note default modern"><p><b>Hexo Butterfly</b>主题使用文档整理<br>学会尊重他人劳动成果—学习来源：<a href="https://butterfly.js.org/">Butterfly</a></p></div><hr><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><div class="note modern"><p>不要把个人需要的文件/图片放在主题<code>source</code>文件夹里，因为在升级主题的过程中，可能会把文件覆盖删除了。<br>在Hexo根目录的<code>source</code>文件夹里，创建一个文件夹来放置个人文件/图片。<br>引用文件直接为<code>/文件夹名称/文件名</code></p></div><h2 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h2><p><strong>Front-matter</strong>是<strong>markdown</strong>文件最上方以 <code>---</code> 分隔的区域</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title:</span><br><span class="line">date:</span><br><span class="line"><span class="section">tags:</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><ul><li>Page Front-matter 用于<code>页面</code>配置</li><li>Post Front-matter 用于<code>文章页</code>配置</li></ul><h3 id="Page-Front-matter"><a href="#Page-Front-matter" class="headerlink" title="Page Front-matter"></a>Page Front-matter</h3><div class="table-container"><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面标题</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标签、分类和友情链接三个页面需要配置</td></tr><tr><td>updated</td><td>【可选】页面更新日期</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块(默认 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr></tbody></table></div><h3 id="Post-Front-matter"><a href="#Post-Front-matter" class="headerlink" title="Post Front-matter"></a>Post Front-matter</h3><div class="table-container"><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】文章标题</td></tr><tr><td>date</td><td>【必需】文章创建日期</td></tr><tr><td>updated</td><td>【可选】文章更新日期</td></tr><tr><td>tags</td><td>【可选】文章标签</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图(<strong>如果没有设置top_img,文章页顶部将显示缩略图</strong>，可设为false/图片地址/留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块(默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章TOC(默认为设置中toc的enable配置)</td></tr><tr><td>toc_number</td><td>【可选】显示toc_number(默认为设置中toc的number配置)</td></tr><tr><td>toc_style_simple</td><td>【可选】显示 toc 简洁模式</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块(默认为设置中post_copyright的enable配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的<code>文章作者</code></td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的<code>文章作者</code>链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的<code>文章链接</code>链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的<code>版权声明</code>文字</td></tr><tr><td>mathjax</td><td>【可选】显示mathjax(当设置mathjax的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示katex(当设置katex的per_page: false时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载aplayer的js和css,请参考文章下面的音乐 配置</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开(true/false)(默认为设置中highlight_shrink的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>sticky</td><td>【可选】<a href="#文章置顶">文章置顶</a></td></tr></tbody></table></div><h2 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h2><h3 id="标签页"><a href="#标签页" class="headerlink" title="标签页"></a>标签页</h3><ol><li>前往你的 Hexo 博客的根目录</li><li>输入<code>hexo new page tags</code></li><li>找到<code>source/tags/index.md</code>文件</li><li>修改这个文件：<br><strong>记得添加</strong> <code>type: &quot;tags&quot;</code></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">orderby: random</span><br><span class="line"><span class="section">order: 1</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>type</td><td>【必须】页面类型，必须为<code>tags</code></td></tr><tr><td>orderby</td><td>【可选】排序方式 ：random/name/length</td></tr><tr><td>order</td><td>【可选】排序次序： 1, asc for ascending; -1, desc for descending</td></tr></tbody></table></div><h3 id="分类页"><a href="#分类页" class="headerlink" title="分类页"></a>分类页</h3><ol><li>前往你的 Hexo 博客的根目录</li><li>输入<code>hexo new page categories</code></li><li>找到<code>source/categories/index.md</code>文件</li><li>修改这个文件：<br><strong>记得添加</strong> <code>type: &quot;categories&quot;</code></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2018-01-05 00:00:00</span><br><span class="line"><span class="section">type: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h3 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h3><p>为你的博客创建一个友情链接！</p><h4 id="创建友情链接页面"><a href="#创建友情链接页面" class="headerlink" title="创建友情链接页面"></a>创建友情链接页面</h4><ol><li>前往你的 Hexo 博客的根目录</li><li>输入<code>hexo new page link</code></li><li>找到<code>source/link/index.md</code>文件</li><li>修改这个文件：<br><strong>记得添加</strong> <code>type: &quot;link&quot;</code></li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 友情链接</span><br><span class="line">date: 2018-06-07 22:17:49</span><br><span class="line"><span class="section">type: &quot;link&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h4 id="友情链接添加"><a href="#友情链接添加" class="headerlink" title="友情链接添加"></a>友情链接添加</h4><div class="tabs" id="link"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#link-1">本地生成</button></li><li class="tab"><button type="button" data-href="#link-2">远程拉取</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="link-1"><p>在Hexo博客目录中的<code>source/_data</code>（如果没有 _data 文件夹，请自行创建），创建一个文件<code>link.yml</code></p><p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">那些人，那些事</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">软件开发往往是这样：最开始的</span> <span class="number">90</span><span class="string">%</span> <span class="string">代码占用了开始的</span> <span class="number">90</span><span class="string">%</span> <span class="string">的开发时间；剩下</span> <span class="number">10</span><span class="string">%</span> <span class="string">代码同样需要</span> <span class="number">90</span><span class="string">%</span> <span class="string">的开发时间</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CSDN</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.csdn.net/</span></span><br><span class="line">      <span class="comment"># 图标</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://pic.imgdb.cn/item/637ee66616f2c2beb1556f7b.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">专业开发者社区</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">blog</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">Hexo</span> <span class="string">博客搭建</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/zh-cn/</span></span><br><span class="line">      <span class="comment"># 图标</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">快速、简单且强大的博客框架</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">hexo-douban</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/mythsman/hexo-douban</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://pic.imgdb.cn/item/637ee2bf16f2c2beb150ee17.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">一个在</span> <span class="string">Hexo</span> <span class="string">页面中嵌入豆瓣个人主页的小插件</span></span><br></pre></td></tr></table></figure><br><code>class_name</code>和 <code>class_desc</code>支持 html 格式书写，如不需要，也可以留空。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="link-2"><div class="note info modern"><p>从 <code>4.0.0</code> 开始，支持从远程加载友情链接，远程拉取只支持 <code>json</code></p></div><div class="note warning modern"><p>选择远程加载后，本地生成的方法会无效</p></div><p>在 <code>source/link/index.md</code> 这个文件的 front-matter 添加远程链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flink<span class="emphasis">_url: xxxxx</span></span><br></pre></td></tr></table></figure><p>Json格式如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;class_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;友情链接&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;class_desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;那些人，那些事&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;link_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hexo&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;link&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://hexo.io/zh-tw/&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;descr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;快速、简单且强大的网志框架&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;class_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;网站&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;class_desc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;值得推荐的网站&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;link_list&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Youtube&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;link&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.youtube.com/&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;descr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;视频网站&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Weibo&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;link&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://www.weibo.com/&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;descr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;中国最大社交分享平台&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Twitter&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;link&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://twitter.com/&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;avatar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;descr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;社交分享平台&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h4 id="友情链接界面设置"><a href="#友情链接界面设置" class="headerlink" title="友情链接界面设置"></a>友情链接界面设置</h4><div class="note info modern"><p>由 <code>2.2.0</code> 起，友情链接界面可以由用户自己自定义，只需要在友情链接的md档设置就行，以普通的Markdown格式书写。</p></div><h3 id="图库"><a href="#图库" class="headerlink" title="图库"></a>图库</h3><p>图库页面只是普通的页面，你只需要<code>hexo n page xxxxx</code>创建你的页面就行</p><p>然后使用标签外挂<a href="https://cmwlvip.github.io/2022/11/03/HexoTagPlugins/#Gallery%E7%9B%B8%E5%86%8C%E5%9B%BE%E5%BA%93">gallery</a></p><h4 id="子页面"><a href="#子页面" class="headerlink" title="子页面"></a>子页面</h4><p>子页面也是普通的页面，你只需要<code>hexo n page xxxxx</code>创建你的页面就行</p><p>然后使用标签外挂<a href="https://cmwlvip.github.io/2022/11/03/HexoTagPlugins/#Gallery%E7%9B%B8%E5%86%8C%E5%9B%BE%E5%BA%93">gallery</a></p><div class="note pink icon-padding modern"><i class="note-icon fas fa-sitemap"></i><p>如果你想要使用 <code>/photo/ohmygirl</code> 这样的链接显示你的图片内容<br>你可以把创建好的<code>ohmygirl</code>整个文件夹移到<code>photo</code>文件夹里去</p></div><h3 id="404页面"><a href="#404页面" class="headerlink" title="404页面"></a>404页面</h3><p>主题内置了一个简单的404页面，可在设置中开启</p><div class="note info modern"><p>本地预览时，访问出错的网站是不会跳到404页面的。</p><p>如需本地预览，请访问<code>http://localhost:4000/404.html</code></p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A simple 404 page</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&quot;页面没有找到&quot;</span></span><br><span class="line">  <span class="attr">background:</span> </span><br></pre></td></tr></table></figure><p><img src="/2023/02/21/Butterfly/hexo-theme-butterfly-docs-error404.png" alt="404"></p><h2 id="语言"><a href="#语言" class="headerlink" title="语言"></a>语言</h2><p>修改站点<strong>根目录</strong>配置文件<code>_config.yml</code></p><p>主题支持三种语言</p><ul><li>default(en)</li><li>zh-CN(简体中文)</li><li>zh-TW(简体中文)</li></ul><h3 id="网站资料"><a href="#网站资料" class="headerlink" title="网站资料"></a>网站资料</h3><p>修改网站各种资料，例如标题、副标题和邮箱等个人资料，请修改博客<strong>根目录</strong>的<code>_config.yml</code></p><h2 id="导航菜单"><a href="#导航菜单" class="headerlink" title="导航菜单"></a>导航菜单</h2><p>修改 <code>主题配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">List||fas</span> <span class="attr">fa-list:</span></span><br><span class="line">    <span class="attr">Archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">    <span class="attr">Tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">    <span class="attr">Categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">Fun||fas</span> <span class="attr">fa-heart-pulse:</span></span><br><span class="line">    <span class="attr">Book:</span> <span class="string">/books/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-book-open</span></span><br><span class="line">    <span class="attr">Movie:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">    <span class="attr">Game:</span> <span class="string">/games/</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-steam</span></span><br><span class="line">  <span class="attr">Link:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="attr">About:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></table></figure><p>必须是 <code>/xxx/</code>，后面<code>||</code>分开，然后写图标名</p><p>如果不希望显示图标，图标名可不写</p><div class="note warning modern"><p>导航的文字可自行更改</p></div><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div class="note warning modern"><p>代码块中的所有功能只适用于 Hexo 自带的代码渲染<br>如果使用第三方的渲染器，不一定会有效</p></div><h3 id="代码高亮主题"><a href="#代码高亮主题" class="headerlink" title="代码高亮主题"></a>代码高亮主题</h3><div class="tabs" id="code"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#code-1">默认主题</button></li><li class="tab"><button type="button" data-href="#code-2">自定义主题</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="code-1"><p><code>Butterfly</code>支持6种代码高亮样式：</p><ul><li>darker</li><li>pale night</li><li>light</li><li>ocean</li><li>mac</li><li>mac light</li></ul><p>修改 <code>主题配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_theme:</span> <span class="string">light</span></span><br></pre></td></tr></table></figure><p><blockquote><p>dark</p></blockquote><br><img src="/2023/02/21/Butterfly/hexo-theme-butterfly-doc-code-darker.png" alt="dark"></p><p><blockquote><p>pale night</p></blockquote><br><img src="/2023/02/21/Butterfly/hexo-theme-butterfly-doc-code-pale-night.png" alt="pale night"></p><p><blockquote><p>light</p></blockquote><br><img src="/2023/02/21/Butterfly/hexo-theme-butterfly-doc-code-light.png" alt="light"></p><p><blockquote><p>ocean</p></blockquote><br><img src="/2023/02/21/Butterfly/hexo-theme-butterfly-doc-highlight-ocean.png" alt="ocean"></p><p><blockquote><p>mac</p></blockquote><br><img src="/2023/02/21/Butterfly/hexo-theme-butterfly-doc-highlight-mac.png" alt="mac"></p><p><blockquote><p>mac light</p></blockquote><br><img src="/2023/02/21/Butterfly/hexo-theme-butterfly-docs-mac-light.png" alt="mac light"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="code-2"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="代码复制"><a href="#代码复制" class="headerlink" title="代码复制"></a>代码复制</h3><p>主题支持代码复制功能</p><p>修改 <code>主题配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_copy:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="代码框展开-关闭"><a href="#代码框展开-关闭" class="headerlink" title="代码框展开/关闭"></a>代码框展开/关闭</h3><p>在默认情况下，代码框自动展开，可设置是否所有代码框都关闭状态，点击<code>&gt;</code>可展开代码</p><ul><li>true全部代码框不展开，需点击<code>&gt;</code>打开</li><li>false 代码框展开，有<code>&gt;</code>点击按钮 </li><li>none 不显示<code>&gt;</code>按钮</li></ul><p>修改 <code>主题配置文件</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_shrink:</span> <span class="literal">true</span> <span class="comment">#代码框不展开，需点击 &#x27;&gt;&#x27; 打开</span></span><br></pre></td></tr></table></figure></p><div class="note info modern"><p>你也可以在post/page页对应的markdown文件front-matter添加highlight_shrink来独立配置。</p><p>当<strong>主题配置文件</strong>中的 <code>highlight_shrink</code> 设为true时，可在front-matter添加<code>highlight_shrink: false</code>来单独配置文章展开代码框。</p><p>当<strong>主题配置文件</strong>中的 <code>highlight_shrink</code> 设为false时，可在front-matter添加<code>highlight_shrink: true</code>来单独配置文章收缩代码框。</p></div><h3 id="代码换行"><a href="#代码换行" class="headerlink" title="代码换行"></a>代码换行</h3><p><strong>在默认情况下，Hexo在编译的时候不会实现代码自动换行。</strong>如果你不希望在代码块的区域里有横向滚动条的话，那么可以考虑开启这个功能。</p><p>修改 <code>主题配置文件</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">code_word_wrap:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><p>如果你是使用 highlight 渲染，需要找到你站点的 Hexo 配置文件<code>_config.yml</code>，将<code>line_number</code>改成<code>false</code>:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span> <span class="comment"># &lt;- 改这里</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br></pre></td></tr></table></figure></p><p>如果你是使用 prismjs 渲染，需要找到你站点的 Hexo 配置文件<code>_config.yml</code>，将<code>line_number</code>改成<code>false</code>:<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">false</span> <span class="comment"># &lt;- 改这里</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></p><h3 id="代码高度限制"><a href="#代码高度限制" class="headerlink" title="代码高度限制"></a>代码高度限制</h3><p>可配置代码高度限制，超出的部分会隐藏，并显示展开按钮。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight_height_limit:</span> <span class="literal">false</span> <span class="comment"># unit: px</span></span><br></pre></td></tr></table></figure></p><div class="note warning modern"><ol><li>单位是<code>px</code>，直接添加数字，如 400</li><li>实际限制高度为 <code>highlight_height_limit + 30 px</code> ，多增加 30px 限制，目的是避免代码高度只超出highlight_height_limit 一点时，出现展开按钮，展开没内容。</li><li>不适用于隐藏后的代码块（ css 设置 display: none）</li></ol></div><p><img src="/2023/02/21/Butterfly/hexo-theme-butterfly-docs-highlight-heigh-limit.gif" alt="代码高度限制"></p><p><a href="https://fontawesome.com/search">https://fontawesome.com/search</a></p><h2 id="社交图标"><a href="#社交图标" class="headerlink" title="社交图标"></a>社交图标</h2><p>Butterfly支持<a href="https://fontawesome.com/icons?from=io">font-awesome v6</a>图标.</p><p>书写格式 <code>图标名：url || 描述性文字</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fab fa-github:</span> <span class="string">https://github.com/xxxxx</span> <span class="string">||</span> <span class="string">Github</span></span><br><span class="line">  <span class="attr">fas fa-envelope:</span> <span class="string">mailto:xxxxxx@gmail.com</span> <span class="string">||</span> <span class="string">Email</span></span><br></pre></td></tr></table></figure></p><h2 id="主页文章节选-自动节选和文章页description"><a href="#主页文章节选-自动节选和文章页description" class="headerlink" title="主页文章节选(自动节选和文章页description)"></a>主页文章节选(自动节选和文章页description)</h2><p>因为主题UI的关系，<code>主页文章节选</code>只支持<code>自动节选</code>和<code>文章页description</code>。</p><p>在<code>butterfly</code>里，有四种可供选择</p><ol><li><strong>description</strong>： 只显示description</li><li><strong>both</strong>： 优先选择description，如果没有配置description，则显示自动节选的内容</li><li><strong>auto_excerpt</strong>：只显示自动节选</li><li><strong>false</strong>： 不显示文章内容</li></ol><p>修改<code>主题配置文件</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span> <span class="comment"># if you set method to 2 or 3, the length need to config</span></span><br></pre></td></tr></table></figure><br><code>description</code>在<a href="#Front-matter">front-matter</a>里添加</p><h2 id="顶部图"><a href="#顶部图" class="headerlink" title="顶部图"></a>顶部图</h2><div class="note info modern"><p>如果不要显示顶部图，可直接配置 <code>disable_top_img: true</code></p></div><div class="note primary modern"><p>顶部图的获取顺序，如果都没有配置，则不显示顶部图。</p><ol><li>页面顶部图的获取顺序：<br><code>各自配置的 top_img &gt; 配置文件的 default_top_img</code></li><li>文章页顶部图的获取顺序：<br><code>各自配置的 top_img &gt; cover &gt; 配置文件的 default_top_img</code></li></ol></div><div class="table-container"><table><thead><tr><th>配置</th><th>解释</th></tr></thead><tbody><tr><td>index_img</td><td>主页的 top_img</td></tr><tr><td>default_top_img</td><td>默认的 top_img，当页面的 top_img 没有配置时，会显示 default_top_img</td></tr><tr><td>archive_img</td><td>归档页面的 top_img</td></tr><tr><td>tag_img</td><td>tag 子页面 的 默认 top_img</td></tr><tr><td>tag_per_img</td><td>tag 子页面的 top_img，可配置每个 tag 的 top_img</td></tr><tr><td>category_img</td><td>category 子页面 的 默认 top_img</td></tr><tr><td>category_per_img</td><td>category 子页面的 top_img，可配置每个 category 的 top_img</td></tr></tbody></table></div><p>其它页面 （tags/categories/自建页面）和 文章页 的 <code>top_img</code> ，请到对应的 md 页面设置<code>front-matter</code>中的<code>top_img</code></p><p>以上所有的 top_img 可配置以下值</p><div class="table-container"><table><thead><tr><th>配置的值</th><th>效果</th></tr></thead><tbody><tr><td>留空</td><td>显示默认的 top_img（如有），否则显示默认的顔色<br>（文章页top_img留空的话，会显示 cover 的值）</td></tr><tr><td>img链接</td><td>图片的链接，显示所配置的图片</td></tr><tr><td>顔色(<br><strong>HEX值</strong> - #0000FF<br><strong>RGB值</strong> - rgb(0,0,255)<br><strong>顔色单词</strong> - orange<br><strong>渐变色</strong> - linear-gradient( 135deg, #E2B0FF 10%, #9F44D3 100%)<br>）</td><td>对应的顔色</td></tr><tr><td>transparent</td><td>透明</td></tr><tr><td>false</td><td>不显示 top_img</td></tr></tbody></table></div><div class="note success modern"><p><code>tag_per_img</code> 和 <code>category_per_img</code>可对 tag 和 category 进行单独的配置</p></div><p>并不推荐为每个 tag 和每个 category 都配置不同的顶部图，因为配置太多会拖慢生成速度</p><figure class="highlight yaml"><figcaption><span>ForExample</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">tag_per_img：</span></span><br><span class="line">  <span class="attr">Hexo:</span> <span class="string">https://xxxxxx.png</span></span><br><span class="line">  <span class="attr">Java:</span> <span class="string">java.png</span></span><br><span class="line"> </span><br><span class="line"><span class="string">category_per_img：</span></span><br><span class="line">  <span class="string">随想:</span> <span class="number">1.</span><span class="string">png</span></span><br><span class="line">  <span class="string">推荐:</span> <span class="number">2.</span><span class="string">png</span></span><br></pre></td></tr></table></figure><div class="tabs" id="top"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#top-1">top_img: orange</button></li><li class="tab"><button type="button" data-href="#top-2">top_img: 'linear-gradient(20deg, #0062be, #925696, #cc426e, #fb0347)'</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="top-1"><p><img src="/2023/02/21/Butterfly/theme-butterfly-docs-top-img-orange.png" alt="orange"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="top-2"><p><img src="/2023/02/21/Butterfly/theme-butterfly-docs-top-img-color.png" alt="渐变色"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h2><p>【推荐】<code>hexo-generator-index</code>从 2.0.0 开始，已经支持文章置顶功能。<br>直接在文章的<a href="#Front-matter">front-matter</a>区域里添加<code>sticky: 1</code>属性来把这篇文章置顶。<br><div class="note info modern"><p>数值越大，置顶的优先级越大</p></div></p><h2 id="文章封面"><a href="#文章封面" class="headerlink" title="文章封面"></a>文章封面</h2><p>文章的 markdown 文档上,在 <a href="#Front-matter">front-matter</a> 添加 <code>cover</code> ,并填上要显示的图片地址。</p><p>如果不配置 <code>cover</code>,可以设置显示默认的 <code>cover</code>。</p><p>如果不想在首页显示cover, 可以设置为 <code>false</code>。</p><div class="note primary modern"><p>文章封面的获取顺序 <code>Front-matter 的 cover</code> &gt; 配置文件的 <code>default_cover</code> &gt; <code>false</code></p></div><p>修改<code>主题配置文件</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># 是否显示文章封面</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 封面显示的位置</span></span><br><span class="line">  <span class="comment"># 三个值可配置 left , right , both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment"># 当没有设置cover时，默认的封面显示</span></span><br><span class="line">  <span class="attr">default_cover:</span> </span><br></pre></td></tr></table></figure></p><div class="table-container"><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>index_enable</td><td>主页是否显示文章封面图</td></tr><tr><td>aside_enable</td><td>侧栏是否显示文章封面图</td></tr><tr><td>archives_enable</td><td>归档页面是否显示文章封面图</td></tr><tr><td>position</td><td>主页卡片文章封面的显示位置<br>- left：全部显示在左边<br>- right：全部显示在右边<br>- both：封面位置以左右左右轮流显示</td></tr><tr><td>default_cover</td><td>默认的 cover, 可配置图片链接/顔色/渐变色等</td></tr></tbody></table></div><p>当配置多张图片时,会随机选择一张作为cover.此时写法应为<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">default_cover:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="string">https://file.crazywong.com/gh/jerryc127/CDN@latest/cover/default_bg.png</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://file.crazywong.com/gh/jerryc127/CDN@latest/cover/default_bg2.png</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">https://file.crazywong.com/gh/jerryc127/CDN@latest/cover/default_bg3.png</span></span><br></pre></td></tr></table></figure></p><h2 id="文章页相关配置"><a href="#文章页相关配置" class="headerlink" title="文章页相关配置"></a>文章页相关配置</h2><h3 id="文章meta显示"><a href="#文章meta显示" class="headerlink" title="文章meta显示"></a>文章meta显示</h3><p>这个选项是用来显示文章的相关信息的。</p><p>修改<code>主题配置文件</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">page:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 主页文章日期是创建日或者更新日或都显示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">relative</span> <span class="comment"># date/relative 显示日期还是相对日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 主页是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 主页是否显示标签</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 显示描述性文字</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span> <span class="comment"># created or updated or both 文章页日期是创建日或者更新日或都显示</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">relative</span> <span class="comment"># date/relative 显示日期还是相对日期</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># true or false 文章页是否显示分类</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span> <span class="comment"># true or false 文章页是否显示标签</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span> <span class="comment"># true or false 显示描述性文字</span></span><br></pre></td></tr></table></figure></p><h3 id="文章版权"><a href="#文章版权" class="headerlink" title="文章版权"></a>文章版权</h3><p>为博客文章展示文章版权和许可协议。</p><p>修改<code>主题配置文件</code><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">post_copyright:</span><br><span class="line">  enable: true</span><br><span class="line">  decode: false</span><br><span class="line">  author_href:</span><br><span class="line">  license: CC BY-NC-SA 4.0</span><br><span class="line">  license_url: https://creativecommons.org/licenses/by-nc-sa/4.0/</span><br></pre></td></tr></table></figure><br>由于<code>Hexo 4.1</code>开始，默认对网址进行解码，以至于如果是中文网址，会被解码，可设置<code>decode: true</code>来显示中文网址。</p><p>如果有文章（例如：转载文章）不需要显示版权，可以在文章<a href="#Front-matter">Front-matter</a>单独设置<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">copyright:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><p>从<code>3.0.0</code>开始，支持对单独文章设置版权信息，可以在文章Front-matter单独设置<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">copyright<span class="emphasis">_author: xxxx</span></span><br><span class="line"><span class="emphasis">copyright_</span>author<span class="emphasis">_href: https://xxxxxx.com</span></span><br><span class="line"><span class="emphasis">copyright_</span>url: https://xxxxxx.com</span><br><span class="line">copyright<span class="emphasis">_info: 此文章版权归xxxxx所有，如有转载，请注明来自原作者</span></span><br></pre></td></tr></table></figure></p><h3 id="文章打赏"><a href="#文章打赏" class="headerlink" title="文章打赏"></a>文章打赏</h3><p>在每篇文章的结尾，可以添加打赏按钮。相关二维码可以自行配置。</p><p>对于没有提供二维码的，可配置一张软件的icon图片，然后在link上添加相应的打赏链接。用户点击图片就会跳转到链接去。</p><p>link可以不写，会默认为图片的链接。</p><p>修改<code>主题配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">QR_code:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/wechat.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">微信</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/img/alipay.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">支付宝</span></span><br></pre></td></tr></table></figure><h3 id="TOC"><a href="#TOC" class="headerlink" title="TOC"></a>TOC</h3><p>在文章页，会有一个目录，用于显示TOC。<br>修改<code>主题配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">expand:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">style_simple:</span> <span class="literal">false</span> <span class="comment"># for post</span></span><br><span class="line">  <span class="attr">scroll_percent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>属性</th><th>解释</th></tr></thead><tbody><tr><td>post</td><td>文章页是否显示 TOC</td></tr><tr><td>page</td><td>普通页面是否显示 TOC</td></tr><tr><td>number</td><td>是否显示章节数</td></tr><tr><td>expand</td><td>是否展开 TOC</td></tr><tr><td>style_simple</td><td>简洁模式（侧边栏只显示 TOC, 只对文章页有效 ）</td></tr><tr><td>scroll_percent</td><td>是否显示滚动进度百分比</td></tr></tbody></table></div><h4 id="为特定的文章配置"><a href="#为特定的文章配置" class="headerlink" title="为特定的文章配置"></a>为特定的文章配置</h4><p>在你的文章<code>md</code>文件的头部，加入<code>toc_number</code>和<code>toc</code>，并配置<code>true</code>或者<code>false</code>即可。</p><p>主题会优先判断文章Markdown的Front-matter是否有配置，如有，则以Front-matter的配置为准。否则，以<strong>主题配置文件</strong>中的配置为准</p><h3 id="相关文章"><a href="#相关文章" class="headerlink" title="相关文章"></a>相关文章</h3><div class="note warning modern"><p>当文章封面设置为 false 时，或者没有获取到封面配置，相关文章背景将会显示主题色。</p></div><p>相关文章推荐的原理是根据文章tags的比重来推荐</p><p>修改<code>主题配置文件</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">related_post:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span> <span class="comment"># 显示推荐文章数目</span></span><br><span class="line">  <span class="attr">date_type:</span> <span class="string">created</span> <span class="comment"># or created or updated 文章日期显示创建日或者更新日</span></span><br></pre></td></tr></table></figure></p><h3 id="文章过期提醒"><a href="#文章过期提醒" class="headerlink" title="文章过期提醒"></a>文章过期提醒</h3><p>可设置是否显示文章过期提醒，以更新时间为基准。</p><p>修改<code>主题配置文件</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Displays outdated notice for a post (文章过期提醒)</span></span><br><span class="line"><span class="attr">noticeOutdate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span> <span class="comment"># style: simple/flat</span></span><br><span class="line">  <span class="attr">limit_day:</span> <span class="number">365</span> <span class="comment"># When will it be shown</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span> <span class="comment"># position: top/bottom</span></span><br><span class="line">  <span class="attr">message_prev:</span> <span class="string">It</span> <span class="string">has</span> <span class="string">been</span></span><br><span class="line">  <span class="attr">message_next:</span> <span class="string">days</span> <span class="string">since</span> <span class="string">the</span> <span class="string">last</span> <span class="string">update,</span> <span class="string">the</span> <span class="string">content</span> <span class="string">of</span> <span class="string">the</span> <span class="string">article</span> <span class="string">may</span> <span class="string">be</span> <span class="string">outdated.</span></span><br></pre></td></tr></table></figure></p><div class="table-container"><table><thead><tr><th>属性</th><th>解释</th></tr></thead><tbody><tr><td>limit_day</td><td>距离更新时间多少天才显示文章过期提醒</td></tr><tr><td>message_prev</td><td>天数之前的文字</td></tr><tr><td>message_next</td><td>天数之后的文字</td></tr></tbody></table></div><blockquote><p>style: flat</p></blockquote><p><img src="/2023/02/21/Butterfly/hexo-theme-butteffly-docs-outdate-flat.png" alt="flat"></p><blockquote><p>style: simple</p></blockquote><p><img src="/2023/02/21/Butterfly/hexo-theme-butterfly-docs-outdated-simple.png" alt="simple"></p><h3 id="文章编辑按钮"><a href="#文章编辑按钮" class="headerlink" title="文章编辑按钮"></a>文章编辑按钮</h3><p>在文章标题旁边显示一个编辑按钮，点击会跳转到对应的链接去。<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post edit</span></span><br><span class="line"><span class="comment"># Easily browse and edit blog source code online.</span></span><br><span class="line"><span class="attr">post_edit:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># url: https://github.com/user-name/repo-name/edit/branch-name/subdirectory-name/</span></span><br><span class="line">  <span class="comment"># For example: https://github.com/jerryc127/butterfly.js.org/edit/main/source/</span></span><br><span class="line">  <span class="attr">url:</span></span><br></pre></td></tr></table></figure></p><h3 id="文章分页按钮"><a href="#文章分页按钮" class="headerlink" title="文章分页按钮"></a>文章分页按钮</h3><div class="note warning modern"><p>当文章封面设置为 false 时，或者没有获取到封面配置，分页背景将会显示主题色。</p></div><p>可设置分页的逻辑，也可以关闭分页显示<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># post_pagination (分页)</span></span><br><span class="line"><span class="comment"># value: 1 || 2 || false</span></span><br><span class="line"><span class="comment"># 1: The &#x27;next post&#x27; will link to old post</span></span><br><span class="line"><span class="comment"># 2: The &#x27;next post&#x27; will link to new post</span></span><br><span class="line"><span class="comment"># false: disable pagination</span></span><br><span class="line"><span class="attr">post_pagination:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><div class="table-container"><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>post_pagination: false</td><td>关闭分页按钮</td></tr><tr><td>post_pagination: 1</td><td>下一篇显示的是旧文章</td></tr><tr><td>post_pagination: 2</td><td>下一篇显示的是新文章</td></tr></tbody></table></div><h2 id="页面锚点"><a href="#页面锚点" class="headerlink" title="页面锚点"></a>页面锚点</h2><p>开启页面锚点后，当你在进行滚动时，<strong>页面链接会根据标题ID进行替换</strong><br>(注意: 每替换一次，会留下一个历史记录。所以如果一篇文章有很多锚点的话，网页的历史记录会很多。)</p><p>修改<code>主题配置文件</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># anchor</span></span><br><span class="line"><span class="comment"># when you scroll in post , the url will update according to header id.</span></span><br><span class="line"><span class="attr">anchor:</span></span><br><span class="line">  <span class="attr">button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">always_show:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="comment"># the unicode value of Font Awesome icon, such as &#x27;\3423&#x27;</span></span><br><span class="line">  <span class="attr">auto_update:</span> <span class="literal">false</span> <span class="comment"># when you scroll in post, the URL will update according to header id.</span></span><br></pre></td></tr></table></figure></p><h2 id="头像"><a href="#头像" class="headerlink" title="头像"></a>头像</h2><p>修改<code>主题配置文件</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">/img/avatar.png</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span> <span class="comment"># 头像会一直转圈</span></span><br></pre></td></tr></table></figure></p><h2 id="图片描述"><a href="#图片描述" class="headerlink" title="图片描述"></a>图片描述</h2><p>可开启图片Figcaption<strong>描述文字显示</strong></p><p>描述文字优先显示图片的 title 属性，然后是 alt 属性</p><p>修改<code>主题配置文件</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">photofigcaption:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h2 id="复制相关配置"><a href="#复制相关配置" class="headerlink" title="复制相关配置"></a>复制相关配置</h2><p>可配置网站是否可以复制、复制的内容是否添加版权信息<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># copy settings</span></span><br><span class="line"><span class="comment"># copyright: Add the copyright information after copied content (复制的内容后面加上版权信息)</span></span><br><span class="line"><span class="attr">copy:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">copyright:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit_count:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure></p><div class="table-container"><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>enable</td><td>是否开启网站复制权限</td></tr><tr><td>copyright</td><td>复制的内容后面加上版权信息</td></tr><tr><td>enable</td><td>是否开启复制版权信息添加</td></tr><tr><td>limit_count</td><td>字数限制，当复制文字大于这个字数限制时，将在复制的内容后面加上版权信息</td></tr></tbody></table></div><h2 id="Footer-设置"><a href="#Footer-设置" class="headerlink" title="Footer 设置"></a>Footer 设置</h2><h3 id="博客年份"><a href="#博客年份" class="headerlink" title="博客年份"></a>博客年份</h3><p><code>since</code>是一个来展示你站点起始时间的选项。它位于页面的最底部。</p><p>修改<code>主题配置文件</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2018</span></span><br></pre></td></tr></table></figure></p><h3 id="页脚自定义文本"><a href="#页脚自定义文本" class="headerlink" title="页脚自定义文本"></a>页脚自定义文本</h3><p><code>custom_text</code>是一个给你用来在页脚自定义文本的选项。通常你可以在这里写声明文本等。支持 HTML。</p><p>修改<code>主题配置文件</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_text:</span> <span class="string">Hi,</span> <span class="string">welcome</span> <span class="string">to</span> <span class="string">my</span> <span class="string">&lt;a</span> <span class="string">href=&quot;https://butterfly.js.org/&quot;&gt;blog&lt;/a&gt;!</span></span><br></pre></td></tr></table></figure></p><p>对于部分人需要写 ICP 的，也可以写在<code>custom_text</code>里<br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_text:</span> <span class="string">&lt;a</span> <span class="string">href=&quot;icp链接&quot;&gt;&lt;img</span> <span class="string">class=&quot;icp-icon&quot;</span> <span class="string">src=&quot;icp图片&quot;&gt;&lt;span&gt;备案号：xxxxxx&lt;/span&gt;&lt;/a&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="右下角按钮"><a href="#右下角按钮" class="headerlink" title="右下角按钮"></a>右下角按钮</h2><h3 id="简繁转换"><a href="#简繁转换" class="headerlink" title="简繁转换"></a>简繁转换</h3><p>简体繁体互换</p><p>右下角会有简繁转换按钮。</p><p>修改<code>主题配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">translate:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 默认按钮显示文字(网站是简体，应设置为&#x27;default: 繁&#x27;)</span></span><br><span class="line">  <span class="attr">default:</span> <span class="string">简</span></span><br><span class="line">  <span class="comment">#网站默认语言，1: 繁体中文, 2: 简体中文</span></span><br><span class="line">  <span class="attr">defaultEncoding:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment">#延迟时间,若不在前, 要设定延迟翻译时间, 如100表示100ms,默认为0</span></span><br><span class="line">  <span class="attr">translateDelay:</span> <span class="number">0</span></span><br><span class="line">  <span class="comment">#当文字是简体时，按钮显示的文字</span></span><br><span class="line">  <span class="attr">msgToTraditionalChinese:</span> <span class="string">&quot;繁&quot;</span></span><br><span class="line">  <span class="comment">#当文字是繁体时，按钮显示的文字</span></span><br><span class="line">  <span class="attr">msgToSimplifiedChinese:</span> <span class="string">&quot;简&quot;</span></span><br></pre></td></tr></table></figure><h3 id="夜间模式"><a href="#夜间模式" class="headerlink" title="夜间模式"></a>夜间模式</h3><p>右下角会有夜间模式按钮</p><p>修改<code>主题配置文件</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dark mode</span></span><br><span class="line"><span class="attr">darkmode:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># dark mode和 light mode切换按钮</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">autoChangeMode:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></p><div class="table-container"><table><thead><tr><th>autoChangeMode值</th><th>解释</th></tr></thead><tbody><tr><td>1</td><td>跟随系统而变化，不支持的浏览器/系统将按照时间晚上6点到早上6点之间切换为 dark mode</td></tr><tr><td>2</td><td>只按照时间 晚上6点到早上6点之间切换为 dark mode,其余时间为light mode</td></tr><tr><td>false</td><td>取消自动切换</td></tr></tbody></table></div><h3 id="阅读模式"><a href="#阅读模式" class="headerlink" title="阅读模式"></a>阅读模式</h3><p>阅读模式下会去掉除文章以外的内容，避免干扰阅读。</p><p>只会出现在文章页面，右下脚会有阅读模式按钮。</p><p>修改<code>主题配置文件</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">readmode:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h3 id="滚动状态百分比"><a href="#滚动状态百分比" class="headerlink" title="滚动状态百分比"></a>滚动状态百分比</h3><p>修改<code>主题配置文件</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># show scroll percent in scroll-to-top button</span></span><br><span class="line"><span class="attr">rightside_scroll_percent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><h3 id="按钮排序"><a href="#按钮排序" class="headerlink" title="按钮排序"></a>按钮排序</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Don&#x27;t modify the following settings unless you know how they work (非必要请不要修改 )</span></span><br><span class="line"><span class="comment"># Choose: readmode,translate,darkmode,hideAside,toc,chat,comment</span></span><br><span class="line"><span class="comment"># Don&#x27;t repeat 不要重复</span></span><br><span class="line"><span class="attr">rightside_item_order:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="comment"># readmode,translate,darkmode,hideAside</span></span><br><span class="line">  <span class="attr">show:</span> <span class="comment"># toc,chat,comment</span></span><br></pre></td></tr></table></figure><div class="note warning modern"><p>不要重复</p></div><h2 id="侧边栏设置"><a href="#侧边栏设置" class="headerlink" title="侧边栏设置"></a>侧边栏设置</h2><h3 id="侧边排版"><a href="#侧边排版" class="headerlink" title="侧边排版"></a>侧边排版</h3><p>可自行决定哪个项目需要显示，可决定位置，也可以设置不显示侧边栏。</p><p>修改<code>主题配置文件</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span> <span class="string">(true左下角单双栏按钮开启)</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span> <span class="comment"># display on mobile</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span> <span class="comment"># left or right(决定侧边栏在左还是在右)</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">archive:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">category:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">card_author:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">description:</span></span><br><span class="line">    <span class="attr">button:</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">Follow</span> <span class="string">Me</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/xxxxxx</span></span><br><span class="line">  <span class="attr">card_announcement:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">my</span> <span class="string">Blog</span></span><br><span class="line">  <span class="attr">card_recent_post:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">5</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort:</span> <span class="string">date</span> <span class="comment"># date or updated</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_categories:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">expand:</span> <span class="string">none</span> <span class="comment"># none/true/false</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_tags:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span> <span class="string">(true彩色标签)</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">40</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">color:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">orderby:</span> <span class="string">random</span> <span class="comment"># Order of tags, random/name/length</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_archives:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">monthly</span> <span class="comment"># yearly or monthly</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">MMMM</span> <span class="string">YYYY</span> <span class="comment"># eg: YYYY年MM月</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span> <span class="comment"># Sort of order. 1, asc for ascending; -1, desc for descending</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span> <span class="comment"># if set 0 will show all</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">card_webinfo:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">post_count:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">last_push_date:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br></pre></td></tr></table></figure></p><h3 id="访问人数-busuanzi-UV-和-PV"><a href="#访问人数-busuanzi-UV-和-PV" class="headerlink" title="访问人数 busuanzi (UV 和 PV)"></a>访问人数 busuanzi (UV 和 PV)</h3><p>访问 <a href="http://busuanzi.ibruce.info/">busuanzi官方网站</a>查看更多的介绍。</p><p>修改<code>主题配置文件</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><div class="note info modern"><p>如果需要修改 busuanzi 的 CDN 链接，可通过 主题配置文件 的 CDN 中的 option 进行修改</p></div><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">CDN:</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line">  <span class="attr">busuanzi:</span> <span class="string">xxxxxxxxx</span></span><br></pre></td></tr></table></figure><h3 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h3><p>网页已运行时间</p><p>修改<code>主题配置文件</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">runtimeshow:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">publish_date:</span> <span class="number">6</span><span class="string">/7/2018</span> <span class="number">00</span><span class="string">:00:00</span>  </span><br><span class="line">  <span class="comment">##网页开通时间</span></span><br><span class="line">  <span class="comment">#格式: 月/日/年 时间</span></span><br><span class="line">  <span class="comment">#也可以写成 年/月/日 时间</span></span><br></pre></td></tr></table></figure></p><h3 id="最新评论"><a href="#最新评论" class="headerlink" title="最新评论"></a>最新评论</h3><div class="note primary modern"><p>最新评论只会在刷新时才会去读取，并不会实时变化</p><p>最新评论只会在刷新时才会去读取，并不会实时变化</p><p>由于 API 有 访问次数限制，为了避免调用太多，主题默认存取期限为 10 分钟。也就是説，调用后资料会存在 localStorage 里，10分钟内刷新网站只会去 localStorage 读取资料。 10 分钟期限一过，刷新页面时才会去调取 API 读取新的数据。（ 3.6.0 新增了 <code>storage</code> 配置，可自行配置缓存时间）</p></div><p>在侧边栏显示最新评论板块</p><p>修改<code>主题配置文件</code><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Aside widget - Newest Comments</span></span><br><span class="line"><span class="attr">newest_comments:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">sort_order:</span> <span class="comment"># Don&#x27;t modify the setting unless you know how it works</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span></span><br><span class="line">  <span class="attr">storage:</span> <span class="number">10</span> <span class="comment"># unit: mins, save data to localStorage</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></p><div class="table-container"><table><thead><tr><th>配置</th><th>解释</th></tr></thead><tbody><tr><td>limit</td><td>显示的数量</td></tr><tr><td>storage</td><td>设置缓存时间，单位 分钟</td></tr><tr><td>avatar</td><td>是否显示头像</td></tr></tbody></table></div><h3 id="自定义添加栏目"><a href="#自定义添加栏目" class="headerlink" title="自定义添加栏目"></a>自定义添加栏目</h3><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p><a href="https://butterfly.js.org/posts/4073eda">参考</a></p><h2 id="网站优化"><a href="#网站优化" class="headerlink" title="网站优化"></a>网站优化</h2><p><a href="https://butterfly.js.org/posts/ceeb73f">参考</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cocos</title>
      <link href="/2022/12/03/Cocos/"/>
      <url>/2022/12/03/Cocos/</url>
      
        <content type="html"><![CDATA[<div class="note info modern"><p>这里使用的是2.4.9版本,使用的脚本语言为TS</p></div><h2 id="使用Cocos-Creator"><a href="#使用Cocos-Creator" class="headerlink" title="使用Cocos Creator"></a>使用Cocos Creator</h2><h3 id="新建脚本模板"><a href="#新建脚本模板" class="headerlink" title="新建脚本模板"></a>新建脚本模板</h3><p>下载好Cocos Creator新建脚本如下<br><img src="/2022/12/03/Cocos/2022-12-03-23-55-15.png" alt="NewScript"></p><p>如若想更改，可修改<code>CocosDashboard_1.2.2(Cocos Creator安装路径下)\resources\.editors\Creator\2.4.9\resources\static\template\new-script.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ccclass, property&#125; = cc.<span class="property">_decorator</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">NewClass</span> <span class="keyword">extends</span> <span class="title class_ inherited__">cc.Component</span> &#123;</span><br><span class="line">    <span class="comment">//@property</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// LIFE-CYCLE CALLBACKS:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// onLoad () &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">    start () &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Cocos项目"><a href="#Cocos项目" class="headerlink" title="Cocos项目"></a>Cocos项目</h3><figure class="highlight plaintext"><figcaption><span>Cocos项目常用目录结构</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">——assets</span><br><span class="line">    ——audio</span><br><span class="line">    ——prefab</span><br><span class="line">    ——scene</span><br><span class="line">    ——script</span><br><span class="line">    ——texture</span><br></pre></td></tr></table></figure><h3 id="关于-TS下-Cocos使用"><a href="#关于-TS下-Cocos使用" class="headerlink" title="关于(TS下)Cocos使用"></a>关于(TS下)Cocos使用</h3><h4 id="报错：无法重新声明块范围变量"><a href="#报错：无法重新声明块范围变量" class="headerlink" title="报错：无法重新声明块范围变量"></a>报错：无法重新声明块范围变量</h4><p><code>let</code>声明过的变量无法再用<code>let</code>或<code>var</code>重新声明，全用<code>var</code>不会报错<br><img src="/2022/12/03/Cocos/2022-12-04-20-04-26.png" alt="无法再用`let`重新声明"><br><img src="/2022/12/03/Cocos/2022-12-04-20-06-14.png" alt="无法再用`let`重新声明"><br><img src="/2022/12/03/Cocos/2022-12-04-20-07-56.png" alt="全用`var`不会报错"></p><h4 id="二维数组使用中错误"><a href="#二维数组使用中错误" class="headerlink" title="二维数组使用中错误"></a>二维数组使用中错误</h4><p>ERROR: Uncaught TypeError: Cannot set property ‘0’ of undefined,</p><p><strong>错误</strong>使用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">18</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;<span class="number">18</span>;j++)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">arr</span>[i][j]=<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style>正确使用    </button><div class="hide-content"><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">18</span>;i++)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">arr</span>[i]=[]</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;<span class="number">18</span>;j++)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">arr</span>[i][j]=<span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Cocos脚本开发"><a href="#Cocos脚本开发" class="headerlink" title="Cocos脚本开发"></a>Cocos脚本开发</h2><h3 id="TS补充"><a href="#TS补充" class="headerlink" title="TS补充"></a>TS补充</h3><h4 id="取整"><a href="#取整" class="headerlink" title="取整"></a>取整</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//向上取整数(小数舍去,正数部分+1)</span></span><br><span class="line">cc.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">1.111</span>));<span class="comment">//=2</span></span><br><span class="line">cc.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="number">1.6666</span>));<span class="comment">//=2</span></span><br><span class="line"><span class="comment">//向下取整数(小数直接舍去)</span></span><br><span class="line">cc.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1.111</span>));<span class="comment">//=1</span></span><br><span class="line">cc.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">1.666</span>));<span class="comment">//=1</span></span><br><span class="line"><span class="comment">//四舍五入</span></span><br><span class="line">cc.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.111</span>));<span class="comment">//1</span></span><br><span class="line">cc.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">1.666</span>));<span class="comment">//2</span></span><br><span class="line"><span class="comment">//保留小数</span></span><br><span class="line">cc.<span class="title function_">log</span>(<span class="number">1.1111</span>.<span class="title function_">toFixed</span>());<span class="comment">//1</span></span><br><span class="line">cc.<span class="title function_">log</span>(<span class="number">1.1111</span>.<span class="title function_">toFixed</span>(<span class="number">2</span>));<span class="comment">//1.11</span></span><br><span class="line">cc.<span class="title function_">log</span>(<span class="number">1.1111</span>.<span class="title function_">toFixed</span>(<span class="number">3</span>));<span class="comment">//1.111</span></span><br></pre></td></tr></table></figure><h4 id="绝对值"><a href="#绝对值" class="headerlink" title="绝对值"></a>绝对值</h4><div class="note info modern"><p><strong>(method) Math.abs(x: number): number</strong></p></div><h4 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h4><div class="note info modern"><p><strong>(method) cc.Component.schedule(callback: Function, interval?: number, repeat?: number, delay?: number): void</strong><br>!#en Schedules a custom selector. If the selector is already scheduled, then the interval parameter will be updated without scheduling it again. !#zh 调度一个自定义的回调函数。 如果回调函数已调度，那么将不会重复调度它，只会更新时间间隔参数。<br>@param callback — The callback function<br>@param interval — Tick interval in seconds. 0 means tick every frame.<br>@param repeat — The selector will be executed (repeat + 1) times, you can use cc.macro.REPEAT_FOREVER for tick infinitely.<br>@param delay — The amount of time that the first tick will wait before execution. Unit: s</p></div><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timeCallback = <span class="keyword">function</span> (<span class="params">dt</span>) &#123;</span><br><span class="line">    cc.<span class="title function_">log</span>(<span class="string">&quot;time: &quot;</span> + dt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">schedule</span>(timeCallback, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><div class="note info modern"><p><strong>(method) cc.Component.scheduleOnce(callback: Function, delay?: number): void</strong><br>!#en Schedules a callback function that runs only once, with a delay of 0 or larger. !#zh 调度一个只运行一次的回调函数，可以指定 0 让回调函数在下一帧立即执行或者在一定的延时之后执行。<br>@param callback — A function wrapped as a selector<br>@param delay — The amount of time that the first tick will wait before execution. Unit: s</p></div><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timeCallback = <span class="keyword">function</span> (<span class="params">dt</span>) &#123;</span><br><span class="line">  cc.<span class="title function_">log</span>(<span class="string">&quot;time: &quot;</span> + dt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">scheduleOnce</span>(timeCallback, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><div class="note info modern"><p><strong>(method) cc.Component.unscheduleAllCallbacks(): void</strong><br>!#en unschedule all scheduled callback functions: custom callback functions, and the ‘update’ callback function. Actions are not affected by this method. !#zh 取消调度所有已调度的回调函数：定制的回调函数以及 update 回调函数。动作不受此方法影响。</p></div><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="title function_">unscheduleAllCallbacks</span>();</span><br></pre></td></tr></table></figure><h4 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout()"></a>setTimeout()</h4><div class="note info modern"><p><strong>function setTimeout(handler: TimerHandler, timeout?: number, …arguments: any[]): number</strong></p></div><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        tip.<span class="title function_">destroy</span>()</span><br><span class="line">        &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">500</span>)</span><br></pre></td></tr></table></figure><h3 id="常用代码块-代码组件化"><a href="#常用代码块-代码组件化" class="headerlink" title="常用代码块(代码组件化)"></a>常用代码块(代码组件化)</h3><h4 id="随机颜色"><a href="#随机颜色" class="headerlink" title="随机颜色"></a>随机颜色</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">randomColor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> red=<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">255</span></span><br><span class="line">    <span class="keyword">let</span> green =<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">255</span></span><br><span class="line">    <span class="keyword">let</span> blue =<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">255</span></span><br><span class="line">    <span class="keyword">let</span> color=cc.<span class="title function_">color</span>(red,green,blue)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">color</span>=color</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="挂载资源"><a href="#挂载资源" class="headerlink" title="挂载资源"></a>挂载资源</h3><p><code>@property()</code></p><figure class="highlight ts"><figcaption><span>示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于number型变量</span></span><br><span class="line"><span class="meta">@property</span>(cc.<span class="property">Integer</span>)</span><br><span class="line"><span class="attr">num</span>:<span class="built_in">number</span>=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//字符串</span></span><br><span class="line"><span class="meta">@property</span>(cc.<span class="property">String</span>)</span><br><span class="line"><span class="attr">text</span>: <span class="built_in">string</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="comment">//Boolean</span></span><br><span class="line"><span class="meta">@property</span>(cc.<span class="property">Boolean</span>)</span><br><span class="line"><span class="attr">isTrue</span>:<span class="built_in">boolean</span>=<span class="literal">false</span>;</span><br><span class="line"><span class="comment">//图片数组</span></span><br><span class="line"><span class="meta">@property</span>(cc.<span class="property">SpriteFrame</span>)</span><br><span class="line"><span class="attr">picArr</span>:cc.<span class="property">SpriteFrame</span>[]=[];</span><br></pre></td></tr></table></figure><h4 id="挂载Cocos类"><a href="#挂载Cocos类" class="headerlink" title="挂载Cocos类"></a>挂载Cocos类</h4><p>有两种写法，效果是一样的</p><div class="tabs" id="property"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#property-1">直接写在&#64;property()</button></li><li class="tab active"><button type="button" data-href="#property-2">const法</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="property-1"><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@property</span>(&#123;</span><br><span class="line">    <span class="attr">type</span>:cc.<span class="title class_">Class</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;pic_List&quot;</span>,</span><br><span class="line">        <span class="attr">properties</span>:&#123;</span><br><span class="line">            <span class="attr">a</span>:&#123;</span><br><span class="line">                <span class="attr">default</span>:<span class="literal">null</span>,</span><br><span class="line">                <span class="attr">type</span>:cc.<span class="property">SpriteFrame</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">b</span>:&#123;</span><br><span class="line">                <span class="attr">default</span>:<span class="literal">null</span>,</span><br><span class="line">                <span class="attr">type</span>:cc.<span class="property">SpriteFrame</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">c</span>:&#123;</span><br><span class="line">                <span class="attr">default</span>:<span class="literal">null</span>,</span><br><span class="line">                <span class="attr">type</span>:cc.<span class="property">SpriteFrame</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">displayName</span>:<span class="string">&quot;图片数组&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line">pic_List=<span class="literal">null</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="property-2"><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> picArr=cc.<span class="title class_">Class</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;pic_List&quot;</span>,</span><br><span class="line">    <span class="attr">properties</span>:&#123;</span><br><span class="line">        <span class="attr">a</span>:&#123;</span><br><span class="line">            <span class="attr">default</span>:<span class="literal">null</span>,</span><br><span class="line">            <span class="attr">type</span>:cc.<span class="property">SpriteFrame</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">b</span>:&#123;</span><br><span class="line">            <span class="attr">default</span>:<span class="literal">null</span>,</span><br><span class="line">            <span class="attr">type</span>:cc.<span class="property">SpriteFrame</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">c</span>:&#123;</span><br><span class="line">            <span class="attr">default</span>:<span class="literal">null</span>,</span><br><span class="line">            <span class="attr">type</span>:cc.<span class="property">SpriteFrame</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">    <span class="meta">@property</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>:picArr,</span><br><span class="line">        <span class="attr">displayName</span>:<span class="string">&quot;图片数组&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    pic_List=<span class="literal">null</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><h4 id="获取组件"><a href="#获取组件" class="headerlink" title="获取组件"></a>获取组件</h4><div class="note info modern"><p><strong>(method) cc._BaseNode.getComponent&lt;cc.Component&gt;(type: {<br>    prototype: cc.Component;<br>}): cc.Component (+1 overload)</strong><br>!#en Returns the component of supplied type if the node has one attached, null if it doesn’t. You can also get component in the node by passing in the name of the script. !#zh 获取节点上指定类型的组件，如果节点有附加指定类型的组件，则返回，如果没有则为空。 传入参数也可以是脚本的名称。<br>@param typeOrClassName — typeOrClassName</p></div><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get sprite component</span></span><br><span class="line"><span class="keyword">let</span> sprite = <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">getComponent</span>(cc.<span class="property">Sprite</span>);</span><br><span class="line"><span class="comment">// get custom test class</span></span><br><span class="line"><span class="keyword">let</span> test = <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">getComponent</span>(<span class="string">&quot;Test&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="预制体"><a href="#预制体" class="headerlink" title="预制体"></a>预制体</h3><p>克隆指定的任意类型的对象，或者从 Prefab 实例化出新节点</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@property</span>(cc.<span class="property">Prefab</span>)</span><br><span class="line"><span class="attr">prefabAsset</span>:cc.<span class="property">Prefab</span>=<span class="literal">null</span>;</span><br><span class="line">onLoad () &#123;</span><br><span class="line">    <span class="comment">// instantiate node from prefab</span></span><br><span class="line">    <span class="keyword">let</span> <span class="attr">scene</span>:cc.<span class="property">Scene</span>=cc.<span class="property">director</span>.<span class="title function_">getScene</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">node</span>:cc.<span class="property">Node</span>=cc.<span class="title function_">instantiate</span>(<span class="variable language_">this</span>.<span class="property">prefabAsset</span>);</span><br><span class="line">    node.<span class="property">parent</span> = scene;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@property</span>(cc.<span class="property">Node</span>)</span><br><span class="line"><span class="attr">targetNode</span>:cc.<span class="property">Node</span>=<span class="literal">null</span>;</span><br><span class="line">onLoad () &#123;</span><br><span class="line">    <span class="comment">// clone node</span></span><br><span class="line">    <span class="keyword">let</span> scene = cc.<span class="property">director</span>.<span class="title function_">getScene</span>();</span><br><span class="line">    <span class="keyword">let</span> node = cc.<span class="title function_">instantiate</span>(<span class="variable language_">this</span>.<span class="property">targetNode</span>);</span><br><span class="line">    node.<span class="property">parent</span> = scene;</span><br><span class="line">    node.<span class="title function_">setPosition</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><h4 id="切换场景"><a href="#切换场景" class="headerlink" title="切换场景"></a>切换场景</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc.<span class="property">director</span>.<span class="title function_">loadScene</span>(<span class="string">&quot;game&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="节点-cc-Node"><a href="#节点-cc-Node" class="headerlink" title="节点(cc.Node)"></a>节点(cc.Node)</h3><h4 id="新结点"><a href="#新结点" class="headerlink" title="新结点"></a>新结点</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">bullet</span>:cc.<span class="property">Node</span>=<span class="keyword">new</span> cc.<span class="title class_">Node</span>()</span><br></pre></td></tr></table></figure><h4 id="寻找节点"><a href="#寻找节点" class="headerlink" title="寻找节点"></a>寻找节点</h4><p><code>cc.find()</code><br><div class="note info modern"><p><strong>function cc.find(path: string, referenceNode?: cc.Node): cc.Node</strong><br>Finds a node by hierarchy path, the path is case-sensitive. It will traverse the hierarchy by splitting the path using ‘/‘ character. This function will still returns the node even if it is inactive. It is recommended to not use this function every frame instead cache the result at startup.<br>@param path — path<br>@param referenceNode — referenceNode</p></div></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cc.<span class="title function_">find</span>(<span class="string">&quot;Canvas/startButton/Background/start&quot;</span>).<span class="title function_">getComponent</span>(cc.<span class="property">Label</span>).<span class="property">string</span>=<span class="string">&quot;重新开始&quot;</span></span><br></pre></td></tr></table></figure><p><code>getChildByName(&quot;name&quot;)</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">getChildByName</span>(<span class="string">&quot;Background&quot;</span>).<span class="title function_">getChildByName</span>(<span class="string">&quot;start&quot;</span>).<span class="title function_">getComponent</span>(cc.<span class="property">Label</span>).<span class="property">string</span>=<span class="string">&quot;重新开始&quot;</span></span><br></pre></td></tr></table></figure><h4 id="节点层次"><a href="#节点层次" class="headerlink" title="节点层次"></a>节点层次</h4><p>拥有更高 <code>zIndex</code> 的节点将被排在后面</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">playagain</span> = cc.<span class="title function_">find</span>(<span class="string">&quot;main/start&quot;</span>, <span class="variable language_">this</span>.<span class="property">node</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">playagain</span>.<span class="property">zIndex</span> = <span class="number">100</span>;<span class="comment">//拥有更高 zIndex 的节点将被排在后面</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">playagain</span>.<span class="property">active</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h3 id="坐标与距离"><a href="#坐标与距离" class="headerlink" title="坐标与距离"></a>坐标与距离</h3><h4 id="全局坐标转相对坐标"><a href="#全局坐标转相对坐标" class="headerlink" title="全局坐标转相对坐标"></a>全局坐标转相对坐标</h4><div class="note info modern"><p><strong>(method) cc.Node.convertToNodeSpaceAR&lt;cc.Vec2&gt;(worldPoint: cc.Vec2, out?: cc.Vec2): cc.Vec2</strong><br>!#en Converts a Point to node (local) space coordinates. !#zh 将一个点转换到节点 (局部) 空间坐标系。<br>@param worldPoint — worldPoint<br>@param out — out</p></div><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> temp_position=<span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">convertToNodeSpaceAR</span>(<span class="title class_">Point</span>)</span><br></pre></td></tr></table></figure><h4 id="向量减法"><a href="#向量减法" class="headerlink" title="向量减法"></a>向量减法</h4><div class="note info modern"><p><strong>(method) cc.Vec2.sub(vector: cc.Vec2, out?: cc.Vec2): cc.Vec2</strong><br>!#en Subtracts one vector from this, and returns the new result. !#zh 向量减法，并返回新结果。<br>@param vector — vector<br>@param out — optional, the receiving vector, you can pass the same vec2 to save result to itself, if not provided, a new vec2 will be created</p></div><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> v :cc.<span class="property">Vec2</span>= cc.<span class="title function_">v2</span>(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">v.<span class="title function_">sub</span>(cc.<span class="title function_">v2</span>(<span class="number">5</span>, <span class="number">5</span>));      <span class="comment">// return Vec2 &#123;x: 5, y: 5&#125;;</span></span><br><span class="line"><span class="keyword">let</span> v1 = <span class="keyword">new</span> cc.<span class="title class_">Vec2</span>();</span><br><span class="line">v.<span class="title function_">sub</span>(cc.<span class="title function_">v2</span>(<span class="number">5</span>, <span class="number">5</span>), v1);  <span class="comment">// return Vec2 &#123;x: 5, y: 5&#125;;结果放于v1</span></span><br></pre></td></tr></table></figure><h4 id="向量长度"><a href="#向量长度" class="headerlink" title="向量长度"></a>向量长度</h4><div class="note info modern"><p><strong>(method) cc.Vec2.mag(): number</strong><br>!#en Returns the length of this vector. !#zh 返回该向量的长度。</p></div><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> v = cc.<span class="title function_">v2</span>(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">v.<span class="title function_">mag</span>(); <span class="comment">// return 14.142135623730951;</span></span><br></pre></td></tr></table></figure><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><p>可以使用枚举类型也可以直接使用事件名来注册事件的监听器</p><div class="table-container"><table><thead><tr><th>枚举对象定义</th><th>对应的事件名</th><th>事件触发的时机</th></tr></thead><tbody><tr><td>cc.Node.EventType.MOUSE_DOWN</td><td><code>mousedown</code></td><td>当鼠标在目标节点区域按下时触发一次</td></tr><tr><td>cc.Node.EventType.MOUSE_ENTER</td><td><code>mouseenter</code></td><td>当鼠标移入目标节点区域时，不论是否按下</td></tr><tr><td>cc.Node.EventType.MOUSE_MOVE</td><td><code>mousemove</code></td><td>当鼠标在目标节点区域中移动时，不论是否按下</td></tr><tr><td>cc.Node.EventType.MOUSE_LEAVE</td><td><code>mouseleave</code></td><td>当鼠标移出目标节点区域时，不论是否按下</td></tr><tr><td>cc.Node.EventType.MOUSE_UP</td><td><code>mouseup</code></td><td>当鼠标从按下状态松开时触发一次</td></tr><tr><td>cc.Node.EventType.MOUSE_WHEEL</td><td><code>mousewheel</code></td><td>当鼠标滚轮滚动时</td></tr></tbody></table></div><figure class="highlight ts"><figcaption><span>注册事件示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">on</span>(<span class="string">&#x27;mousedown&#x27;</span>,<span class="variable language_">this</span>.<span class="property">playGame</span>,<span class="variable language_">this</span>)</span><br><span class="line"><span class="title function_">playGame</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Mouse down&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用API</p><div class="table-container"><table><thead><tr><th>函数名</th><th>返回值类型</th><th>意义</th></tr></thead><tbody><tr><td><code>getScrollY</code></td><td>Number</td><td>获取滚轮滚动的 Y 轴距离，只有<strong>滚动时才有效</strong></td></tr><tr><td><code>getLocation</code></td><td>Object</td><td>获取鼠标位置对象，对象包含 x 和 y 属性</td></tr><tr><td><code>getPreviousLocation</code></td><td>Object</td><td>获取鼠标事件上次触发时的位置对象，对象包含 x 和 y 属性</td></tr><tr><td><code>getDelta</code></td><td>Object</td><td>获取鼠标距离上一次事件移动的距离对象，对象包含 x 和 y 属性</td></tr></tbody></table></div><h3 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h3><div class="table-container"><table><thead><tr><th>枚举对象定义</th><th>对应的事件名</th><th>事件触发的时机</th></tr></thead><tbody><tr><td>cc.Node.EventType.TOUCH_START</td><td><code>touchstart</code></td><td>当手指触点落在目标节点区域内时</td></tr><tr><td>cc.Node.EventType.TOUCH_MOVE</td><td><code>touchmove</code></td><td>当手指在屏幕上移动时</td></tr><tr><td>cc.Node.EventType.TOUCH_END</td><td><code>touchend</code></td><td>当手指在目标节点区域内离开屏幕时</td></tr><tr><td>cc.Node.EventType.TOUCH_CANCEL</td><td><code>touchcancel</code></td><td>当手指在目标节点区域外离开屏幕时</td></tr></tbody></table></div><figure class="highlight ts"><figcaption><span>示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">on</span>(<span class="string">&#x27;touchstart&#x27;</span>,<span class="variable language_">this</span>.<span class="property">playGame</span>,<span class="variable language_">this</span>)</span><br><span class="line"><span class="title function_">playGame</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;touch start&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用API</p><div class="table-container"><table><thead><tr><th>函数名</th><th>返回值类型</th><th>意义</th></tr></thead><tbody><tr><td><code>touch</code></td><td>cc.Touch</td><td>与当前事件关联的触点对象</td></tr><tr><td><code>getID</code></td><td>Number</td><td>获取触点的 ID，用于多点触摸的逻辑判断</td></tr><tr><td><code>getLocation</code></td><td>Object</td><td>获取触点位置对象，对象包含 x 和 y 属性</td></tr><tr><td><code>getPreviousLocation</code></td><td>Object</td><td>获取触点上一次触发事件时的位置对象，对象包含 x 和 y 属性</td></tr><tr><td><code>getStartLocation</code></td><td>Object</td><td>获取触点距离上一次事件移动的距离对象，对象包含 x 和 y 属性</td></tr><tr><td><code>getDelta</code></td><td>Object</td><td>获取触点距离上一次事件移动的距离对象，对象包含 x 和 y 属性</td></tr></tbody></table></div><h3 id="声音"><a href="#声音" class="headerlink" title="声音"></a>声音</h3><h4 id="挂载资源法使用声音-cc-AudioClip"><a href="#挂载资源法使用声音-cc-AudioClip" class="headerlink" title="挂载资源法使用声音(cc.AudioClip)"></a>挂载资源法使用声音(cc.AudioClip)</h4><div class="note info modern"><p><strong>method) cc.audioEngine.playEffect(clip: cc.AudioClip, loop: boolean): number</strong><br>!#en Play effect audio. !#zh 播放音效<br>@param clip — The audio clip to play.<br>@param loop — Whether the music loop or not.</p></div><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@property</span>(cc.<span class="property">AudioClip</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="attr">bgmAudio</span>:cc.<span class="property">AudioClip</span>=<span class="literal">null</span></span><br><span class="line">cc.<span class="property">audioEngine</span>.<span class="title function_">playEffect</span>(<span class="variable language_">this</span>.<span class="property">bgmAudio</span>, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><h4 id="组件-cc-AudioSource-法使用声音"><a href="#组件-cc-AudioSource-法使用声音" class="headerlink" title="组件(cc.AudioSource)法使用声音"></a>组件(cc.AudioSource)法使用声音</h4><p>节点下需要有这个组件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">getComponent</span>(cc.<span class="property">AudioSource</span>).<span class="title function_">play</span>()</span><br></pre></td></tr></table></figure><h2 id="碰撞系统"><a href="#碰撞系统" class="headerlink" title="碰撞系统"></a>碰撞系统</h2><h3 id="碰撞系统接口"><a href="#碰撞系统接口" class="headerlink" title="碰撞系统接口"></a>碰撞系统接口</h3><p>获取碰撞检测系统</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> manager = cc.<span class="property">director</span>.<span class="title function_">getCollisionManager</span>()</span><br></pre></td></tr></table></figure><p>默认碰撞检测系统是禁用的</p><figure class="highlight ts"><figcaption><span>开启默认碰撞检测系统</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager.<span class="property">enabled</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>默认碰撞检测系统的 <code>debug</code> 绘制是禁用的</p><figure class="highlight ts"><figcaption><span>开启碰撞系统绘制</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager.<span class="property">enabledDebugDraw</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>显示碰撞组件的包围盒</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">manager.<span class="property">enabledDrawBoundingBox</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure><h3 id="碰撞组件"><a href="#碰撞组件" class="headerlink" title="碰撞组件"></a>碰撞组件</h3><p>碰撞组件有三种</p><h4 id="矩形碰撞组件-cc-BoxCollider"><a href="#矩形碰撞组件-cc-BoxCollider" class="headerlink" title="矩形碰撞组件(cc.BoxCollider)"></a>矩形碰撞组件(cc.BoxCollider)</h4><h4 id="圆形碰撞组件-cc-CircleCollider"><a href="#圆形碰撞组件-cc-CircleCollider" class="headerlink" title="圆形碰撞组件(cc.CircleCollider)"></a>圆形碰撞组件(cc.CircleCollider)</h4><h4 id="多边形碰撞组件-cc-PolygonCollider"><a href="#多边形碰撞组件-cc-PolygonCollider" class="headerlink" title="多边形碰撞组件(cc.PolygonCollider)"></a>多边形碰撞组件(cc.PolygonCollider)</h4><h3 id="碰撞系统回调"><a href="#碰撞系统回调" class="headerlink" title="碰撞系统回调"></a>碰撞系统回调</h3><p>当碰撞系统检测到有碰撞产生时，将会以回调的方式通知使用者，如果产生碰撞的碰撞组件依附的节点下挂的脚本中有实现以下函数，则会自动调用以下函数，并传入相关的参数。<br><div class="note info modern"><p>@param  {Collider} other 产生碰撞的另一个碰撞组件<br>@param  {Collider} self  产生碰撞的自身的碰撞组件</p></div></p><div class="note warning modern"><p>碰撞脚本一定要挂载在有碰撞组件的节点上</p></div><h4 id="碰撞产生的时候调用"><a href="#碰撞产生的时候调用" class="headerlink" title="碰撞产生的时候调用"></a>碰撞产生的时候调用</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onCollisionEnter</span>(<span class="params">other, self</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;on collision enter&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="碰撞中调用"><a href="#碰撞中调用" class="headerlink" title="碰撞中调用"></a>碰撞中调用</h4><p>当碰撞产生后，碰撞结束前的情况下，每次计算碰撞结果后调用</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onCollisionStay</span>(<span class="params">other, self</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;on collision stay&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="碰撞结束后调用"><a href="#碰撞结束后调用" class="headerlink" title="碰撞结束后调用"></a>碰撞结束后调用</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">onCollisionExit</span>(<span class="params">other, self</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;on collision exit&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="角色移动"><a href="#角色移动" class="headerlink" title="角色移动"></a>角色移动</h2><p>由于移动中，经常涉及到重复播放动画的问题，直接写在事件函数里，往往出现各种问题<br>所以，实现移动一般使用<strong>状态监听法</strong>(比如按下A键开启左移状态)</p><h3 id="键盘事件控制移动"><a href="#键盘事件控制移动" class="headerlink" title="键盘事件控制移动"></a>键盘事件控制移动</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">onKeyDown (<span class="attr">event</span>:cc.<span class="property">Event</span>.<span class="property">EventKeyboard</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span>(event.<span class="property">keyCode</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> cc.<span class="property">macro</span>.<span class="property">KEY</span>.<span class="property">a</span>:</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">Left</span> = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> cc.<span class="property">macro</span>.<span class="property">KEY</span>.<span class="property">d</span>:</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">Right</span> = <span class="literal">true</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">onKeyUp (event) &#123;</span><br><span class="line">    <span class="keyword">switch</span>(event.<span class="property">keyCode</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> cc.<span class="property">macro</span>.<span class="property">KEY</span>.<span class="property">a</span>:</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">Left</span> = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">case</span> cc.<span class="property">macro</span>.<span class="property">KEY</span>.<span class="property">d</span>:</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">Right</span> = <span class="literal">false</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">Left</span> = <span class="literal">false</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">Right</span> = <span class="literal">false</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">xSpeed</span> = <span class="number">0</span></span><br><span class="line">    cc.<span class="property">systemEvent</span>.<span class="title function_">on</span>(cc.<span class="property">SystemEvent</span>.<span class="property">EventType</span>.<span class="property">KEY_DOWN</span>, <span class="variable language_">this</span>.<span class="property">onKeyDown</span>, <span class="variable language_">this</span>)</span><br><span class="line">    cc.<span class="property">systemEvent</span>.<span class="title function_">on</span>(cc.<span class="property">SystemEvent</span>.<span class="property">EventType</span>.<span class="property">KEY_UP</span>, <span class="variable language_">this</span>.<span class="property">onKeyUp</span>, <span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">onDestroy</span>(<span class="params"></span>)&#123;</span><br><span class="line">    cc.<span class="property">systemEvent</span>.<span class="title function_">off</span>(cc.<span class="property">SystemEvent</span>.<span class="property">EventType</span>.<span class="property">KEY_DOWN</span>, <span class="variable language_">this</span>.<span class="property">onKeyDown</span>, <span class="variable language_">this</span>)</span><br><span class="line">    cc.<span class="property">systemEvent</span>.<span class="title function_">off</span>(cc.<span class="property">SystemEvent</span>.<span class="property">EventType</span>.<span class="property">KEY_UP</span>, <span class="variable language_">this</span>.<span class="property">onKeyUp</span>, <span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="加速度式移动"><a href="#加速度式移动" class="headerlink" title="加速度式移动"></a>加速度式移动</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">update</span>(<span class="params">dt</span>) &#123;</span><br><span class="line">     <span class="comment">// 根据当前加速度方向每帧更新速度</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">Left</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">xSpeed</span> -= <span class="variable language_">this</span>.<span class="property">accel</span> * dt</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">Right</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">xSpeed</span> += <span class="variable language_">this</span>.<span class="property">accel</span> * dt</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 限制角色的速度不能超过最大值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="variable language_">this</span>.<span class="property">xSpeed</span>) &gt; <span class="variable language_">this</span>.<span class="property">maxMoveSpeed</span>) &#123;</span><br><span class="line">        <span class="comment">// if speed reach limit, use max speed with current direction</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">xSpeed</span> = <span class="variable language_">this</span>.<span class="property">maxMoveSpeed</span> * <span class="variable language_">this</span>.<span class="property">xSpeed</span> / <span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="variable language_">this</span>.<span class="property">xSpeed</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//位置处理</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">x</span>&lt;-<span class="number">880</span>)&#123;</span><br><span class="line">        <span class="comment">//this.xSpeed=-this.xSpeed</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">xSpeed</span>=<span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">x</span>&gt;<span class="number">880</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">xSpeed</span>=-<span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 根据当前速度更新主角的位置</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">x</span> += <span class="variable language_">this</span>.<span class="property">xSpeed</span> * dt</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="触摸移动"><a href="#触摸移动" class="headerlink" title="触摸移动"></a>触摸移动</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">move</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> offset = event.<span class="title function_">getDelta</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">player</span>.<span class="property">x</span> += offset.<span class="property">x</span>;</span><br><span class="line">    <span class="comment">//边界处理</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">player</span>.<span class="property">x</span>&lt;-<span class="number">450</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">player</span>.<span class="property">x</span>=-<span class="number">445</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">player</span>.<span class="property">x</span>&gt;<span class="number">450</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">player</span>.<span class="property">x</span>=<span class="number">445</span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line">onLoad () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">on</span>(cc.<span class="property">Node</span>.<span class="property">EventType</span>.<span class="property">TOUCH_MOVE</span>, <span class="variable language_">this</span>.<span class="property">move</span>,<span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Cocos-Project"><a href="#Cocos-Project" class="headerlink" title="Cocos Project"></a>Cocos Project</h2><h3 id="摘星星-PickStars"><a href="#摘星星-PickStars" class="headerlink" title="摘星星(PickStars)"></a>摘星星(PickStars)</h3><h4 id="PickStars"><a href="#PickStars" class="headerlink" title="PickStars"></a>PickStars</h4><p><a href="https://cmwlvip.github.io/game/PickStars/index.html">游戏预览</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">——Canvas</span><br><span class="line">    ——background</span><br><span class="line">    ——Main Camera</span><br><span class="line">    ——ground</span><br><span class="line">    ——Player</span><br><span class="line">    ——score</span><br></pre></td></tr></table></figure><div class="tabs" id="pickstars"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#pickstars-1">Game.ts</button></li><li class="tab"><button type="button" data-href="#pickstars-2">Star.ts</button></li><li class="tab"><button type="button" data-href="#pickstars-3">Player.ts</button></li><li class="tab"><button type="button" data-href="#pickstars-4">Start.ts</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="pickstars-1"><figure class="highlight ts"><figcaption><span>用于挂载在Canvas节点下控制游戏的进行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  &#123;<span class="title class_">Global</span>&#125;  <span class="keyword">from</span> <span class="string">&quot;./Start&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123;ccclass, property&#125; = cc.<span class="property">_decorator</span>;</span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Game</span> <span class="keyword">extends</span> <span class="title class_ inherited__">cc.Component</span> &#123;</span><br><span class="line">    <span class="comment">//分数显示</span></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Label</span>)</span><br><span class="line">    <span class="attr">scoreDisplay</span>: cc.<span class="property">Label</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 这个属性引用了星星预制资源</span></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Prefab</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">starPrefab</span>:cc.<span class="property">Prefab</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 星星产生后消失时间的随机范围</span></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Integer</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">maxStarDuration</span>:<span class="built_in">number</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Integer</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">minStarDuration</span>:<span class="built_in">number</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 地面节点，用于确定星星生成的高度</span></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Node</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">groundNode</span>:cc.<span class="property">Node</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// Player 节点，用于获取主角弹跳的高度，和控制主角行动开关</span></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Node</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">playerNode</span>:cc.<span class="property">Node</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="comment">// 得分音效资源</span></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">AudioClip</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">scoreAudio</span>:cc.<span class="property">AudioClip</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//地面节点的Y坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">groundY</span>:<span class="built_in">number</span>;</span><br><span class="line">    <span class="comment">//得分</span></span><br><span class="line">    <span class="keyword">private</span> score=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//计时器</span></span><br><span class="line">    <span class="attr">timer</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="comment">//星星消失时间</span></span><br><span class="line">    <span class="attr">starDuration</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">spawnNewStar</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 使用给定的模板在场景中生成一个新节点</span></span><br><span class="line">        <span class="keyword">let</span> <span class="attr">newStar</span>:cc.<span class="property">Node</span> = cc.<span class="title function_">instantiate</span>(<span class="variable language_">this</span>.<span class="property">starPrefab</span>)</span><br><span class="line">        <span class="comment">// 将新增的节点添加到 Canvas 节点下面</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">addChild</span>(newStar)</span><br><span class="line">        <span class="comment">// 为星星设置一个随机位置</span></span><br><span class="line">        newStar.<span class="title function_">setPosition</span>(<span class="variable language_">this</span>.<span class="title function_">getNewStarPosition</span>())</span><br><span class="line">        <span class="comment">// 在星星脚本组件上保存 Game 对象的引用</span></span><br><span class="line">        newStar.<span class="title function_">getComponent</span>(<span class="string">&#x27;Star&#x27;</span>).<span class="property">game</span> = <span class="variable language_">this</span></span><br><span class="line">        <span class="comment">// 重置计时器，根据消失时间范围随机取一个值</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">starDuration</span> = <span class="variable language_">this</span>.<span class="property">minStarDuration</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>() * (<span class="variable language_">this</span>.<span class="property">maxStarDuration</span> - <span class="variable language_">this</span>.<span class="property">minStarDuration</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getNewStarPosition</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">randX</span>:<span class="built_in">number</span>= <span class="number">0</span></span><br><span class="line">        <span class="comment">// 根据地平面位置和主角跳跃高度，随机得到一个星星的 y 坐标</span></span><br><span class="line">        <span class="keyword">let</span> randY = <span class="variable language_">this</span>.<span class="property">groundY</span> + <span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="variable language_">this</span>.<span class="property">playerNode</span>.<span class="title function_">getComponent</span>(<span class="string">&#x27;Player&#x27;</span>).<span class="property">jumpHeight</span> + <span class="number">70</span></span><br><span class="line">        <span class="comment">// 根据屏幕宽度，随机得到一个星星 x 坐标</span></span><br><span class="line">        <span class="keyword">let</span> maxX = <span class="number">888</span></span><br><span class="line">        randX = (<span class="title class_">Math</span>.<span class="title function_">random</span>() - <span class="number">0.5</span>) * <span class="number">2</span> * maxX</span><br><span class="line">        <span class="comment">// 返回星星坐标</span></span><br><span class="line">        <span class="keyword">return</span> cc.<span class="title function_">v2</span>(randX, randY)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">gainScore</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">score</span> += <span class="number">1</span></span><br><span class="line">        <span class="comment">// 更新 scoreDisplay Label 的文字</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">scoreDisplay</span>.<span class="property">string</span> = <span class="string">&#x27;Score: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">score</span></span><br><span class="line">        <span class="comment">// 播放得分音效</span></span><br><span class="line">        cc.<span class="property">audioEngine</span>.<span class="title function_">playEffect</span>(<span class="variable language_">this</span>.<span class="property">scoreAudio</span>, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">gameOver</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 停止 Player 节点的跳跃动作</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">playerNode</span>.<span class="title function_">stopAllActions</span>()</span><br><span class="line">        <span class="comment">// let sence=cc.director.getScene()</span></span><br><span class="line">        <span class="comment">// cc.log(sence)</span></span><br><span class="line">        <span class="comment">// 重新加载场景 play</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">destroy</span>()</span><br><span class="line">        cc.<span class="property">director</span>.<span class="title function_">loadScene</span>(<span class="string">&#x27;play&#x27;</span>)</span><br><span class="line">        <span class="title class_">Global</span>.<span class="property">isRestart</span>=<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">touchStart</span>(<span class="params">event</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">x</span>:<span class="built_in">number</span>=event.<span class="title function_">getLocationX</span>()</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=<span class="number">960</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">playerNode</span>.<span class="title function_">getComponent</span>(<span class="string">&quot;Player&quot;</span>).<span class="property">accLeft</span>=<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">playerNode</span>.<span class="title function_">getComponent</span>(<span class="string">&quot;Player&quot;</span>).<span class="property">accRight</span>=<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">touchEnd</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">playerNode</span>.<span class="title function_">getComponent</span>(<span class="string">&quot;Player&quot;</span>).<span class="property">accLeft</span>=<span class="literal">false</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">playerNode</span>.<span class="title function_">getComponent</span>(<span class="string">&quot;Player&quot;</span>).<span class="property">accRight</span>=<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">on</span>(<span class="string">&quot;touchstart&quot;</span>,<span class="variable language_">this</span>.<span class="property">touchStart</span>,<span class="variable language_">this</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">on</span>(<span class="string">&quot;touchend&quot;</span>,<span class="variable language_">this</span>.<span class="property">touchEnd</span>,<span class="variable language_">this</span>)</span><br><span class="line">        cc.<span class="property">macro</span>.<span class="property">ENABLE_MULTI_TOUCH</span> = <span class="literal">false</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">score</span> = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 初始化计时器</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">starDuration</span> = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 获取地平面的 y 轴坐标</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">groundY</span> = <span class="variable language_">this</span>.<span class="property">groundNode</span>.<span class="property">y</span> + <span class="variable language_">this</span>.<span class="property">groundNode</span>.<span class="property">height</span>/<span class="number">2</span></span><br><span class="line">        <span class="comment">// 生成一个新的星星</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">spawnNewStar</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    start () &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    update (dt) &#123;</span><br><span class="line">        <span class="comment">// 每帧更新计时器，超过限度还没有生成新的星星</span></span><br><span class="line">        <span class="comment">// 就会调用游戏失败逻辑</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">timer</span> &gt; <span class="variable language_">this</span>.<span class="property">starDuration</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">gameOver</span>()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">timer</span> += dt</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pickstars-2"><p>这里使用了其他脚本的函数</p><figure class="highlight ts"><figcaption><span>挂载于星星预制体</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Game</span> <span class="keyword">from</span><span class="string">&quot;./Game&quot;</span></span><br><span class="line"><span class="keyword">const</span> &#123;ccclass, property&#125; = cc.<span class="property">_decorator</span>;</span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Star</span> <span class="keyword">extends</span> <span class="title class_ inherited__">cc.Component</span> &#123;</span><br><span class="line">    <span class="comment">//收集距离</span></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Integer</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">pickRadius</span>:<span class="built_in">number</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">game</span>:<span class="title class_">Game</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">init</span>(<span class="params">game:Game</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">game</span>=game</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getPlayerDistance</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 根据 Player 节点位置判断距离</span></span><br><span class="line">        <span class="keyword">let</span> playerPos = <span class="variable language_">this</span>.<span class="property">game</span>.<span class="property">playerNode</span>.<span class="title function_">getPosition</span>()</span><br><span class="line">        <span class="comment">// 根据两点位置计算两点之间距离</span></span><br><span class="line">        <span class="keyword">let</span> dist = <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">getPosition</span>().<span class="title function_">sub</span>(playerPos).<span class="title function_">mag</span>()</span><br><span class="line">        <span class="keyword">return</span> dist</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">onPicked</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">game</span>.<span class="title function_">spawnNewStar</span>()</span><br><span class="line">        <span class="comment">// 调用 Game 脚本的得分方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">game</span>.<span class="title function_">gainScore</span>()</span><br><span class="line">        <span class="comment">// 然后销毁当前星星节点</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">destroy</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    onLoad () &#123;&#125;</span><br><span class="line">    start () &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    update (dt) &#123;</span><br><span class="line">         <span class="comment">// 每帧判断星星和主角之间的距离是否小于收集距离</span></span><br><span class="line">         <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">getPlayerDistance</span>() &lt; <span class="variable language_">this</span>.<span class="property">pickRadius</span>) &#123;</span><br><span class="line">            <span class="comment">// 调用收集行为</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">onPicked</span>()</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据 Game 脚本中的计时器更新星星的透明度</span></span><br><span class="line">        <span class="keyword">let</span> opacityRatio = <span class="number">1</span> - <span class="variable language_">this</span>.<span class="property">game</span>.<span class="property">timer</span>/<span class="variable language_">this</span>.<span class="property">game</span>.<span class="property">starDuration</span>;</span><br><span class="line">        <span class="keyword">let</span> minOpacity = <span class="number">50</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">opacity</span> = minOpacity + <span class="title class_">Math</span>.<span class="title function_">floor</span>(opacityRatio * (<span class="number">255</span> - minOpacity))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pickstars-3"><figure class="highlight ts"><figcaption><span>用于实现角色控制</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ccclass, property&#125; = cc.<span class="property">_decorator</span>;</span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Player</span> <span class="keyword">extends</span> <span class="title class_ inherited__">cc.Component</span> &#123;</span><br><span class="line">     <span class="comment">// 主角跳跃高度</span></span><br><span class="line">     <span class="meta">@property</span>(cc.<span class="property">Integer</span>)</span><br><span class="line">     <span class="keyword">private</span> <span class="attr">jumpHeight</span>:<span class="built_in">number</span>=<span class="number">0</span>;</span><br><span class="line">     <span class="comment">// 主角跳跃持续时间</span></span><br><span class="line">     <span class="meta">@property</span>(cc.<span class="property">Integer</span>)</span><br><span class="line">     <span class="keyword">private</span> <span class="attr">jumpDuration</span>:<span class="built_in">number</span>=<span class="number">0</span>;</span><br><span class="line">     <span class="comment">// 最大移动速度</span></span><br><span class="line">     <span class="meta">@property</span>(cc.<span class="property">Integer</span>)</span><br><span class="line">     <span class="keyword">private</span> <span class="attr">maxMoveSpeed</span>:<span class="built_in">number</span>= <span class="number">0</span>;</span><br><span class="line">     <span class="comment">// 加速度</span></span><br><span class="line">     <span class="meta">@property</span>(cc.<span class="property">Integer</span>)</span><br><span class="line">     <span class="keyword">private</span> <span class="attr">accel</span>:<span class="built_in">number</span>= <span class="number">0</span>;</span><br><span class="line">     <span class="meta">@property</span>(cc.<span class="property">AudioClip</span>)</span><br><span class="line">     <span class="keyword">private</span> <span class="attr">jumpAudio</span>:cc.<span class="property">AudioClip</span>=<span class="literal">null</span>;</span><br><span class="line">     <span class="comment">//速度</span></span><br><span class="line">     <span class="keyword">private</span> <span class="attr">xSpeed</span>:<span class="built_in">number</span>=<span class="number">0</span>;</span><br><span class="line">     <span class="keyword">private</span> <span class="attr">accLeft</span>:<span class="built_in">boolean</span>=<span class="literal">false</span>;</span><br><span class="line">     <span class="keyword">private</span> <span class="attr">accRight</span>:<span class="built_in">boolean</span>=<span class="literal">false</span>;</span><br><span class="line">     <span class="keyword">private</span> <span class="title function_">setJumpAction</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 跳跃上升</span></span><br><span class="line">        <span class="keyword">let</span> jumpUp = cc.<span class="title function_">tween</span>().<span class="title function_">by</span>(<span class="variable language_">this</span>.<span class="property">jumpDuration</span>, &#123;<span class="attr">y</span>: <span class="variable language_">this</span>.<span class="property">jumpHeight</span>&#125;, &#123;<span class="attr">easing</span>: <span class="string">&#x27;sineOut&#x27;</span>&#125;)</span><br><span class="line">        <span class="comment">// 下落</span></span><br><span class="line">        <span class="keyword">let</span> jumpDown = cc.<span class="title function_">tween</span>().<span class="title function_">by</span>(<span class="variable language_">this</span>.<span class="property">jumpDuration</span>, &#123;<span class="attr">y</span>: -<span class="variable language_">this</span>.<span class="property">jumpHeight</span>&#125;, &#123;<span class="attr">easing</span>: <span class="string">&#x27;sineIn&#x27;</span>&#125;)</span><br><span class="line">        <span class="comment">// 创建一个缓动，按 jumpUp、jumpDown 的顺序执行动作</span></span><br><span class="line">        <span class="keyword">let</span> tween = cc.<span class="title function_">tween</span>()</span><br><span class="line">        .<span class="title function_">sequence</span>(jumpUp, jumpDown)</span><br><span class="line">        <span class="comment">// 添加一个回调函数，在前面的动作都结束时调用我们定义的 playJumpSound() 方法</span></span><br><span class="line">        .<span class="title function_">call</span>(<span class="variable language_">this</span>.<span class="property">playJumpSound</span>, <span class="variable language_">this</span>)</span><br><span class="line">        <span class="comment">// 不断重复</span></span><br><span class="line">        <span class="keyword">return</span> cc.<span class="title function_">tween</span>().<span class="title function_">repeatForever</span>(tween)</span><br><span class="line">    &#125;</span><br><span class="line">    onKeyDown (<span class="attr">event</span>:cc.<span class="property">Event</span>.<span class="property">EventKeyboard</span>) &#123;</span><br><span class="line">        <span class="comment">// set a flag when key pressed</span></span><br><span class="line">        <span class="keyword">switch</span>(event.<span class="property">keyCode</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> cc.<span class="property">macro</span>.<span class="property">KEY</span>.<span class="property">a</span>:</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">accLeft</span> = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> cc.<span class="property">macro</span>.<span class="property">KEY</span>.<span class="property">d</span>:</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">accRight</span> = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    onKeyUp (event) &#123;</span><br><span class="line">        <span class="comment">// unset a flag when key released</span></span><br><span class="line">        <span class="keyword">switch</span>(event.<span class="property">keyCode</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> cc.<span class="property">macro</span>.<span class="property">KEY</span>.<span class="property">a</span>:</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">accLeft</span> = <span class="literal">false</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> cc.<span class="property">macro</span>.<span class="property">KEY</span>.<span class="property">d</span>:</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">accRight</span> = <span class="literal">false</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">playJumpSound</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 调用声音引擎播放声音</span></span><br><span class="line">        cc.<span class="property">audioEngine</span>.<span class="title function_">playEffect</span>(<span class="variable language_">this</span>.<span class="property">jumpAudio</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">onLoad</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> jumpAction = <span class="variable language_">this</span>.<span class="title function_">setJumpAction</span>()</span><br><span class="line">        cc.<span class="title function_">tween</span>(<span class="variable language_">this</span>.<span class="property">node</span>).<span class="title function_">then</span>(jumpAction).<span class="title function_">start</span>()</span><br><span class="line">        <span class="comment">// 加速度方向开关</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">accLeft</span> = <span class="literal">false</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">accRight</span> = <span class="literal">false</span></span><br><span class="line">        <span class="comment">// 主角当前水平方向速度</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">xSpeed</span> = <span class="number">0</span></span><br><span class="line">        <span class="comment">// 初始化键盘输入监听</span></span><br><span class="line">        cc.<span class="property">systemEvent</span>.<span class="title function_">on</span>(cc.<span class="property">SystemEvent</span>.<span class="property">EventType</span>.<span class="property">KEY_DOWN</span>, <span class="variable language_">this</span>.<span class="property">onKeyDown</span>, <span class="variable language_">this</span>)</span><br><span class="line">        cc.<span class="property">systemEvent</span>.<span class="title function_">on</span>(cc.<span class="property">SystemEvent</span>.<span class="property">EventType</span>.<span class="property">KEY_UP</span>, <span class="variable language_">this</span>.<span class="property">onKeyUp</span>, <span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    start () &#123;&#125;</span><br><span class="line">    <span class="title function_">update</span>(<span class="params">dt</span>) &#123;</span><br><span class="line">        <span class="comment">// 根据当前加速度方向每帧更新速度</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">accLeft</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">xSpeed</span> -= <span class="variable language_">this</span>.<span class="property">accel</span> * dt</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">accRight</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">xSpeed</span> += <span class="variable language_">this</span>.<span class="property">accel</span> * dt</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 限制主角的速度不能超过最大值</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="variable language_">this</span>.<span class="property">xSpeed</span>) &gt; <span class="variable language_">this</span>.<span class="property">maxMoveSpeed</span>) &#123;</span><br><span class="line">            <span class="comment">// if speed reach limit, use max speed with current direction</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">xSpeed</span> = <span class="variable language_">this</span>.<span class="property">maxMoveSpeed</span> * <span class="variable language_">this</span>.<span class="property">xSpeed</span> / <span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="variable language_">this</span>.<span class="property">xSpeed</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">x</span>&lt;-<span class="number">880</span>)&#123;</span><br><span class="line">            <span class="comment">//this.xSpeed=-this.xSpeed</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">xSpeed</span>=<span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">x</span>&gt;<span class="number">880</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">xSpeed</span>=-<span class="number">20</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 根据当前速度更新主角的位置</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">x</span> += <span class="variable language_">this</span>.<span class="property">xSpeed</span> * dt</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">onDestroy</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">// 取消键盘输入监听</span></span><br><span class="line">        cc.<span class="property">systemEvent</span>.<span class="title function_">off</span>(cc.<span class="property">SystemEvent</span>.<span class="property">EventType</span>.<span class="property">KEY_DOWN</span>, <span class="variable language_">this</span>.<span class="property">onKeyDown</span>, <span class="variable language_">this</span>)</span><br><span class="line">        cc.<span class="property">systemEvent</span>.<span class="title function_">off</span>(cc.<span class="property">SystemEvent</span>.<span class="property">EventType</span>.<span class="property">KEY_UP</span>, <span class="variable language_">this</span>.<span class="property">onKeyUp</span>, <span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="pickstars-4"><figure class="highlight ts"><figcaption><span>用于实现菜单控制及管理全局变量</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ccclass, property&#125; = cc.<span class="property">_decorator</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">Global</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="attr">isRestart</span>:<span class="built_in">boolean</span>=<span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span>  <span class="keyword">class</span> <span class="title class_">Start</span> <span class="keyword">extends</span> <span class="title class_ inherited__">cc.Component</span> &#123;</span><br><span class="line">    <span class="title function_">playGame</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">parent</span>.<span class="title function_">destroy</span>()  </span><br><span class="line">        cc.<span class="property">director</span>.<span class="title function_">loadScene</span>(<span class="string">&quot;game&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title class_">Global</span>.<span class="property">isRestart</span>)&#123;</span><br><span class="line">            <span class="comment">//cc.find(&quot;Canvas/startButton/Background/start&quot;).getComponent(cc.Label).string=&quot;重新开始&quot;</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">getChildByName</span>(<span class="string">&quot;Background&quot;</span>).<span class="title function_">getChildByName</span>(<span class="string">&quot;start&quot;</span>).<span class="title function_">getComponent</span>(cc.<span class="property">Label</span>).<span class="property">string</span>=<span class="string">&quot;重新开始&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// this.node.on(&#x27;mousedown&#x27;,this.playGame,this)</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">on</span>(<span class="string">&quot;touchstart&quot;</span>,<span class="variable language_">this</span>.<span class="property">playGame</span>,<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    start () &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="五子棋-GoBang"><a href="#五子棋-GoBang" class="headerlink" title="五子棋(GoBang)"></a>五子棋(GoBang)</h3><h4 id="GoBang"><a href="#GoBang" class="headerlink" title="GoBang"></a>GoBang</h4><p><a href="https://cmwlvip.github.io/game/GoBang/index.html">游戏预览</a><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">——Canvas</span><br><span class="line">    ——Main Camera</span><br><span class="line">    ——chess(Anchor:(0,0))</span><br><span class="line">    ——btn_start</span><br><span class="line">        ——title</span><br></pre></td></tr></table></figure></p><details class="toggle"><summary class="toggle-button" style>display</summary><div class="toggle-content"><figure class="highlight ts"><figcaption><span>挂载于棋盘节点</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ccclass, property&#125; = cc.<span class="property">_decorator</span>;</span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">ChessBoard</span> <span class="keyword">extends</span> <span class="title class_ inherited__">cc.Component</span> &#123;</span><br><span class="line">    <span class="comment">//使用棋子预制体</span></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Prefab</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">chessPrefab_black</span>:cc.<span class="property">Prefab</span>=<span class="literal">null</span></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Prefab</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">chessPrefab_white</span>:cc.<span class="property">Prefab</span>=<span class="literal">null</span></span><br><span class="line">    <span class="comment">//重新开始图片</span></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">SpriteFrame</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">restart</span>:cc.<span class="property">SpriteFrame</span>=<span class="literal">null</span></span><br><span class="line">    <span class="comment">//游戏结算面板</span></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Prefab</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">start_board</span>:cc.<span class="property">Prefab</span>=<span class="literal">null</span></span><br><span class="line">    <span class="comment">//边界落子提示面板</span></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Prefab</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">Tip</span><span class="attr">_board</span>:cc.<span class="property">Prefab</span>=<span class="literal">null</span></span><br><span class="line">    <span class="comment">//开始节点</span></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">startGame</span>:cc.<span class="property">Node</span>=<span class="literal">null</span></span><br><span class="line">    <span class="comment">//用于计数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">num</span>:<span class="built_in">number</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="comment">//保存实例化之后的，不是0的值，0表示没有棋子，1黑棋，2白棋</span></span><br><span class="line">    <span class="keyword">private</span> _board=[]</span><br><span class="line">    <span class="comment">//戏是否进行游</span></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">isPlayGame</span>:<span class="built_in">boolean</span>=<span class="literal">false</span></span><br><span class="line">    <span class="comment">//是否重新开始</span></span><br><span class="line">    <span class="keyword">private</span> <span class="attr">isRestart</span>:<span class="built_in">boolean</span>=<span class="literal">false</span></span><br><span class="line">    <span class="comment">//有18根线，设置21用于处理边界问题</span></span><br><span class="line">    <span class="title function_">initBoard</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">18</span>;i++)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_board</span>[i]=[]</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;<span class="number">18</span>;j++)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">_board</span>[i][j]=<span class="number">0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">playGame</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">isRestart</span>)&#123;</span><br><span class="line">            cc.<span class="property">director</span>.<span class="title function_">loadScene</span>(<span class="string">&quot;game&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">startGame</span>.<span class="property">active</span>=<span class="literal">false</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isPlayGame</span>=<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">restartGame</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">startGame</span>.<span class="property">active</span>=<span class="literal">true</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">startGame</span>.<span class="title function_">getComponent</span>(cc.<span class="property">Sprite</span>).<span class="property">spriteFrame</span>=<span class="variable language_">this</span>.<span class="property">restart</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">startGame</span>.<span class="title function_">removeAllChildren</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">startGame</span>.<span class="property">scale</span>=<span class="number">0.5</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">startGame</span>.<span class="property">opacity</span>=<span class="number">200</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">isRestart</span>=<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//是否可以下</span></span><br><span class="line">    <span class="title function_">isPlayChess</span>(<span class="params">i:<span class="built_in">number</span>,j:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">_board</span>[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">            cc.<span class="title function_">log</span>(<span class="string">&quot;此处已有棋子&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 边界不落子提示</span></span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span> || j==<span class="number">0</span> || i==<span class="number">17</span> || j==<span class="number">17</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="attr">tip</span>:cc.<span class="property">Node</span> = cc.<span class="title function_">instantiate</span>(<span class="variable language_">this</span>.<span class="property">Tip_board</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">addChild</span>(tip)</span><br><span class="line">            tip.<span class="title function_">setPosition</span>(cc.<span class="title function_">v2</span>(<span class="number">425</span>,<span class="number">500</span>))</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                tip.<span class="title function_">destroy</span>()</span><br><span class="line">              &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>), <span class="number">500</span>)</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">setNewChess</span>(<span class="params">event</span>)&#123;</span><br><span class="line">        cc.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">isPlayGame</span>)</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">isPlayGame</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">startPoint</span>:cc.<span class="property">Vec2</span> = event.<span class="title function_">getLocation</span>()</span><br><span class="line">        <span class="comment">//转换后的坐标，局部坐标</span></span><br><span class="line">        <span class="keyword">let</span> temp_position=<span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">convertToNodeSpaceAR</span>(startPoint)</span><br><span class="line">        <span class="keyword">let</span> x=<span class="title class_">Math</span>.<span class="title function_">round</span>(temp_position.<span class="property">x</span>/<span class="number">50</span>)</span><br><span class="line">        <span class="keyword">let</span> y=<span class="title class_">Math</span>.<span class="title function_">round</span>(temp_position.<span class="property">y</span>/<span class="number">50</span>)</span><br><span class="line">        <span class="comment">//确保棋子下在线上</span></span><br><span class="line">        <span class="keyword">let</span> <span class="attr">position</span>:cc.<span class="property">Vec2</span>=cc.<span class="title function_">v2</span>(x*<span class="number">50</span>,y*<span class="number">50</span>)  </span><br><span class="line">        <span class="comment">//记录转换坐标（索引）整体加一解决数组越界问题</span></span><br><span class="line">        <span class="comment">//现在边界不落子就不用处理越界，如左下角[0][0]是不下棋的，flag===0</span></span><br><span class="line">        <span class="keyword">let</span> myPos=cc.<span class="title function_">v2</span>(x,y)</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">num</span>%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">isPlayChess</span>(myPos.<span class="property">x</span>,myPos.<span class="property">y</span>))&#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="attr">newChess_black</span>:cc.<span class="property">Node</span> = cc.<span class="title function_">instantiate</span>(<span class="variable language_">this</span>.<span class="property">chessPrefab_black</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">addChild</span>(newChess_black)</span><br><span class="line">            newChess_black.<span class="title function_">setPosition</span>(position)  </span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_board</span>[myPos.<span class="property">x</span>][myPos.<span class="property">y</span>]=<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">judge</span>(<span class="number">1</span>,myPos))&#123;</span><br><span class="line">                cc.<span class="title function_">log</span>(<span class="string">&quot;黑胜&quot;</span>)</span><br><span class="line">                <span class="keyword">let</span> <span class="attr">newGame</span>:cc.<span class="property">Node</span> = cc.<span class="title function_">instantiate</span>(<span class="variable language_">this</span>.<span class="property">start_board</span>)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">addChild</span>(newGame)</span><br><span class="line">                newGame.<span class="property">children</span>[<span class="number">1</span>].<span class="property">color</span>=cc.<span class="property">Color</span>.<span class="property">BLACK</span></span><br><span class="line">                <span class="comment">//设置面板位置</span></span><br><span class="line">                newGame.<span class="title function_">setPosition</span>(cc.<span class="title function_">v2</span>(<span class="number">425</span>,<span class="number">325</span>))</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">restartGame</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">num</span>+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">num</span>%<span class="number">2</span>==<span class="number">1</span> &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">isPlayChess</span>(myPos.<span class="property">x</span>,myPos.<span class="property">y</span>))&#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="attr">newChess_white</span>:cc.<span class="property">Node</span> = cc.<span class="title function_">instantiate</span>(<span class="variable language_">this</span>.<span class="property">chessPrefab_white</span>)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">addChild</span>(newChess_white)</span><br><span class="line">            newChess_white.<span class="title function_">setPosition</span>(position)</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_board</span>[myPos.<span class="property">x</span>][myPos.<span class="property">y</span>]=<span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">judge</span>(<span class="number">2</span>,myPos))&#123;</span><br><span class="line">                cc.<span class="title function_">log</span>(<span class="string">&quot;白胜&quot;</span>)</span><br><span class="line">                <span class="keyword">let</span> <span class="attr">newGame</span>:cc.<span class="property">Node</span> = cc.<span class="title function_">instantiate</span>(<span class="variable language_">this</span>.<span class="property">start_board</span>)</span><br><span class="line">                newGame.<span class="property">children</span>[<span class="number">1</span>].<span class="title function_">getComponent</span>(cc.<span class="property">Label</span>).<span class="property">string</span>=<span class="string">&quot;白棋&quot;</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">addChild</span>(newGame)</span><br><span class="line">                newGame.<span class="title function_">setPosition</span>(cc.<span class="title function_">v2</span>(<span class="number">425</span>,<span class="number">325</span>))</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">restartGame</span>()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">num</span>+=<span class="number">1</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断函数，用于判读输赢</span></span><br><span class="line">    <span class="title function_">judge</span>(<span class="params">flag:<span class="built_in">number</span>,myPos:cc.Vec2</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">judge_row</span>(flag,myPos) || <span class="variable language_">this</span>.<span class="title function_">judge_list</span>(flag,myPos) || <span class="variable language_">this</span>.<span class="title function_">judge_left</span>(flag,myPos) || <span class="variable language_">this</span>.<span class="title function_">judge_right</span>(flag,myPos))&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">isPlayGame</span>=<span class="literal">false</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//判断横向</span></span><br><span class="line">    <span class="title function_">judge_row</span>(<span class="params">flag:<span class="built_in">number</span>,myPos:cc.Vec2</span>)&#123;</span><br><span class="line">        <span class="comment">//用于计数</span></span><br><span class="line">        <span class="keyword">let</span> count=<span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> i=<span class="number">1</span></span><br><span class="line">        <span class="comment">//右界已处理</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">_board</span>[myPos.<span class="property">x</span>+i][myPos.<span class="property">y</span>]==flag)&#123;</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        i=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">_board</span>[myPos.<span class="property">x</span>-i][myPos.<span class="property">y</span>]==flag)&#123;</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count&lt;<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断纵向</span></span><br><span class="line">    <span class="title function_">judge_list</span>(<span class="params">flag:<span class="built_in">number</span>,myPos:cc.Vec2</span>)&#123;</span><br><span class="line">        <span class="comment">//用于计数</span></span><br><span class="line">        <span class="keyword">let</span> count=<span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> i=<span class="number">1</span></span><br><span class="line">        <span class="comment">//上界已处理</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">_board</span>[myPos.<span class="property">x</span>][myPos.<span class="property">y</span>+i]==flag)&#123;</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        i=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">_board</span>[myPos.<span class="property">x</span>][myPos.<span class="property">y</span>-i]==flag)&#123;</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count&lt;<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//[0][0] [1][1] [2][2]</span></span><br><span class="line">    <span class="title function_">judge_left</span>(<span class="params">flag:<span class="built_in">number</span>,myPos:cc.Vec2</span>)&#123;</span><br><span class="line">        <span class="comment">//用于计数</span></span><br><span class="line">        <span class="keyword">let</span> count=<span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> i=<span class="number">1</span></span><br><span class="line">        <span class="comment">//右上脚已经处理</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">_board</span>[myPos.<span class="property">x</span>+i][myPos.<span class="property">y</span>+i]==flag)&#123;</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        i=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">_board</span>[myPos.<span class="property">x</span>-i][myPos.<span class="property">y</span>-i]==flag)&#123;</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count&lt;<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">judge_right</span>(<span class="params">flag:<span class="built_in">number</span>,myPos:cc.Vec2</span>)&#123;</span><br><span class="line">        <span class="comment">//用于计数</span></span><br><span class="line">        <span class="keyword">let</span> count=<span class="number">0</span></span><br><span class="line">        <span class="keyword">let</span> i=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">_board</span>[myPos.<span class="property">x</span>-i][myPos.<span class="property">y</span>+i]==flag)&#123;</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        &#125; </span><br><span class="line">        i=<span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">_board</span>[myPos.<span class="property">x</span>+i][myPos.<span class="property">y</span>-i]==flag)&#123;</span><br><span class="line">            count+=<span class="number">1</span></span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(count&lt;<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">startGame</span>=cc.<span class="title function_">find</span>(<span class="string">&quot;Canvas/btn_start&quot;</span>)</span><br><span class="line">        <span class="comment">// this.node.on(&#x27;mousedown&#x27;,this.setNewChess,this)</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">on</span>(<span class="string">&quot;touchstart&quot;</span>,<span class="variable language_">this</span>.<span class="property">setNewChess</span>, <span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    start () &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">initBoard</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h3 id="简易消消乐-Xiaoxiaole"><a href="#简易消消乐-Xiaoxiaole" class="headerlink" title="简易消消乐(Xiaoxiaole)"></a>简易消消乐(Xiaoxiaole)</h3><h4 id="Xiaoxiaole"><a href="#Xiaoxiaole" class="headerlink" title="Xiaoxiaole"></a>Xiaoxiaole</h4><p><a href="https://cmwlvip.github.io/game/Xiaoxiaole/index.html">游戏预览</a><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">——Canvas</span><br><span class="line">    ——Main Camera</span><br><span class="line">    ——bg(Anchor:(0,0))</span><br></pre></td></tr></table></figure></p><h4 id="Xiaoxiaole思路"><a href="#Xiaoxiaole思路" class="headerlink" title="Xiaoxiaole思路"></a>Xiaoxiaole思路</h4><p>就是一个递归的思想在里面</p><h4 id="Xiaoxiaole实现"><a href="#Xiaoxiaole实现" class="headerlink" title="Xiaoxiaole实现"></a>Xiaoxiaole实现</h4><div class="tabs" id="xiaoxiaole"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#xiaoxiaole-1">NewBlock.ts</button></li><li class="tab"><button type="button" data-href="#xiaoxiaole-2">Game.ts</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="xiaoxiaole-1"><figure class="highlight ts"><figcaption><span>挂载在一个方块预制体上</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;ccclass, property&#125; = cc.<span class="property">_decorator</span>;</span><br><span class="line"><span class="keyword">const</span> picArr=cc.<span class="title class_">Class</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;pic_List&quot;</span>,</span><br><span class="line">    <span class="attr">properties</span>:&#123;</span><br><span class="line">        <span class="attr">a</span>:&#123;</span><br><span class="line">            <span class="attr">default</span>:<span class="literal">null</span>,</span><br><span class="line">            <span class="attr">type</span>:cc.<span class="property">SpriteFrame</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">b</span>:&#123;</span><br><span class="line">            <span class="attr">default</span>:<span class="literal">null</span>,</span><br><span class="line">            <span class="attr">type</span>:cc.<span class="property">SpriteFrame</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">c</span>:&#123;</span><br><span class="line">            <span class="attr">default</span>:<span class="literal">null</span>,</span><br><span class="line">            <span class="attr">type</span>:cc.<span class="property">SpriteFrame</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">d</span>:&#123;</span><br><span class="line">            <span class="attr">default</span>:<span class="literal">null</span>,</span><br><span class="line">            <span class="attr">type</span>:cc.<span class="property">SpriteFrame</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">e</span>:&#123;</span><br><span class="line">            <span class="attr">default</span>:<span class="literal">null</span>,</span><br><span class="line">            <span class="attr">type</span>:cc.<span class="property">SpriteFrame</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">f</span>:&#123;</span><br><span class="line">            <span class="attr">default</span>:<span class="literal">null</span>,</span><br><span class="line">            <span class="attr">type</span>:cc.<span class="property">SpriteFrame</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">NewBlock</span> <span class="keyword">extends</span> <span class="title class_ inherited__">cc.Component</span> &#123;</span><br><span class="line">    <span class="meta">@property</span>(&#123;</span><br><span class="line">        <span class="attr">type</span>:picArr,</span><br><span class="line">        <span class="attr">displayName</span>:<span class="string">&quot;图片数组&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    pic_List=<span class="literal">null</span>;</span><br><span class="line">    index=<span class="variable language_">this</span>.<span class="title function_">myRandom</span>(<span class="number">0</span>,<span class="number">5</span>)     </span><br><span class="line">    arr=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>]</span><br><span class="line">    <span class="title function_">xiaoxiaole</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">index</span>=<span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">myRandom</span>(<span class="params">min:<span class="built_in">number</span>,max:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="comment">//向下取整</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*(max-min+<span class="number">1</span>)+min)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">random_block</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">index</span>=<span class="variable language_">this</span>.<span class="title function_">myRandom</span>(<span class="number">0</span>,<span class="number">5</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">judge_block</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">arr</span>[<span class="variable language_">this</span>.<span class="property">index</span>]==<span class="string">&#x27;a&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">getComponent</span>(cc.<span class="property">Sprite</span>).<span class="property">spriteFrame</span>=<span class="variable language_">this</span>.<span class="property">pic_List</span>.<span class="property">a</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">arr</span>[<span class="variable language_">this</span>.<span class="property">index</span>]==<span class="string">&#x27;b&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">getComponent</span>(cc.<span class="property">Sprite</span>).<span class="property">spriteFrame</span>=<span class="variable language_">this</span>.<span class="property">pic_List</span>.<span class="property">b</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">arr</span>[<span class="variable language_">this</span>.<span class="property">index</span>]==<span class="string">&#x27;c&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">getComponent</span>(cc.<span class="property">Sprite</span>).<span class="property">spriteFrame</span>=<span class="variable language_">this</span>.<span class="property">pic_List</span>.<span class="property">c</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">arr</span>[<span class="variable language_">this</span>.<span class="property">index</span>]==<span class="string">&#x27;d&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">getComponent</span>(cc.<span class="property">Sprite</span>).<span class="property">spriteFrame</span>=<span class="variable language_">this</span>.<span class="property">pic_List</span>.<span class="property">d</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">arr</span>[<span class="variable language_">this</span>.<span class="property">index</span>]==<span class="string">&#x27;e&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">getComponent</span>(cc.<span class="property">Sprite</span>).<span class="property">spriteFrame</span>=<span class="variable language_">this</span>.<span class="property">pic_List</span>.<span class="property">e</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">arr</span>[<span class="variable language_">this</span>.<span class="property">index</span>]==<span class="string">&#x27;f&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">getComponent</span>(cc.<span class="property">Sprite</span>).<span class="property">spriteFrame</span>=<span class="variable language_">this</span>.<span class="property">pic_List</span>.<span class="property">f</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">arr</span>[<span class="variable language_">this</span>.<span class="property">index</span>]==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">getComponent</span>(cc.<span class="property">Sprite</span>).<span class="property">spriteFrame</span>=<span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// onLoad () &#123; &#125;</span></span><br><span class="line">    <span class="comment">// start () &#123; &#125;</span></span><br><span class="line">    update (dt) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">judge_block</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="xiaoxiaole-2"><figure class="highlight ts"><figcaption><span>挂载在背景节点下控制游戏进行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ccclass, property&#125; = cc.<span class="property">_decorator</span>;</span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">NewClass</span> <span class="keyword">extends</span> <span class="title class_ inherited__">cc.Component</span> &#123;</span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Prefab</span>)</span><br><span class="line">    <span class="attr">pic</span>:cc.<span class="property">Prefab</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">private</span> arr=[];</span><br><span class="line">    <span class="title function_">xiaoxiaole</span>(<span class="params">event</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="title class_">Point</span>:cc.<span class="property">Vec2</span> = event.<span class="title function_">getLocation</span>()</span><br><span class="line">        <span class="comment">//转换后的坐标，局部坐标</span></span><br><span class="line">        <span class="keyword">let</span> temp_position=<span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">convertToNodeSpaceAR</span>(<span class="title class_">Point</span>)</span><br><span class="line">        <span class="keyword">let</span> x=<span class="title class_">Math</span>.<span class="title function_">round</span>((temp_position.<span class="property">x</span>+<span class="number">25</span>)/<span class="number">50</span>)</span><br><span class="line">        <span class="keyword">let</span> y=<span class="title class_">Math</span>.<span class="title function_">round</span>((temp_position.<span class="property">y</span>+<span class="number">25</span>)/<span class="number">50</span>)</span><br><span class="line">        <span class="comment">//左下角为(1,1)</span></span><br><span class="line">        <span class="keyword">let</span> myPos=cc.<span class="title function_">v2</span>(x,y)</span><br><span class="line">        <span class="comment">// cc.log(myPos.x,myPos.y)</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">judge</span>(myPos)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;<span class="number">11</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">1</span>;j&lt;<span class="number">11</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">arr</span>[i][j]==<span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">let</span> <span class="attr">n</span>:<span class="built_in">number</span>=<span class="number">1</span></span><br><span class="line">                    <span class="keyword">let</span> <span class="attr">a</span>:<span class="built_in">number</span>=<span class="number">1</span></span><br><span class="line">                    <span class="keyword">while</span>(<span class="variable language_">this</span>.<span class="property">arr</span>[i][j+a]==<span class="literal">null</span> &amp;&amp; j+a&lt;<span class="number">11</span>)&#123;</span><br><span class="line">                        <span class="comment">//记录空格</span></span><br><span class="line">                        n++</span><br><span class="line">                        a++</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// cc.log(n) </span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="title function_">scheduleOnce</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">let</span> k=<span class="number">0</span>;k&lt;(<span class="number">11</span>-n-j);k++)&#123;</span><br><span class="line">                            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">children</span>[(i-<span class="number">1</span>)*<span class="number">10</span>+j-<span class="number">1</span>+k].<span class="title function_">getComponent</span>(<span class="string">&quot;NewBlock&quot;</span>).<span class="property">index</span></span><br><span class="line">                            =<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">children</span>[(i-<span class="number">1</span>)*<span class="number">10</span>+j-<span class="number">1</span>+k+n].<span class="title function_">getComponent</span>(<span class="string">&quot;NewBlock&quot;</span>).<span class="property">index</span></span><br><span class="line">                            <span class="variable language_">this</span>.<span class="property">arr</span>[i][j+k]=<span class="variable language_">this</span>.<span class="property">arr</span>[i][j+k+n]</span><br><span class="line">                            <span class="variable language_">this</span>.<span class="property">arr</span>[i][j+k+n]=<span class="literal">null</span></span><br><span class="line">                            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">children</span>[(i-<span class="number">1</span>)*<span class="number">10</span>+j-<span class="number">1</span>+k+n].<span class="title function_">getComponent</span>(<span class="string">&quot;NewBlock&quot;</span>).<span class="property">index</span>=<span class="literal">null</span></span><br><span class="line">                        &#125; </span><br><span class="line">                    &#125;, <span class="number">0.4</span>); </span><br><span class="line">                    <span class="comment">//放开此处break不生成新图片            </span></span><br><span class="line">                    <span class="comment">// break</span></span><br><span class="line">                    <span class="comment">//上面生成新图片</span></span><br><span class="line">                    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">let</span> k=<span class="number">0</span>;k&lt;n;k++)&#123;</span><br><span class="line">                            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">children</span>[(i-<span class="number">1</span>)*<span class="number">10</span>+<span class="number">9</span>-k].<span class="title function_">getComponent</span>(<span class="string">&quot;NewBlock&quot;</span>).<span class="title function_">random_block</span>()</span><br><span class="line">                            <span class="variable language_">this</span>.<span class="property">arr</span>[i][<span class="number">10</span>-k]=<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">children</span>[(i-<span class="number">1</span>)*<span class="number">10</span>+<span class="number">9</span>-k].<span class="title function_">getComponent</span>(<span class="string">&quot;NewBlock&quot;</span>).<span class="property">index</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>),<span class="number">950</span>)    </span><br><span class="line">                    <span class="keyword">break</span>                </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">judge</span>(<span class="params">myPos:cc.Vec2</span>)&#123;</span><br><span class="line">        <span class="comment">//来个变量记住一开始的图片</span></span><br><span class="line">        <span class="keyword">let</span> temp= <span class="variable language_">this</span>.<span class="property">arr</span>[myPos.<span class="property">x</span>][myPos.<span class="property">y</span>]</span><br><span class="line">        <span class="comment">//减去1的表示点击的节点，处理数组越界整体加了一</span></span><br><span class="line">        <span class="comment">//this.node.children[(myPos.x-1)*10+myPos.y-1]找到对应孩子节点 执行其函数</span></span><br><span class="line">        <span class="keyword">if</span>(temp==<span class="literal">null</span> || (<span class="variable language_">this</span>.<span class="property">arr</span>[myPos.<span class="property">x</span>-<span class="number">1</span>][myPos.<span class="property">y</span>]!=temp &amp;&amp; <span class="variable language_">this</span>.<span class="property">arr</span>[myPos.<span class="property">x</span>+<span class="number">1</span>][myPos.<span class="property">y</span>]!=temp</span><br><span class="line">            &amp;&amp; <span class="variable language_">this</span>.<span class="property">arr</span>[myPos.<span class="property">x</span>][myPos.<span class="property">y</span>-<span class="number">1</span>]!=temp &amp;&amp; <span class="variable language_">this</span>.<span class="property">arr</span>[myPos.<span class="property">x</span>][myPos.<span class="property">y</span>+<span class="number">1</span>]!=temp))&#123;</span><br><span class="line">                <span class="comment">//上面有一个都不成立</span></span><br><span class="line">                <span class="keyword">return</span>    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">children</span>[(myPos.<span class="property">x</span>-<span class="number">1</span>)*<span class="number">10</span>+myPos.<span class="property">y</span>-<span class="number">1</span>].<span class="title function_">getComponent</span>(<span class="string">&quot;NewBlock&quot;</span>).<span class="title function_">xiaoxiaole</span>()  </span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">arr</span>[myPos.<span class="property">x</span>][myPos.<span class="property">y</span>]=<span class="literal">null</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">arr</span>[myPos.<span class="property">x</span>-<span class="number">1</span>][myPos.<span class="property">y</span>]==temp)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">children</span>[(myPos.<span class="property">x</span>-<span class="number">2</span>)*<span class="number">10</span>+myPos.<span class="property">y</span>-<span class="number">1</span>].<span class="title function_">getComponent</span>(<span class="string">&quot;NewBlock&quot;</span>).<span class="title function_">xiaoxiaole</span>()</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">judge</span>(cc.<span class="title function_">v2</span>(myPos.<span class="property">x</span>-<span class="number">1</span>,myPos.<span class="property">y</span>)) </span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arr</span>[myPos.<span class="property">x</span>-<span class="number">1</span>][myPos.<span class="property">y</span>]=<span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">arr</span>[myPos.<span class="property">x</span>+<span class="number">1</span>][myPos.<span class="property">y</span>]==temp)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">children</span>[myPos.<span class="property">x</span>*<span class="number">10</span>+myPos.<span class="property">y</span>-<span class="number">1</span>].<span class="title function_">getComponent</span>(<span class="string">&quot;NewBlock&quot;</span>).<span class="title function_">xiaoxiaole</span>()</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">judge</span>(cc.<span class="title function_">v2</span>(myPos.<span class="property">x</span>+<span class="number">1</span>,myPos.<span class="property">y</span>))  </span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arr</span>[myPos.<span class="property">x</span>+<span class="number">1</span>][myPos.<span class="property">y</span>]=<span class="literal">null</span>  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">arr</span>[myPos.<span class="property">x</span>][myPos.<span class="property">y</span>-<span class="number">1</span>]==temp)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">children</span>[(myPos.<span class="property">x</span>-<span class="number">1</span>)*<span class="number">10</span>+myPos.<span class="property">y</span>-<span class="number">2</span>].<span class="title function_">getComponent</span>(<span class="string">&quot;NewBlock&quot;</span>).<span class="title function_">xiaoxiaole</span>()  </span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">judge</span>(cc.<span class="title function_">v2</span>(myPos.<span class="property">x</span>,myPos.<span class="property">y</span>-<span class="number">1</span>))   </span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arr</span>[myPos.<span class="property">x</span>][myPos.<span class="property">y</span>-<span class="number">1</span>]=<span class="literal">null</span> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">arr</span>[myPos.<span class="property">x</span>][myPos.<span class="property">y</span>+<span class="number">1</span>]==temp)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">children</span>[(myPos.<span class="property">x</span>-<span class="number">1</span>)*<span class="number">10</span>+myPos.<span class="property">y</span>].<span class="title function_">getComponent</span>(<span class="string">&quot;NewBlock&quot;</span>).<span class="title function_">xiaoxiaole</span>() </span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">judge</span>(cc.<span class="title function_">v2</span>(myPos.<span class="property">x</span>,myPos.<span class="property">y</span>+<span class="number">1</span>))   </span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arr</span>[myPos.<span class="property">x</span>][myPos.<span class="property">y</span>+<span class="number">1</span>]=<span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">initGame</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">on</span>(<span class="string">&quot;mousedown&quot;</span>,<span class="variable language_">this</span>.<span class="property">xiaoxiaole</span>,<span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">initGame</span>(<span class="params"></span>)&#123;      </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">12</span>;i++)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arr</span>[i]=[]</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;<span class="number">12</span>;j++)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">arr</span>[i][j]=<span class="literal">null</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">1</span>;i&lt;<span class="number">11</span>;i++)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">arr</span>[i]=[]</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">1</span>;j&lt;<span class="number">11</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="attr">block</span>:cc.<span class="property">Node</span> = cc.<span class="title function_">instantiate</span>(<span class="variable language_">this</span>.<span class="property">pic</span>)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">addChild</span>(block)</span><br><span class="line">                <span class="comment">// cc.log(block.getComponent(&quot;NewBlock&quot;).index)</span></span><br><span class="line">                <span class="comment">// cc.log(block.name)</span></span><br><span class="line">                block.<span class="title function_">setPosition</span>(cc.<span class="title function_">v2</span>(<span class="number">50</span>*i-<span class="number">25</span>,<span class="number">50</span>*j-<span class="number">25</span>))</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">arr</span>[i][j]=block.<span class="title function_">getComponent</span>(<span class="string">&quot;NewBlock&quot;</span>).<span class="property">index</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// start () &#123;&#125;</span></span><br><span class="line">     update (dt) &#123;    </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="打砖块-Bricks"><a href="#打砖块-Bricks" class="headerlink" title="打砖块(Bricks)"></a>打砖块(Bricks)</h3><h4 id="Bricks"><a href="#Bricks" class="headerlink" title="Bricks"></a>Bricks</h4><p><a href="https://cmwlvip.github.io/game/Bricks/index.html">游戏预览</a><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">——Canvas</span><br><span class="line">    ——Main Camera</span><br><span class="line">    ——bg</span><br><span class="line">        ——ball</span><br><span class="line">        ——board</span><br><span class="line">    ——wall</span><br><span class="line">        ——left</span><br><span class="line">        ——right</span><br><span class="line">        ——top</span><br><span class="line">    ——menu</span><br><span class="line">        ——level</span><br><span class="line">        ——score</span><br><span class="line">    ——restart</span><br><span class="line">        ——tip</span><br></pre></td></tr></table></figure></p><h4 id="Bricks游戏思路"><a href="#Bricks游戏思路" class="headerlink" title="Bricks游戏思路"></a>Bricks游戏思路</h4><p>主要是处理砖块碰撞问题，由于小球打在砖块的不同位置效果是不一样的，因此需要设计好不同的碰撞区域，并进行标记<br><img src="/2022/12/03/Cocos/2022-12-10-00-28-09.png" alt="砖块碰撞设计"></p><h4 id="Bricks实现"><a href="#Bricks实现" class="headerlink" title="Bricks实现"></a>Bricks实现</h4><div class="tabs" id="bricks"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#bricks-1">Brick.ts</button></li><li class="tab"><button type="button" data-href="#bricks-2">Game.ts</button></li><li class="tab"><button type="button" data-href="#bricks-3">Ball.ts</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="bricks-1"><figure class="highlight ts"><figcaption><span>挂载在砖块预制体上</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ccclass, property&#125; = cc.<span class="property">_decorator</span>;</span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Brick</span> <span class="keyword">extends</span> <span class="title class_ inherited__">cc.Component</span> &#123;</span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        <span class="keyword">let</span> red=<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">255</span></span><br><span class="line">        <span class="keyword">let</span> green =<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">255</span></span><br><span class="line">        <span class="keyword">let</span> blue =<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">255</span></span><br><span class="line">        <span class="keyword">let</span> color=cc.<span class="title function_">color</span>(red,green,blue)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">color</span>=color</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// start () &#123;&#125;</span></span><br><span class="line">    <span class="comment">// update (dt) &#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bricks-2"><figure class="highlight ts"><figcaption><span>挂载在背景节点上用于控制游戏进行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ccclass, property&#125; = cc.<span class="property">_decorator</span>;</span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">Game</span> <span class="keyword">extends</span> <span class="title class_ inherited__">cc.Component</span> &#123;</span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Prefab</span>)</span><br><span class="line">    <span class="attr">brick</span>:cc.<span class="property">Prefab</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Node</span>)</span><br><span class="line">    <span class="attr">player</span>:cc.<span class="property">Node</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="title class_">Left</span>:<span class="built_in">boolean</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="title class_">Right</span>:<span class="built_in">boolean</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="attr">xSpeed</span>:<span class="built_in">number</span>=<span class="number">11</span>;</span><br><span class="line">    <span class="title function_">initGame</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> j=<span class="number">0</span>;j&lt;<span class="number">15</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">let</span> <span class="attr">node</span>:cc.<span class="property">Node</span>=cc.<span class="title function_">instantiate</span>(<span class="variable language_">this</span>.<span class="property">brick</span>)</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">addChild</span>(node)</span><br><span class="line">                node.<span class="title function_">setPosition</span>(cc.<span class="title function_">v2</span>(-<span class="number">480</span>+i*<span class="number">120</span>,<span class="number">800</span>-j*<span class="number">60</span>))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    onKeyDown (<span class="attr">event</span>:cc.<span class="property">Event</span>.<span class="property">EventKeyboard</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span>(event.<span class="property">keyCode</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> cc.<span class="property">macro</span>.<span class="property">KEY</span>.<span class="property">a</span>:</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">Left</span> = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> cc.<span class="property">macro</span>.<span class="property">KEY</span>.<span class="property">d</span>:</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">Right</span> = <span class="literal">true</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    onKeyUp (event) &#123;</span><br><span class="line">        <span class="keyword">switch</span>(event.<span class="property">keyCode</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> cc.<span class="property">macro</span>.<span class="property">KEY</span>.<span class="property">a</span>:</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">Left</span> = <span class="literal">false</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> cc.<span class="property">macro</span>.<span class="property">KEY</span>.<span class="property">d</span>:</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">Right</span> = <span class="literal">false</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">move</span>(<span class="params">event</span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> offset = event.<span class="title function_">getDelta</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">player</span>.<span class="property">x</span> += offset.<span class="property">x</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">player</span>.<span class="property">x</span>&lt;-<span class="number">450</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">player</span>.<span class="property">x</span>=-<span class="number">445</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">player</span>.<span class="property">x</span>&gt;<span class="number">450</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">player</span>.<span class="property">x</span>=<span class="number">445</span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        cc.<span class="property">systemEvent</span>.<span class="title function_">on</span>(cc.<span class="property">SystemEvent</span>.<span class="property">EventType</span>.<span class="property">KEY_DOWN</span>, <span class="variable language_">this</span>.<span class="property">onKeyDown</span>, <span class="variable language_">this</span>)</span><br><span class="line">        cc.<span class="property">systemEvent</span>.<span class="title function_">on</span>(cc.<span class="property">SystemEvent</span>.<span class="property">EventType</span>.<span class="property">KEY_UP</span>, <span class="variable language_">this</span>.<span class="property">onKeyUp</span>, <span class="variable language_">this</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">on</span>(cc.<span class="property">Node</span>.<span class="property">EventType</span>.<span class="property">TOUCH_MOVE</span>, <span class="variable language_">this</span>.<span class="property">move</span>,<span class="variable language_">this</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">initGame</span>()</span><br><span class="line">        <span class="keyword">let</span> node=<span class="keyword">new</span> cc.<span class="title class_">Node</span>()</span><br><span class="line">        node.<span class="property">color</span>=cc.<span class="property">Color</span>.<span class="property">BLACK</span></span><br><span class="line">        <span class="keyword">let</span> label=node.<span class="title function_">addComponent</span>(cc.<span class="property">Label</span>)</span><br><span class="line">        label.<span class="property">string</span>=<span class="string">&quot;调整球位置后\n按下空格(或者点击小球)\n开始消除砖块&quot;</span></span><br><span class="line">        label.<span class="property">fontSize</span>=<span class="number">70</span></span><br><span class="line">        label.<span class="property">lineHeight</span>=<span class="number">70</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">parent</span>.<span class="title function_">addChild</span>(node)</span><br><span class="line">        node.<span class="title function_">setPosition</span>(<span class="number">0</span>,-<span class="number">200</span>)</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            node.<span class="title function_">destroy</span>()</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// start () &#123;&#125;</span></span><br><span class="line">    update (dt) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">Left</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">player</span>.<span class="property">x</span>-= dt*<span class="variable language_">this</span>.<span class="property">xSpeed</span>*<span class="number">100</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">Right</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">player</span>.<span class="property">x</span>+=dt*<span class="variable language_">this</span>.<span class="property">xSpeed</span>*<span class="number">100</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">player</span>.<span class="property">x</span>&lt;-<span class="number">450</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">player</span>.<span class="property">x</span>=-<span class="number">445</span></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">player</span>.<span class="property">x</span>&gt;<span class="number">450</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">player</span>.<span class="property">x</span>=<span class="number">445</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="bricks-3"><figure class="highlight ts"><figcaption><span>挂载在小球上实现碰撞</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;ccclass, property&#125; = cc.<span class="property">_decorator</span>;</span><br><span class="line"><span class="meta">@ccclass</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> <span class="title class_">NewClass</span> <span class="keyword">extends</span> <span class="title class_ inherited__">cc.Component</span> &#123;</span><br><span class="line">    <span class="comment">//通关提示</span></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">SpriteFrame</span>)</span><br><span class="line">    <span class="attr">win</span>:cc.<span class="property">SpriteFrame</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//得分面板</span></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Node</span>)</span><br><span class="line">    <span class="attr">scoreBoard</span>:cc.<span class="property">Node</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//等级面板</span></span><br><span class="line">    <span class="meta">@property</span>(cc.<span class="property">Node</span>)</span><br><span class="line">    <span class="attr">levelBoard</span>:cc.<span class="property">Node</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//重新开始面板</span></span><br><span class="line">    <span class="attr">restart</span>:cc.<span class="property">Node</span>=<span class="literal">null</span>;</span><br><span class="line">    <span class="attr">xSpeed</span>:<span class="built_in">number</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="attr">ySpeed</span>:<span class="built_in">number</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="attr">score</span>:<span class="built_in">number</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="attr">level</span>:<span class="built_in">number</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="attr">gameLevel</span>:<span class="built_in">number</span>=<span class="number">0</span>;</span><br><span class="line">    <span class="attr">isLunch</span>:<span class="built_in">boolean</span>=<span class="literal">false</span>;</span><br><span class="line">    <span class="title function_">judge</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">tempNode</span>:cc.<span class="property">Node</span>=cc.<span class="title function_">find</span>(<span class="string">&quot;Canvas/bg&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;tempNode.<span class="property">children</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(tempNode.<span class="property">children</span>[i].<span class="property">name</span>==<span class="string">&quot;brick&quot;</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">restartGame</span>(<span class="params"></span>)&#123;</span><br><span class="line">        cc.<span class="property">director</span>.<span class="title function_">loadScene</span>(<span class="string">&quot;game&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fire</span>(<span class="params">event</span>)&#123;</span><br><span class="line">        <span class="keyword">switch</span>(event.<span class="property">keyCode</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> cc.<span class="property">macro</span>.<span class="property">KEY</span>.<span class="property">space</span>:</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">isLunch</span>=<span class="literal">true</span></span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">changeLevel</span>()</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">changeLevel</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">score</span>&gt;=<span class="variable language_">this</span>.<span class="property">level</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">level</span>+=<span class="number">10</span>+<span class="variable language_">this</span>.<span class="property">gameLevel</span>*<span class="number">10</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">gameLevel</span>+=<span class="number">1</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">levelBoard</span>.<span class="title function_">getComponent</span>(cc.<span class="property">Label</span>).<span class="property">string</span>=<span class="string">&quot;等级：&quot;</span> + <span class="variable language_">this</span>.<span class="property">gameLevel</span>.<span class="title function_">toString</span>() </span><br><span class="line">            <span class="keyword">switch</span>(<span class="variable language_">this</span>.<span class="property">gameLevel</span>)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">xSpeed</span>=(<span class="variable language_">this</span>.<span class="property">xSpeed</span>&gt;=<span class="number">0</span>)?<span class="number">3</span>:-<span class="number">3</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">ySpeed</span>=(<span class="variable language_">this</span>.<span class="property">ySpeed</span>&gt;=<span class="number">0</span>)?<span class="number">7</span>:-<span class="number">7</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">xSpeed</span>=(<span class="variable language_">this</span>.<span class="property">xSpeed</span>&gt;<span class="number">0</span>)?<span class="number">4</span>:-<span class="number">4</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">ySpeed</span>=(<span class="variable language_">this</span>.<span class="property">ySpeed</span>&gt;<span class="number">0</span>)?<span class="number">9</span>:-<span class="number">9</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">xSpeed</span>=(<span class="variable language_">this</span>.<span class="property">xSpeed</span>&gt;<span class="number">0</span>)?<span class="number">4</span>:-<span class="number">4</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">ySpeed</span>=(<span class="variable language_">this</span>.<span class="property">ySpeed</span>&gt;<span class="number">0</span>)?<span class="number">10</span>:-<span class="number">10</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">xSpeed</span>=(<span class="variable language_">this</span>.<span class="property">xSpeed</span>&gt;<span class="number">0</span>)?<span class="number">5</span>:-<span class="number">5</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">ySpeed</span>=(<span class="variable language_">this</span>.<span class="property">ySpeed</span>&gt;<span class="number">0</span>)?<span class="number">11</span>:-<span class="number">11</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">xSpeed</span>=(<span class="variable language_">this</span>.<span class="property">xSpeed</span>&gt;<span class="number">0</span>)?<span class="number">5</span>:-<span class="number">5</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">ySpeed</span>=(<span class="variable language_">this</span>.<span class="property">ySpeed</span>&gt;<span class="number">0</span>)?<span class="number">13</span>:-<span class="number">13</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">xSpeed</span>=(<span class="variable language_">this</span>.<span class="property">xSpeed</span>&gt;<span class="number">0</span>)?<span class="number">6</span>:-<span class="number">6</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">ySpeed</span>=(<span class="variable language_">this</span>.<span class="property">ySpeed</span>&gt;<span class="number">0</span>)?<span class="number">15</span>:-<span class="number">15</span></span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">xSpeed</span>=(<span class="variable language_">this</span>.<span class="property">xSpeed</span>&gt;<span class="number">0</span>)?<span class="number">6</span>:-<span class="number">6</span></span><br><span class="line">                    <span class="variable language_">this</span>.<span class="property">ySpeed</span>=(<span class="variable language_">this</span>.<span class="property">ySpeed</span>&gt;<span class="number">0</span>)?<span class="number">17</span>:-<span class="number">17</span></span><br><span class="line">                <span class="attr">default</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    onLoad () &#123;</span><br><span class="line">        <span class="keyword">let</span> manager = cc.<span class="property">director</span>.<span class="title function_">getCollisionManager</span>()</span><br><span class="line">        manager.<span class="property">enabled</span>=<span class="literal">true</span></span><br><span class="line">        manager.<span class="property">enabledDebugDraw</span>=<span class="literal">true</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">restart</span>=cc.<span class="title function_">find</span>(<span class="string">&quot;Canvas/restart&quot;</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">restart</span>.<span class="property">active</span>=<span class="literal">false</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">getComponent</span>(cc.<span class="property">AudioSource</span>).<span class="property">preload</span>=<span class="literal">true</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">on</span>(<span class="string">&quot;touchstart&quot;</span>,<span class="function">()=&gt;</span>&#123;<span class="variable language_">this</span>.<span class="property">isLunch</span>=<span class="literal">true</span>;<span class="variable language_">this</span>.<span class="title function_">changeLevel</span>()&#125;,<span class="variable language_">this</span>)</span><br><span class="line">        cc.<span class="property">systemEvent</span>.<span class="title function_">on</span>(cc.<span class="property">SystemEvent</span>.<span class="property">EventType</span>.<span class="property">KEY_DOWN</span>, <span class="variable language_">this</span>.<span class="property">fire</span>, <span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">onCollisionEnter</span>(<span class="params">other,self:cc.PolygonCollider</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(other.<span class="property">tag</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ySpeed</span>=-<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="variable language_">this</span>.<span class="property">ySpeed</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(other.<span class="property">tag</span>==<span class="number">5</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ySpeed</span>=<span class="title class_">Math</span>.<span class="title function_">abs</span>(<span class="variable language_">this</span>.<span class="property">ySpeed</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(other.<span class="property">tag</span>==<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">xSpeed</span>=-<span class="variable language_">this</span>.<span class="property">xSpeed</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(other.<span class="property">tag</span>==<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">xSpeed</span>=-<span class="variable language_">this</span>.<span class="property">xSpeed</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(other.<span class="property">tag</span>==<span class="number">4</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">ySpeed</span>=-<span class="variable language_">this</span>.<span class="property">ySpeed</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">onCollisionExit</span>(<span class="params">other, self</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(other.<span class="property">tag</span>==<span class="number">1</span> || other.<span class="property">tag</span>==<span class="number">2</span> || other.<span class="property">tag</span>==<span class="number">5</span>)&#123;</span><br><span class="line">            other.<span class="property">node</span>.<span class="title function_">destroy</span>()</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">score</span>+=<span class="number">1</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">scoreBoard</span>.<span class="title function_">getComponent</span>(cc.<span class="property">Label</span>).<span class="property">string</span>=<span class="string">&quot;得分：&quot;</span> + <span class="variable language_">this</span>.<span class="property">score</span>.<span class="title function_">toString</span>()</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="title function_">getComponent</span>(cc.<span class="property">AudioSource</span>).<span class="title function_">play</span>()</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">changeLevel</span>()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// start () &#123;&#125;</span></span><br><span class="line">    update (dt) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="title function_">judge</span>())&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">restart</span>.<span class="title function_">getChildByName</span>(<span class="string">&quot;tip&quot;</span>).<span class="title function_">getComponent</span>(cc.<span class="property">Sprite</span>).<span class="property">spriteFrame</span>=<span class="variable language_">this</span>.<span class="property">win</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">restart</span>.<span class="property">active</span>=<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">x</span>+=<span class="variable language_">this</span>.<span class="property">xSpeed</span>*dt*<span class="number">100</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">y</span>+=<span class="variable language_">this</span>.<span class="property">ySpeed</span>*dt*<span class="number">100</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">y</span>&lt;-<span class="number">960</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">restart</span>.<span class="property">active</span>=<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">this</span>.<span class="property">isLunch</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">x</span>=cc.<span class="title function_">find</span>(<span class="string">&quot;Canvas/bg/board&quot;</span>).<span class="property">x</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">x</span>&gt;<span class="number">530</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">x</span>=<span class="number">514</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">x</span>&lt;-<span class="number">530</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">x</span>=-<span class="number">514</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> cocos </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cocos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git</title>
      <link href="/2022/12/03/Git/"/>
      <url>/2022/12/03/Git/</url>
      
        <content type="html"><![CDATA[<h2 id="初识Git"><a href="#初识Git" class="headerlink" title="初识Git"></a>初识Git</h2><p>Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p><p>Git 与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="开发中的实际场景"><a href="#开发中的实际场景" class="headerlink" title="开发中的实际场景"></a>开发中的实际场景</h3><details class="toggle"><summary class="toggle-button" style>开发中的实际场景</summary><div class="toggle-content"><p><strong>场景一：备份</strong><br>小明负责的模块就要完成了，就在即将Release之前的一瞬间，电脑突然蓝屏，硬盘光荣牺牲！几个月来的努力付之东流<br><strong>场景二：代码还原</strong><br>这个项目中需要一个很复杂的功能，老王摸索了一个星期终于有眉目了，可是这被改得面目全非的代码已经回不到从前了。什么地方能买到哆啦A梦的时光机啊？<br><strong>场景三：协同开发</strong><br>小刚和小强先后从文件服务器上下载了同一个文件：Analysis.java。小刚在Analysis.java文件中的第30行声明了一个方法，叫count()，先保存到了文件服务器上；小强在Analysis.java文件中的第50行声明了一个方法，叫sum()，也随后保存到了文件服务器上，于是，count()方法就只存在于小刚的记忆中了<br><strong>场景四：追溯问题代码的编写人和编写时间！</strong><br>老王是另一位项目经理，每次因为项目进度挨骂之后，他都不知道该扣哪个程序员的工资！就拿这次来说吧，有个Bug调试了30多个小时才知道是因为相关属性没有在应用初始化时赋值！可是二胖、王东、刘流和正经牛都不承认是自己干的！</p></div></details><h3 id="版本控制器的方式"><a href="#版本控制器的方式" class="headerlink" title="版本控制器的方式"></a>版本控制器的方式</h3><p><strong>a、集中式版本控制工具</strong><br>集中式版本控制工具，版本库是集中存放在中央服务器的，team里每个人work时从中央服务器下载代码，是必须联网才能工作，局域网或互联网。个人修改后然后提交到中央版本库。<br>举例：SVN和CVS</p><p><strong>b、分布式版本控制工具</strong><br>分布式版本控制系统没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样工作的时候，无需要联网了，因为版本库就在你自己的电脑上。多人协作只需要各自的修改推送给对方，就能互相看到对方的修改了。<br>举例：Git</p><h3 id="SVN"><a href="#SVN" class="headerlink" title="SVN"></a>SVN</h3><p><img src="/2022/12/03/Git/2022-12-03-13-40-22.png" alt="SVN"></p><h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h3><p>Git是分布式的,Git不需要有中心服务器，我们每台电脑拥有的东西都是一样的。我们使用Git并且有个中心服务器，仅仅是为了方便交换大家的修改，但是这个服务器的地位和我们每个人的PC是一样的。我们可以把它当做一个开发者的pc就可以就是为了大家代码容易交流不关机用的。没有它大家一样可以工作，只不过“交换”修改不方便而已。</p><p>git是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。Git是Linus Torvalds 为了帮助管理 Linux 内核开发而开发的<strong>一个开放源码的版本控制软件</strong>。</p><p>同生活中的许多伟大事物一样，Git 诞生于一个极富纷争大举创新的年代。Linux 内核开源项目有着为数众多的参与者。 绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。 到 2002 年，整个项目组开始启用一个专有的分布式版本控制系统 BitKeeper 来管理和维护代码。</p><p>到了 2005 年，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了Linux 内核社区免费使用 BitKeeper 的权力。 这就迫使 Linux 开源社区（特别是 Linux 的缔造者Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统。 他们对新的系统制订了若干目标：<br>速度<br>简单的设计<br>对非线性开发模式的强力支持（允许成千上万个并行开发的分支）<br>完全分布式<br>有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</p><p><img src="/2022/12/03/Git/2022-12-03-13-41-40.png" alt="Git"></p><h3 id="Git工作流程图"><a href="#Git工作流程图" class="headerlink" title="Git工作流程图"></a>Git工作流程图</h3><p><img src="/2022/12/03/Git/2022-12-03-13-43-05.png" alt="Git工作流程图"></p><p>命令如下：</p><ol><li><strong>clone（克隆）</strong>: 从远程仓库中克隆代码到本地仓库</li><li><strong>checkout （检出）</strong>:从本地仓库中检出一个仓库分支然后进行修订</li><li><strong>add（添加）</strong>: 在提交前先将代码提交到暂存区</li><li><strong>commit（提交）</strong>: 提交到本地仓库。本地仓库中保存修改的各个历史版本</li><li><strong>fetch (抓取)</strong> ： 从远程库，抓取到本地仓库，不进行任何的合并动作，一般操作比较少。</li><li><strong>pull (拉取)</strong> ： 从远程库拉到本地库，自动进行合并(merge)，然后放到到工作区，相当于<code>fetch</code>+<code>merge</code></li><li><strong>push（推送）</strong> : 修改完成后，需要和团队成员共享代码时，将代码推送到远程仓库</li></ol><h2 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h2><p><a href="https://git-scm.com/downloads">下载地址</a><br><img src="/2022/12/03/Git/2022-12-03-13-29-53.png" alt="Git下载"><br>安装完成后，在电脑桌面（也可以是其他目录）点击右键，如果能够看到如下两个菜单则说明Git安装成功。<br><img src="/2022/12/03/Git/2022-12-03-13-38-30.png" alt="安装成功"></p><ul><li>Git GUI：Git提供的图形界面工具</li><li>Git Bash：Git提供的命令行工具</li></ul><h2 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h2><div class="note info modern"><p>当安装Git后首先要做的事情是设置用户名称和email地址。这是非常重要的，因为每次Git提交都会使用该用户信息</p></div><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><ol><li>打开Git Bash</li><li>设置用户信息</li></ol><figure class="highlight bash"><figcaption><span>设置全局【用户名】/【邮箱】配置</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;XXX&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;XXX&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>取消全局【用户名】/【邮箱】配置</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> user.name</span><br><span class="line">git config --global --<span class="built_in">unset</span> user.email</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>设置局部【用户名】/【邮箱】配置</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name <span class="string">&quot;XXX&quot;</span></span><br><span class="line">git config user.email <span class="string">&quot;XXX&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>查看配置信息</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure><h3 id="为常用指令配置别名（可选）"><a href="#为常用指令配置别名（可选）" class="headerlink" title="为常用指令配置别名（可选）"></a>为常用指令配置别名（可选）</h3><p>有些常用的指令参数非常多，每次都要输入好多参数，我们可以使用别名。</p><ol><li><p>打开用户目录，创建<code>.bashrc</code>文件</p><figure class="highlight bash"><figcaption><span>部分windows系统不允许用户创建点号开头的文件可以用命令执行</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li><li><p>在<code>.bashrc</code>文件中输入如下内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用于输出git提交日志</span></span><br><span class="line"><span class="built_in">alias</span> git-log=<span class="string">&#x27;git log --pretty=oneline --all --graph --abbrev-commit&#x27;</span></span><br><span class="line"><span class="comment">#用于输出当前目录所有文件及基本信息</span></span><br><span class="line"><span class="built_in">alias</span> ll=<span class="string">&#x27;ls -al&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>打开gitBash，执行<code>source ~/.bashrc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure></li></ol><h2 id="Git使用"><a href="#Git使用" class="headerlink" title="Git使用"></a>Git使用</h2><h3 id="创建本地仓库"><a href="#创建本地仓库" class="headerlink" title="创建本地仓库"></a>创建本地仓库</h3><p>要使用Git对我们的代码进行版本控制，首先需要获得本地仓库</p><ol><li>在电脑的任意位置创建一个空目录（例如test）作为我们的本地Git仓库</li><li>进入这个目录中，点击右键打开Git bash窗口</li><li>执行命令git init</li><li>如果创建成功后可在文件夹下看到<strong>隐藏的.git目录</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p><img src="/2022/12/03/Git/2022-12-03-14-15-23.png" alt="git init"></p><h3 id="基础操作指令"><a href="#基础操作指令" class="headerlink" title="基础操作指令"></a>基础操作指令</h3><p>Git工作目录下对于文件的<strong>修改</strong>(增加、删除、更新)会存在几个状态，这些<strong>修改</strong>的状态会随着我们执行Git的命令而发生变化。</p><p><img src="/2022/12/03/Git/2022-12-03-14-17-31.png" alt="基础操作指令"></p><ol><li>git add (工作区 —&gt; 暂存区)</li><li>git commit (暂存区 —&gt; 本地仓库)</li></ol><h4 id="查看修改的状态（status）"><a href="#查看修改的状态（status）" class="headerlink" title="查看修改的状态（status）"></a>查看修改的状态（status）</h4><ul><li>作用：查看的修改的状态（暂存区、工作区）</li><li>命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure></li></ul><h4 id="添加工作区到暂存区-add"><a href="#添加工作区到暂存区-add" class="headerlink" title="添加工作区到暂存区(add)"></a>添加工作区到暂存区(add)</h4><ul><li>作用：添加工作区一个或多个文件的修改到暂存区</li><li>命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add 单个文件名|通配符</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>将所有修改加入暂存区</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></li></ul><h4 id="提交暂存区到本地仓库-commit"><a href="#提交暂存区到本地仓库-commit" class="headerlink" title="提交暂存区到本地仓库(commit)"></a>提交暂存区到本地仓库(commit)</h4><ul><li>作用：提交暂存区内容到本地仓库的当前分支</li><li>命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&#x27;注释内容&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="查看提交日志-log"><a href="#查看提交日志-log" class="headerlink" title="查看提交日志(log)"></a>查看提交日志(log)</h4><div class="note info modern"><p>如果<a href="#为常用指令配置别名（可选）">配置的别名</a><code>git-log</code>包含了这些参数，那么后续可以直接使用指令<code>git-log</code></p></div><ul><li>作用：查看提交记录</li><li>命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> [option]</span><br></pre></td></tr></table></figure></li><li>options<ul><li>—all 显示所有分支</li><li>—pretty=oneline 将提交信息显示为一行</li><li>—abbrev-commit 使得输出的commitId更简短</li><li>—graph 以图的形式显示</li></ul></li></ul><h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><ul><li>作用：版本切换</li><li>命令：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard commitID</span><br><span class="line"><span class="comment">#commitID 可以使用`git-log`或`git log`指令查看</span></span><br></pre></td></tr></table></figure></li><li>如何查看已经删除的记录？<ul><li><code>git reflog</code></li><li>这个指令可以看到已经删除的提交记录</li></ul></li></ul><h4 id="添加文件至忽略列表"><a href="#添加文件至忽略列表" class="headerlink" title="添加文件至忽略列表"></a>添加文件至忽略列表</h4><p>一般我们总会有些文件无需纳入Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以在工作目录中创建一个名为 <code>.gitignore</code> 的文件（文件名称固定），列出要忽略的文件模式。</p><figure class="highlight sh"><figcaption><span>示例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#no .a files</span></span><br><span class="line">*.a</span><br><span class="line"><span class="comment">#but do track lib.a, even though you&#x27;re ignoring .a files above</span></span><br><span class="line">!lib.a</span><br><span class="line"><span class="comment">#only ignore the TODO file in the current directory, not subdir/TODO</span></span><br><span class="line">/TODO</span><br><span class="line"><span class="comment">#ignore all files in the build/ directory</span></span><br><span class="line">build/</span><br><span class="line"><span class="comment">#ignore doc/notes.txt, but not doc/server/arch.txt</span></span><br><span class="line">doc/*.txt</span><br><span class="line"><span class="comment">#ignore all .pdf files in the doc/ directory</span></span><br><span class="line">doc/**/*.pdf</span><br></pre></td></tr></table></figure><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的Bug修改、开发新的功能，以免影响开发主线。</p><h4 id="查看本地分支"><a href="#查看本地分支" class="headerlink" title="查看本地分支"></a>查看本地分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure><h4 id="创建本地分支"><a href="#创建本地分支" class="headerlink" title="创建本地分支"></a>创建本地分支</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch 分支名</span><br></pre></td></tr></table></figure><h4 id="切换分支-checkout"><a href="#切换分支-checkout" class="headerlink" title="切换分支(checkout)"></a>切换分支(checkout)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout 分支名</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>可以直接切换到一个不存在的分支（创建并切换）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b 分支名</span><br></pre></td></tr></table></figure><h4 id="合并分支-merge"><a href="#合并分支-merge" class="headerlink" title="合并分支(merge)"></a>合并分支(merge)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge 分支名称</span><br></pre></td></tr></table></figure><h4 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h4><p><strong>不能删除当前分支，只能删除其他分支</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d b1 <span class="comment">#删除分支时，需要做各种检查</span></span><br><span class="line">git branch -D b1 <span class="comment">#不做任何检查，强制删除</span></span><br></pre></td></tr></table></figure><h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><p>当两个分支上对文件的修改可能会存在冲突，例如同时修改了同一个文件的同一行，这时就需要手动解决冲突，解决冲突步骤如下：</p><ol><li>处理文件中冲突的地方</li><li>将解决完冲突的文件加入暂存区(add)</li><li>提交到仓库(commit)</li></ol><h4 id="开发中分支使用原则与流程"><a href="#开发中分支使用原则与流程" class="headerlink" title="开发中分支使用原则与流程"></a>开发中分支使用原则与流程</h4><p>几乎所有的版本控制系统都以某种形式支持分支。 使用分支意味着你可以把你的工作从开发主线上分离开来进行重大的Bug修改、开发新的功能，以免影响开发主线。</p><p>在开发中，一般有如下分支使用原则与流程：</p><ul><li>master （生产） 分支：线上分支，主分支，中小规模项目作为线上运行的应用对应的分支；</li><li>develop（开发）分支：是从master创建的分支，一般作为开发部门的主要开发分支，如果没有其他并行开发不同期上线要求，都可以在此版本进行开发，阶段开发完成后，需要是合并到master分支，准备上线。</li><li>feature/xxxx分支：从develop创建的分支，一般是同期并行开发，但不同期上线时创建的分支，分支上的研发任务完成后合并到develop分支，之后该分支可以删除。</li><li>hotfix/xxxx分支：从master派生的分支，一般作为线上bug修复使用，修复完成后需要合并到master、test、develop分支。</li><li>还有一些其他分支，在此不再详述，例如test分支（用于代码测试）、pre分支（预上线分支）等<br>等。<br><img src="/2022/12/03/Git/2022-12-03-14-51-08.png" alt="开发中分支使用原则与流程"></li></ul><h2 id="Git远程仓库"><a href="#Git远程仓库" class="headerlink" title="Git远程仓库"></a>Git远程仓库</h2><h3 id="常用的托管服务-远程仓库"><a href="#常用的托管服务-远程仓库" class="headerlink" title="常用的托管服务[远程仓库]"></a>常用的托管服务[远程仓库]</h3><p>前面我们已经知道了Git中存在两种类型的仓库，即本地仓库和远程仓库。那么我们如何搭建Git远程仓库呢？我们可以借助互联网上提供的一些代码托管服务来实现，其中比较常用的有GitHub、码云、GitLab等。</p><ul><li>GitHub（ 地址：<a href="https://github.com/">https://github.com/</a> ）是一个面向开源及私有软件项目的托管平台，因为只支持Git 作为唯一的版本库格式进行托管，故名GitHub</li><li>Gitee（地址： <a href="https://gitee.com/">https://gitee.com/</a> ）是国内的一个代码托管平台，由于服务器在国内，所以相比于 GitHub，码云速度会更快</li><li>GitLab （地址： <a href="https://about.gitlab.com/">https://about.gitlab.com/</a> ）是一个用于仓库管理系统的开源项目，使用Git作为代码管理工具，并在此基础上搭建起来的web服务，一般用于在企业、学校等内部网络搭建git私服。</li></ul><h3 id="gitee"><a href="#gitee" class="headerlink" title="gitee"></a>gitee</h3><h4 id="注册gitee"><a href="#注册gitee" class="headerlink" title="注册gitee"></a>注册gitee</h4><p>要想使用gitee的相关服务，需要<a href="https://gitee.com/signup">注册账号</a><br><img src="/2022/12/03/Git/2022-12-03-16-44-29.png" alt="注册gitee"></p><h4 id="创建远程仓库"><a href="#创建远程仓库" class="headerlink" title="创建远程仓库"></a>创建远程仓库</h4><p><img src="/2022/12/03/Git/2022-12-03-16-56-31.png" alt="创建远程仓库"></p><h4 id="配置SSH公钥"><a href="#配置SSH公钥" class="headerlink" title="配置SSH公钥"></a>配置SSH公钥</h4><p><img src="/2022/12/03/Git/2022-12-03-16-54-46.png" alt="配置SSH公钥"></p><figure class="highlight bash"><figcaption><span>生成SSH公钥（不断回车）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>获取公钥</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><h3 id="操作远程仓库"><a href="#操作远程仓库" class="headerlink" title="操作远程仓库"></a>操作远程仓库</h3><h4 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h4><p><strong>此操作是先初始化本地库，然后与已创建的远程库进行对接。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;远端名称&gt; &lt;仓库路径&gt;</span><br></pre></td></tr></table></figure><ul><li>远端名称，默认是<strong>origin</strong>，取决于远端服务器设置</li><li>仓库路径，从远端服务器获取此URL(一般用SSH的仓库地址)</li></ul><h4 id="查看远程仓库"><a href="#查看远程仓库" class="headerlink" title="查看远程仓库"></a>查看远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote <span class="built_in">rm</span> name  <span class="comment"># 删除远程仓库</span></span><br><span class="line">git remote rename old_name new_name  <span class="comment"># 修改仓库名</span></span><br></pre></td></tr></table></figure><h4 id="推送到远程仓库"><a href="#推送到远程仓库" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push [-f] [--set-upstream] [远端名称 [本地分支名][:远端分支名] ]</span><br></pre></td></tr></table></figure><ul><li>如果远程分支名和本地分支名称相同，则可以只写本地分支<ul><li><code>git push origin master</code></li></ul></li><li><code>-f</code> 表示强制覆盖</li><li><code>--set-upstream</code> 推送到远端的同时并且建立起和远端分支的关联关系。<ul><li><code>git push --set-upstream origin master</code></li></ul></li><li>如果<strong>当前分支已经和远端分支关联</strong>，则可以省略分支名和远端名。<ul><li><code>git push</code> 将master分支推送到已关联的远端分支。</li></ul></li></ul><h4 id="本地分支与远程分支的关联关系"><a href="#本地分支与远程分支的关联关系" class="headerlink" title="本地分支与远程分支的关联关系"></a>本地分支与远程分支的关联关系</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure><h4 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h4><p>如果已经有一个远端仓库，我们可以直接clone到本地。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;仓库路径&gt; [本地目录]</span><br></pre></td></tr></table></figure><ul><li>本地目录可以省略，会自动生成一个目录</li></ul><h4 id="从远程仓库中抓取和拉取"><a href="#从远程仓库中抓取和拉取" class="headerlink" title="从远程仓库中抓取和拉取"></a>从远程仓库中抓取和拉取</h4><p>远程分支和本地的分支一样，我们可以进行merge操作，只是需要先把远端仓库里的更新都下载到本地，再进行操作。</p><p>抓取命令：</p><ul><li>抓取指令就是将仓库里的更新都抓取到本地，不会进行合并</li><li>如果不指定远端名称和分支名，则抓取所有分支。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch [remote name] [branch name]</span><br></pre></td></tr></table></figure><p>拉取命令：</p><ul><li>拉取指令就是将远端仓库的修改拉到本地并自动进行合并，等同于<strong>fetch+merge</strong></li><li>如果不指定远端名称和分支名，则抓取所有并更新当前分支。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull [remote name] [branch name]</span><br></pre></td></tr></table></figure><h4 id="解决合并冲突"><a href="#解决合并冲突" class="headerlink" title="解决合并冲突"></a>解决合并冲突</h4><p>在一段时间，A、B用户修改了同一个文件，且修改了同一行位置的代码，此时会发生合并冲突。<br>A用户在本地修改代码后优先推送到远程仓库，此时B用户在本地修订代码，提交到本地仓库后，也需要推送到远程仓库，此时B用户晚于A用户，故<strong>需要先拉取远程仓库的提交，经过合并后才能推送到远端分支</strong>,如下图所示。</p><p><img src="/2022/12/03/Git/2022-12-03-15-19-38.png" alt="解决合并冲突"></p><p>在B用户拉取代码时，因为A、B用户同一段时间修改了同一个文件的相同位置代码，故会发生合并冲突。</p><p><strong>远程分支也是分支，所以合并时冲突的解决方式也和解决本地分支冲突相同相同。</strong></p><h2 id="在Idea中使用Git"><a href="#在Idea中使用Git" class="headerlink" title="在Idea中使用Git"></a>在Idea中使用Git</h2><h3 id="在Idea中配置Git"><a href="#在Idea中配置Git" class="headerlink" title="在Idea中配置Git"></a>在Idea中配置Git</h3><p>安装好IntelliJ IDEA后，如果Git安装在默认路径下，那么idea会自动找到git的位置，如果更改了Git的安装位置则需要手动配置下Git的路径。选择<code>File→Settings</code>打开设置窗口(快捷键：<code>Ctrl+Alt+S</code>)，找到<code>Version Control</code>下的git选项：<br><img src="/2022/12/03/Git/2022-12-03-15-30-49.png" alt="设置"><br>点击Test按钮,现在执行成功，配置完成</p><h3 id="在Idea中操作Git"><a href="#在Idea中操作Git" class="headerlink" title="在Idea中操作Git"></a>在Idea中操作Git</h3><p>场景：本地已经有一个项目，但是并不是git项目，我们需要将这个放到码云的仓库里，和其他开发人员继续一起协作开发。</p><h4 id="创建项目的远程仓库"><a href="#创建项目的远程仓库" class="headerlink" title="创建项目的远程仓库"></a>创建项目的远程仓库</h4><h4 id="初始化本地仓库"><a href="#初始化本地仓库" class="headerlink" title="初始化本地仓库"></a>初始化本地仓库</h4><p><img src="/2022/12/03/Git/2022-12-03-15-38-34.png" alt="初始化本地仓库"></p><p>选择git仓库目录，默认是当前项目的目录</p><h4 id="设置远程仓库"><a href="#设置远程仓库" class="headerlink" title="设置远程仓库"></a>设置远程仓库</h4><p><img src="/2022/12/03/Git/2022-12-03-15-42-12.png" alt="设置远程仓库"><br>输入远程仓库地址</p><h4 id="提交到本地仓库"><a href="#提交到本地仓库" class="headerlink" title="提交到本地仓库"></a>提交到本地仓库</h4><p><img src="/2022/12/03/Git/2022-12-03-15-54-12.png" alt="提交到本地仓库"></p><h4 id="推送到远程仓库-1"><a href="#推送到远程仓库-1" class="headerlink" title="推送到远程仓库"></a>推送到远程仓库</h4><p><img src="/2022/12/03/Git/2022-12-03-15-55-17.png" alt="推送到远程仓库"></p><h4 id="克隆远程仓库到本地"><a href="#克隆远程仓库到本地" class="headerlink" title="克隆远程仓库到本地"></a>克隆远程仓库到本地</h4><p><img src="/2022/12/03/Git/2022-12-03-15-58-52.png" alt="克隆远程仓库到本地"></p><h4 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h4><ul><li><p>最常规的方式<br><img src="/2022/12/03/Git/2022-12-03-16-01-52.png" alt="最常规的方式"></p></li><li><p>最强大的方式<br><img src="/2022/12/03/Git/2022-12-03-16-02-09.png" alt="最强大的方式"></p></li></ul><div class="note info modern"><ul><li>在IDEA的终端中可使用git命令来完成以上所有功能</li><li>切换分支前先提交本地的修改</li><li>代码及时提交，提交过了就不会丢</li></ul></div>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#</title>
      <link href="/2022/11/25/CSharp/"/>
      <url>/2022/11/25/CSharp/</url>
      
        <content type="html"><![CDATA[<div class="note info flat"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><div class="note info flat"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">region</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endregion</span></span></span><br></pre></td></tr></table></figure><p>可以使代码折叠，仍会执行</p></div><div class="note default flat"><p><a href="#程序调试">Visual Studio 2019程序调试</a></p></div><h2 id="C-开发入门"><a href="#C-开发入门" class="headerlink" title="C#开发入门"></a>C#开发入门</h2><h3 id="NET-基础知识"><a href="#NET-基础知识" class="headerlink" title=".NET 基础知识"></a>.NET 基础知识</h3><h4 id="NET-Framework"><a href="#NET-Framework" class="headerlink" title=".NET Framework"></a>.NET Framework</h4><blockquote class="pullquote right"><p><img src="/2022/11/25/CSharp/2022-12-02-19-41-49.png" alt=".NET Framework体系结构"></p></blockquote><p>.NET Framework 是微软公司为开发应用程序而创建的一个<strong>全新的、集成的、面向对象的</strong>开发平台。使用.NET Framework 可以创建桌面应用程序、Web应用程序和其他各种类型的应用程序。</p><p>.NET Framework 位于操作系统和应用程序之间，负责管理在.NET Framework 上运行的各种应用程序。也就是说 <strong>.NET应用程序不依赖于操作系统，只依赖于.NET Framework</strong>。<br>.NET Framework核心部分：</p><ul><li><strong>公共语言运行库</strong>(Common Language Runtime, CLR): 它位于.NET Framework的最底层，主要负责管理.NET应用程序的编译、运行以及一些基础服务，它为.NET应用程序提供了一个虚拟运行环境。同时CLR 还负责为应用程序提供内存分配、线程管理以及垃圾回收等服务，并且负责对代码进行安全检查，以保证代码正常运行。</li><li><strong>.NET Framework的基础类库</strong>(Base Class Library, BCL): 它是微软公司提出的一组标准库，如集合类，可以提供给.NET Framework所有语言使用。当安装.NET Framework时，所有的基础类库被部署到全局程序集缓存(Global Assembly Cache, GAC)，所以不需要再工程中引用任何基础类库，它们会被自动引用。</li></ul><p>除此之外，.NET Framework还包括 Window 窗体、ASP.NET、ADD.NET 等模块，这些模块用于开发各种各样的应用程序，如桌面应用程序，网络应用程序。企业级应用程序。</p><h4 id="C-语言"><a href="#C-语言" class="headerlink" title="C#语言"></a>C#语言</h4><p>C#是微软公司在2000年6月发布的一种全新的、简单的、安全的、面向对象的程序设计语言，它专门用于开发 .NET 应用，从根本上保证了 C＃与 .NET Framework 的完美结合。 C#不仅吸收了 C++、 Visual Basic 、 Delphi , Java 等语言的优点，体现了当今最新的字设计技术的功能和精华，而且继承了 C 语言的语法风格、 C++ 的面向对象特性。 C#的主要特点如下。</p><ol><li><p><strong>面向对象</strong><br>C# 是由 C 和 C++衍生出来的面向对象的编程语言，因此它具有面向对象的一切特性（封装、继承和多态）。C# 在继承 C 语言和 C++强大功能的同时去掉了一些它们的复杂特性（例如没有宏和模板，不允许多重继承）正是由于 C# 面向对象的卓越设计，使它成为构建各类组件的理想之选。</p></li><li><p><strong>语言简洁</strong><br>在默认的情况下，C#的代码在 .NET Framework 提供的“可操纵”环境下运行，使得程序不能直接访问内存地址空间，因此不再提供对指针类型的支持，从而使 C# 程序更加健壮。另外，C#不再使用 C++中的操作符（例如<code>::</code> <code>-&gt;</code> <code>.,</code>)，它只支持一个操作符<code>.</code>，对于程序员来说，现在需要理解的仅是名字的嵌套而已。</p></li><li><p><strong>与 Web 的紧密结合</strong><br>.NET 中新的应用程序开发模型意味着越来越多的解决方案需要与 Web 标准相统一，例如超文本标记语言（ Hypertext Markup Language , HTML ）。现有的一些开发工具不能与 Web 紧密结合，简易对象访问协议（ Simple Object Access Protocol , SOAP ）的使用使 C#克服了这一缺陷，大规模保层次的分布式开发从此<br>成为可能。<br>由于有了 Web 服务框架的帮助，对程序员来说，网络服务看起来就像是 C# 的本地对象。程序员们能沙利用他们已有的面向对象的知识与技巧开发 Web 服务，仅需要便用简单的 C#语言结构， C# 组件就能够万便地被 Web 服务所使用，并允许它们通过 Internet 被运行在任何操作系统上的任何语言所调用。例如， XMl 已经成为网络中数据结构传递的标准，为了提高效率， C# 直接将 XML 数据映射成为结构，这样就可以伟众地处理各种数据。</p></li></ol><h3 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h3><p>Visual Studio 2019</p><p>……</p><h3 id="编写C-程序"><a href="#编写C-程序" class="headerlink" title="编写C#程序"></a>编写C#程序</h3><ol><li><p><strong>新建项目</strong><br>新建C#项目有两种：①<strong>控制台应用程序</strong>(一个用于创建可在Windows、Linux、和macOS上的.NET Core运行的命令行应用程序的项目)②<strong>控制台应用(.NET Framework)</strong>(用于创建命令行应用程序的项目)<br><img src="/2022/11/25/CSharp/2023-01-06-15-22-50.png" alt="新建c#项目"></p><div class="note warning modern"><p>需要注意的是，<strong>控制台应用(.NET Framework)</strong>项目程序中一般需要添加<code>Console.ReadKey();</code>，用于暂停程序，而<strong>控制台应用程序</strong>项目不添加也能看到调程序试信息。</p></div></li><li><p><strong>编写程序代码</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h3><p><img src="/2022/11/25/CSharp/2022-12-02-20-51-01.png" alt="运行原理"></p><ul><li>程序在运行过程分为两个时期，分别是编译期和运行期。</li><li><strong>编译期</strong>：CLR对C#代码进行<strong>第一次编译</strong>，将编写的代码编译成<code>.dll</code>文件或<code>.exe</code>文件。此时代码被编译为中间语言</li><li><strong>运行期</strong>：CLR会针对目前特定的硬件环境使用<strong>即时编译</strong>（JIT）,也就是将中间语言编译成为本机代码并执行。在运行期，CLR把将编译过后的代码放入一个<strong>缓冲区</strong>中。下次使用相同的代码时，就直接从缓冲区调用。也就是说<strong>相同代码只编译一次</strong>，提高了程序运行的速度。</li></ul><h2 id="C-编程基础"><a href="#C-编程基础" class="headerlink" title="C# 编程基础"></a>C# 编程基础</h2><h3 id="C-基本语法"><a href="#C-基本语法" class="headerlink" title="C# 基本语法"></a>C# 基本语法</h3><h4 id="C-代码基本格式"><a href="#C-代码基本格式" class="headerlink" title="C#代码基本格式"></a>C#代码基本格式</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] <span class="keyword">class</span> 类名&#123;</span><br><span class="line">    程序代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>每行的最后都必须用分号（英文格式）<code>;</code>结束。</li><li>C# 严格区分大小写。</li><li>为了便于阅读，通常使用缩进格式，但这不是必须的。</li></ol><h4 id="C-中的注释"><a href="#C-中的注释" class="headerlink" title="C#中的注释"></a>C#中的注释</h4><ol><li><strong>单行注释</strong> <code>//</code></li><li><strong>多行注释</strong> 用<code>/*</code>开头，以<code>*/</code>结尾</li><li><strong>文档注释</strong></li></ol><h5 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h5><p>文档注释用于对类或方法进行说明和描述。在类或方法前连续输入3个<code>/</code>，就会自动生成对应的文档注释，需要手动填写类或方法的描述信息，来完成文档注释。<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Add</span>()</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>上述代码中的<code>&lt;summary&gt;</code>标签用于对共有类型的类、方法、属性或字段进行注释。其他常用的文档注释标签如下：</p><div class="table-container"><table><thead><tr><th>标签</th><th>表示含义</th></tr></thead><tbody><tr><td><code>&lt;param&gt;</code></td><td>描述方法或构造函数的参数</td></tr><tr><td><code>&lt;include&gt;</code></td><td>包括来自外部文件的XML</td></tr><tr><td><code>&lt;returns&gt;</code></td><td>描述方法的返回值</td></tr><tr><td><code>&lt;value&gt;</code></td><td>描述属性</td></tr><tr><td><code>&lt;example&gt;</code></td><td>表示所含时示例</td></tr><tr><td><code>&lt;exception&gt;</code></td><td>标识方法可能引发异常</td></tr></tbody></table></div><h4 id="C-中的标识符"><a href="#C-中的标识符" class="headerlink" title="C#中的标识符"></a>C#中的标识符</h4><ul><li>标识符可以由<strong>任意顺序的大小写字母、数字、下划线(_)和@符号</strong>组成</li><li>不能以数字开头</li><li>如果包含@，那么@必须放在首位</li><li>不能是C#中的关键字</li></ul><p><strong>建议遵循的规范</strong>。</p><ul><li>类名、方法名、属性名：<strong>大驼峰命名法</strong>（也叫帕斯卡(Pascal)命名法）</li><li>字段名、变量名：<strong>小驼峰命名法</strong></li><li>常量名所有字母大写，单词之间下划线连接</li><li>尽量使用有意义的英文单词定义标识符</li></ul><div class="note info modern"><p>在C#中，标识符的组成部分也可以是汉字或中文</p></div><h4 id="C-中的关键字"><a href="#C-中的关键字" class="headerlink" title="C#中的关键字"></a>C#中的关键字</h4><p>也称作保留字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">abstract  do        in        protected   true</span><br><span class="line">as        double    int       public      try</span><br><span class="line">base      else      interface readonly    typeof</span><br><span class="line">bool      enum      internal  ref         uint</span><br><span class="line">break     event     is        return      ulong</span><br><span class="line">byte      explicit  lock      sbyte       unchecked</span><br><span class="line">case      extern    long      sealed      unsafe</span><br><span class="line">catch     false     namespace short       ushort</span><br><span class="line">char      finally   new       sizeof      using</span><br><span class="line">checked   fixed     null      stackalloc  virtual</span><br><span class="line">class     float     object    static      void</span><br><span class="line">const     for       operator  string      volatile</span><br><span class="line">continue  foreach   out       struct      while</span><br><span class="line">decimal   goto      override  switch</span><br><span class="line">default   if        params    this</span><br><span class="line">delegate  implicit  private   throw</span><br></pre></td></tr></table></figure><ul><li><strong>所有的关键字都是小写</strong></li><li><strong>程序中的标识符不能以关键字命名</strong></li></ul><h4 id="C-中的常量"><a href="#C-中的常量" class="headerlink" title="C#中的常量"></a>C#中的常量</h4><h5 id="整型常量"><a href="#整型常量" class="headerlink" title="整型常量"></a>整型常量</h5><p>整型常量：整型常量是整数类型的数据，有二进制、八进制、十进制和十六进制4种表示形式。</p><ol><li>二进制：由数字0 和1 组成的数字序列。如01000000、10000001。</li><li>八进制：以<code>0</code>开头并且其后由0 ~7之间（包括0和7）的整数组成的数字序列，如：0342。</li><li>十进制：数字0~9之间（包括0和9）的整数组成的数字序列。如：198。</li><li>十六进制：以<code>0x</code>或者<code>0X</code>开头并且其后由0~9、A~F(包括0和9、A和F)组成的数字序列，如0x25AF。</li></ol><h5 id="浮点数常量"><a href="#浮点数常量" class="headerlink" title="浮点数常量"></a>浮点数常量</h5><p>就是在数学中用到的小数。</p><ul><li>float单精度浮点数：后面以<code>F</code>或<code>f</code>结尾。</li><li>double双精度浮点数：后面以以<code>D</code>或<code>d</code>结尾。</li><li><strong>当在使用浮点数时也可以在结尾处不加任何的后缀，此时虚拟机会默认为double双精度浮点数</strong>。</li></ul><h5 id="字符常量"><a href="#字符常量" class="headerlink" title="字符常量"></a>字符常量</h5><p>用于表示一个字符，一个字符常量要用一对英文半角格式的<strong>单引号</strong>（’ ‘）引起来，他可以是英文字母、数字、标点符号以及由转义序列来表示的特殊字符(\u00000空格字符)。</p><h5 id="字符串常量"><a href="#字符串常量" class="headerlink" title="字符串常量"></a>字符串常量</h5><p>用于表示一串连续的字符，一个字符串常量要用一对英文半角格式的<strong>双引号</strong>（“ ”）引起来。</p><h5 id="布尔常量"><a href="#布尔常量" class="headerlink" title="布尔常量"></a>布尔常量</h5><ul><li><code>true</code></li><li><code>false</code></li></ul><h5 id="null常量"><a href="#null常量" class="headerlink" title="null常量"></a>null常量</h5><p>null 常量只有一个null，表示对象的引用为空。</p><div class="note info flat"><p>特殊字符——反斜杠(<code>\</code>)<br>在字符常量中，反斜杠(<code>\</code>)是一个特殊的字符，被称为<strong>转义字符</strong>，作用是<strong>用来转义后面的一个字符</strong>。</p><div class="table-container"><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td><code>\r</code></td><td>回车</td></tr><tr><td><code>\n</code></td><td>换行</td></tr><tr><td><code>\t</code></td><td>制表符 相当于【Tab】键</td></tr><tr><td><code>\b</code></td><td>退格符号，相当于【Backspace】键</td></tr><tr><td><code>\&#39;</code></td><td>转义单引号</td></tr><tr><td><code>\&quot;</code></td><td>转义双引号</td></tr><tr><td><code>\\</code></td><td>转义反斜杠</td></tr></tbody></table></div></div><div class="note info flat"><p><strong>十进制转二进制</strong><br>就是用<strong>短除法</strong>除以2取余数的过程。把要转换的数，除以2，得到商和余数，将商继续除以2，直到商为0。最后所有余数从下往上排列得到二进制数。</p></div><div class="note info flat"><p><strong>二进制转十进制</strong><br>从右往左用二进制位上的每个数去乘以2的对应次方，右边第一位乘以2的0次方，最后相加。</p></div><div class="note info flat"><p><strong>二进制转八进制</strong><br>从右往左三位三位看，最后结果以<code>0</code>开头<br><strong>二进制转十六进制</strong><br>从右往左四位四位看，最后结果以<code>0x</code>或<code>0X</code>开头</p></div><h3 id="C-中的变量"><a href="#C-中的变量" class="headerlink" title="C#中的变量"></a>C#中的变量</h3><h4 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h4><p>变量实际上就是一个临时存放数据的地方。</p><h4 id="变量的数据类型"><a href="#变量的数据类型" class="headerlink" title="变量的数据类型"></a>变量的数据类型</h4><p><strong>C#是一门强类型编程语言</strong>，对变量的数据类型具有严格的限定。<br>在C#中，变量的数据类型分为两大类，<strong>值类型</strong>和<strong>引用类型</strong>。<br><img src="/2022/11/25/CSharp/2022-12-03-00-06-48.png" alt="变量的数据类型"><br><img src="/2022/11/25/CSharp/2022-12-03-00-10-37.png" alt="浮点型取整范围"></p><h4 id="变量的类型转换"><a href="#变量的类型转换" class="headerlink" title="变量的类型转换"></a>变量的类型转换</h4><ol><li>自动类型转换</li><li>强制类型转换</li></ol><p><img src="/2022/11/25/CSharp/2022-12-03-00-12-41.png" alt="变量的类型转换"></p><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4><ul><li>变量需要在他的作用范围内才可以被使用，这个作用范围称为变量的作用域。</li><li>程序中，变量一定会被定义在某一对大括号中，该大括号所包含的代码区域便是这个变量的作用域。</li></ul><h3 id="C-中的运算符"><a href="#C-中的运算符" class="headerlink" title="C#中的运算符"></a>C#中的运算符</h3><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>+</code></td><td>正号 / 加</td></tr><tr><td><code>-</code></td><td>负号 / 减</td></tr><tr><td><code>*</code></td><td>乘</td></tr><tr><td><code>/</code></td><td>除</td></tr><tr><td><code>%</code></td><td>取模</td></tr><tr><td><code>++</code></td><td>自增</td></tr><tr><td><code>--</code></td><td>自减</td></tr></tbody></table></div><ul><li>区分<code>i++</code>与<code>++i</code>。</li><li>除法运算，当除数与被除数都为整数时，结果为整数；有小数，得到结果也会是小数。</li><li>取模运算，运算结果的正负取决于被模数(<code>%</code>左边的数)符号，与模数的符号无关。</li></ul><h4 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h4><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>=</code></td><td>赋值</td></tr><tr><td><code>+=</code></td><td>加等于</td></tr><tr><td><code>-=</code></td><td>减等于</td></tr><tr><td><code>*=</code></td><td>乘等于</td></tr><tr><td><code>/=</code></td><td>除等于</td></tr><tr><td><code>%=</code></td><td>模等于</td></tr></tbody></table></div><p>在C#中可以通过一条赋值语句对多个变量进行赋值。<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> x, y, z;</span><br><span class="line">x = y = z = <span class="number">5</span>;</span><br></pre></td></tr></table></figure></p><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>==</code></td><td>等于</td></tr><tr><td><code>!=</code></td><td>不等于</td></tr><tr><td><code>&lt;</code></td><td>小于</td></tr><tr><td><code>&gt;</code></td><td>大于</td></tr><tr><td><code>&lt;=</code></td><td>小于等于</td></tr><tr><td><code>&gt;=</code></td><td>大于等于</td></tr></tbody></table></div><div class="note warning modern"><p>在使用比较运算符时，<code>==</code>容易误写成<code>=</code></p></div><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>与</td></tr><tr><td>&#124;</td><td>或</td></tr><tr><td><code>^</code></td><td>异或</td></tr><tr><td><code>!</code></td><td>非</td></tr><tr><td><code>&amp;&amp;</code></td><td>短路与</td></tr><tr><td>&#124;&#124;</td><td>短路或</td></tr></tbody></table></div><h4 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h4><p><strong>是针对二进制数的每一位进行运算的符号，他是专门针对数字0和1进行操作的。</strong></p><div class="table-container"><table><thead><tr><th>运算符</th><th>描述</th><th>运算</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>按位与</td><td>如果两个二进制的相应位都为1，结果为1，否则为0</td></tr><tr><td>&#124;</td><td>按位或</td><td>有1则1，全0为0</td></tr><tr><td><code>~</code></td><td>取反</td><td>只针对一个数操作，二进制位是0，则取反值为1；如果是1，则取反值为0</td></tr><tr><td><code>^</code></td><td>按位异或</td><td>一样为0；相异为1</td></tr><tr><td><code>&lt;&lt;</code></td><td>左移（尖的方向移动）</td><td>右边补0，左边舍去</td></tr><tr><td><code>&gt;&gt;</code></td><td>右移</td><td>右边舍去，左边正数补0，负数补1</td></tr></tbody></table></div><h4 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h4><p>在对一些比较复杂的表达式进行运算时，要明确表达式中所有运算符参与运算的先后顺序，我们把这种顺序称作运算符的优先级。<br><img src="/2022/11/25/CSharp/2022-12-03-00-41-11.png" alt="运算符的优先级"></p><h3 id="选择结构语句"><a href="#选择结构语句" class="headerlink" title="选择结构语句"></a>选择结构语句</h3><h4 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h4><ol><li>if语句</li><li>if…else语句</li><li>if…else if…else语句</li></ol><h5 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">判断条件 ? 表达式<span class="number">1</span> : 表达式<span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 目标值<span class="number">1</span>:</span><br><span class="line">        执行语句<span class="number">1</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 目标值<span class="number">2</span>:</span><br><span class="line">        执行语句<span class="number">2</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">case</span> 目标值n:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="literal">default</span>:</span><br><span class="line">        执行语句n</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环结构语句"><a href="#循环结构语句" class="headerlink" title="循环结构语句"></a>循环结构语句</h3><h4 id="while-循环语句"><a href="#while-循环语句" class="headerlink" title="while 循环语句"></a>while 循环语句</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(循环条件)&#123;</span><br><span class="line">    执行语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="do…while-循环语句"><a href="#do…while-循环语句" class="headerlink" title="do…while 循环语句"></a>do…while 循环语句</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    执行语句</span><br><span class="line">&#125;<span class="keyword">while</span>(循环条件);</span><br></pre></td></tr></table></figure><div class="note info modern"><p>循环会无条件执行一次</p></div><h4 id="for-循环语句"><a href="#for-循环语句" class="headerlink" title="for 循环语句"></a>for 循环语句</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化表达式;循环条件;操作表达式)&#123;</span><br><span class="line">    执行语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="跳转语句-break、goto、continue"><a href="#跳转语句-break、goto、continue" class="headerlink" title="跳转语句(break、goto、continue)"></a>跳转语句(break、goto、continue)</h4><ol><li>break 语句<br>跳出循环</li><li>continue 语句<br>跳出本次循环</li><li>goto 语句<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Program</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">int</span> i,j;</span><br><span class="line">            <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i&gt;<span class="number">4</span>)&#123;</span><br><span class="line">                        <span class="keyword">goto</span> end;</span><br><span class="line">                    &#125;</span><br><span class="line">                    Console.Write(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                Console.WriteLine();</span><br><span class="line">            &#125;</span><br><span class="line">        end: Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="循环嵌套"><a href="#循环嵌套" class="headerlink" title="循环嵌套"></a>循环嵌套</h4><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h4 id="什么是方法"><a href="#什么是方法" class="headerlink" title="什么是方法"></a>什么是方法</h4><p>方法就是一个功能的集合，可以把程序中的某段具有特殊功能的代码段提取出来</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[访问权限修饰符] [其他修饰符] 返回值类型 方法名(行参列表)&#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法里面不能有方法</li><li>一个方法的执行需要调用这个方法</li><li>一个方法可以被多次调用</li><li>方法的执行 <strong>栈结构</strong></li></ul><h4 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h4><p>在C#中，<strong>由方法名和参数列表（参数的类型和顺序）组成的部分称为方法签名</strong>。<br>判断是否构成重载，只需要比较方法签名。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组是一个容器，用来储存一系列的相兼容的数据类型的变量。</p><h4 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[] array1=<span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="built_in">int</span>[] array2=<span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">5</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;; <span class="comment">//元素不能多也不能少</span></span><br><span class="line"><span class="built_in">int</span>[] array3=<span class="keyword">new</span> <span class="built_in">int</span>[]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line"><span class="built_in">int</span>[] array=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br></pre></td></tr></table></figure><h4 id="数组的常见操作"><a href="#数组的常见操作" class="headerlink" title="数组的常见操作"></a>数组的常见操作</h4><ol><li>数组遍历</li><li>数组最值</li><li>数组排序</li></ol><h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span>[,] array=<span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="built_in">int</span>[,] array1=<span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">3</span>,<span class="number">4</span>]&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#125;;</span><br><span class="line"><span class="built_in">int</span>[,] array2=&#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#125;;</span><br></pre></td></tr></table></figure><h3 id="程序调试"><a href="#程序调试" class="headerlink" title="程序调试"></a>程序调试</h3><h4 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h4><ul><li>在程序的调试过程中，需要对程序中某些数据的变化情况进行观察，才能分析出程序出错的原因，这时就需要为程序设置断点。</li><li>断点可以让正在运行的程序在需要的地方中断，当再次运行程序时，程序会在断点处暂停，方便观察程序中的数据。</li><li>添加断点的两种方式：<ol><li>左击代码左边的灰色区域即可，断点插入成功后左侧会有彩色圆点出现，并且插入断点后的代码会高亮显示。<br><img src="/2022/11/25/CSharp/2023-01-06-16-01-38.png" alt="插入断点后的代码"></li><li>在某行代码处右击鼠标，在弹出的快捷菜单中，选择“断点”选项，然后选择“插入断点”即可。<br><img src="/2022/11/25/CSharp/2023-01-06-16-03-51.png" alt="通过快捷菜单插入断点"></li></ol></li><li>删除断点：<ol><li>左击代码左侧已插入的彩色圆点，即可删除断点</li><li>在断点上右击选择【删除断点】选项。</li></ol></li></ul><h4 id="单步调试"><a href="#单步调试" class="headerlink" title="单步调试"></a>单步调试</h4><ul><li>单步调试：当程序出现Bug时，通常采用的是一步一步跟踪程序执行的流程，根据变量的值，找到错误的原因的方法。</li><li>单步调试分为逐语句(快捷键【F11】)和逐过程(快捷建【F12】)。</li><li>逐语句调试会进入方法内部调试，单步执行方法体中的每一行代码，逐过程调试不会进入方法体内部，而是把方法当做一行代码来执行。</li><li>开启单步调试：在代码中设置断点后，在工具栏中选择【Debug】模式，并单击启动按钮，开启程序调试功能。</li><li><p>调试按钮的作用<img class="inline-img" src="/2022/11/25/CSharp/2023-01-06-16-09-16.png" style="height:100px"></p><ul><li>全部中断：该按钮可以将正在执行的程序全部中断，快捷建【Ctrl+Alt+Break】。</li><li>停止调试：该按钮用于停止调试程序，快捷建【Shift+F5】。</li><li>重新启动：该按钮用于重新启动程序调试，快捷键【Ctrl+Shift+F5】。</li><li>显示下一条语句：该按钮用于显示下一条执行的语句，快捷键【Alt+数字键*】。</li><li>逐语句：该按钮可以让程序按照逐语句进行调试，快捷键【F11】。</li><li>逐过程：该按钮可以让程序按照逐过程进行调试，快捷键【F10】。</li><li>跳出：该按钮用于跳出正在执行的程序，快捷键【Shift+F11】。</li></ul></li><li><p>当使用【逐语句】和【逐过程】按钮进行单步调试，调试信息会显示在【自动窗口】、【局部变量】和【监视1】窗口中，具体信息如下：</p><ul><li>【自动窗口】：自动根据当前选中对象显示其调试信息。</li><li>【局部变量窗口】：只显示当前帧的局部变量信息。</li><li>【监视1窗口】：检索用户自己添加的变量信息。</li></ul></li></ul><h4 id="观察变量"><a href="#观察变量" class="headerlink" title="观察变量"></a>观察变量</h4><p>观察变量值的方法：</p><ul><li><p>使用【自动窗口】查看变量的值<br>可以在【自动窗口】中查看到当前代码中<code>变量的名称</code>、<code>值</code>和<code>类型</code><br><img src="/2022/11/25/CSharp/2023-01-06-16-33-47.png" alt="使用【自动窗口】查看变量的值"></p></li><li><p>使用【局部变量】窗口查看变量的值<br>可以在【局部变量】窗口中查看到当前运行代码中之前所有<code>变量的名称</code>、<code>值</code>和<code>类型</code><br><img src="/2022/11/25/CSharp/2023-01-06-16-33-15.png" alt="使用【局部变量】窗口查看变量的值"></p></li><li><p>使用鼠标悬停的办法监视变量的值<br>查看变量当前值时，可以把鼠标指针移动到当前变量所在位置，观察变量的值，这种方法方便快捷，最常用<br><img src="/2022/11/25/CSharp/2023-01-06-16-32-49.png" alt="使用鼠标悬停的办法监视变量的值"></p></li><li><p>使用【监视1】窗口查看变量的值<br>单击【监视1】窗口，双击【添加要监视的项】写入要查看的变量<br><img src="/2022/11/25/CSharp/2023-01-06-16-32-18.png" alt="使用【监视1】窗口查看变量的值"></p></li><li><p>使用【即时窗口】查看变量的值<br>菜单栏选择【调试】→【窗口】→【即时】可打开【即时窗口】<br>在【即时窗口】中直接输入已运行的变量名，按【Enter】即可查看变量的值，也可以在变量名前加上<code>&amp;</code>查看变量的地址和值<br><img src="/2022/11/25/CSharp/2023-01-06-16-31-43.png" alt="使用【即时窗口】查看变量的值"></p></li></ul><h4 id="条件断点"><a href="#条件断点" class="headerlink" title="条件断点"></a>条件断点</h4><ul><li>条件断点可以快速定位到需要调试的循环次数，提高调试效率。</li><li>使用条件断点调试程序的步骤如下所示：<ol><li>首先为需要中断的代码添加断点，然后右击断点，在弹出框中单击【条件（C）】按钮。</li><li>勾选【条件】选项，将条件表达式的值设置为<code>为true</code>，设置中断表达式设置为<code>i==2</code>（举例），此时完成断点设置，启动调试。<br><img src="/2022/11/25/CSharp/2023-01-06-16-55-18.png" alt="条件断点"></li></ol></li></ul><h2 id="面向对象基础"><a href="#面向对象基础" class="headerlink" title="面向对象基础"></a>面向对象基础</h2><h3 id="面向对象的概念"><a href="#面向对象的概念" class="headerlink" title="面向对象的概念"></a>面向对象的概念</h3><p><strong>面向过程</strong>与<strong>面向对象</strong>都是一种看待问题，解决问题的思维方式。</p><ul><li>面向过程：着眼点在于问题是怎么解决的，然后亲历亲为的去解决这个问题</li><li>面向对象：着眼点在于找到一个能够帮助我们解决问题的实体，然后委托这个实体来解决问题</li></ul><div class="note info modern"><p>面向对象的三大特征：<strong>封装性</strong>、<strong>继承性</strong>、<strong>多态性</strong>。</p></div><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>对象：具有一定的功能，能够帮助解决特定问题的实体，就是对象。<br>类：一系列具有相同的功能和特征的对象的集合。</p><h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h4><p><code>class</code><br>遵循大驼峰命名法</p><div class="note info modern"><p>在C#中，定义在类中的变量被称为<strong>字段</strong>，定义在方法中的变量被称为<strong>局部变量</strong>。<br>字段：用来描述这个类所有对象共有的特征<br>方法：用来描述这个类共有的行为</p></div><h4 id="对象的创建与使用"><a href="#对象的创建与使用" class="headerlink" title="对象的创建与使用"></a>对象的创建与使用</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名 对象名称 =<span class="keyword">new</span> 类名();</span><br></pre></td></tr></table></figure><h4 id="类的设计"><a href="#类的设计" class="headerlink" title="类的设计"></a>类的设计</h4><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><blockquote><p>在程序中，使用属性封装字段时，需要将字段访问级别设为private，并通过属性的get访问器和set访问器来对字段进行读写操作，从而保证类内部数据安全。</p></blockquote><div class="tabs" id="属性"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#属性-1">读写属性</button></li><li class="tab"><button type="button" data-href="#属性-2">只读属性</button></li><li class="tab"><button type="button" data-href="#属性-3">只写属性</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="属性-1"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> [数据类型] [属性名]&#123;</span><br><span class="line">    <span class="keyword">get</span>&#123; <span class="comment">//返回参数值&#125;</span></span><br><span class="line">    <span class="keyword">set</span>&#123; <span class="comment">//设置隐式参数value给字段赋值 &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>For example</strong>：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> age = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Age  <span class="comment">//自动属性</span></span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Say</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我今年&quot;</span>+ <span class="keyword">this</span>.Age + <span class="string">&quot;岁了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="属性-2"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> [数据类型] [属性名]&#123;</span><br><span class="line">    <span class="keyword">get</span>&#123; <span class="comment">//返回参数值&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="属性-3"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> [数据类型] [属性名]&#123;</span><br><span class="line">    <span class="keyword">set</span>&#123; <span class="comment">//设置隐式参数value给字段赋值 &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="访问权限修饰符"><a href="#访问权限修饰符" class="headerlink" title="访问权限修饰符"></a>访问权限修饰符</h3><div class="table-container"><table><thead><tr><th>访问权限修饰符</th><th>描述</th></tr></thead><tbody><tr><td><code>public</code></td><td>最高访问级别，访问不受限制</td></tr><tr><td><code>protected</code></td><td>保护访问级别，受保护的成员可由自身及派生类访问</td></tr><tr><td><code>internal</code></td><td>内部访问级别，只有在同一程序集中，内部类型或者成员才可以访问</td></tr><tr><td><code>protected internal</code></td><td>内部保护级别，访问仅限于当前程序集，可以由自身及派生类访问</td></tr><tr><td><code>private</code></td><td>私有访问，最低访问级别，私有成员只有在它们的类和结构中才可以访问</td></tr></tbody></table></div><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><blockquote><p>构造方法用于实例化对象</p></blockquote><h4 id="构造方法的定义"><a href="#构造方法的定义" class="headerlink" title="构造方法的定义"></a>构造方法的定义</h4><p>在一个类中定义的方法同时满足以下3个条件，就是一个构造方法：</p><ol><li>方法名于类名相同</li><li>方法名前面没有返回值类型的声明</li><li>方法中不能使用return语句返回一个值</li></ol><h4 id="构造方法的重载"><a href="#构造方法的重载" class="headerlink" title="构造方法的重载"></a>构造方法的重载</h4><p>与普通方法一样，构造方法也可以重载。<br>如果一个类中没有定义构造方法，系统将会自动创建一个默认的构造方法。</p><h3 id="关键字-this"><a href="#关键字-this" class="headerlink" title="关键字 this"></a>关键字 this</h3><ol><li>this访问属性</li><li>this调用成员方法</li><li>this调用构造方法<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Class1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;程序运行结果：&quot;</span>);</span><br><span class="line">            Class1 demo1 = <span class="keyword">new</span> Class1(<span class="string">&quot;huang&quot;</span>, <span class="number">20</span>);</span><br><span class="line">            <span class="comment">/*程序运行</span></span><br><span class="line"><span class="comment">             * 无参的构造方法</span></span><br><span class="line"><span class="comment">                一个有参数的构造方法</span></span><br><span class="line"><span class="comment">                两个参数的构造方法</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Class1</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;无参的构造方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Class1</span>(<span class="params"><span class="built_in">string</span> name</span>) : <span class="title">this</span>()   <span class="comment">//通过关键字this 调用无参的构造方法</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;一个有参数的构造方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Class1</span>(<span class="params"><span class="built_in">string</span> name, <span class="built_in">int</span> age</span>) : <span class="title">this</span>(<span class="params"><span class="string">&quot;a&quot;</span></span>)    <span class="comment">//通过this调用带一个参数的构造方法</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;两个参数的构造方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h3><p>在C#中，当一个对象成为垃圾对象后仍会占用内存空间，时间一长2，就会导致内存不足。<br>为了清除这些无用的垃圾对象，释放一定的内存空间，C#中引入了垃圾回收机制。<br>在这种机制下，不需要过多关心垃圾对象的回收问题，.Net运行环境会启动垃圾回收器将这些垃圾从内存中释放，从而是程序获得更多内存空间。<br>除了等待运行环境自动垃圾回收，还可以通过<code>GC.Collect()</code>方法来通知运行环境立即进行垃圾回收。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp3</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Student</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> name;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Student</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Student类创建成功&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ~Student()  <span class="comment">//析构函数，在对象被销毁自动调用</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(name + <span class="string">&quot;：资源被回收&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">            Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">            s1.name = <span class="string">&quot;s1&quot;</span>;</span><br><span class="line">            s2.name = <span class="string">&quot;s2&quot;</span>;</span><br><span class="line">            s1 = <span class="literal">null</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;执行GC.Collect方法：&quot;</span>);</span><br><span class="line">            GC.Collect();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">            <span class="comment">/*运行结果</span></span><br><span class="line"><span class="comment">            Student类创建成功</span></span><br><span class="line"><span class="comment">            Student类创建成功</span></span><br><span class="line"><span class="comment">            执行GC.Collect方法：</span></span><br><span class="line"><span class="comment">            s1：资源被回收</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h4><p>语法<code>~</code>。<br>析构函数在对象被销毁自动调用。</p><h3 id="关键字Static"><a href="#关键字Static" class="headerlink" title="关键字Static"></a>关键字Static</h3><div class="note info modern"><ul><li>静态成员是属于类的，访问的时候用到类来访问</li><li>非静态成员是属于对象的，访问的时候用对象来访问</li></ul></div><h4 id="静态字段"><a href="#静态字段" class="headerlink" title="静态字段"></a>静态字段</h4><h4 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> age = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">int</span> Age  <span class="comment">//自动属性</span></span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">get</span>;</span><br><span class="line">        <span class="keyword">set</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Say</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;我今年&quot;</span>+ Person.Age + <span class="string">&quot;岁了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><p>也是用类名访问。</p><h4 id="静态类"><a href="#静态类" class="headerlink" title="静态类"></a>静态类</h4><p>当类中的成员全部是静态成员时，就可以把这个类声明为静态类。<br>声明静态类需要在关键字<code>class</code>前加上<code>static</code>。</p><h4 id="静态构造方法"><a href="#静态构造方法" class="headerlink" title="静态构造方法"></a>静态构造方法</h4><ul><li>静态构造方法的作用是初始化静态成员</li><li>一个类只能有一个构造方法</li><li>该静态构造方法没有任何其他修饰符，也没有参数</li><li>可以被定义在静态类或非静态类中</li><li>静态构造方法会在程序创建第一实例或引用任何静态成员之前，完成类中静态成员的初始化</li></ul><div class="note warning modern"><p>静态构造方法只能为静态字段赋值</p></div><h4 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h4><p>单例模式是C#中的一种设计模式，它是指在设计一个类时，需要保证整个程序在运行期间只存在一个实例对象。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">SingleClass</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//声明一个静态的SingleClass类的变量来引用唯一的对象</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> SingleClass singleInstance;</span><br><span class="line">        <span class="comment">//创建私有的无参构造方法，使外部无法调用这个类的构造方法</span></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">SingleClass</span>()</span> &#123; &#125;</span><br><span class="line">        <span class="comment">//创建静态的方法，创建此类唯一的对象</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleClass <span class="title">SingleMethod</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (singleInstance==<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                singleInstance = <span class="keyword">new</span> SingleClass();<span class="comment">//调用私有的构造方法创建该实例</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> singleInstance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//用SingleMethod()方法创建SingleClass对象</span></span><br><span class="line">    SingleClass s1 = SingleClass.SingleMethod();</span><br><span class="line">    SingleClass s2 = SingleClass.SingleMethod();</span><br><span class="line">    <span class="comment">//比较变量s1与s2中存的地址是否相同</span></span><br><span class="line">    <span class="keyword">if</span> (s1==s2)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;这就是单例模式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="嵌套类"><a href="#嵌套类" class="headerlink" title="嵌套类"></a>嵌套类</h3><p>在C#中，可以将类定义在一个类的内部，被包含的类称作<strong>嵌套类</strong>，而包含嵌套类的类就称作<strong>外部类</strong>。</p><ul><li>外部类与嵌套类的非静态成员可以重名</li><li>嵌套类中不能声明静态成员，但嵌套类可以直接引用外部类的静态成员</li><li>作用域之外需要使用类似<code>Outer.类名</code>的完整限定名方式</li></ul><h3 id="匿名类"><a href="#匿名类" class="headerlink" title="匿名类"></a>匿名类</h3><p>有时候某个类的实例只会用到一次，这时可以使用<strong>匿名类</strong>的方式创建实例，即<strong>无需显示定义一个类，就可以将一组只读属性封装到单个对象中</strong>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//匿名类</span></span><br><span class="line">    <span class="comment">//创建匿名对象</span></span><br><span class="line">    <span class="keyword">var</span> Child = <span class="keyword">new</span> &#123; Name = <span class="string">&quot;Lucy&quot;</span>, Age = <span class="number">3</span>, Sex = <span class="string">&#x27;女&#x27;</span> &#125;;</span><br><span class="line">    <span class="comment">//控制台输出匿名对象</span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;我的名字是：&#123;0&#125;，性别为：&#123;1&#125;，年龄是：&#123;2&#125;&quot;</span>, Child.Name, Child.Sex, Child.Age);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//程序运行结果：</span></span><br><span class="line"><span class="comment">//我的名字是：Lucy，性别为：女，年龄是：3</span></span><br></pre></td></tr></table></figure><h3 id="对象初始化器"><a href="#对象初始化器" class="headerlink" title="对象初始化器"></a>对象初始化器</h3><p>在一个类中，通常使用构造方法来为属性赋值，当一个类中的属性过多时，不可能为每种情况都创建一个构造方法，此时就可以使用对象的初始化器来为属性赋值</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名 变量名=<span class="keyword">new</span> 类名()&#123;属性名=值,属性名=值……&#125;</span><br></pre></td></tr></table></figure><p><strong>For example</strong>:</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title">Person</span>&#123;</span><br><span class="line">            <span class="built_in">int</span> age;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">int</span> Age&#123;</span><br><span class="line">                <span class="keyword">set</span>&#123;age=<span class="keyword">value</span>;&#125;</span><br><span class="line">                <span class="keyword">get</span>&#123;<span class="keyword">return</span> age;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">string</span> name;</span><br><span class="line">            <span class="keyword">public</span> <span class="built_in">string</span> Name&#123;</span><br><span class="line">                <span class="keyword">set</span>&#123;name=<span class="keyword">value</span>;&#125;</span><br><span class="line">                <span class="keyword">get</span>&#123;<span class="keyword">return</span> name;&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            Person p=<span class="keyword">new</span> Person()&#123;Name=<span class="string">&quot;Lucy&quot;</span>,Age=<span class="number">18</span>&#125;;</span><br><span class="line">             Console.WriteLine(<span class="string">&quot;我的名字是：&#123;0&#125;，年龄是：&#123;1&#125;&quot;</span>, p.Name,p.Age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="面向对象高级"><a href="#面向对象高级" class="headerlink" title="面向对象高级"></a>面向对象高级</h2><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><h4 id="继承的概念"><a href="#继承的概念" class="headerlink" title="继承的概念"></a>继承的概念</h4><p>如果多个类中具有相同的属性和方法，可以把它们提取出来，封装成一个新的类。<br>这个类称作<strong>父类</strong>/<strong>基类</strong>/<strong>超类</strong><br>关系：<strong>子类继承父类</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 子类类名:父类类名&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>子类拥有父类的所有字段、属性和方法</li><li>构造方法不可以被继承</li><li>一个类可以有多个子类，但只能有一个父类</li><li>多层继承是可以的，即一个类在继承另一个类的同时还可以被其他类继承。例如，C类继承B类，B类继承A类，此时C类也可以称作A类的子类</li><li><strong>在C#中，所有的类都直接或间接的继承<code>Object</code>类</strong></li></ul><h4 id="构造方法的执行过程"><a href="#构造方法的执行过程" class="headerlink" title="构造方法的执行过程"></a>构造方法的执行过程</h4><p>初始化实例成员<code>→</code>调用父类的构造方法<code>→</code>调用自身的构造方法</p><h4 id="隐藏基类方法"><a href="#隐藏基类方法" class="headerlink" title="隐藏基类方法"></a>隐藏基类方法</h4><p>子类在继承父类时可以对父类成员进行扩展，如果子类中出现与父类同名的方法，那么在调用程序时就不能明确该方法是属于父类还是子类，这时应该使用关键字<code>new</code>隐藏基类方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Shout</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;动物的叫声&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Dog</span> : <span class="title">Animal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">new</span> <span class="keyword">void</span> <span class="title">Shout</span>()<span class="comment">//与父类方法重名</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;汪……&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">             Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">            dog.Shout();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="拆箱与装箱"><a href="#拆箱与装箱" class="headerlink" title="拆箱与装箱"></a>拆箱与装箱</h4><p>在实际开发过程中，某些方法的参数类型为引用类型，如果调用时传入的是数值类型，此时需要进行<strong>装箱</strong>操作。<br>当一个方法的返回值类型为数值类型时。实际上该方法的返回值类型为引用类型，此时需要进行<strong>拆箱</strong>操作。</p><div class="note info modern"><ul><li>装修就是将数值类型转换为引用类型</li><li>拆箱就是将引用类型转换为数值类型</li></ul></div><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> num = <span class="number">100</span>;</span><br><span class="line">            <span class="comment">//将int类型的变量赋值给object类型的变量obj，发生装箱操作</span></span><br><span class="line">            <span class="built_in">object</span> obj = num;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;obj对象的值为&#123;0&#125;&quot;</span>, obj);</span><br><span class="line">            <span class="comment">//将object类型的对象obj赋值给int类型的变量num，发生拆箱操作</span></span><br><span class="line">            num = (<span class="built_in">int</span>)obj;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;变量num的值为&#123;0&#125;&quot;</span>, num);</span><br><span class="line">            <span class="comment">//程序运行结果：</span></span><br><span class="line">            <span class="comment">//obj对象的值为100</span></span><br><span class="line">            <span class="comment">//变量num的值为100</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关键字sealed"><a href="#关键字sealed" class="headerlink" title="关键字sealed"></a>关键字sealed</h3><ul><li>关键字sealed可以修饰类也可以修饰方法</li><li>被关键字sealed修饰的类被称为<strong>密封类</strong>（不能派生子类）</li><li>被关键字sealed修饰的方法在<strong>子类中不能重写</strong></li></ul><h4 id="关键字sealed修饰类"><a href="#关键字sealed修饰类" class="headerlink" title="关键字sealed修饰类"></a>关键字sealed修饰类</h4><p>在C#中，使用关键字<code>sealed</code>修饰的类不可以被继承。</p><h4 id="关键字sealed修饰方法"><a href="#关键字sealed修饰方法" class="headerlink" title="关键字sealed修饰方法"></a>关键字sealed修饰方法</h4><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><div class="note info modern"><p>父类的引用可以指向子类对象</p></div><h4 id="重写父类的方法"><a href="#重写父类的方法" class="headerlink" title="重写父类的方法"></a>重写父类的方法</h4><ul><li>虚函数 使用virtual修饰</li><li>虚函数可以被子类隐藏，也可以被子类重写</li><li>非虚函数只能被子类隐藏</li><li>重写关键字：<code>override</code></li></ul><h4 id="多态的实现"><a href="#多态的实现" class="headerlink" title="多态的实现"></a>多态的实现</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Animal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">Shout</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;动物的叫声&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Dog</span> : <span class="title">Animal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Shout</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;汪……&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Cat</span> : <span class="title">Animal</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Shout</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;喵……&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Animal an1 = <span class="keyword">new</span> Cat();</span><br><span class="line">            Animal an2 = <span class="keyword">new</span> Dog();</span><br><span class="line">            animalShout(an1);</span><br><span class="line">            animalShout(an2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">animalShout</span>(<span class="params">Animal an</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            an.Shout();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="关键字base"><a href="#关键字base" class="headerlink" title="关键字base"></a>关键字base</h4><p>当子类重写父类的方法后，子类对象将无法直接调用父类被重写的方法。<br>此时就需要<code>base</code>关键字</p><ol><li>调用父类的字段和方法<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">base</span>.字段名</span><br><span class="line"><span class="keyword">base</span>.方法名(参数列表)</span><br></pre></td></tr></table></figure></li><li>调用父类的构造方法<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">A</span>&#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title">B</span> : <span class="title">A</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">B</span>():<span class="title">base</span>()</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="里氏转换原则"><a href="#里氏转换原则" class="headerlink" title="里氏转换原则"></a>里氏转换原则</h4><p>实现子类父类转换</p><ol><li>子类对象可以直接赋值给父类变量（向上转型）<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Animal an = <span class="keyword">new</span> Cat();</span><br></pre></td></tr></table></figure><ul><li>隐式转换</li><li>肯定会成功</li><li>向上转型成功后将不能再使用子类特有的字段</li></ul></li><li>父类对象赋值给子类变量需要进行强制类型转换（向下转型）<ul><li>显示转换，需要强制转换，前面添加括号，括号中指定将父类类型转为的子类类型，推荐使用<code>as</code></li><li>不一定成功，转型失败得到null</li><li>在向下转型前，使用<code>is</code>关键字判断</li></ul></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Animal animal = <span class="keyword">new</span> Dog();<span class="comment">//子类Dog指向父类animal</span></span><br><span class="line">            <span class="comment">//使用关键字is判断animal变量是否可以转换为Dog类型</span></span><br><span class="line">            <span class="built_in">bool</span> result = animal <span class="keyword">is</span> Dog;</span><br><span class="line">            <span class="keyword">if</span> (result)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;animal变量能转换为Dog类型&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;animal变量不能转换为Dog类型&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//Dog dog = (Dog)animal;    //使用()强制转换</span></span><br><span class="line">            <span class="comment">//使用as关键字</span></span><br><span class="line">            Dog dog = animal <span class="keyword">as</span> Dog;</span><br><span class="line">            <span class="keyword">if</span> (dog!=<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;animal变量是Dog类型，并且能转化为Dog类型对象&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;转换失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//程序运行结果：</span></span><br><span class="line">            <span class="comment">//animal变量能转换为Dog类型</span></span><br><span class="line">            <span class="comment">//animal变量是Dog类型，并且能转化为Dog类型对象</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h4><div class="note info modern"><p>在C#中提供了一个Object类，它是所有类的父类，每个类都直接或间接的继承该类</p></div><h3 id="抽象类和接口类"><a href="#抽象类和接口类" class="headerlink" title="抽象类和接口类"></a>抽象类和接口类</h3><h4 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h4><ul><li>C#允许在定义方法时不写方法体（<strong>只有声明没有实现</strong>）</li><li>不含方法体的方法就是<strong>抽象方法</strong>，用关键字<code>abstract</code>修饰</li><li>当一个类中包含抽象方法，该类也必须使用<code>abstract</code>修饰，这样的类就是<strong>抽象类</strong></li><li>抽象类不能实例化对象</li></ul><div class="note warning modern"><p>包含抽象方法的类必须声明为抽象类，但是抽象类可以不包含抽象方法</p></div><div class="note warning modern"><p>非抽象类继承抽象类，需要实现父类所有的抽象方法</p></div><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><ul><li>定义接口时使用<code>interface</code>关键字</li><li>一个类可以实现多个接口</li><li>接口中的方法不是抽象方法</li><li>接口中的方法不能有访问权限，默认使用<code>public static final</code></li><li>抽象类实现接口，可以把接口实现为抽象方法</li><li>接口中的方法可以实现为虚方法</li></ul><div class="note info modern"><p>如果一个类的后面既有父类也有接口，一定是父类在前</p></div><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><h4 id="什么是异常finally"><a href="#什么是异常finally" class="headerlink" title="什么是异常finally"></a>什么是异常finally</h4><p>异常的类型有多种，每个类型都代表这个指定的异常类型，所有的异常都继承自<code>Exception</code>类。</p><h4 id="try…catch和finally"><a href="#try…catch和finally" class="headerlink" title="try…catch和finally"></a>try…catch和finally</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//程序代码块</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(ExceptionType e)&#123;</span><br><span class="line">    <span class="comment">//对异常的处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>一般的catch代码块<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span>&#123;</span><br><span class="line">    <span class="comment">//对异常的处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>特定catch代码块<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span>(Exceptiontype)&#123;</span><br><span class="line">    <span class="comment">//对异常的处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>特定对象的catch代码块<figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">catch</span>(Exceptiontype e)&#123;</span><br><span class="line">    <span class="comment">//对异常的处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>在程序中可以使用多个catch代码块对异常进行捕获，但只有一个catch代码块可以捕获到异常，并对异常进行处理。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">                <span class="built_in">int</span> num2 = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">int</span> num3 = num1 / num2;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;num3=&quot;</span> + num3);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (DivideByZeroException e)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//Message 属性用于解释异常的原因</span></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;已处理异常信息：&quot;</span> + e.Message);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (SystemException)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;已经处理系统异常&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;已处理异常&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;无论是否发生异常，finally代码块一定执行&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning modern"><p>在程序中使用异常语句，<code>try</code>代码块是必须有的，而<code>catch</code>代码块和<code>finally</code>代码块必须要有一个。<br>无论是否发生异常，finally代码块一定执行</p></div><h4 id="关键字throw"><a href="#关键字throw" class="headerlink" title="关键字throw"></a>关键字throw</h4><p>关键字<code>throw</code>用于抛出异常对象。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;这是一个异常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2022/11/25/CSharp/2022-11-26-20-55-47.png" alt="throw"></p><div class="note info modern"><p>在实际开发中<code>throw</code>和<code>try...catch</code>总是配合使用。</p></div><h3 id="命名空间与程序集"><a href="#命名空间与程序集" class="headerlink" title="命名空间与程序集"></a>命名空间与程序集</h3><h4 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h4><p>C#中引入了命名空间的概念，可以将命名空间理解为程序定义的一个目录，使用命名空间可以有效避免类名冲突的问题。<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Example</span>&#123;</span><br><span class="line">      Class Animal&#123;</span><br><span class="line">            <span class="function"><span class="keyword">void</span> <span class="title">Shout</span>()</span>&#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;动物的叫声&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><div class="note info modern"><p><code>namespace</code>表示命名空间的关键字，<code>Example</code>表示命名空间的名称</p></div></p><p>在实例化对象、调用方法、属性时都要使用“<strong>命名空间名.成员</strong>”的方式来引用。<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">    Example.Animal animal= <span class="keyword">new</span> Example.Animal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由于使用完全限定名的方式不利于程序代码的阅读，而且会导致代码的冗余，C#中可以使用关键字<code>using</code>添加对命名空间的引用，这样程序在调用其他命名空间的类时，就无需使用完整的限定名，直接调用即可。<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">using</span> Example;   <span class="comment">//引用命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Test</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Test</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            Animal animal=<span class="keyword">new</span> Animal();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="程序集"><a href="#程序集" class="headerlink" title="程序集"></a>程序集</h4><ul><li>目前所有程序使用的都是自己的类，但是在许多项目中可能会用到其他程序中的类，此时就需要使用程序集（扩展名为 .dll ）</li><li>所谓的程序集就是包含一个或多个类型的定义文件和资源文件的集合，该程序集中的文件可以被其他程序使用</li><li>程序集文件可分为四个部分，分别是<strong>程序集清单</strong>、<strong>元数据</strong>、<strong>CIL</strong>、<strong>资源集</strong><ul><li><strong>程序集清单</strong>：包含描述该程序集中各元素彼此如何关联的数据集合，还包含指定该程序集的版本信息、安全标识所需的元数据、定义该程序集的范围以及解析对资源和类应用所需的元数据。</li><li><strong>元数据</strong>：提供有关程序集中定义的类型信息，包括类型的名称、基类和类型所实现的接口等。</li><li><strong>CIL</strong>：程序类型中所有的中间代码。</li><li><strong>资源集</strong>：诸如位图、指针、静态文本等。</li></ul></li></ul><ol><li><p><strong>创建类库</strong><br>新建项目，将项目添加到C#项目解决方案<br><img src="/2022/11/25/CSharp/2023-01-04-18-29-58.png" alt="类库"><br><img src="/2022/11/25/CSharp/2023-01-04-18-37-08.png" alt="添加到解决方案"><br><img src="/2022/11/25/CSharp/2023-01-04-18-37-42.png" alt="目标框架"></p></li><li><p><strong>编写代码</strong><br>创建项目之后，项目中默认类名为<code>Class1.cs</code>，在该类中添加代码</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ClassLibrary1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Class1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Print</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;引用程序集ClassLibrary1.dll&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行程序，就可以在项目路径<code>\bin\Debug\netstandard2.0</code> 目录中生成一个<code>ClassLibrary1.dll</code>程序集</p></li><li><p><strong>引用程序集</strong><br>在解决方案中创建一个<strong>控制台应用(.NET Framework)</strong>，选中该项目中的【引用】选项，右键单击选中【添加引用(R)…】，弹出一个【引用管理器】窗口，选择上面生成的程序集即可。</p><img class="inline-img" src="/2022/11/25/CSharp/2023-01-04-21-53-19.png" style="height:200px"><img class="inline-img" src="/2022/11/25/CSharp/2023-01-04-21-56-23.png" style="height:300px"></li><li><p><strong>使用程序集中的类</strong><br>在项目中通过关键字using引入程序集<code>ClassLibrary1.dll</code>，此时就可以调用<code>Class1</code>中的类。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> ClassLibrary1;</span><br><span class="line"><span class="comment">//这是控制台应用</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConsoleApp3</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Class1 test = <span class="keyword">new</span> Class1();</span><br><span class="line">            test.Print();</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为“<strong>引用程序集ClassLibrary1.dll</strong>”则表明程序集成功引用，并调用了该程序集中<code>类Class1中的Print()</code>方法。</p></li></ol><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a>集合概述</h3><p>C#中的集合就像一个容器专门用于存储C#类的对象。</p><ul><li>C#中的集合分为<strong>泛型集合</strong>和<strong>非泛型集合</strong>，二者均实现了<code>IEnumerable</code> 接口</li><li><strong>泛型集合</strong>位于<code>System.Collections.Generic</code> 命名空间中，只能存储同一类型的对象，最常见的是<code>List&lt;T&gt;</code>泛型集合和<code>Dictionary&lt;TKey,TValue&gt;</code>泛型集合。</li><li><strong>非泛型集合</strong>位于<code>System.Collections</code>命名空间中，可以存储多种类型的对象，其中最常见的是<code>ArrayList</code>集合和<code>Hashtable</code>集合。</li><li>C#中提供了丰富的集合类。<br><img src="/2022/11/25/CSharp/2023-01-03-21-56-51.png" alt="集合的继承体系"><br>图中列出了程序中常用的一些集合类。其中，虚线框里填写的都是接口类型，而实线框里填写的都是具体的实现类。</li></ul><h3 id="非泛型集合"><a href="#非泛型集合" class="headerlink" title="非泛型集合"></a>非泛型集合</h3><h4 id="ArrayList集合"><a href="#ArrayList集合" class="headerlink" title="ArrayList集合"></a>ArrayList集合</h4><p><code>ArrayList</code>集合就像是一个收纳盒，它可以容纳不同类型的对象。例如，可以将int、string、object等类型的对象同时加入到<code>ArrayList</code>集合中。<br>ArrayList集合的常用方法如下：</p><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>int Add(object value)</td><td>将元素添加到ArrayList集合</td></tr><tr><td>void AddRange(ICollection c)</td><td>将集合或者数组添加到ArrayList集合</td></tr><tr><td>void Clear()</td><td>从ArrayList中移除所有元素</td></tr><tr><td>bool Contains(object item)</td><td>判断某元素是否在ArrayList中</td></tr><tr><td>int IndexOf(object value)</td><td>查找指定元素，并返回该元素在ArrayList中第一个匹配项的索引</td></tr><tr><td>void Insert(int index,object value)</td><td>将元素插入ArrayList的指定索引处</td></tr><tr><td>int LastIndexOf(object value)</td><td>查找指定元素，并返回该元素在ArrayList中最后一个匹配项的索引</td></tr><tr><td>void Remove(object obj)</td><td>从ArrayList中移除指定元素的第一个匹配项</td></tr><tr><td>void RemoveAt(int index)</td><td>从ArrayList中移除指定索引处的元素</td></tr><tr><td>void Reverse()</td><td>将整个ArrayList中元素的顺序反转</td></tr><tr><td>void Sort()</td><td>对整个ArrayList中的元素进行排序(默认小到大)</td></tr></tbody></table></div><ol><li><p><strong>添加元素</strong><br>调用ArrayList对象的<code>Add()</code>方法、<code>AddRange()</code>方法、<code>Insert()</code>方法来添加元素</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Program</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            ArrayList arr1 = <span class="keyword">new</span> ArrayList();<span class="comment">//创建 ArrayList 集合</span></span><br><span class="line">            <span class="comment">//使用不同的方法向集合中添加多个元素</span></span><br><span class="line">            arr1.Add(<span class="number">666</span>);</span><br><span class="line">            arr1.AddRange(<span class="keyword">new</span> ArrayList() &#123; <span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span> &#125;);</span><br><span class="line">            arr1.Insert(<span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">            ErgodicArr(arr1);</span><br><span class="line">            <span class="comment">//使用Count属性获取元素个数</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;arr1的实际长度为：&quot;</span> + arr1.Count);</span><br><span class="line">            <span class="comment">//使用Capacity属性获取集合的容量</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;arr1的容量为：&quot;</span> + arr1.Capacity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ErgodicArr</span>(<span class="params">ArrayList arr</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//666</span></span><br><span class="line">        <span class="comment">//张三</span></span><br><span class="line">        <span class="comment">//a</span></span><br><span class="line">        <span class="comment">//李四</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//arr1的实际长度为：4</span></span><br><span class="line">        <span class="comment">//arr1的容量为：4</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>需要注意的是，集合的长度就是元素的个数，集合的容量是随集合长度变化而变化的。如果集合的长度在1~4之间，容量的值就是4。如果集合的实际长度在5~8之间，那容量的值就变为8。以此类推，ArrayList的容量值总是以<code>4</code>为基本单位递增或递减。</li><li>使用Insert()方法向集合中添加元素时，允许插入元素的索引值比集合的最大索引值大1，如果元素的索引值超过集合的最大索引值且范围在1以上(<code>arr.Insert(arr.Count+1,&quot;异常&quot;)</code>)，编译时就会报异常。</li></ul></li><li><p><strong>删除元素</strong><br>调用ArrayList的<code>Remove()</code>方法或<code>RemoveAt()</code>方法或<code>Clear()</code>方法删除元素</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Program</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            ArrayList arr1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            <span class="comment">//将新建的集合对象添加到arr1集合的末尾</span></span><br><span class="line">            arr1.AddRange(<span class="keyword">new</span> ArrayList() &#123; <span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>&#125;);</span><br><span class="line">            ErgodicArr(arr1);<span class="comment">//1. 添加元素中有定义</span></span><br><span class="line">            arr1.Remove(<span class="string">&quot;张三&quot;</span>); <span class="comment">//从集合中移除指定元素的第一个匹配项</span></span><br><span class="line">            ErgodicArr(arr1);</span><br><span class="line">            arr1.RemoveAt(<span class="number">0</span>);   <span class="comment">//从集合中移除指定索引位置的元素</span></span><br><span class="line">            ErgodicArr(arr1);</span><br><span class="line">            arr1.Clear();   <span class="comment">//删除集合中的所有元素</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;arr1的实际长度为：&quot;</span> + arr1.Count);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;arr1的容量为：&quot;</span> + arr1.Capacity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//张三</span></span><br><span class="line"><span class="comment">//李四</span></span><br><span class="line"><span class="comment">//王五</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//李四</span></span><br><span class="line"><span class="comment">//王五</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//王五</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//arr1的实际长度为：0</span></span><br><span class="line"><span class="comment">//arr1的容量为：4</span></span><br></pre></td></tr></table></figure></li><li><p><strong>修改元素</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Program</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">             ArrayList arr1 = <span class="keyword">new</span> ArrayList(<span class="keyword">new</span> ArrayList() &#123; <span class="string">&quot;张三&quot;</span>,<span class="string">&quot;李四&quot;</span>,<span class="string">&quot;王五&quot;</span>&#125;);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;修改前的元素：&quot;</span>);</span><br><span class="line">            ErgodicArr(arr1);<span class="comment">//1. 添加元素中有定义</span></span><br><span class="line">            arr1[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">            arr1[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">            arr1[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;修改后的元素：&quot;</span>);</span><br><span class="line">            ErgodicArr(arr1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//修改前的元素：</span></span><br><span class="line"><span class="comment">//张三</span></span><br><span class="line"><span class="comment">//李四</span></span><br><span class="line"><span class="comment">//王五</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//修改后的元素：</span></span><br><span class="line"><span class="comment">//1</span></span><br><span class="line"><span class="comment">//2</span></span><br><span class="line"><span class="comment">//3</span></span><br></pre></td></tr></table></figure></li><li><p><strong>查询元素</strong><br>调用<code>IndexOf()</code>方法或<code>LastIndexOf()</code>方法查询指定元素的索引，调用<code>Contains()</code>方法判断集合中是否存在某个元素</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Program</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            ArrayList arr1 = <span class="keyword">new</span> ArrayList(<span class="keyword">new</span> ArrayList() &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span> &#125;);</span><br><span class="line">            <span class="comment">//查找指定元素，并返回该元素在集合中第一个匹配项的索引</span></span><br><span class="line">            <span class="built_in">int</span> index = arr1.IndexOf(<span class="number">1</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;集合中第一个1的索引值为：&quot;</span> + index);</span><br><span class="line">            <span class="comment">//查找指定元素，并返回该元素在集合中的最后一个匹配项的索引</span></span><br><span class="line">            <span class="built_in">int</span> lastIndex = arr1.LastIndexOf(<span class="number">1</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;集合中最后一个1的索引值为：&quot;</span> + lastIndex);</span><br><span class="line">            <span class="comment">//判断元素是否在集合中</span></span><br><span class="line">            <span class="built_in">bool</span> result = arr1.Contains(<span class="number">2</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;集合中是否包含元素2：&quot;</span> + result);</span><br><span class="line">            <span class="comment">//对集合中的元素按照默认顺序进行排序</span></span><br><span class="line">            arr1.Sort();</span><br><span class="line">            ErgodicArr(arr1);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ErgodicArr</span>(<span class="params">ArrayList arr</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; arr.Count; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(arr[i]+<span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//集合中第一个1的索引值为：0</span></span><br><span class="line">        <span class="comment">//集合中最后一个1的索引值为：3</span></span><br><span class="line">        <span class="comment">//集合中是否包含元素2：True</span></span><br><span class="line">        <span class="comment">//1 1 2 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="通过foreach循环遍历ArrayList集合"><a href="#通过foreach循环遍历ArrayList集合" class="headerlink" title="通过foreach循环遍历ArrayList集合"></a>通过foreach循环遍历ArrayList集合</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> collection)&#123;</span><br><span class="line">    执行语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>item变量用于存储每次遍历的元素，默认情况下item为var类型，in为关键字，collection表示被遍历的集合。</p><div class="note warning modern"><p>foreach循环只能对遍历的元素进行读操作，而且只能单向遍历，也就是一个元素在整个foreach循环中只能被访问一次，因此在遍历集合中的元素时可以优先选择foreach循环，如果需要修改或多次访问集合中某个元素时，考虑使用for循环。</p></div><h4 id="Hashtable集合"><a href="#Hashtable集合" class="headerlink" title="Hashtable集合"></a>Hashtable集合</h4><p>在ArrayList集合中查询某个元素时，是从索引为0的元素逐一查询的，这就好像是在一本没有目录的字典中查询某个汉字一样，查询效率非常低。</p><p>C#中提供了一个Hashtable集合，该集合又被称为键值对集合，所谓键就类似于字典中的目录，值就类似于字典中的具体汉字信息，键与值是一一对应的关系，通过唯一的键能找到对应的值，因此Hashtable集合的这种特性大大提高了查询元素的效率。</p><p>Hashtable集合中的常用方法如下：</p><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void Add(object key,object value)</td><td>将带有指定键和值的元素添加到Hashtable集合中</td></tr><tr><td>void Clear()</td><td>从Hashtable集合中移除所有元素</td></tr><tr><td>bool Contains(object key)</td><td>判断Hashtable集合中是否包含指定的键</td></tr><tr><td>bool ContainsValue(object value)</td><td>判断Hashtable集合是否包含指定的值</td></tr><tr><td>void Remove(object key)</td><td>从Hashtable集合中移除带有指定键的元素</td></tr></tbody></table></div><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Program</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            Hashtable ht = <span class="keyword">new</span> Hashtable();<span class="comment">//创建Hashtable集合</span></span><br><span class="line">            ht.Add(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">            ht.Add(<span class="string">&#x27;A&#x27;</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">            ht.Add(<span class="string">&quot;BB&quot;</span>, <span class="string">&quot;王五&quot;</span>);</span><br><span class="line">            ErgodicHash(ht);</span><br><span class="line">            ht.Remove(<span class="string">&quot;BB&quot;</span>);<span class="comment">//移除键为&quot;BB&quot;的元素</span></span><br><span class="line">            ErgodicHash(ht);</span><br><span class="line">            ht.Clear(); <span class="comment">//移除ht中的所有元素</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;集合ht中元素的个数：&quot;</span> + ht.Count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ErgodicHash</span>(<span class="params">Hashtable ht</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">object</span> key <span class="keyword">in</span> ht.Keys)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(key + <span class="string">&quot;:&quot;</span> + ht[key]);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning modern"><p>Hashtable集合中的键和值的默认类型都是object，因此可以向该集合的键和值中添加任意类型的对象。</p></div><h5 id="Hashtable集合的多种遍历方式"><a href="#Hashtable集合的多种遍历方式" class="headerlink" title="Hashtable集合的多种遍历方式"></a>Hashtable集合的多种遍历方式</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Program</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            Hashtable ht = <span class="keyword">new</span> Hashtable();<span class="comment">//创建Hashtable集合</span></span><br><span class="line">            ht.Add(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">            ht.Add(<span class="string">&#x27;A&#x27;</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">            ht.Add(<span class="string">&quot;BB&quot;</span>, <span class="string">&quot;王五&quot;</span>);</span><br><span class="line">            <span class="comment">//使用foreach语句来循环遍历集合中的值</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">object</span> <span class="keyword">value</span> <span class="keyword">in</span> ht.Values)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;当前遍历到的值为：&quot;</span> + <span class="keyword">value</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//使用foreach语句来循环遍历集合对象本身</span></span><br><span class="line">            <span class="keyword">foreach</span> (DictionaryEntry dicEn <span class="keyword">in</span> ht)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(dicEn.Key + <span class="string">&quot;:&quot;</span> + dicEn.Value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//当前遍历到的值为：李四</span></span><br><span class="line">            <span class="comment">//当前遍历到的值为：王五</span></span><br><span class="line">            <span class="comment">//当前遍历到的值为：张三</span></span><br><span class="line">            <span class="comment">//A:李四</span></span><br><span class="line">            <span class="comment">//BB:王五</span></span><br><span class="line">            <span class="comment">//1:张三</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning modern"><p>在遍历集合对象时，集合对象的类型是DictionaryEntry，通过该类型的对象dicEn可以获取集合中的键与值。</p></div><h3 id="泛型集合"><a href="#泛型集合" class="headerlink" title="泛型集合"></a>泛型集合</h3><h4 id="List-lt-T-gt-泛型集合"><a href="#List-lt-T-gt-泛型集合" class="headerlink" title="List&lt;T&gt;泛型集合"></a>List&lt;T&gt;泛型集合</h4><p>C#提供了一个<code>List&lt;T&gt;</code>泛型集合，该集合不仅具备<code>ArrayList</code>集合的功能，而且还可以保证<code>List&lt;T&gt;</code>集合只能添加同类型元素，不会出现类型转换的问题。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Program</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//创建一个List&lt;string&gt;泛型集合</span></span><br><span class="line">            List&lt;<span class="built_in">string</span>&gt; list = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">            <span class="comment">//向List&lt;string&gt;集合中添加3个string类型元素</span></span><br><span class="line">            list.Add(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">            list.Add(<span class="string">&quot;Banana&quot;</span>);</span><br><span class="line">            list.Add(<span class="string">&quot;Orange&quot;</span>);</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">string</span> item <span class="keyword">in</span> list)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(item + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Dictionary-lt-TKey-TValue-gt-泛型集合"><a href="#Dictionary-lt-TKey-TValue-gt-泛型集合" class="headerlink" title="Dictionary&lt;TKey,TValue&gt;泛型集合"></a>Dictionary&lt;TKey,TValue&gt;泛型集合</h4><p><code>Hashtable</code>集合中的键与值在默认情况下都是object类型，这使得在取值时不可避免的遇到类型转换的问题。为了解决这个问题，C#中提供了泛型集合<code>Dictionary&lt;Tkey,TValue&gt;</code>，该集合中的键与值都只能是一种类型。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Program</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt; dic = <span class="keyword">new</span> Dictionary&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt;();</span><br><span class="line">            dic.Add(<span class="number">1</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">            dic.Add(<span class="number">2</span>, <span class="string">&quot;李四&quot;</span>);</span><br><span class="line">            dic.Add(<span class="number">3</span>, <span class="string">&quot;王五&quot;</span>);</span><br><span class="line">            <span class="comment">//通过遍历集合中的键获取对应的值</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">int</span> key <span class="keyword">in</span> dic.Keys)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(key + <span class="string">&quot;:&quot;</span> + dic[key]);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine();</span><br><span class="line">            <span class="comment">//从集合中移除指定的键值</span></span><br><span class="line">            dic.Remove(<span class="number">2</span>);</span><br><span class="line">            <span class="comment">//通过遍历键值对的方式来获取键与值</span></span><br><span class="line">            <span class="keyword">foreach</span> (KeyValuePair&lt;<span class="built_in">int</span>,<span class="built_in">string</span>&gt; kv <span class="keyword">in</span> dic)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(kv.Key + <span class="string">&quot;:&quot;</span> + kv.Value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning modern"><p>集合<code>Dictionary&lt;TKey,TValue&gt;</code>中的键值对类型为<code>KeyValuePair&lt;int,string&gt;</code>，通过该类型的对象就可以获取集合中的键和值</p></div><h4 id="自定义泛型"><a href="#自定义泛型" class="headerlink" title="自定义泛型"></a>自定义泛型</h4><p>在程序开发中，如果泛型集合<code>List&lt;T&gt;</code>与<code>Dictionary&lt;TKey,TValue&gt;</code>都不能满足实际需求，此时还可以自定义泛型。自定义泛型可以根据不同需求，灵活的设计集合中的属性和方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[修饰符] <span class="keyword">class</span>类名&lt;类型占位符&gt;&#123;</span><br><span class="line">      程序代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过自定义泛型格式可以看出，自定义泛型与普通类的语法格式相似，唯一的区别是多了一个类型占位符，类型占位符通常用T来表示。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Program</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            <span class="comment">//创建自定义泛型对象myClass</span></span><br><span class="line">            MyClass&lt;<span class="built_in">string</span>&gt; myClass = <span class="keyword">new</span> MyClass&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">            myClass.Add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;自定义泛型中的元素：&quot;</span> + myClass.Get());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//自定义泛型MyClass&lt;T&gt;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">MyClass</span>&lt;<span class="title">T</span>&gt; &#123;</span><br><span class="line">        T myElement; <span class="comment">//定义一个T类型字段</span></span><br><span class="line">        <span class="comment">//创建Add()方法，指定参数类型为T</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">T elem</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.myElement = elem;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//创建Get()方法，指定返回类型为T</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">Get</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.myElement;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WinForm窗体"><a href="#WinForm窗体" class="headerlink" title="WinForm窗体"></a>WinForm窗体</h2><h3 id="创建WinFrom窗体"><a href="#创建WinFrom窗体" class="headerlink" title="创建WinFrom窗体"></a>创建WinFrom窗体</h3><ol><li><p>创建项目<br><img src="/2022/11/25/CSharp/2022-11-26-21-41-40.png" alt="创建WinFrom窗体"></p></li><li><p>向窗体中添加控件<br>选中导航栏中的【视图】→【工具箱】<strong>快捷键</strong><code>Ctrl+Alt+X</code><br><img src="/2022/11/25/CSharp/2022-11-26-22-30-39.png" alt="向窗体中添加控件"></p></li><li><p>运行结果<br>单击工具栏中的<strong>启动按钮</strong>或者按快捷键<code>F5</code>启动程序，显示窗体的运行结果<br><img src="/2022/11/25/CSharp/2022-11-26-22-35-50.png" alt="运行结果"><br>之所以出现这样的结果，是因为当程序运行时，系统首先查找<code>Program.cs</code>文件中的<code>Application.Run()</code>方法，该方法就<strong>是窗体程序的入口</strong>，该方法中<strong>传递的参数是运行程序后首先出现的窗体对象</strong>。</p></li></ol><h3 id="Windows窗体应用程序结构"><a href="#Windows窗体应用程序结构" class="headerlink" title="Windows窗体应用程序结构"></a>Windows窗体应用程序结构</h3><blockquote class="pullquote right"><p><img src="/2022/11/25/CSharp/2022-11-26-22-38-18.png" alt="Windows窗体应用程序结构"></p></blockquote><ul><li><code>Properties</code>:用于设置项目的属性</li><li><code>引用</code>:用于设置对其他项目命名空间的引用</li><li><code>App.config</code>:用于设置数据库的配置信息</li><li><code>Form1.cs</code>:用于设置窗体的界面以及编写逻辑代码</li><li><code>Form1.Designer.cs</code>:用于在窗体类中自动生成控件的初始化代码</li><li><code>Form1.resx</code>:只有在创建控件对象或为控件注册事件时才会出现，用于存放窗体中使用的资源信息</li><li><code>Program.cs</code>:用来设置项目运行时的主窗体</li></ul><p>在WinFrom窗体应用程序中，最常用的文件为<code>Form1.cs</code>、<code>Form1.Designer.cs</code>、<code>Program.cs</code></p><div class="tabs" id="winform"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#winform-1">Form1.cs</button></li><li class="tab"><button type="button" data-href="#winform-2">Form1.Designer.cs</button></li><li class="tab"><button type="button" data-href="#winform-3">Program.cs</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="winform-1"><ul><li><code>Form1.cs</code>文件本身由<code>Form.cs[设计]</code>与<code>Form1.cs逻辑代码</code>两个部分构成</li><li><code>Form.cs[设计]</code>用于设计窗体</li><li><code>Form1.cs逻辑代码</code>用于存放交互功能的逻辑代码</li></ul><div class="note info modern"><p>切换：<br>右键单击<code>Form1.cs</code>文件 →【查看代码】<br>右击单击<code>Form1.cs</code>文件 →【查看设计器】</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="winform-2"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">Form1</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 必需的设计器变量。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="keyword">private</span> System.ComponentModel.IContainer components = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 清理所有正在使用的资源。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;disposing&quot;&gt;</span>如果应释放托管资源，为 true；否则为 false。<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Dispose</span>(<span class="params"><span class="built_in">bool</span> disposing</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (disposing &amp;&amp; (components != <span class="literal">null</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                components.Dispose();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">base</span>.Dispose(disposing);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">region</span> Windows 窗体设计器生成的代码</span></span><br><span class="line">        <span class="meta">#<span class="keyword">endregion</span></span></span><br><span class="line">        <span class="keyword">private</span> System.Windows.Forms.Label label1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>Form1.Designer.cs</code>的末尾，自动生成了一行代码，表示<code>Form1</code>窗体中添加了一个名称为<code>label1</code>的文本</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="winform-3"><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> 应用程序的主入口点。</span></span><br><span class="line">        <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">        [<span class="meta">STAThread</span>]</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Application.EnableVisualStyles();</span><br><span class="line">            Application.SetCompatibleTextRenderingDefault(<span class="literal">false</span>);</span><br><span class="line">            Application.Run(<span class="keyword">new</span> Form1());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="WinForm窗体属性"><a href="#WinForm窗体属性" class="headerlink" title="WinForm窗体属性"></a>WinForm窗体属性</h3><p>窗体常用属性：</p><div class="table-container"><table><thead><tr><th>属性</th><th>描述</th><th>可选参数</th></tr></thead><tbody><tr><td><code>Size</code></td><td>窗体的宽高</td></tr><tr><td><code>MinimumSize</code></td><td>窗体最小宽高</td></tr><tr><td><code>MaximumSize</code></td><td>窗体最大宽高</td></tr><tr><td><code>Text</code></td><td>窗体标题栏上显示的内容</td><td><code>string</code></td></tr><tr><td><code>StartPosition</code></td><td>窗体第一次出现的位置</td><td><code>CenterParent</code>:设置窗体在父窗体居中显示<br><code>CenterScreen</code>:设置窗体在当前显示窗口居中<br><code>Manual</code>:窗体位置由Location属性指定<br><code>WindowsDefaultBounds</code>:设置窗体为Windows系统默认位置<br><code>WindowsDefaultLocation</code>:和前者差不多</td></tr><tr><td><code>FormBoarderStyle</code></td><td>窗体的边框和标题栏的外观和行为</td></tr><tr><td><code>Icon</code></td><td>窗体的系统菜单框中显示的图标</td><td>图标资源格式必须为<code>.ico</code></td></tr><tr><td><code>IsMdiContainer</code></td><td>窗体是否为MDI容器</td></tr><tr><td><code>BackgroundImage</code></td><td>窗体背景图像</td><td>【本地资源】 or 【项目文件资源】<br> 项目资源文件导入的图片保存到项目资源文件<code>Resources</code>文件夹中<br>本地资源方式设置的背景图片保存在<code>Form1.resx</code> 文件中</td></tr><tr><td><code>BackgroundImageLayout</code></td><td>窗体的背景布局</td></tr><tr><td><code>MaximizeBox</code></td><td>是否显示窗体最大化按钮，默认<code>True</code></td><td><code>True</code> or <code>False</code></td></tr><tr><td><code>MinimizeBox</code></td><td>是否显示窗体最小化按钮，默认<code>True</code></td><td><code>True</code> or <code>False</code></td></tr><tr><td><code>Cursor</code></td><td>鼠标在窗体上的形状</td></tr></tbody></table></div><h3 id="WinFrom-窗体的事件"><a href="#WinFrom-窗体的事件" class="headerlink" title="WinFrom 窗体的事件"></a>WinFrom 窗体的事件</h3><p>Windows 是事件驱动的操作系统，对From(窗体)类的任何交互都是基于事件来实现的。</p><div class="table-container"><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td><code>Load</code></td><td>窗体加载时被触发</td></tr><tr><td><code>MouseClick</code></td><td>鼠标单击事件</td></tr><tr><td><code>MouseDoubleClick</code></td><td>鼠标双击事件</td></tr><tr><td><code>MouseMove</code></td><td>窗体移动鼠标事件</td></tr><tr><td><code>KeyDown</code></td><td>键盘按下事件</td></tr><tr><td><code>KeyUp</code></td><td>键盘释放时触发事件</td></tr><tr><td><code>FormClosing</code></td><td>窗体关闭时事件</td></tr></tbody></table></div><div class="note info modern"><p>在【属性】窗口单击⚡图标，列出窗体所有事件</p></div><h4 id="设置FormClosing事件"><a href="#设置FormClosing事件" class="headerlink" title="设置FormClosing事件"></a>设置FormClosing事件</h4><p>设置名称<code>Form1Closing</code><br>双击进入事件方法中</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> 窗体关闭时触发</span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;sender&quot;&gt;</span>表示事件源，这里指发起该事件的对象关闭按钮<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name=&quot;e&quot;&gt;</span>事件所携带的信息<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form1Closing</span>(<span class="params"><span class="built_in">object</span> sender, FormClosingEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//MessageBox.Show()方法显示具有文本、标题和按钮的消息框</span></span><br><span class="line">    <span class="keyword">if</span> (MessageBox.Show(<span class="string">&quot;是否关闭窗体？&quot;</span>,<span class="string">&quot;询问&quot;</span>,MessageBoxButtons.YesNo)==DialogResult.Yes)</span><br><span class="line">    &#123;</span><br><span class="line">        e.Cancel = <span class="literal">false</span>;   <span class="comment">//关闭窗体</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        e.Cancel = <span class="literal">true</span>;    <span class="comment">//取消关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MDI窗体"><a href="#MDI窗体" class="headerlink" title="MDI窗体"></a>MDI窗体</h3><h4 id="MDI窗体的概念"><a href="#MDI窗体的概念" class="headerlink" title="MDI窗体的概念"></a>MDI窗体的概念</h4><p><strong>单文档窗体</strong>(Single Document InterFace,SDI)，SDI窗体只能在窗体中显示一个文档。<br>如果需要在一个窗体中打开多个文档，需要使用<strong>多文档窗体</strong>(Multiple-Document Interface,MDI)。<br>MDI窗体用于在一个窗体中同时显示多个文档，每个文档显示在各自的窗体中。</p><h4 id="设置MDI窗体"><a href="#设置MDI窗体" class="headerlink" title="设置MDI窗体"></a>设置MDI窗体</h4><ol><li><p>设置父窗体<br>将<code>IsMdiContainer</code>属性值设置为<code>True</code></p></li><li><p>设置子窗体<br>通过设置窗体的<code>MdiParent</code>属性将该窗体设置为子窗体</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Form2_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">       &#123;</span><br><span class="line">           Form1 form1 = <span class="keyword">new</span> Form1();  <span class="comment">//创建Form1窗体对象</span></span><br><span class="line">           form1.MdiParent = <span class="keyword">this</span>;     <span class="comment">//将Form1窗体设置为子窗体</span></span><br><span class="line">           form1.Show();               <span class="comment">//调用Show()方法显示Form1窗体</span></span><br><span class="line">           Form3 form3 = <span class="keyword">new</span> Form3();</span><br><span class="line">           form3.MdiParent = <span class="keyword">this</span>;</span><br><span class="line">           form3.Show();</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="MDI子窗体的排列"><a href="#MDI子窗体的排列" class="headerlink" title="MDI子窗体的排列"></a>MDI子窗体的排列</h4><p>使用Form 类的<code>LayoutMdi(MdiLayout value)</code>方法排列多文档界面父窗体中的子窗体。<br>MdiLayout枚举用于指定MDI父窗体中子窗体的布局</p><div class="table-container"><table><thead><tr><th>枚举成员</th><th>描述</th><th>Show()</th></tr></thead><tbody><tr><td><code>Cascade</code></td><td>所有MDI子窗体均层叠在MDI父窗体工作区内</td><td><img src="/2022/11/25/CSharp/2022-11-27-10-50-58.png" alt="Cascade层叠"></td></tr><tr><td><code>TileHorizontal</code></td><td>所有MDI子窗体均水平平铺在MDI父窗体工作区内</td><td><img src="/2022/11/25/CSharp/2022-11-27-10-54-28.png" alt="TileHorizontal水平平铺"></td></tr><tr><td><code>TileVertical</code></td><td>所有MDI子窗体均垂直平铺在MDI父窗体工作区内</td><td><img src="/2022/11/25/CSharp/2022-11-27-10-57-08.png" alt="TileVertical垂直平铺"></td></tr></tbody></table></div><mark class="hl-label pink">1.创建程序</mark> <p>创建项目名为<code>MDISort</code>的<strong>Windows窗体应用程序</strong>。<br><mark class="hl-label pink">2.设置父窗体</mark> </p><ul><li><code>Text</code>:Form_MDIParent</li><li><code>Name</code>:Form_MDIParent</li><li><code>IsMdiContainer</code>:<code>True</code></li></ul><mark class="hl-label pink">3.在父窗体中添加菜单栏</mark> <ul><li>添加【菜单和工具栏】→【MenuStrip】控件</li><li>设置4个横向菜单项的文本为“显示子窗体”“水平平铺”“垂直平铺”“层叠平铺”</li><li>Name属性分别为<code>ShowSubform</code> <code>HorizontalTile</code> <code>VerticalTile</code> <code>StackedTiling</code></li></ul><mark class="hl-label pink">4.在项目中添加子窗体</mark> <p>添加3个子窗体，命名为 <code>Form_ChildOne.cs</code> <code>Form_ChildTwo.cs</code> <code>Form_ChildThree.cs</code></p><mark class="hl-label pink">5.实现【显示子窗体】菜单项功能</mark> <p>设置<code>Click</code>单击事件<strong>ShowSubform_Click()</strong></p><pre><code class="lang-c#">private void ShowSubform_click(object sender, EventArgs e)&#123;    //显示Form_ChildOne窗体    Form_ChildOne form_ChildOne = new Form_ChildOne();    form_ChildOne.MdiParent = this;    form_ChildOne.Show();    //显示Form_ChildTwo窗体    Form_ChildTwo form_ChildTwo =new Form_ChildTwo();    form_ChildTwo.MdiParent = this;    form_ChildTwo.Show();    //显示Form_ChildThree窗体    Form_ChildThree form_ChildThree = new Form_ChildThree();    form_ChildThree.MdiParent = this;    form_ChildThree.Show();&#125;</code></pre><mark class="hl-label pink">6.实现排列子窗体功能</mark> <ul><li>设置【水平平铺】<code>Click</code>单击事件<strong>HorizontalTile_Click()</strong></li><li>设置【垂直平铺】<code>Click</code>单击事件<strong>VerticalTile_Click()</strong></li><li>设置【层叠平铺】<code>Click</code>单击事件<strong>StackedTiling_Click()</strong></li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">HorizontalTile_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//调用LayoutMdi()方法，实现在MDI父窗体排列子窗体的功能</span></span><br><span class="line">    LayoutMdi(MdiLayout.TileHorizontal);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">VerticalTile_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    LayoutMdi(MdiLayout.TileVertical);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">StackedTiling_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    LayoutMdi(MdiLayout.Cascade);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="WinForm控件"><a href="#WinForm控件" class="headerlink" title="WinForm控件"></a>WinForm控件</h2><h3 id="WinForm简单控件"><a href="#WinForm简单控件" class="headerlink" title="WinForm简单控件"></a>WinForm简单控件</h3><h4 id="控件的常用属性与事件"><a href="#控件的常用属性与事件" class="headerlink" title="控件的常用属性与事件"></a>控件的常用属性与事件</h4><div class="note info modern"><p>在C#中，所有控件都直接或间接的继承自<code>Control</code>类</p></div><div class="table-container"><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>Name</code></td><td>控件对象名称</td></tr><tr><td><code>Text</code></td><td>控件关联文本</td></tr><tr><td><code>Visible</code></td><td>控件可见性</td></tr><tr><td><code>BackColor</code></td><td>控件背景颜色</td></tr><tr><td><code>Cursor</code></td><td>移至控件指针样式</td></tr><tr><td><code>Dock</code></td><td>定义要绑定到容器的控件边框</td></tr><tr><td><code>Enabled</code></td><td>是否启用控件</td></tr><tr><td><code>Font</code></td><td>控件中文本的字体</td></tr><tr><td><code>ForeColor</code></td><td>控件的前景色，用于显示文本</td></tr><tr><td><code>Size</code></td><td>控件的大小（像素）</td></tr><tr><td><code>Tag</code></td><td>与对象关联的用户定义数据</td></tr><tr><td><code>TextAlign</code></td><td>控件文本对齐方式</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td><code>Click</code></td><td>控件单击事件</td></tr><tr><td><code>MouseEnter</code></td><td>鼠标进入控件可见部分发生</td></tr><tr><td><code>MouseLeave</code></td><td>鼠标离开控件可见部分发生</td></tr><tr><td><code>BackColorChanged</code></td><td>在控件的<code>BackColor</code>属性值更改时发生</td></tr><tr><td><code>FontChanged</code></td><td>在控件的<code>Font</code>属性值更改时发生</td></tr></tbody></table></div><h4 id="Button控件、TextBox控件、Label控件"><a href="#Button控件、TextBox控件、Label控件" class="headerlink" title="Button控件、TextBox控件、Label控件"></a>Button控件、TextBox控件、Label控件</h4><p>登录窗体</p><details class="toggle"><summary class="toggle-button" style>登录窗体</summary><div class="toggle-content"><p><strong>1.创建项目</strong></p><ul><li>项目名称：Login</li><li>项目类型:Windows窗体应用程序</li></ul><p><strong>2.认识工具箱窗口</strong><br>【视图】→【工具箱】(<code>Ctrl+Alt+X</code>)<br>【工具箱】对WinForm的所有控件进行了分类<br><img src="/2022/11/25/CSharp/2022-11-27-11-27-06.png" alt="【工具箱】对WinForm的所有控件进行了分类"></p><p><strong>3.设计登录窗体</strong><br>自定义布局</p><p><strong>4.实现登录功能</strong></p><p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LoginClick</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//判断输入的用户名和密码是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">string</span>.IsNullOrEmpty(textName.Text) &amp;&amp; !<span class="built_in">string</span>.IsNullOrEmpty(textPassword.Text))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//用户名为test，密码为123，则登录成功</span></span><br><span class="line">        <span class="keyword">if</span> (textName.Text==<span class="string">&quot;test&quot;</span>&amp;&amp; textPassword.Text==<span class="string">&quot;123&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;登录成功!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;用户名或者密码错误!&quot;</span>);</span><br><span class="line">            textPassword.Text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;用户名或密码不能为空！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><code>IsNullOrEmpty()</code>方法判断文本框是否为空。</p><p><strong>5.运行程序，验证登录功能</strong><br><code>F5</code></p></div></details><h4 id="RichTextBox控件"><a href="#RichTextBox控件" class="headerlink" title="RichTextBox控件"></a>RichTextBox控件</h4><p><strong>RichTextBox控件</strong>允许用户输入和编辑文本，提供和比<strong>TextBox控件</strong>更高级的格式属性。</p><div class="table-container"><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>Multiline</code></td><td>控制文本是否可以跨行显示</td></tr><tr><td><code>ScrollBars</code></td><td>设置滚动条的显示样式，<code>Multiline</code>：<code>True</code>,才会显示滚动条样式</td></tr><tr><td><code>SelectionFont</code></td><td>获取或设置字体大小和样式</td></tr><tr><td><code>SelectionColor</code></td><td>获取或设置字体的颜色</td></tr><tr><td><code>SelectionBullet</code></td><td>将选定的段落设置为项目符号列表的格式</td></tr><tr><td><code>SelectionIndent</code></td><td>获取或设置以像素为单位的长度作为缩进量，对所选内容排版</td></tr></tbody></table></div><p><code>ScrollBars</code> 属性有7个属性值</p><div class="table-container"><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><code>Both</code></td><td>只有当文本超过控件的宽度或长度时，才显示水平滚动条或垂直关东条，或两个滚动条都显示</td></tr><tr><td><code>None</code></td><td>从不显示任何类型的滚动条</td></tr><tr><td><code>Horizontal</code></td><td>当文本超过控件的宽度时，显示水平滚动条，必须将<code>WordWrap</code>属性（多行编辑控件是否自动换行）的值为false，才会出现这种情况</td></tr><tr><td><code>Vertical</code></td><td>只有文本超过控件高度时，才会显示垂直滚动条</td></tr><tr><td><code>ForcedHorizontal</code></td><td><code>WordWrap</code>:<code>false</code>,显示水平滚动条，文本未超过控件宽度时，滚动条显示为浅灰色</td></tr><tr><td><code>ForcedVertical</code></td><td>始终显示垂直滚动条，文本未超过控件宽度时，滚动条显示为浅灰色</td></tr><tr><td><code>ForcedBoth</code></td><td>始终显示垂直滚动条，<code>WordWrap</code>:<code>false</code>,显示水平滚动条，文本未超过控件宽度时，滚动条显示为浅灰色</td></tr></tbody></table></div><div class="note info modern"><p><strong>RichTextBox控件</strong>中不仅可以显示普通文本，还可以显示<strong>超链接</strong>，超链接的样式为下划线形式</p></div><details class="toggle"><summary class="toggle-button" style>RichTextBox控件用法</summary><div class="toggle-content"><p><strong>1.创建项目</strong></p><ul><li>项目名称：RichTextBox</li><li>项目类型:Windows窗体应用程序</li></ul><p><strong>2.设计项目的窗体</strong><br>步骤</p><ul><li>修改<code>Form1.cs</code>文件名为<code>RichTextBox.cs</code></li><li><code>Text</code>:有格式文本框</li><li>添加<strong>RichTextBox控件</strong></li><li>控件<code>Multiline</code>:<code>True</code></li><li><code>ScrollBars</code>:<code>Both</code></li><li><code>WordWrap</code>(自动换行):<code>False</code></li></ul><p><strong>3.在RichTextBox控件添加超链接</strong><br>设置<strong>窗体</strong>的<code>Load</code>事件<code>RichTextBox_Load()</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RichTextBox_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Font font1 = <span class="keyword">new</span> Font(<span class="string">&quot;宋体&quot;</span>, <span class="number">8</span>, FontStyle.Bold);</span><br><span class="line">    richTextBox1.SelectionFont = font1;</span><br><span class="line">    richTextBox1.SelectionColor = Color.Red;</span><br><span class="line">    richTextBox1.AppendText(</span><br><span class="line">        <span class="string">&quot;百度：https://www.baidu.com \n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;CSDN：https://www.csdn.net \n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;网易：https://www.163.com \n&quot;</span>);</span><br><span class="line">    Font font2 = <span class="keyword">new</span> Font(<span class="string">&quot;楷体&quot;</span>, <span class="number">9</span>, FontStyle.Bold);</span><br><span class="line">    richTextBox1.SelectionFont = font2;</span><br><span class="line">    richTextBox1.SelectionColor = Color.Green;</span><br><span class="line">    richTextBox1.AppendText(</span><br><span class="line">        <span class="string">&quot;腾讯：https://www.qq.com \n&quot;</span> +</span><br><span class="line">        <span class="string">&quot;qq空间：https://www.qzone.com&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.开启超链接</strong><br>设置<strong>RichTextBox控件</strong>的<code>LinkClicked</code>（单击文本中的超链接时发生）事件<code>RichTextBox_LinkClicked()</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Drawing;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RichTextBox_LinkClicked</span>(<span class="params"><span class="built_in">object</span> sender, LinkClickedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Process.Start(e.LinkText);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.运行程序，验证登录功能</strong><br><code>F5</code></p></div></details><h4 id="CheckBox控件、RadioButton控件"><a href="#CheckBox控件、RadioButton控件" class="headerlink" title="CheckBox控件、RadioButton控件"></a>CheckBox控件、RadioButton控件</h4><ul><li><strong>CheckBox（复选框）</strong>，可以被同时选中</li><li><strong>RadioButton（单选按钮）</strong>多个RadioButton控件位于同一组，只能有一个被选中</li><li>二者都只有选中或未选中两种状态</li></ul><details class="toggle"><summary class="toggle-button" style>注册窗体</summary><div class="toggle-content"><p><strong>1.创建项目</strong></p><ul><li>项目名称：Register</li><li>项目类型:Windows窗体应用程序</li></ul><p><strong>2.设计项目的窗体</strong><br>步骤</p><ul><li>修改<code>Form1.cs</code>文件名为<code>RegisterForm.cs</code></li><li><code>Text</code>:注册</li><li>添加4个<strong>Label控件</strong>，设置<code>Text</code>：“账户””密码”“性别”“爱好”</li><li>添加2个<strong>TextBox控件</strong>用于数账户与密码</li><li>“性别”添加2个<strong>RadioButton控件</strong>，设置<code>Text</code>：“男♂”“女♀”</li><li>“爱好”添加3个<strong>CheckBox控件</strong>，设置<code>Text</code>：“篮球🏀”“游泳🏊‍”“看书📕”</li><li>添加2个<strong>Button控件</strong>，设置<code>Text</code>：“注册”“重置”</li></ul><p><strong>3.实现窗体的加载事件</strong><br>设置窗体的<code>Load</code>事件<code>RegisterForm_Load()</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RegisterForm_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//窗体在加载时设置radioButton_Man值为true</span></span><br><span class="line">    radioButton_Man.Checked = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.实现注册功能</strong><br>设置“注册”按钮的<code>Click</code>事件<code>Register_Click()</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Register_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//设置标记变量</span></span><br><span class="line">    <span class="built_in">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//遍历窗体中所有控件</span></span><br><span class="line">    <span class="keyword">foreach</span> (Control item <span class="keyword">in</span> <span class="keyword">this</span>.Controls)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断当前控件是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(item.Text))</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;请确定已填写全部信息！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;注册成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.实现重置用户信息的功能</strong><br>设置“重置”按钮的<code>Click</code>事件<code>Reset_Click()</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Reset_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//遍历窗体中所有控件</span></span><br><span class="line">    <span class="keyword">foreach</span> (Control item <span class="keyword">in</span> <span class="keyword">this</span>.Controls)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(item <span class="keyword">is</span> TextBox)</span><br><span class="line">        &#123;</span><br><span class="line">            item.Text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">is</span> RadioButton)</span><br><span class="line">        &#123;</span><br><span class="line">            radioButton_Man.Checked = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (item <span class="keyword">is</span> CheckBox)</span><br><span class="line">        &#123;</span><br><span class="line">            CheckBox check = (CheckBox)item;</span><br><span class="line">            check.Checked = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6.运行程序，验证注册和重置功能</strong><br><code>F5</code></p></div></details><h4 id="GroupBox容器"><a href="#GroupBox容器" class="headerlink" title="GroupBox容器"></a>GroupBox容器</h4><p><strong>GroupBox容器</strong>可以使窗体的布局整齐、美观，对窗体中的控件进行统一管理。</p><p>需求：由于窗体中所有的<strong>RadioButton控件</strong>只能选中一个，因此，无法完成两个题的解答，解决这个问题可以使用<strong>GroupBox容器</strong>实现。</p><details class="toggle"><summary class="toggle-button" style>GroupBox的使用</summary><div class="toggle-content"><p><strong>1.创建项目</strong></p><ul><li>项目名称：GroupBox</li><li>项目类型:Windows窗体应用程序</li></ul><p><strong>2.设计容器窗体</strong><br>步骤</p><ul><li>修改<code>Form1.cs</code>文件名为<code>GroupBoxForm.cs</code></li><li><code>Text</code>:容器</li><li>添加2个<strong>GroupBox容器</strong>，设置<code>Text</code>：“题目一””题目二”</li><li>题目自定义</li></ul><p><strong>3.运行程序，验证容器的分组功能</strong><br><code>F5</code></p></div></details><h4 id="TreeView控件"><a href="#TreeView控件" class="headerlink" title="TreeView控件"></a>TreeView控件</h4><ul><li>在程序开发中，经常需要设计树状结构目录，例如Windows中资源管理器</li><li><strong>TreeView（树状图）控件</strong>就是以树状结构显示数据</li><li>在<strong>TreeView控件</strong>中每个节点都有一个与之相关的<code>TreeNode</code>对象</li><li>每个<code>TreeNode</code>对象都包含一个<code>Nodes</code>属性和一个<code>Level</code>属性</li><li><code>Nodes</code>表示TreeNode对象的集合</li><li><code>Level</code>用于获取TreeNode对象在控件中的深度（深度从0开始）</li></ul><details class="toggle"><summary class="toggle-button" style>TreeView的使用</summary><div class="toggle-content"><p><strong>1.创建项目</strong></p><ul><li>项目名称：TreeView</li><li>项目类型:Windows窗体应用程序</li></ul><p><strong>2.设计【树状图】窗体</strong><br>步骤</p><ul><li>修改<code>Form1.cs</code>文件名为<code>TreeViewForm.cs</code></li><li><code>Text</code>:树状图</li><li>添加1个<strong>TreeView控件</strong>，单击该控件【属性】窗口中<code>Nodes</code>属性下的<strong>编辑节点</strong>—→【TreeNode编辑器】界面</li><li>添加节点与子节点</li></ul><p><strong>3.实现【树状图】船体的加载功能</strong><br>通过设置【树状图】窗体的<code>Load</code>事件<code>TreeViewForm_Load()</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">TreeViewForm_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//ExpandAll()用于展开所有树节点</span></span><br><span class="line">    treeView1.ExpandAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.实现TreeView控件更改选定内容的功能</strong><br>通过设置<strong>TreeView控件</strong>的<code>AfterSelect</code>(更改选定内容)事件<code>treeView1_AfterSelect()</code></p><p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">treeView1_AfterSelect</span>(<span class="params"><span class="built_in">object</span> sender, TreeViewEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (treeView1.SelectedNode.Level!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//获取当前TreeView控件中被选中的树节点的Text属性</span></span><br><span class="line">        <span class="built_in">string</span> text = treeView1.SelectedNode.Text;</span><br><span class="line">        <span class="built_in">string</span> parentText = treeView1.SelectedNode.Parent.Text;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;您现在单击到的是：&quot;</span> + parentText + text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>5.运行程序</strong><br><code>F5</code></p></div></details><h4 id="Timer控件"><a href="#Timer控件" class="headerlink" title="Timer控件"></a>Timer控件</h4><p><strong>Timer控件</strong>用于周期性执行某个操作。</p><div class="table-container"><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>Enabled</code></td><td>获取或设置计时器是否正运行</td></tr><tr><td><code>Interval</code></td><td>用于设置<strong>Timer控件</strong>执行一次的间隔时间（毫秒为单位）</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>Start</code></td><td>启动计时器</td></tr><tr><td><code>Stop</code></td><td>停止计时器</td></tr></tbody></table></div><details class="toggle"><summary class="toggle-button" style>Timer控件的使用</summary><div class="toggle-content"><p><strong>1.创建项目</strong></p><ul><li>项目名称：Timer</li><li>项目类型:Windows窗体应用程序</li></ul><p><strong>2.设计窗体界面</strong><br>步骤</p><ul><li>修改<code>Form1.cs</code>文件名为<code>TimerForm.cs</code></li><li><code>Text</code>:双色球选号器</li><li>添加9个<strong>Label控件</strong>，设置其中2个<code>Text</code>：“红球”“蓝球”；另外7个<code>Text</code>：“00”<code>padding</code>:<code>10,10,10,10</code></li><li>添加2个<strong>Button控件</strong>作为【开始】【停止】按钮</li><li>添加<strong>Timer控件</strong>，设置<code>Interval</code>:200</li></ul><p><strong>3.实现双色球选号的功能</strong><br>设置按钮<code>Click</code>事件</p><p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button_Start_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    timer1.Start();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">timer1_Tick</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Random random = <span class="keyword">new</span> Random();</span><br><span class="line">    label3.Text = random.Next(<span class="number">1</span>, <span class="number">33</span>).ToString(<span class="string">&quot;00&quot;</span>);</span><br><span class="line">    label4.Text = random.Next(<span class="number">1</span>, <span class="number">33</span>).ToString(<span class="string">&quot;00&quot;</span>);</span><br><span class="line">    label5.Text = random.Next(<span class="number">1</span>, <span class="number">33</span>).ToString(<span class="string">&quot;00&quot;</span>);</span><br><span class="line">    label6.Text = random.Next(<span class="number">1</span>, <span class="number">33</span>).ToString(<span class="string">&quot;00&quot;</span>);</span><br><span class="line">    label7.Text = random.Next(<span class="number">1</span>, <span class="number">33</span>).ToString(<span class="string">&quot;00&quot;</span>);</span><br><span class="line">    label8.Text = random.Next(<span class="number">1</span>, <span class="number">33</span>).ToString(<span class="string">&quot;00&quot;</span>);</span><br><span class="line">    label9.Text = random.Next(<span class="number">1</span>, <span class="number">33</span>).ToString(<span class="string">&quot;00&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button_Stop_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    timer1.Stop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>4.运行程序</strong><br><code>F5</code></p></div></details><h4 id="ProgressBar控件"><a href="#ProgressBar控件" class="headerlink" title="ProgressBar控件"></a>ProgressBar控件</h4><ul><li><strong>ProgressBar控件</strong>用于表示进度条</li><li><code>Value</code>表示进度条当前位置</li><li><code>Minimum</code>表示进度条范围下限</li><li><code>Maximum</code>表示进度条范围上限</li></ul><details class="toggle"><summary class="toggle-button" style>ProgressBar的使用</summary><div class="toggle-content"><p><strong>1.创建项目</strong></p><ul><li>项目名称：ProgressBar</li><li>项目类型:Windows窗体应用程序</li></ul><p><strong>2.设计窗体界面</strong><br>步骤</p><ul><li>修改<code>Form1.cs</code>文件名为<code>ProgressBarForm.cs</code></li><li><code>Text</code>:英雄血条</li><li>添加1个<strong>Label控件</strong>，设置<code>Text</code>：“英雄血条”</li><li>添加<strong>ProgressBar控件</strong>设置<code>Name</code>:pbBlood,<code>Minimum</code>:0,<code>Maximum</code>:100</li><li>添加1个<strong>Label控件</strong>，设置<code>Text</code>：“血量”,<code>Name</code>:labelBlood</li><li>添加2个<strong>Button控件</strong>作为【加血】【减血】按钮</li></ul><p><strong>3.实现窗体加载功能</strong><br>设置窗体<code>Load</code>事件</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ProgressBarForm_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//窗体加载时获取当前的血量值</span></span><br><span class="line">    labelBlood.Text = pbBlood.Value.ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.实现加血功能</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//当血量小于最大值时，血量增加5</span></span><br><span class="line">    <span class="keyword">if</span> (pbBlood.Value &lt; pbBlood.Maximum)</span><br><span class="line">    &#123;</span><br><span class="line">        pbBlood.Value += <span class="number">5</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;英雄血已经加满！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    labelBlood.Text = pbBlood.Value.ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.实现减血功能</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">private void button2_Click(object sender, EventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    if (pbBlood.Value &gt; pbBlood.Minimum)</span><br><span class="line">    &#123;</span><br><span class="line">        pbBlood.Value -= 5;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(&quot;英雄死亡！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    labelBlood.Text = pbBlood.Value.ToString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6.运行程序</strong><br><code>F5</code></p></div></details><h3 id="WinForm列表和数据控件"><a href="#WinForm列表和数据控件" class="headerlink" title="WinForm列表和数据控件"></a>WinForm列表和数据控件</h3><p>WinForm中的列表和数据控件包括<strong>ListBox列表框</strong>、<strong>ComboBox下拉列表框</strong>、<strong>ListView列表</strong>和<strong>DataGridView数据控件</strong>。</p><h4 id="ListBox控件"><a href="#ListBox控件" class="headerlink" title="ListBox控件"></a>ListBox控件</h4><p>ListBox控件又成为列表框，他用于显示选项列表，用户可以从中选择一项或多项，如果列表中选项的总数超过可以显示的总数，则控件会自动添加滚动条。</p><p><strong>1.在ListBox控件中添加和移除项。</strong><br>在ListBox列表框中选项的集合通过Items属性表示，该属性提供了一个<code>Add()</code>方法，用于向ListBox列表框中添加数据，另外，Items属性也提供了一个<code>RemoveAt()</code>方法，用于删除在ListBox列表框选中的数据。</p><figure class="highlight c#"><figcaption><span>向ListBox控件中添加选项</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">listBox1.Items.Add(“华为手机”);</span><br><span class="line">listBox1.Items.Add(“小米手机”);</span><br><span class="line">listBox1.Items.Add(“Oppo手机”);</span><br><span class="line">listBox1.Items.Add(“荣耀手机”);</span><br><span class="line">listBox1.Items.Add(“魅族手机”);</span><br><span class="line">listBox1.Items.Add(“Vivo手机”);</span><br></pre></td></tr></table></figure><p>删除<strong>ListBox控件</strong>中选中项<br><figure class="highlight c#"><figcaption><span>Button控件Click事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取到ListBox控件中被选中项的从零开始的索引</span></span><br><span class="line"><span class="built_in">int</span> index = listBox1.SelectedIndex;</span><br><span class="line">listBox1.Items.RemoveAt(index);</span><br></pre></td></tr></table></figure><br><strong>2.创建显示滚动条的列表控件</strong></p><ul><li>通过设置<strong>ListBox控件</strong>的<code>HorizontalScrollbar</code>属性和<code>ScrollAlwaysVisible</code>属性的值可以使列表框显示滚动条。</li><li>如果将<code>HorizontalScrollbar</code>属性设置为True，则显示水平滚动条，如果设置为False，则不显示水平滚动条。</li><li>如果将<code>ScrollAlwaysVisible</code>属性设置为true，则会显示垂直滚动条，如果设置为False，，则不显示垂直滚动条。</li></ul><figure class="highlight c#"><figcaption><span>使ListBox控件显示水平和垂直方向的滚动条</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listBox1.HorizontalScrollbar = <span class="literal">true</span>;   <span class="comment">//使列表框水平滑动</span></span><br><span class="line">listBox1.ScrollAlwaysVisible = <span class="literal">true</span>;   <span class="comment">//使列表框垂直滑动</span></span><br></pre></td></tr></table></figure><p><strong>3.在ListBox列表框选择多项</strong><br>在ListBox列表框中选择多个选项的操作是通过设置<code>SelectionMode</code>属性的值实现的，<code>SelectionMode</code>属性值是<code>SelectionMode</code><strong>枚举</strong>成员之一，默认为<code>SelectionMode.One</code>。    </p><div class="table-container"><table><thead><tr><th>枚举成员</th><th>描述</th></tr></thead><tbody><tr><td><code>MultiExtended</code></td><td>可以选择多项，并且可使用【Shift】键、【Ctrl】键以选择内容</td></tr><tr><td><code>MultiSimple</code></td><td>可以选择多项</td></tr><tr><td><code>None</code></td><td>无法选择项</td></tr><tr><td><code>One</code></td><td>只能选择一项</td></tr></tbody></table></div><figure class="highlight c#"><figcaption><span>实现在控件中选择多个项，并且用户可使用SHIFT键、CTRL键和方向键选择内容的功能</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listBox1.SelectionMode = SelectionMode.MultiExtended;</span><br></pre></td></tr></table></figure><h4 id="ComboBox控件"><a href="#ComboBox控件" class="headerlink" title="ComboBox控件"></a>ComboBox控件</h4><p>与ListBox相比，ComboBox下拉列表框也是用来显示列表的，不同的是，它主要用于在下拉组合框中显示数据，并且<strong>该列表框中的选项只能被选中一个</strong>。</p><details class="toggle"><summary class="toggle-button" style>ComboBox控件</summary><div class="toggle-content"><p><strong>1.创建项目</strong></p><ul><li>项目名称：ComboBox</li><li>项目类型:Windows窗体应用程序</li></ul><p><strong>2.设计窗体界面</strong><br>步骤</p><ul><li>修改<code>Form1.cs</code>文件名为<code>ComboBoxForm.cs</code></li><li><code>Text</code>:省市选择</li><li>添加一个Label控件，设置<code>Text</code>:请选择所在城市</li><li>添加2个ComboBox控件，设置<code>Name</code>:”cmbProvince””cmbCity”用于表示省市</li></ul><p><strong>3.实现窗体的加载事件</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private void ComboBoxForm_Load(object sender, EventArgs e)</span><br><span class="line">&#123;</span><br><span class="line">    //向cmbProvince中添加下拉列表项河北省、湖北省</span><br><span class="line">    cmbProvince.Items.AddRange(new string[] &#123; &quot;河北省&quot;, &quot;湖北省&quot; &#125;);</span><br><span class="line">    //设置当前选定项的索引</span><br><span class="line">    cmbProvince.SelectedIndex = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.实现更改下拉框的选项功能</strong></p><figure class="highlight c#"><figcaption><span>【cmbProvince下拉列表框】SelectedIndexChanged事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cmbProvince_SelectedIndexChanged</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//清除下拉框列表中的选项</span></span><br><span class="line">    cmbCity.Items.Clear();</span><br><span class="line">    <span class="comment">//选中项的索引为0时展开河北省下的子节点</span></span><br><span class="line">    <span class="keyword">if</span> (cmbProvince.SelectedIndex==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//向cmbCity的Tag属性中添加所需数据</span></span><br><span class="line">        cmbCity.Tag = <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        cmbCity.Items.AddRange(<span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;唐山市&quot;</span>, <span class="string">&quot;石家庄市&quot;</span>, <span class="string">&quot;邯郸市&quot;</span> &#125;);</span><br><span class="line">        cmbCity.SelectedIndex = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//选中项的索引为1时展开湖北省下的子节点</span></span><br><span class="line">    <span class="keyword">if</span> (cmbProvince.SelectedIndex == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//向cmbCity的Tag属性中添加所需数据</span></span><br><span class="line">        cmbCity.Tag = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">        cmbCity.Items.AddRange(<span class="keyword">new</span> <span class="built_in">string</span>[] &#123; <span class="string">&quot;武汉市&quot;</span>, <span class="string">&quot;荆州市&quot;</span>, <span class="string">&quot;十堰市&quot;</span> &#125;);</span><br><span class="line">        cmbCity.SelectedIndex = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><p><strong>5.运行程序</strong><br><code>F5</code></p><h4 id="ListView控件"><a href="#ListView控件" class="headerlink" title="ListView控件"></a>ListView控件</h4><p><strong>ListView控件</strong>又称为列表视图控件，他主要用于显示带图标的项列表，项列表中可以显示大图标、小图标和数据。</p><p><strong>1.ListView控件中添加项</strong><br>需要用到Items(控件中所有项的集合)属性的<code>Add()</code>方法，该方法主要用于将项添加到Items集合中。<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> ListViewItem <span class="title">Add</span>(<span class="params">ListViewItem <span class="keyword">value</span></span>)</span></span><br></pre></td></tr></table></figure></p><p><strong>2.ListView控件中移除项</strong><br>ListView控件中移除项：移除ListView控件中项时可以使用Items属性的<code>RemoveAt()</code>方法或者<code>Clear()</code>方法，其中<code>RemoveAt()</code>方法用于移除指定的项，而<code>Clear ()</code>方法用于从集合中移除所有项。<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">listView1.Items.RemoveAt(<span class="number">2</span>);</span><br><span class="line">listView1.Items.Clear();</span><br></pre></td></tr></table></figure></p><div class="note warning modern"><p>如果要移除ListView控件的所有项和列，需要使用<strong>ListView控件的Clear()方法</strong>，而<strong>Items属性的Clear()方法</strong>只能移除Items属性集合中的所有项。</p></div><p><strong>3.选择ListView控件中的项</strong><br>选择ListView控件中的项时可以使用<code>Selected</code>属性(bool)，该属性主要用于获取或设置一个值，该值指示是否选定此项。<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用Selected属性选中ListView的第2项</span></span><br><span class="line">listView1.Items[<span class="number">1</span>].Selected = <span class="literal">true</span>; </span><br></pre></td></tr></table></figure><br><strong>4.ListView的五种视图：LargeIcon视图、SmallIcon视图、List视图、Details视图和Tile视图</strong></p><div class="table-container"><table><thead><tr><th>视图</th><th>描述</th><th>Show</th></tr></thead><tbody><tr><td>Details视图</td><td>可以显示任意的列，但只有第一列可以包含一个小图标和标签，其他的列项只能显示文字信息，有列表头。</td><td><img src="/2022/11/25/CSharp/2022-11-30-18-02-26.png" alt="Details视图"></td></tr><tr><td>LargeIcon视图</td><td>每个项都显示一个最大化图标，在他的下面有一个标签。</td><td><img src="/2022/11/25/CSharp/2022-11-30-18-03-09.png" alt="LargeIcon视图"></td></tr><tr><td>SmallIcon视图</td><td>每个项都显示一个小图标，在他的右边有一个标签。</td><td><img src="/2022/11/25/CSharp/2022-11-30-18-03-56.png" alt="SmallIcon视图"></td></tr><tr><td>List视图</td><td>每个项都显示一个小图标，在他的右边有一个标签。各项排列在列中，没有列标头。</td><td><img src="/2022/11/25/CSharp/2022-11-30-18-04-24.png" alt="List视图"></td></tr><tr><td>Tile</td><td>每个项都显示为一个完整大小的图标，在他的右边带项标签和子项信息。（只有Window XP和Windows Server 2003系列支持）</td></tr></tbody></table></div><p><strong>5.ListView控件分组</strong><br>通过设置ListView控件中各个项的<code>System.Windows.Forms.ListViewItem.Group</code>属性，可以向组分配项或在组移动项。</p><figure class="highlight c#"><figcaption><span>将ListView控件的第一项分配到第一个组中</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">listView1.Items[<span class="number">0</span>].Group = listView1.Groups[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><details class="toggle"><summary class="toggle-button" style>ListView控件的使用</summary><div class="toggle-content"><p><strong>1.创建项目</strong></p><ul><li>项目名称：ListView</li><li>项目类型:Windows窗体应用程序</li></ul><p><strong>2.设计窗体界面</strong><br>步骤</p><ul><li>修改<code>Form1.cs</code>文件名为<code>ListViewForm.cs</code></li><li><code>Text</code>:列表视图</li><li>添加1个ListView控件用于显示列表视图</li><li>添加1个ImageList控件，用于管理由其他控件（例如ListView、TreeView）使用的图像集合</li><li>添加5个Button控件，设置<code>Text</code>:”Details””SmallIcon””List””LargeIcon””分组”</li></ul><p><strong>3.在ImageList控件中添加图片</strong><br>单击该控件右上角按钮选择图像添加即可</p><p><strong>4.实现Details视图功能</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button1_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    listView1.Clear();</span><br><span class="line">    listView1.ShowGroups= <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//设置项在ListView控件中的显示方式为Details视图</span></span><br><span class="line">    <span class="keyword">this</span>.listView1.View = View.Details;</span><br><span class="line">    <span class="comment">//添加列标题</span></span><br><span class="line">    <span class="comment">//第一个参数表示列标题文本信息，第二个参数表示标题初始化宽度，第三个参数表示列对齐方式</span></span><br><span class="line">    <span class="keyword">this</span>.listView1.Columns.Add(<span class="string">&quot;列标题1&quot;</span>, <span class="number">100</span>, HorizontalAlignment.Center);</span><br><span class="line">    <span class="keyword">this</span>.listView1.Columns.Add(<span class="string">&quot;列标题2&quot;</span>, <span class="number">100</span>, HorizontalAlignment.Center);</span><br><span class="line">    <span class="keyword">this</span>.listView1.Columns.Add(<span class="string">&quot;列标题3&quot;</span>, <span class="number">100</span>, HorizontalAlignment.Center);</span><br><span class="line">    listView1.SmallImageList = imageList1;</span><br><span class="line">    <span class="comment">//添加数据项</span></span><br><span class="line">    <span class="comment">//数据更新，UI暂时挂起，直到EndUpdate绘制控件</span></span><br><span class="line">    <span class="comment">//可有效避免闪烁并大大提高加载速度</span></span><br><span class="line">    <span class="keyword">this</span>.listView1.BeginUpdate();</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ListViewItem item = <span class="keyword">new</span> ListViewItem();</span><br><span class="line">        item.Text = <span class="string">&quot;subitem&quot;</span> + i;</span><br><span class="line">        item.SubItems.Add(<span class="string">&quot;第2列，第&quot;</span> + i + <span class="string">&quot;行&quot;</span>);</span><br><span class="line">        item.SubItems.Add(<span class="string">&quot;第3列，第&quot;</span> + i + <span class="string">&quot;行&quot;</span>);</span><br><span class="line">        item.ImageIndex = i;</span><br><span class="line">        <span class="keyword">this</span>.listView1.Items.Add(item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.listView1.EndUpdate();<span class="comment">//结束数据处理，UI界面一次性绘制</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>5.实现SmallIcon视图功能</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button2_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    listView1.Clear();</span><br><span class="line">    listView1.ShowGroups = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">this</span>.listView1.View = View.SmallIcon;</span><br><span class="line">    <span class="keyword">this</span>.listView1.SmallImageList = imageList1;</span><br><span class="line">    <span class="keyword">this</span>.listView1.BeginUpdate();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ListViewItem item = <span class="keyword">new</span> ListViewItem();</span><br><span class="line">        item.ImageIndex = i;</span><br><span class="line">        item.Text = <span class="string">&quot;item&quot;</span> + i;</span><br><span class="line">        listView1.Items.Add(item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.listView1.EndUpdate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>6.实现List视图功能</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button3_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    listView1.Clear();</span><br><span class="line">    listView1.ShowGroups = <span class="literal">false</span>;</span><br><span class="line">    listView1.View = View.List;</span><br><span class="line">    listView1.SmallImageList = imageList1;</span><br><span class="line">    listView1.BeginUpdate();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ListViewItem item = <span class="keyword">new</span> ListViewItem();</span><br><span class="line">        item.Text = <span class="string">&quot;item&quot;</span> + i;</span><br><span class="line">        item.ImageIndex = i;</span><br><span class="line">        listView1.Items.Add(item);</span><br><span class="line">    &#125;</span><br><span class="line">    listView1.EndUpdate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>7.实现LargeIcon功能</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button4_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    listView1.Items.Clear();</span><br><span class="line">    listView1.ShowGroups = <span class="literal">false</span>;</span><br><span class="line">    listView1.View = View.LargeIcon;</span><br><span class="line">    listView1.LargeImageList = imageList1;</span><br><span class="line">    listView1.BeginUpdate();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        ListViewItem item = <span class="keyword">new</span> ListViewItem();</span><br><span class="line">        item.ImageIndex = i;</span><br><span class="line">        item.Text = <span class="string">&quot;item&quot;</span> + i;</span><br><span class="line">        listView1.Items.Add(item);</span><br><span class="line">    &#125;</span><br><span class="line">    listView1.EndUpdate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>8.编写分组功能</strong></p><p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">button5_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    listView1.Clear();</span><br><span class="line">    listView1.Groups.Clear();</span><br><span class="line">    listView1.Items.Clear();</span><br><span class="line">    <span class="comment">//设置ShowGroups属性为true(默认false)，否则不显示出分组</span></span><br><span class="line">    listView1.ShowGroups = <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//创建男生分组</span></span><br><span class="line">    ListViewGroup man = <span class="keyword">new</span> ListViewGroup();</span><br><span class="line">    man.Header = <span class="string">&quot;男生&quot;</span>;<span class="comment">//设置组的标题</span></span><br><span class="line">    <span class="comment">//设置组标题文本对齐方式（默认Left）</span></span><br><span class="line">    man.HeaderAlignment = HorizontalAlignment.Left;</span><br><span class="line">    <span class="comment">//创建女生分组</span></span><br><span class="line">    ListViewGroup women = <span class="keyword">new</span> ListViewGroup();</span><br><span class="line">    women.Header = <span class="string">&quot;女生&quot;</span>;</span><br><span class="line">    <span class="comment">//组标题居中对齐</span></span><br><span class="line">    women.HeaderAlignment = HorizontalAlignment.Center;</span><br><span class="line">    listView1.Groups.Add(man);</span><br><span class="line">    listView1.Groups.Add(women);</span><br><span class="line">    <span class="comment">//添加项</span></span><br><span class="line">    listView1.Items.Add(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">    listView1.Items.Add(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">    listView1.Items.Add(<span class="string">&quot;娜娜&quot;</span>);</span><br><span class="line">    listView1.Items.Add(<span class="string">&quot;玲玲&quot;</span>);</span><br><span class="line">    <span class="comment">//将索引为0和1的项添加到男生分组</span></span><br><span class="line">    listView1.Items[<span class="number">0</span>].Group = listView1.Groups[<span class="number">0</span>];</span><br><span class="line">    listView1.Items[<span class="number">1</span>].Group = listView1.Groups[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//将索引为2和3的项添加到女生分组</span></span><br><span class="line">    listView1.Items[<span class="number">2</span>].Group = listView1.Groups[<span class="number">1</span>];</span><br><span class="line">    listView1.Items[<span class="number">3</span>].Group = listView1.Groups[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><img src="/2022/11/25/CSharp/2022-11-30-18-08-37.png" alt="分组"></p><p><strong>9.运行程序</strong><br><code>F5</code></p></div></details><h4 id="DataGridView控件"><a href="#DataGridView控件" class="headerlink" title="DataGridView控件"></a>DataGridView控件</h4><p><strong>DataGridView控件</strong>是用于显示表格的数据控件，该控件在实际应用中非常实用，特别需要表格显示数据时。我们可以通过添加属性的方式来控制表格的样式。</p><div class="table-container"><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>DataSource</code></td><td>指示DataGridView控件的数据源</td></tr><tr><td><code>GridColor</code></td><td>设置单元格网格线的颜色</td></tr><tr><td><code>DefaultCellStyle</code></td><td>单元格的默认样式(对齐方式，前景色，后景色，字体等)</td></tr><tr><td><code>RowHeadersVisible</code></td><td>左侧标题栏是否隐藏</td></tr><tr><td><code>AllowUserToAddRows</code></td><td>是否向用户显示用于添加行的选项</td></tr><tr><td><code>AllowUserToDeleteRows</code></td><td>是否允许用户DataGridView控件的单元格</td></tr><tr><td><code>ReaderStyle</code></td><td>DataGridView控件网格样式</td></tr><tr><td><code>ReaderOnly</code></td><td>用户是否可以编辑DataGridView控件的单元格</td></tr><tr><td><code>ScrollBars</code></td><td>设置DataGridView控件显示的滚动条类型</td></tr></tbody></table></div><details class="toggle"><summary class="toggle-button" style>DataGridView控件的使用</summary><div class="toggle-content"><p><strong>1.创建项目</strong></p><ul><li>项目名称：DataGridView</li><li>项目类型:Windows窗体应用程序</li></ul><p><strong>2.设计窗体界面</strong><br>步骤</p><ul><li>修改<code>Form1.cs</code>文件名为<code>DataGridViewForm.cs</code></li><li><code>Text</code>:课程表</li><li>添加1个<strong>DataGridView控件</strong></li></ul><p><strong>3.实现课程表的功能</strong></p><figure class="highlight c#"><figcaption><span>【课程表】控件Load事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DataGridViewForm_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DataTable dataTable = <span class="keyword">new</span> DataTable();</span><br><span class="line">    <span class="comment">//添加列集</span></span><br><span class="line">    dataTable.Columns.Add(<span class="string">&quot;周数/节数&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line">    dataTable.Columns.Add(<span class="string">&quot;周一&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line">    dataTable.Columns.Add(<span class="string">&quot;周二&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line">    dataTable.Columns.Add(<span class="string">&quot;周三&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line">    dataTable.Columns.Add(<span class="string">&quot;周四&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line">    dataTable.Columns.Add(<span class="string">&quot;周五&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line">    <span class="comment">//添加行</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        DataRow dr = dataTable.NewRow();</span><br><span class="line">        dataTable.Rows.Add(dr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//向表格中添加数据</span></span><br><span class="line">    <span class="comment">//向第一行的第一个格中添加“第1节”的文本信息</span></span><br><span class="line">    dataTable.Rows[<span class="number">0</span>][<span class="number">0</span>] = <span class="string">&quot;第1节&quot;</span>;</span><br><span class="line">    dataTable.Rows[<span class="number">0</span>][<span class="number">1</span>] = <span class="string">&quot;语文&quot;</span>;</span><br><span class="line">    dataTable.Rows[<span class="number">0</span>][<span class="number">2</span>] = <span class="string">&quot;语文&quot;</span>;</span><br><span class="line">    dataTable.Rows[<span class="number">0</span>][<span class="number">3</span>] = <span class="string">&quot;语文&quot;</span>;</span><br><span class="line">    dataTable.Rows[<span class="number">0</span>][<span class="number">4</span>] = <span class="string">&quot;语文&quot;</span>;</span><br><span class="line">    dataTable.Rows[<span class="number">0</span>][<span class="number">5</span>] = <span class="string">&quot;语文&quot;</span>;</span><br><span class="line">    <span class="comment">//向第一行的第一个格中添加“第2节”的文本信息</span></span><br><span class="line">    dataTable.Rows[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">&quot;第2节&quot;</span>;</span><br><span class="line">    dataTable.Rows[<span class="number">1</span>][<span class="number">1</span>] = <span class="string">&quot;数学&quot;</span>;</span><br><span class="line">    dataTable.Rows[<span class="number">1</span>][<span class="number">2</span>] = <span class="string">&quot;数学&quot;</span>;</span><br><span class="line">    dataTable.Rows[<span class="number">1</span>][<span class="number">3</span>] = <span class="string">&quot;数学&quot;</span>;</span><br><span class="line">    dataTable.Rows[<span class="number">1</span>][<span class="number">4</span>] = <span class="string">&quot;数学&quot;</span>;</span><br><span class="line">    dataTable.Rows[<span class="number">1</span>][<span class="number">5</span>] = <span class="string">&quot;数学&quot;</span>;</span><br><span class="line">    <span class="comment">//向第一行的第一个格中添加“第3节”的文本信息</span></span><br><span class="line">    dataTable.Rows[<span class="number">2</span>][<span class="number">0</span>] = <span class="string">&quot;第3节&quot;</span>;</span><br><span class="line">    dataTable.Rows[<span class="number">2</span>][<span class="number">1</span>] = <span class="string">&quot;英语&quot;</span>;</span><br><span class="line">    dataTable.Rows[<span class="number">2</span>][<span class="number">2</span>] = <span class="string">&quot;英语&quot;</span>;</span><br><span class="line">    dataTable.Rows[<span class="number">2</span>][<span class="number">3</span>] = <span class="string">&quot;英语&quot;</span>;</span><br><span class="line">    dataTable.Rows[<span class="number">2</span>][<span class="number">4</span>] = <span class="string">&quot;英语&quot;</span>;</span><br><span class="line">    dataTable.Rows[<span class="number">2</span>][<span class="number">5</span>] = <span class="string">&quot;英语&quot;</span>;</span><br><span class="line">    <span class="comment">//向第一行的第一个格中添加“第4节”的文本信息</span></span><br><span class="line">    dataTable.Rows[<span class="number">3</span>][<span class="number">0</span>] = <span class="string">&quot;第4节&quot;</span>;</span><br><span class="line">    dataTable.Rows[<span class="number">3</span>][<span class="number">1</span>] = <span class="string">&quot;体育&quot;</span>;</span><br><span class="line">    dataTable.Rows[<span class="number">3</span>][<span class="number">2</span>] = <span class="string">&quot;体育&quot;</span>;</span><br><span class="line">    dataTable.Rows[<span class="number">3</span>][<span class="number">3</span>] = <span class="string">&quot;体育&quot;</span>;</span><br><span class="line">    dataTable.Rows[<span class="number">3</span>][<span class="number">4</span>] = <span class="string">&quot;体育&quot;</span>;</span><br><span class="line">    dataTable.Rows[<span class="number">3</span>][<span class="number">5</span>] = <span class="string">&quot;体育&quot;</span>;</span><br><span class="line">    <span class="comment">//在表格中添加数据</span></span><br><span class="line">    dataGridView1.DataSource = dataTable;</span><br><span class="line">    dataGridView1.RowHeadersVisible = <span class="literal">false</span>; <span class="comment">//关闭第一列的空白列</span></span><br><span class="line">    dataGridView1.ReadOnly = <span class="literal">true</span>;  <span class="comment">//表格中的数据只读，不能编辑</span></span><br><span class="line">    dataGridView1.AllowUserToAddRows = <span class="literal">false</span>;    <span class="comment">//不显示添加行的选项</span></span><br><span class="line">    dataGridView1.BackgroundColor = Color.White;    <span class="comment">//表格背景颜色</span></span><br><span class="line">    dataGridView1.Width = <span class="number">600</span>;  <span class="comment">//表格宽度</span></span><br><span class="line">    dataGridView1.ColumnHeadersDefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;</span><br><span class="line">    dataGridView1.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>4.运行程序</strong><br><code>F5</code></p></div></details><h3 id="菜单、工具栏与状态栏"><a href="#菜单、工具栏与状态栏" class="headerlink" title="菜单、工具栏与状态栏"></a>菜单、工具栏与状态栏</h3><h4 id="MenuStrip控件"><a href="#MenuStrip控件" class="headerlink" title="MenuStrip控件"></a>MenuStrip控件</h4><p><strong>MenuStrip控件</strong>用于表示WinForm窗体中的菜单，该控件支持多文档界面、菜单合并、工具提示和溢出等功能，开发人员可以通过添加访问键、快捷键、选中标记、图像和分隔条增强菜单的可用性和可读性。</p><p><strong>1.添加访问键</strong><br>在窗体中添加<strong>MenuStrip控件</strong>，该控件自动位于窗体左侧顶部，可以看到“请在此处键入”文本框。由一级菜单依次建立多级菜单。<br><img class="inline-img" src="/2022/11/25/CSharp/2023-01-05-14-18-10.png" style="height:200px"><img class="inline-img" src="/2022/11/25/CSharp/2023-01-05-14-19-27.png" style="height:200px"></p><p><strong>2.添加快捷键</strong><br>单击需要添加快捷键的菜单项，在该菜单项的<code>Text</code>属性值中添加(&amp;+快捷键)即可。例如为【文件】菜单项添加快捷键为【Alt+F】，首先单击【文件】菜单项，将该项的Text属性值设置为“文件(&amp;F)”。<br>运行项目后，当按下【Alt+F】快捷键时，即可打开【文件】菜单项的二级菜单。<br><img class="inline-img" src="/2022/11/25/CSharp/2023-01-05-14-39-24.png" style="height:300px"><img class="inline-img" src="/2022/11/25/CSharp/2023-01-05-14-37-10.png" style="height:200px"></p><p><strong>3.为菜单项添加图像</strong><br>右键单击需要添加图像的菜单键，在弹出框中选择【设置图像(M)…】按钮，跳转到【选择资源】窗口，导入图片资源即可。</p><p><strong>4.添加分割线</strong><br>在需要添加分隔线的“请在此处键入”文本框输入<code>“-”</code>，之后按下【Enter】键就可以为菜单项添加分隔线。</p><h4 id="实例：可拉伸菜单"><a href="#实例：可拉伸菜单" class="headerlink" title="实例：可拉伸菜单"></a>实例：可拉伸菜单</h4><p>如果应用程序分类中菜单项过多，而用户只使用一些常用的菜单项，此时可以将菜单中不常用的菜单项隐藏起来。这种显示方式类似于对菜单进行拉伸。使用时，只需要点击展开菜单，即可显示相应的菜单功能。<br><strong>1.创建项目</strong></p><ul><li>项目名称：StretchMenu</li><li>项目类型:Windows窗体应用程序</li></ul><p><strong>2.设计窗体界面</strong><br>步骤</p><ul><li>修改<code>Form1.cs</code>文件名为<code>StretchMenuForm.cs</code></li><li><code>Text</code>:可拉伸菜单</li><li>添加1个<strong>StretchMenu控件</strong></li><li>添加一级菜单【会员管理】，<code>Name</code>:”ManagementItem”</li><li>添加二级菜单“会员登记” “会员刷卡” “会员列表” “等级设置” “业务调整” “批量发卡” “会员导入” “展示（关闭）其他项” “设置密码” “修改密码” “忘记密码”，对应的<code>Name</code>属性为”RegisterItem” “CreditCardItem” “ListItem” “SettingItem” “AdjustmentItem” “BatchCardItem” “ImportItem” “OpenOrCloseItem” “SetPasswordItem” “ChangePasswordItem” “ForgetPasswordItem”<br><img src="/2022/11/25/CSharp/2023-01-05-15-16-59.png" alt="【可拉伸菜单】窗体"></li></ul><p><strong>3.实现窗体加载功能</strong><br><figure class="highlight c#"><figcaption><span>【可拉伸菜单】窗体Load事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">StretchMenuForm</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">StretchMenuForm</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">StretchMenuForm_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            SetPasswordItem.Visible = <span class="literal">false</span>;<span class="comment">//【设置密码】菜单项</span></span><br><span class="line">            ChangePasswordItem.Visible = <span class="literal">false</span>; <span class="comment">//【修改密码】菜单项</span></span><br><span class="line">            ForgetPasswordItem.Visible = <span class="literal">false</span>;<span class="comment">//【忘记密码】菜单项</span></span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>4.实现展开与关闭菜单项的功能</strong><br><figure class="highlight c#"><figcaption><span>【展开（关闭）其他项】Click事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OpenOrCloseItem_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="literal">false</span>:</span><br><span class="line">            SetPasswordItem.Visible = <span class="literal">false</span>;</span><br><span class="line">            ChangePasswordItem.Visible = <span class="literal">false</span>;</span><br><span class="line">            ForgetPasswordItem.Visible = <span class="literal">false</span>;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            ManagementItem.ShowDropDown();<span class="comment">//该方法会显示【会员管理】菜单下面的二级菜单</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="literal">true</span>:</span><br><span class="line">            SetPasswordItem.Visible = <span class="literal">true</span>;</span><br><span class="line">            ChangePasswordItem.Visible = <span class="literal">true</span>;</span><br><span class="line">            ForgetPasswordItem.Visible = <span class="literal">true</span>;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            ManagementItem.ShowDropDown();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>5.运行程序</strong><br><code>F5</code></p><h4 id="ToolStrip控件"><a href="#ToolStrip控件" class="headerlink" title="ToolStrip控件"></a>ToolStrip控件</h4><p><strong>ToolStrip控件</strong>用于显示工具栏，该控件可以创建具有Windows、Office、IE或自定义的外观和行为的工具栏及其他用户界面元素，这些元素支持溢出及运行时项重新排序。</p><p><strong>1.添加工具栏控件</strong><br>在窗体中添加1个<strong>ToolStrip控件</strong>，该控件默认显示在窗体的左侧顶部，如果窗体中已经存在菜单栏，则默认显示在菜单栏的下方。<br><strong>2.设置工具栏样式</strong><br>窗体添加<strong>ToolStrip控件</strong>之后，上面并没有控件，只显示一个占位符，可以在工具栏中添加控件来定义工具栏显示的具体样式，单击工具栏上向下箭头的提示图标，在下拉菜单中显示8种不同类型的控件。<br><img class="inline-img" src="/2022/11/25/CSharp/2023-01-05-16-16-38.png" style="height:230px"><img class="inline-img" src="/2022/11/25/CSharp/2023-01-05-16-21-17.png" style="height:230px"></p><ul><li><code>Button</code>:包含文本和图像的项，用户可以选择是否显示文本和图像，默认只显示图像。</li><li><code>Label</code>:包含文本和图像的项，用户不可以选择是否显示文本和图像，可以显示超链接。</li><li><code>SplitButton</code>:在Button的基础上添加了下拉菜单。</li><li><code>DropDownButton</code>:用于下拉菜单选择项。</li><li><code>Separator</code>:分隔符。</li><li><code>ComboBox</code>:显示一个ComboBox的项。</li><li><code>TextBox</code>:显示一个TextBox的项。</li><li><code>ProgressBar</code>:显示一个进度条的项。</li></ul><div class="note warning modern"><p>当上述控件使用<code>ToolTipText</code>属性来显示提示功能的时，需要将<strong>ToolStrip控件</strong>的<code>ShowItemToolTips</code>属性的值设置为<code>True</code>(默认)，<code>ShowItemToolstrip</code>属性用于指定是否显示项的ToolTip信息提示框。</p></div><h4 id="实例：具有提示功能的工具栏"><a href="#实例：具有提示功能的工具栏" class="headerlink" title="实例：具有提示功能的工具栏"></a>实例：具有提示功能的工具栏</h4><p>通常情况下，当鼠标指针悬停在Word文档工具栏中的按钮时，会出现一个提示框，提示框内描述了工具栏中按钮所提供的功能，<strong>ToolStrip控件</strong>可以实现具有提示功能的工具栏。<br><strong>1.创建项目</strong></p><ul><li>项目名称：WordToolbar</li><li>项目类型:Windows窗体应用程序</li></ul><p><strong>2.设计窗体界面</strong><br>步骤</p><ul><li>修改<code>Form1.cs</code>文件名为<code>ToolbarForm.cs</code></li><li><code>Text</code>:工具栏</li><li>添加<strong>ToolStrip控件</strong>，用于显示工具栏，在该工具栏中添加4个Label控件，设置Text属性为“文字方向” “页边距” “纸张方向” “纸张大小”</li><li>添加分隔符，右键单击“页边距”文本信息，选择【插入(I)】选项，然后选中【Separator】，即可在“文字方向”和“页边距”文本信息间插入分隔符。</li><li><img src="/2022/11/25/CSharp/2023-01-05-16-47-16.png" alt="添加分隔符"></li></ul><p><strong>3.添加提示信息</strong><br>分别选中工具栏中的“文字方向” “页边距” “纸张方向” “纸张大小”，在这些控件对应的<code>ToolTipText</code>属性值分别设置为“自定义文档或所选文本框中的文本方向” “选择整个文档或当前节的边距大小” “切换页面的纵向布局和横向布局” “将文字拆分两栏或更多栏”。</p><p><strong>4.运行程序</strong><br><code>F5</code></p><h4 id="StatusStrip控件"><a href="#StatusStrip控件" class="headerlink" title="StatusStrip控件"></a>StatusStrip控件</h4><p><strong>StatusStrip控件</strong>表示状态栏，它通常放置在窗体的最底部，用于显示窗体上一些对象的相关信息或者显示应用程序的信息。</p><p><strong>1.添加状态栏控件</strong><br>在窗体中 添加<strong>StatusStrip控件</strong>，该控件默认显示在窗体左侧底部。</p><p><strong>2.状态栏中显示的控件类型</strong><br>窗体中添加<strong>StatusStrip控件</strong>之后，上面并没有显示数据，只显示一个占位符，可在该状态栏中添加控件来定义具体的显示样式，单击状态栏上的向下箭头图标，下拉菜单显示4中不同类型的控件。</p><ul><li><code>StatusLabel</code>:包含文本和图像的项。</li><li><code>ProgressBar</code>:显示一个进度条。</li><li><code>DropDownButton</code>:用于下拉列表选项，可以从中选择单个项目。</li><li><code>SplitButton</code>:由一个标准按钮和一个下拉菜单组成的控件。</li></ul><h4 id="实例：在状态栏中显示当前系统时间"><a href="#实例：在状态栏中显示当前系统时间" class="headerlink" title="实例：在状态栏中显示当前系统时间"></a>实例：在状态栏中显示当前系统时间</h4><p>状态栏经常用于显示应用程序当前的状态信息或用户操作信息。这里实现在状态栏中显示当前系统时间的功能。<br><strong>1.创建项目</strong></p><ul><li>项目名称：ShowTimeStatusBar</li><li>项目类型:Windows窗体应用程序</li></ul><p><strong>2.设计窗体界面</strong><br>步骤</p><ul><li>修改<code>Form1.cs</code>文件名为<code>StatusBarForm.cs</code></li><li><code>Text</code>:状态栏</li><li>在【状态栏】窗体上添加1个<strong>Timer控件</strong>，用于每隔一秒获取一次系统当前时间</li><li>添加1个<strong>StatusStrip控件</strong>，用于显示状态栏，在该状态栏中添加<strong>StatusLabel控件</strong>，用于显示当前系统时间</li></ul><p><strong>3.实现获取系统时间的功能</strong><br>设置【状态栏】窗体的<code>Load</code>事件与<strong>Timer控件</strong>的<code>Tick</code>事件<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">WindowsFormsApp1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">StatusBarForm</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">StatusBarForm</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">StatusBarForm_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            timer1.Enabled = <span class="literal">true</span>;</span><br><span class="line">            timer1.Interval = <span class="number">1000</span>;<span class="comment">//时间间隔为1000毫秒</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">timer1_Tick</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.toolStripStatusLabel1.Text = <span class="string">&quot;当前时间：&quot;</span> + System.DateTime.Now.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>4.运行程序</strong><br><code>F5</code></p><h2 id="C-常用类"><a href="#C-常用类" class="headerlink" title="C#常用类"></a>C#常用类</h2><h3 id="string类"><a href="#string类" class="headerlink" title="string类"></a>string类</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str1 = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> str2 = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">Console.WriteLine(str1 == str2);</span><br><span class="line"><span class="comment">//True</span></span><br></pre></td></tr></table></figure><h4 id="string类的初始化"><a href="#string类的初始化" class="headerlink" title="string类的初始化"></a>string类的初始化</h4><ul><li>字符串就是指一连串的字符，表示字符串的类为string。</li><li>string字符串中可以包含任意字符，这些字符必须包含在一对英文双引号<code>&quot;&quot;</code>之内，例如”Hello World”。</li><li>在使用string字符串之前首先需要对string类进行<strong>初始化</strong></li></ul><p>1.使用字符串常量直接初始化一个string对象<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str=<span class="string">&quot;abc&quot;</span>;</span><br></pre></td></tr></table></figure><br>2.使用string类的构造方法初始化字符串对象，常用的有两个构造方法</p><div class="table-container"><table><thead><tr><th>方法名称</th><th>功能描述</th></tr></thead><tbody><tr><td>string(Char[] charArray)</td><td>将string类的新实例初始化为由Unicode字符数组指示的值。</td></tr><tr><td>string(Char ch,int num)</td><td>将string类的新实例初始化为由重复指定次数的指定Unicode 字符指示的值。</td></tr></tbody></table></div><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">char</span>[] chs = &#123; <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span> &#125;;</span><br><span class="line">        <span class="built_in">string</span> str1 = <span class="keyword">new</span> <span class="built_in">string</span>(chs);  <span class="comment">//&quot;123&quot;</span></span><br><span class="line">        <span class="comment">//使用字符&#x27;a&#x27;重复5次创建字符串&quot;aaaaa&quot;</span></span><br><span class="line">        <span class="built_in">string</span> str2 = <span class="keyword">new</span> <span class="built_in">string</span>(<span class="string">&#x27;a&#x27;</span>, <span class="number">5</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;str1 = &quot;</span> + str1);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;str2 = &quot;</span> + str2);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning modern"><ul><li>在程序中，string 和String类都可以创建字符串对象。</li><li>不同的是，string类型是C#语言中用来表示字符串的类型，而String类型是.NET Framework 通用类型系统中用来表示字符串的类型。</li><li>在程序开发过程中，这两种类型之所以都能表示字符串，是因为程序编译时，C#语言中的string类型会被编译成.NET Framework通用类型系统的String类型。</li></ul></div><ul><li><p>在编码过程中，定义string类型的变量后如果不需要立即对其进行初始化，一般会将其初始化为一个空字符串。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str1 = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">string</span> str2 = <span class="string">&quot;&quot;</span>;</span><br></pre></td></tr></table></figure></li><li><p>.NET平台中提供了一个空字符串常量String.Empty，该常量可以代替上述空字符串。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str1 = String.Empty;</span><br><span class="line"><span class="built_in">string</span> str2 = String.Empty;</span><br></pre></td></tr></table></figure></li><li><p>由于字符串拘留池机制，使用空字符串（“”）和使用String.<br>Empty是同一个对象，因此，这两种空字符串的定义是一样的。</p></li></ul><h4 id="字符串的不可变性"><a href="#字符串的不可变性" class="headerlink" title="字符串的不可变性"></a>字符串的不可变性</h4><p>字符串的不可变性指的是字符串对象一旦创建，就无法对其进行修改。例如，有一个字符串“abc”，如果对其进行修改，其内存就会发生变化。</p><ul><li>在代码编写过程中，有时需要创建多个字符串对象，由于字符串具有不可变性，因此这些字符串对象对应的值都会占用内存空间。</li><li>为此，.NET框架的底层提供了一种机制，当一个字符串已经被创建，那么以后每次创建相同值的字符串时会直接引用他的地址值，而无需为自己的值开辟新的内存空间。这种机制称为字符串拘留池机制。</li><li>字符串拘留池机制是由.NET框架来完成的，不用人为的管理，这样可以提高字符串使用的效率。</li></ul><h4 id="字符串与字符数组"><a href="#字符串与字符数组" class="headerlink" title="字符串与字符数组"></a>字符串与字符数组</h4><ul><li>在程序开发中，为了方便访问字符串中的某个字符，可以将字符串看作一个char类型的数组，即<strong>字符数组</strong>。</li><li>需要注意的是，由于字符串是不可变的，str字符串只能看作是<strong>只读的字符数组</strong>。</li><li>同字符数组类似，字符串可以通过<code>Length</code>属性来获取长度</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Program02</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">string</span> str = <span class="string">&quot;欢迎来到.NET世界&quot;</span>;</span><br><span class="line">            Console.WriteLine(str[<span class="number">0</span>]);</span><br><span class="line">            Console.WriteLine(str[<span class="number">5</span>]);</span><br><span class="line">            Console.WriteLine(str[<span class="number">9</span>]);</span><br><span class="line">            <span class="comment">//通过Length属性获取字符串的长度</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; str.Length; i++)&#123;</span><br><span class="line">                Console.WriteLine(str[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="string类的静态方法"><a href="#string类的静态方法" class="headerlink" title="string类的静态方法"></a>string类的静态方法</h4><div class="table-container"><table><thead><tr><th>方法声明</th><th>描述</th></tr></thead><tbody><tr><td>int Compare(string str1,string str2)</td><td>比较两个字符串是否相等</td></tr><tr><td>string Format(string str,object obj)</td><td>格式化字符串</td></tr><tr><td>bool IsNullOrEmpty(string str)</td><td>判断一个字符串是否为空或长度为0</td></tr><tr><td>string Join(string str,string[] strarr)</td><td>使用指定分隔字符连接字符串数组</td></tr></tbody></table></div><p><strong>Compare()方法</strong><br>如果第一个字符串大于第二个字符串，则返回一个大于0的int整数；如果两个字符串相同，则返回0；若第一个字符串小于第二个字符串，则返回一个小于0的int整数。<br>字符串比较时，采用了<strong>字典排序法</strong>，所谓字典排序法就是首先比较两个字符串的第一个字符，第一个字符大的字符串就大，如果两个字符串的第一个字符相同，那么就比较第二个字符，依此类推，最终得到较大的字符串。<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Program04</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">string</span> str1 = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> str2 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> str3 = <span class="string">&quot;bbc&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> str4 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">            Console.WriteLine(<span class="built_in">string</span>.Compare(str1, str2));<span class="comment">//1</span></span><br><span class="line">            Console.WriteLine(<span class="built_in">string</span>.Compare(str2, str3));<span class="comment">//-1</span></span><br><span class="line">            Console.WriteLine(<span class="built_in">string</span>.Compare(str2, str4));<span class="comment">//0</span></span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Format()方法</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Program05</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">string</span> str = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> res = <span class="built_in">string</span>.Format(<span class="string">&quot;字符串&#123;0&#125;包含&#123;1&#125;个字符&quot;</span>, str, str.Length);</span><br><span class="line">            Console.WriteLine(res);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>IsNullOrEmpty()方法</strong><br>当字符串为空或者长度为0时，该方法的返回值为true，否则返回值为false。<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">string</span> s1 = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">string</span> s2 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">     <span class="built_in">string</span> s3 = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">     Check(s1, <span class="string">&quot;s1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Check</span>(<span class="params"><span class="built_in">string</span> s, <span class="built_in">string</span> name</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrEmpty(s))&#123;</span><br><span class="line">       Console.WriteLine(<span class="string">&quot;&#123;0&#125;是为空或长度为0&quot;</span>, name);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Join()方法</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">string</span>[] strs = &#123; <span class="string">&quot;字符串&quot;</span>, <span class="string">&quot;使用竖线&quot;</span>, <span class="string">&quot;连接&quot;</span> &#125;;</span><br><span class="line">        <span class="built_in">string</span> res = <span class="built_in">string</span>.Join(<span class="string">&quot;|&quot;</span>, strs);</span><br><span class="line">        Console.WriteLine(res);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//字符串|使用竖线|连接</span></span><br></pre></td></tr></table></figure></p><h4 id="string类的实例方法"><a href="#string类的实例方法" class="headerlink" title="string类的实例方法"></a>string类的实例方法</h4><p>与静态方法不同的是，实例方法需要先创建实例对象才能使用</p><div class="table-container"><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>bool Contains(string str)</td><td>判断当前字符串中是否包含指定字符串</td></tr><tr><td>bool EndsWith(string str)</td><td>判断当前字符串是否使用指定字符串结尾</td></tr><tr><td>int IndexOf(char ch)</td><td>获得指定字符或字符串在当前字符串中的位置</td></tr><tr><td>string[] Split(char[] charArray)</td><td>将字符串以某种字符分隔</td></tr><tr><td>string Substring(int index)</td><td>从index索引处截取当前字符串</td></tr><tr><td>char[] ToCharArray()</td><td>将当前字符串转换为字符数组</td></tr><tr><td>string ToUpper()</td><td>将当前字符串中的英文转化成大写</td></tr><tr><td>string Trim()</td><td>去除字符串两边空格</td></tr></tbody></table></div><p><strong>Contains()方法</strong><br><figure class="highlight c#"><figcaption><span>调用Contains()方法判断字符串str1是否包含str2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Program08</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">string</span> str1 = <span class="string">&quot;这是一个测试字符串&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> str2 = <span class="string">&quot;测试&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (str1.Contains(str2))&#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;str2包含在str1中&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;str1不包含str2&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//str2包含在str1中</span></span><br></pre></td></tr></table></figure></p><p><strong>EndsWith()方法</strong><br><figure class="highlight c#"><figcaption><span>调用EndsWith()方法判断字符串input是否以“.mp3”结尾</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Program09</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">           Console.WriteLine(<span class="string">&quot;请输入mp3文件名&quot;</span>);</span><br><span class="line">           <span class="built_in">string</span> input = Console.ReadLine();<span class="comment">//获取用户从控制台输入的字符串</span></span><br><span class="line">           <span class="keyword">if</span> (input.EndsWith(<span class="string">&quot;.mp3&quot;</span>))&#123;</span><br><span class="line">               Console.WriteLine(<span class="string">&quot;文件格式正确&quot;</span>);</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               Console.WriteLine(<span class="string">&quot;输入文件不是mp3格式&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>IndexOf()方法</strong><br><figure class="highlight c#"><figcaption><span>通过IndexOf()方法查询字符串“e”的位置并复制给变量index</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Program10</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">string</span> str = <span class="string">&quot;abcdefefghefg&quot;</span>;</span><br><span class="line">            <span class="comment">//查找第一个&#x27;e&#x27;字符的位置</span></span><br><span class="line">            <span class="built_in">int</span> index = str.IndexOf(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;找到e，索引为&#123;0&#125;&quot;</span>, index);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//找到e，索引为4</span></span><br></pre></td></tr></table></figure></p><p><strong>Split()方法</strong><br><figure class="highlight c#"><figcaption><span>调用Split()方法通过''分隔符将字符串str分割为一个字符串数组strs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Program11</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">string</span> str = <span class="string">&quot;I have a dream&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span>[] strs = str.Split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;一共有&#123;0&#125;个单词，分别是：&quot;</span>, strs.Length);</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; strs.Length; i++)&#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;第&#123;0&#125;个单词是：&#123;1&#125;&quot;</span>, i + <span class="number">1</span>, strs[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Substring()方法</strong><br><figure class="highlight c#"><figcaption><span>通过Substring()方法从指定位置截取文件名后缀名</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Program12</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            <span class="comment">// 注意C#中的转义字符,这里加上@取消转义</span></span><br><span class="line">            <span class="built_in">string</span> path=<span class="string">@&quot;D:\workspeace\chapter8\Program11\program.cs&quot;</span>;</span><br><span class="line">            <span class="built_in">int</span> index = path.IndexOf(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            <span class="comment">// 从&#x27;.&#x27;的下一个位置开始截取</span></span><br><span class="line">            <span class="built_in">string</span> fileType = path.Substring(index + <span class="number">1</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;文件后缀名为：&#123;0&#125;&quot;</span>, fileType);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="comment">//文件后缀名为：cs</span></span><br></pre></td></tr></table></figure></p><p><strong>ToCharArray()方法</strong><br><figure class="highlight c#"><figcaption><span>将字符串转换成字符数组</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Program13</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">string</span> str = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line">            <span class="built_in">char</span>[] chs = str.ToCharArray();</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; chs.Length / <span class="number">2</span>; i++)&#123;</span><br><span class="line">                <span class="built_in">char</span> temp = chs[i];</span><br><span class="line">                chs[i] = chs[chs.Length - i - <span class="number">1</span>];</span><br><span class="line">                chs[chs.Length - i - <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">string</span> s1 = <span class="keyword">new</span> <span class="built_in">string</span>(chs);</span><br><span class="line">            Console.WriteLine(s1);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//fedcba</span></span><br></pre></td></tr></table></figure></p><p><strong>ToUpper()方法</strong><br>与之相对应的是<code>ToLower()</code>方法<br><figure class="highlight c#"><figcaption><span>将字符串中所有英文字母都变成大写字母</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Program14</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">string</span> s = <span class="string">&quot;itcast&quot;</span>;</span><br><span class="line">            s = s.ToUpper();</span><br><span class="line">            Console.WriteLine(s);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Trim()方法</strong><br><figure class="highlight c#"><figcaption><span>用来去除字符串两端的空格</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Program15</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">string</span> str = <span class="string">&quot;   ab   cd   &quot;</span>;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;|&quot;</span> + str + <span class="string">&quot;|&quot;</span>);</span><br><span class="line">            str = str.Trim();</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;|&quot;</span> + str + <span class="string">&quot;|&quot;</span>);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//|   ab   cd   |</span></span><br><span class="line"><span class="comment">//|ab   cd|</span></span><br></pre></td></tr></table></figure></p><h3 id="高效的StringBuilder"><a href="#高效的StringBuilder" class="headerlink" title="高效的StringBuilder"></a>高效的StringBuilder</h3><ul><li>C#中提供了<code>StringBuilder</code>类，它和<code>string</code>类都用于操作字符串。</li><li>与<code>string</code>类不同的是，<code>StringBuilder</code>类创建的字符串的长度是可以改变的，他类似一个字符容器，当在其中添加或删除字符时，并不会产生新的StringBuilder对象，因此可以让字符串的拼接操作变的更加高效。针对添加和删除字符串有以下操作。</li></ul><div class="table-container"><table><thead><tr><th>方法声明</th><th>功能描述</th></tr></thead><tbody><tr><td><code>StringBuilder Append(string str)</code></td><td>将字符串str添加到StringBuilder对象的末尾</td></tr><tr><td><code>StringBuilder Insert(int offset,string str)</code></td><td>在字符串中的offset位置处插入字符串str</td></tr><tr><td><code>StringBuilder Replace(string str1,string str2)</code></td><td>使用字符串str2替换StringBuilder对象中的字符串str1</td></tr><tr><td><code>StringBuilder Remove(int index int length)</code></td><td>将字符串从指定索引位置index开始，移除 length长度字符串</td></tr><tr><td><code>string ToString()</code></td><td>将StringBuilder类型转换成string 类型</td></tr></tbody></table></div><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Program16</span></span><br><span class="line">    <span class="title">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> &#123;</span><br><span class="line">            StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            sb.Append(<span class="string">&quot;abcd&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;追加字符串:&quot;</span> + sb.ToString());</span><br><span class="line">            sb.Insert(<span class="number">3</span>, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;插入字符串:&quot;</span> + sb.ToString());</span><br><span class="line">            sb.Remove(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;移除字符串:&quot;</span> + sb.ToString());</span><br><span class="line">            sb.Replace(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;替换字符串:&quot;</span> + sb.ToString());</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;sb的长度是:&quot;</span> + sb.Length);</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="hide-block"><button type="button" class="hide-button" style>执行结果    </button><div class="hide-content"><p>追加字符串:abcd<br>插入字符串:abcaaad<br>移除字符串:abcd<br>替换字符串:bbcd<br>sb的长度是:4</p></div></div><h4 id="StringBuilder性能分析"><a href="#StringBuilder性能分析" class="headerlink" title="StringBuilder性能分析"></a>StringBuilder性能分析</h4><ul><li><code>Stopwatch</code>类的命名空间为System.Diagnostics。</li><li><code>Stopwatch</code>类用于<strong>测量代码执行的时间</strong>，他有两个方法<code>Start()</code>和<code>Stop()</code>，其中Start()方法表示计时开始，Stop()方法表示计时结束，该类还有一个属性<code>Elapsed</code>用于获取代码执行的总运行时间。</li></ul><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">string</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        Stopwatch sp = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">        sp.Start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">            str += i.ToString();</span><br><span class="line">        &#125;</span><br><span class="line">        sp.Stop(); <span class="comment">// 停止计时</span></span><br><span class="line">        Console.WriteLine(sp.Elapsed);</span><br><span class="line">        Console.ReadKey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//00:00:00.0229812</span></span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    Stopwatch sp = <span class="keyword">new</span> Stopwatch();</span><br><span class="line">    sp.Start(); <span class="comment">// 开始计时</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">        builder.Append(i.ToString());</span><br><span class="line">    &#125;</span><br><span class="line">    sp.Stop(); <span class="comment">// 停止计时</span></span><br><span class="line">    Console.WriteLine(sp.Elapsed);</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//00:00:00.0004089</span></span><br></pre></td></tr></table></figure><p>可见，在同等情况下StringBuilder类的性能远远高于string类，因此在进行字符串进行拼接优先使用StringBuilder类。</p><h3 id="DateTime类"><a href="#DateTime类" class="headerlink" title="DateTime类"></a>DateTime类</h3><p><code>DateTime</code>类用于表示时间。</p><div class="table-container"><table><thead><tr><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td><code>DateTime(int year,int month,int day)</code></td><td>将 DateTime 结构的新实例初始化为指定的年、月和日</td></tr><tr><td><code>DateTime(int year,int month,int day,int hour,int minute,int second)</code></td><td>将 DateTime 结构的新实例初始化为指定的年、月、日、小时、分钟和秒</td></tr></tbody></table></div><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">Program17</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            DateTime dt1 = <span class="keyword">new</span> DateTime(<span class="number">2022</span>, <span class="number">12</span>, <span class="number">28</span>);</span><br><span class="line">            DateTime dt2 = <span class="keyword">new</span> DateTime(<span class="number">2022</span>, <span class="number">12</span>, <span class="number">28</span>, <span class="number">17</span>, <span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;dt1:&quot;</span> + dt1);</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;dt2:&quot;</span> + dt2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dt1:2022/12/28 0:00:00</span></span><br><span class="line"><span class="comment">//dt2:2022/12/28 17:05:05</span></span><br></pre></td></tr></table></figure><h4 id="TimeSpan类"><a href="#TimeSpan类" class="headerlink" title="TimeSpan类"></a>TimeSpan类</h4><p>TimeSpan 对象用于表示时间间隔，在使用Data类时经常需要通过该对象增加时间间隔。</p><div class="table-container"><table><thead><tr><th>构造方法</th><th>功能描述</th></tr></thead><tbody><tr><td><code>TimeSpan(int hour,int minute,int seconds)</code></td><td>将新的TimeSpan对象初始为指定的小时数，分钟数，秒数</td></tr><tr><td><code>TimeSpan(int day,int hour,int minute,int second)</code></td><td>将新的TimeSpan对象初始为指定的天数，小时数，分钟数，秒数</td></tr></tbody></table></div><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">        TimeSpan ts1 = <span class="keyword">new</span> TimeSpan(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;ts1的时间间隔为：&quot;</span> + ts1);</span><br><span class="line">        TimeSpan ts2 = <span class="keyword">new</span> TimeSpan(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;ts2的时间间隔为：&quot;</span> + ts2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//ts1的时间间隔为：01:02:03</span></span><br><span class="line"><span class="comment">//ts2的时间间隔为：1.02:03:04.0050000</span></span><br></pre></td></tr></table></figure><h4 id="DateTime类的常用属性"><a href="#DateTime类的常用属性" class="headerlink" title="DateTime类的常用属性"></a>DateTime类的常用属性</h4><p>在日期数据处理的过程中，经常需要通过DateTime对象的属性来获取日期中的某一部分的信息。</p><div class="table-container"><table><thead><tr><th>名称</th><th>功能描述</th></tr></thead><tbody><tr><td><code>Date</code></td><td>获取此实例的日期部分</td></tr><tr><td><code>Day</code></td><td>获取此实例所表示的日期为该月中的第几天</td></tr><tr><td><code>Hour</code></td><td>获取此实例所表示日期的小时部分</td></tr><tr><td><code>Minute</code></td><td>获取此实例所表示日期的分钟部分</td></tr><tr><td><code>Month</code></td><td>获取此实例所表示日期的月份部分</td></tr><tr><td><code>Today</code></td><td>获取当前日期</td></tr><tr><td><code>Year</code></td><td>获取此实例所表示日期的年份部分</td></tr><tr><td><code>Now</code></td><td>获取一个 DateTime 对象，该对象的时间为本地时间</td></tr></tbody></table></div><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">    DateTime dt = DateTime.Now;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;当前时间是：&quot;</span> + dt);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;年：&quot;</span> + dt.Year);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;月：&quot;</span> + dt.Month);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;日：&quot;</span> + dt.Day);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;时：&quot;</span> + dt.Hour);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;分：&quot;</span> + dt.Minute);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;秒：&quot;</span> + dt.Second);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DateTime类的常用方法"><a href="#DateTime类的常用方法" class="headerlink" title="DateTime类的常用方法"></a>DateTime类的常用方法</h4><div class="table-container"><table><thead><tr><th>名称</th><th>功能描述</th></tr></thead><tbody><tr><td><code>DateTime Add(TimeSpan ts)</code></td><td>返回一个 DateTime对象，他将指定 时间间隔添加到此实例的值上</td></tr><tr><td><code>bool Equals(DateTime dt)</code></td><td>返回一个bool值，指示此实例是否与指定的 DateTime 实例相等</td></tr><tr><td><code>string ToShortTimeString()</code></td><td>将当前 DateTime 对象的值转换为其等效的短时间字符串表示</td></tr><tr><td><code>int Compare(DateTime dt1,DateTime dt2)</code></td><td>将两个DateTime对象进行比较，如果dt1早于dt2，返回整数-1，如果dt1等于dt2.返回整数0，如果dt1晚于dt2，返回整数1</td></tr></tbody></table></div><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">    DateTime dt = DateTime.Now;</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;dt:&quot;</span> + dt);</span><br><span class="line">    <span class="comment">//定义一个时间对象</span></span><br><span class="line">    TimeSpan ts = <span class="keyword">new</span> TimeSpan(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="comment">//当前时间小时部分加1</span></span><br><span class="line">    dt = dt.Add(ts);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;dt:&quot;</span> + dt);</span><br><span class="line">    <span class="comment">//判断两个时间是否相等</span></span><br><span class="line">    <span class="built_in">bool</span> b = dt.Equals(DateTime.Now);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;判断改变后的dt是否与系统时间相等：&quot;</span> + b);</span><br><span class="line">    <span class="comment">//将DateTime对象转换为其等效的短时间字符串</span></span><br><span class="line">    <span class="built_in">string</span> s = dt.ToShortDateString();</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;dt转换为短时间字符串为：&quot;</span> + s);</span><br><span class="line">    <span class="comment">//将dt对象的时间和当前时间进行比较</span></span><br><span class="line">    <span class="built_in">int</span> result = DateTime.Compare(dt, DateTime.Now);</span><br><span class="line">    <span class="keyword">if</span> (result&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;dt晚于系统当前时间&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (result == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;dt等于系统当前时间&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;dt早于系统当前时间&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//dt:2022/12/28 18:00:54</span></span><br><span class="line"><span class="comment">//dt:2022/12/28 19:00:54</span></span><br><span class="line"><span class="comment">//判断改变后的dt是否与系统时间相等：False</span></span><br><span class="line"><span class="comment">//dt转换为短时间字符串为：2022/12/28</span></span><br><span class="line"><span class="comment">//dt晚于系统当前时间</span></span><br></pre></td></tr></table></figure><h3 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h3><p>在C#语言中提供了一个<code>Random</code>类，该类是一个伪随机数生成器，它可以随机产生数字。</p><div class="table-container"><table><thead><tr><th>名称</th><th>功能描述</th></tr></thead><tbody><tr><td><code>Random()</code></td><td>使用与时间相关的默认种子值，初始化Random类的新实例对象</td></tr><tr><td><code>Random(int seed)</code></td><td>用指定的种子值初始化Random类的新实例对象</td></tr></tbody></table></div><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">    Random rd = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> temp = rd.Next(); <span class="comment">//生成一个非负的随机数</span></span><br><span class="line">        Console.WriteLine(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><figcaption><span>如果指定了相同的种子，则每个实例对象产生的随机数具有相同的序列</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">    Random rd = <span class="keyword">new</span> Random(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">int</span> temp = rd.Next();</span><br><span class="line">        Console.WriteLine(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Random类常用方法"><a href="#Random类常用方法" class="headerlink" title="Random类常用方法"></a>Random类常用方法</h4><div class="table-container"><table><thead><tr><th>名称</th><th>功能描述</th></tr></thead><tbody><tr><td><code>int Next()</code></td><td>返回在指定范围内的任意整数</td></tr><tr><td><code>int Next(int max)</code></td><td>返回一个小于所指定最大值的非负随机整数</td></tr><tr><td><code>int Next(int min,int max)</code></td><td>返回在指定范围内的任意整数</td></tr><tr><td><code>double NextDouble()</code></td><td>返回一个介于 0.0 和 1.0 之间的随机浮点数</td></tr></tbody></table></div><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">    Random rd = <span class="keyword">new</span> Random();</span><br><span class="line">    <span class="built_in">int</span> temp;</span><br><span class="line">    Console.Write(<span class="string">&quot;生成一个随机数字:            &quot;</span>);</span><br><span class="line">    temp = rd.Next();</span><br><span class="line">    Console.WriteLine(temp);</span><br><span class="line">    Console.Write(<span class="string">&quot;生成一个小于10随机数字:      &quot;</span>);</span><br><span class="line">    temp = rd.Next(<span class="number">10</span>);</span><br><span class="line">    Console.WriteLine(temp);</span><br><span class="line">    Console.Write(<span class="string">&quot;生成一个大于10小于20随机数字:&quot;</span>);</span><br><span class="line">    temp = rd.Next(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">    Console.WriteLine(temp);</span><br><span class="line">    Console.Write(<span class="string">&quot;生成一个浮点随机数字:        &quot;</span>);</span><br><span class="line">    <span class="built_in">double</span> temp1 = rd.NextDouble();</span><br><span class="line">    Console.WriteLine(temp1);</span><br><span class="line">    Console.ReadKey();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h3 id="流和文件流"><a href="#流和文件流" class="headerlink" title="流和文件流"></a>流和文件流</h3><p>在计算机中，无论是文本、图片、音频还是视频，所有的文件都是以<strong>二进制(字节)</strong>形式存储的。为此，C#专门针对文件的输入输出操作提供了一系列的流，统称为<strong>文件流</strong>。文件流是程序中最常用的流，根据数据的传输方向可将其分为<strong>输入流</strong>和<strong>输出流</strong>。</p><p>为了方便理解，可以把输入流和输出流比作两根“水管”<br><img src="/2022/11/25/CSharp/2022-12-29-11-20-06.png" alt="输入流和输出流"><br>输入流被看作是一个输入管道，输出流被看作是一个输出管道，数据通过输入流从源设备输入到程序中，通过输出流从程序中输出到目标设备中，从而实现数据的传输。由此可见，文件流中的输入输出都是相对于程序而言的。</p><h3 id="System-IO命名空间"><a href="#System-IO命名空间" class="headerlink" title="System.IO命名空间"></a>System.IO命名空间</h3><p>在C#中，文件操作类都位于System.IO命名空间中，因此在使用这些类时需要引入System.IO命名空间。该命名空间中包含了很多类，如下图：<br><img src="/2022/11/25/CSharp/2022-12-29-11-39-19.png" alt="System.IO命名空间中常用类"><br>这些类大致可分为操作目录的类、操作文件的类、操作文件路径的类等。其中，Directory和DirectoryInfo属于操作目录的类，FileStream、File和FileInfo属于操作文件的类，StreamReader、StreamWriter类属于操作文本文件的类，Path类属于操作文件路径的类。</p><h3 id="File类和FileInfo类"><a href="#File类和FileInfo类" class="headerlink" title="File类和FileInfo类"></a>File类和FileInfo类</h3><h4 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h4><p><code>File</code>类是一个静态类，它提供了许多静态方法，用于处理文件，使用这些方法可以对文件进行创建、移动、查询和删除等操作，下面是File类中的一些常用静态方法</p><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>FileStream Create(string path)</td><td>根据传入的路径创建一个文件，如果文件不存在，则创建文件，如果存在且不是只读的，则覆盖其内容</td></tr><tr><td>void Delete(string path)</td><td>如果文件存在，则删除指定的文件，如果指定的文件不存在也不引发异常</td></tr><tr><td>bool Exists(string path)</td><td>判断指定文件是否存在，若存在则返回ture，否则返回false</td></tr><tr><td>void Move(string sourceFileName,string destFileName)</td><td>将指定的文件移动到新位置，可以在新位置为文件指定不同的名称</td></tr><tr><td>FileStream Open(string path,FileMode mode)</td><td>打开指定路径上的文件并返回FileStream对象</td></tr><tr><td>void Copy(string sourceFileName,string destFileName)</td><td>将现有的文件内容复制到新文件中，可以指定是否允许覆盖同名的文件</td></tr></tbody></table></div><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Program01</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            File.Create(<span class="string">&quot;Data.txt&quot;</span>);        <span class="comment">//创建文件，创建好的文件放在项目路径\bin\Debug目录下</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;文件创建成功&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (File.Exists(<span class="string">&quot;Data.txt&quot;</span>))&#123;  <span class="comment">//判断文件是否存在</span></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Data.txt文件存在&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Data.txt文件不存在&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="FileInfo类"><a href="#FileInfo类" class="headerlink" title="FileInfo类"></a>FileInfo类</h4><p><code>FileInfo</code>类与File类比较类似，它们都可以对磁盘上的文件进行操作。不同的是<strong>FileInfo类是实例类</strong>，所有的方法都只能在实例化对象后才能调用。</p><figure class="highlight c#"><figcaption><span>创建FileInfo类的对象时必须传递一个文件路径作为参数</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileInfo aFile = <span class="keyword">new</span> FileInfo(<span class="string">@&quot;D:\Data.txt&quot;</span>);</span><br></pre></td></tr></table></figure><p>上述代码表示使用FileInfo类创建一个对象，将文件路径作为参数，而路径中<code>@</code>符号表示不解析转义字符，如果没有<code>@</code>前缀就需要用<code>\\</code>替代<code>\</code>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileInfo aFile = <span class="keyword">new</span> FileInfo(<span class="string">&quot;D:\\Data.txt&quot;</span>);</span><br></pre></td></tr></table></figure><p>FileInfo类中除了有许多与File类相似的方法外，同时也有它特有的属性</p><div class="table-container"><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>Directory</td><td>该属性用于检索一个DirectoryInfo对象，表示当前文件所在的目录</td></tr><tr><td>DirectoryName</td><td>该属性用于返回文件目录，而且这个属性是只读的</td></tr><tr><td>IsReadOnly</td><td>该属性用于判断文件是否是只读的</td></tr><tr><td>Length</td><td>该属性用于获取文件的大小（以字节为单位），并返回long值</td></tr></tbody></table></div><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">        FileInfo aFile = <span class="keyword">new</span> FileInfo(<span class="string">&quot;Data.txt&quot;</span>);</span><br><span class="line">        aFile.Create();     <span class="comment">//创建文件</span></span><br><span class="line">        Console.WriteLine(<span class="string">&quot;文件创建成功&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (aFile.Exists)&#123; <span class="comment">//判断文件是否存在</span></span><br><span class="line">             Console.WriteLine(<span class="string">&quot;Data.txt文件存在&quot;</span>);</span><br><span class="line">         &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             Console.WriteLine(<span class="string">&quot;Data.txt文件不存在&quot;</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;文件当前目录为：&quot;</span> + aFile.Directory);</span><br><span class="line">         Console.WriteLine(<span class="string">&quot;文件大小为：&quot;</span> + aFile.Length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Directory类和DirectoryInfo类"><a href="#Directory类和DirectoryInfo类" class="headerlink" title="Directory类和DirectoryInfo类"></a>Directory类和DirectoryInfo类</h3><h4 id="Directory类"><a href="#Directory类" class="headerlink" title="Directory类"></a>Directory类</h4><p><code>Directory</code>类是一个静态类，不可实例化，并且提供了许多静态方法用于对文件的存放目录进行操作，例如创建、删除、查询和移动目录等。</p><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>DirectoryInfo CreateDirectory(string path)</td><td>创建指定路径的所有目录和子目录</td></tr><tr><td>void Delete(string path)</td><td>删除指定路径的空目录</td></tr><tr><td>bool Exists(string path)</td><td>判断指定路径目录是否存在，若存在，则返回ture，否则，返回false</td></tr><tr><td>DirectoryInfo GetParent()</td><td>查找指定路径的父目录，包括相对路径和绝对路径</td></tr><tr><td>void Move(string sourceDirName,string destDirName)</td><td>将文件或目录及其内容移动到新位置</td></tr></tbody></table></div><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//创建多级目录</span></span><br><span class="line">       Directory.CreateDirectory(<span class="string">@&quot;D:\C#\ConsoleApp\&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (Directory.Exists(<span class="string">@&quot;D:\C#\ConsoleApp\&quot;</span>))&#123;<span class="comment">//判断目录是否存在</span></span><br><span class="line">              Console.WriteLine(<span class="string">&quot;文件存在&quot;</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">             Console.WriteLine(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="comment">//删除没有内容的目录</span></span><br><span class="line">        Directory.Delete(<span class="string">@&quot;D:\C#\ConsoleApp\&quot;</span>);</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DirectoryInfo类"><a href="#DirectoryInfo类" class="headerlink" title="DirectoryInfo类"></a>DirectoryInfo类</h4><p><code>DirectoryInfo</code>类是一个非静态类，可以进行实例化。该类的功能与Directory类相似，也可以对文件的目录进行创建、删除、查询、移动等操作。</p><div class="table-container"><table><thead><tr><th>属性或方法</th><th>说明</th></tr></thead><tbody><tr><td>Parent</td><td>属性，获取指定子目录的父目录</td></tr><tr><td>Root</td><td>属性，获取路径的根目录</td></tr><tr><td>Name</td><td>属性，获取当前DirectoryInfo对象的名称</td></tr><tr><td>Exists</td><td>属性，判断指定目录是否存在</td></tr><tr><td>Create()</td><td>方法，创建目录</td></tr><tr><td>GetDirectories(string path)</td><td>方法，获取当前目录的子目录</td></tr><tr><td>CreateSubdirectory(string path)</td><td>方法，在指定路径中创建一个或多个子目录</td></tr><tr><td>GetFiles()</td><td>方法，获取当前目录的文件列表</td></tr><tr><td>Delete()</td><td>方法，删除指定的目录及其内容</td></tr><tr><td>GetFileSystemInfos()</td><td>方法，获取当前目录的子目录和文件列表</td></tr><tr><td>MoveTo(string destDirName)</td><td>方法，将指定目录及其内容移到新位置</td></tr></tbody></table></div><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">string</span> path = <span class="string">@&quot;D:\C#\ConsoleApp2\bin\Debug\Test&quot;</span>;</span><br><span class="line">    DirectoryInfo di = <span class="keyword">new</span> DirectoryInfo(path); <span class="comment">//创建一个DirectoryInfo对象</span></span><br><span class="line">    di.Create();</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;当前目录名称为：&quot;</span> + di.Name);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;父目录名为：&quot;</span> + di.Parent);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;根目录为：&quot;</span> + di.Root);</span><br><span class="line">    <span class="built_in">string</span> path1 = <span class="string">@&quot;D:\C#\ConsoleApp2\bin\Debug\netcoreapp3.1&quot;</span>;</span><br><span class="line">    DirectoryInfo di1 = <span class="keyword">new</span> DirectoryInfo(path1);</span><br><span class="line">    <span class="comment">//遍历目录下的所有文件，并找出包含P字符的文件名</span></span><br><span class="line">    FileInfo[] files1 = di1.GetFiles(<span class="string">&quot;*P*&quot;</span>);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> files1)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;包含P字符的文件名称为：&quot;</span> + item.Name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//当前目录名称为：Test</span></span><br><span class="line">    <span class="comment">//父目录名为：D:\C#\ConsoleApp2\bin\Debug</span></span><br><span class="line">    <span class="comment">//根目录为：D:\</span></span><br><span class="line">    <span class="comment">//包含P字符的文件名称为：ConsoleApp2.deps.json</span></span><br><span class="line">    <span class="comment">//包含P字符的文件名称为：ConsoleApp2.dll</span></span><br><span class="line">    <span class="comment">//包含P字符的文件名称为：ConsoleApp2.exe</span></span><br><span class="line">    <span class="comment">//包含P字符的文件名称为：ConsoleApp2.pdb</span></span><br><span class="line">    <span class="comment">//包含P字符的文件名称为：ConsoleApp2.runtimeconfig.dev.json</span></span><br><span class="line">    <span class="comment">//包含P字符的文件名称为：ConsoleApp2.runtimeconfig.json</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="FileStream类"><a href="#FileStream类" class="headerlink" title="FileStream类"></a>FileStream类</h3><h4 id="FileStream类简介"><a href="#FileStream类简介" class="headerlink" title="FileStream类简介"></a>FileStream类简介</h4><p><code>FileStream</code>类表示在磁盘或网络路径上指向文件的流，并提供了在文件中读写字节和字节数组的方法，通过这些方法FileStream对象可以读取诸如图像、声音、视频、文本文件等，也就是说FileStream能够处理各种数据文件。</p><figure class="highlight plaintext"><figcaption><span>FileStream类有很多重载的构造方法，其中最常用的是带有三个参数的构造方法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FileStream(string path, FileMode mode, FileAccess access);</span><br></pre></td></tr></table></figure><p>FileStream类一些常用的方法如下</p><div class="table-container"><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>int ReadByte()</td><td>从文件中读取一个字节，并将读取位置提升一个字节</td></tr><tr><td>void Flush()</td><td>清除此流的缓冲区，使得所有缓冲的数据都写入到文件中</td></tr><tr><td>void WriteByte(byte value)</td><td>将一个字节写入文件流的当前位置</td></tr><tr><td>void Write(byte[] array,int offset,int count)</td><td>从缓冲区读取数据将字节块写入该流</td></tr><tr><td>int Read(byte[] array,int offset,int count)</td><td>从流中读取字节块并将该数据写入给定缓冲区中</td></tr><tr><td>long Seek(long offset,SeekOrigin origin)</td><td>将该流的当前位置设置为给定值</td></tr></tbody></table></div><h4 id="FileStream类读取文件"><a href="#FileStream类读取文件" class="headerlink" title="FileStream类读取文件"></a>FileStream类读取文件</h4><p>FileStream类除了可以以字节的方式读取文件外，还可以对文件任意位置进行读取，在FileStream类的内部有一个文件指针用于维护文件的位置，该指针指向文件进行下一次读写操作的位置。大多数情况下，当打开文件时，指针就指向文件的开始位置，如果想修改指针的位置可以使用FileStream对象的Seek()方法。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileStream aFile=File.OpenRead(<span class="string">&quot;Data.txt&quot;</span>);</span><br><span class="line">aFile.Seek(<span class="number">8</span>,SeekOrigin.Current);</span><br></pre></td></tr></table></figure><div class="note info modern"><p><code>Seek()</code>方法中的第一个参数表示文件指针移动距离（以字节为单位）；第二个参数表示开始计算的起始位置，用SeekOrigin枚举类型的一个值表示，Begin表示文件开始位置，Current表示文件当前位置，End表示文件结束位置。</p></div><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Program</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">byte</span>[] byteData = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="built_in">char</span>[] charData = <span class="keyword">new</span> <span class="built_in">char</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">using</span> (FileStream aFile=<span class="keyword">new</span> FileStream(<span class="string">&quot;Data.txt&quot;</span>,FileMode.Open))<span class="comment">//创建文件，创建好的文件放在项目路径\bin\Debug目录下</span></span><br><span class="line">            &#123;</span><br><span class="line">                aFile.Seek(<span class="number">0</span>, SeekOrigin.Begin);<span class="comment">//设置当前流的位置</span></span><br><span class="line">                <span class="comment">//从流中读取字节块到byteData数组中</span></span><br><span class="line">                aFile.Read(byteData, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将字节数组和内部缓冲区的字节解码为字符数组</span></span><br><span class="line">            Decoder d = Encoding.Default.GetDecoder();</span><br><span class="line">            d.GetChars(byteData, <span class="number">0</span>, byteData.Length, charData, <span class="number">0</span>);</span><br><span class="line">            Console.WriteLine(charData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info modern"><p>一个文字3个字节</p></div><h4 id="FileStream类写入文件"><a href="#FileStream类写入文件" class="headerlink" title="FileStream类写入文件"></a>FileStream类写入文件</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Text;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Program</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">byte</span>[] byteData;  <span class="comment">//定义一个字节数组</span></span><br><span class="line">            <span class="built_in">char</span>[] charData;  <span class="comment">//定义一个字符数组</span></span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//创建FileStream流对象，并使用using关键字包含执行代码</span></span><br><span class="line">                <span class="keyword">using</span> (FileStream aFile = <span class="keyword">new</span> FileStream(<span class="string">&quot;Data.txt&quot;</span>, FileMode.Create))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">//写一段字符串并使用ToCharArray()方法转换为字符存储到字符数组中</span></span><br><span class="line">                    charData = <span class="string">&quot;Hello world by C#&quot;</span>.ToCharArray();</span><br><span class="line">                    byteData = <span class="keyword">new</span> <span class="built_in">byte</span>[charData.Length];</span><br><span class="line">                    Encoder e = Encoding.Default.GetEncoder(); <span class="comment">//使用Encoder类将字符数组转换为字节数组</span></span><br><span class="line">                    e.GetBytes(charData, <span class="number">0</span>, charData.Length, byteData, <span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">                    aFile.Seek(<span class="number">0</span>, SeekOrigin.Begin); <span class="comment">//文件指针指向文件开始位置</span></span><br><span class="line">                    aFile.Write(byteData, <span class="number">0</span>, byteData.Length); <span class="comment">//开始将字节数组中的数据写入文件</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (IOException ex)<span class="comment">//处理相关异常</span></span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;文件操作异常&quot;</span>);</span><br><span class="line">                Console.WriteLine(ex.ToString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实例：复制文件"><a href="#实例：复制文件" class="headerlink" title="实例：复制文件"></a>实例：复制文件</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Program</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">string</span> source = <span class="string">&quot;Data.txt&quot;</span>;</span><br><span class="line">            <span class="built_in">string</span> target = <span class="string">&quot;Data(1).txt&quot;</span>;</span><br><span class="line">            <span class="comment">//创建文件流</span></span><br><span class="line">            <span class="keyword">using</span> (FileStream fsRead=<span class="keyword">new</span> FileStream(source,FileMode.Open))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">using</span> (FileStream fsWrite=<span class="keyword">new</span> FileStream(target,FileMode.Create))</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">byte</span>[] bytes = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>];<span class="comment">//创建缓冲区</span></span><br><span class="line">                    <span class="comment">//循环读取文件</span></span><br><span class="line">                    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="built_in">int</span> r = fsRead.Read(bytes, <span class="number">0</span>, bytes.Length);</span><br><span class="line">                        <span class="keyword">if</span> (r &lt;= <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        fsWrite.Write(bytes, <span class="number">0</span>, bytes.Length);<span class="comment">//写入文件</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;文件Data内容已写入文件Data(1)中&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StreamReader类和StreamWriter类"><a href="#StreamReader类和StreamWriter类" class="headerlink" title="StreamReader类和StreamWriter类"></a>StreamReader类和StreamWriter类</h3><h4 id="StreamWriter类"><a href="#StreamWriter类" class="headerlink" title="StreamWriter类"></a>StreamWriter类</h4><p>StreamWriter类用于将字符和字符串写入到文件中，它实际上是先转换为FileStream对象，然后向文件中写入数据，所以在创建对象时可以通过FileStream类的对象来创建StreamWriter类的对象，同时也可以直接创建StreamWriter类对象。</p><figure class="highlight c#"><figcaption><span>当FileStream类的对象存在时，可以通过该对象来创建StreamWriter类的对象</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileStream aFile = <span class="keyword">new</span> FileStream(<span class="string">&quot;Data.txt&quot;</span>,FileMode.CreateNew);<span class="comment">//FileMode.CreateNew模式可以创建第一个参数指定的文件，文件存在会引发异常</span></span><br><span class="line">StreamWriter sw = <span class="keyword">new</span> StreamWriter(aFile);</span><br></pre></td></tr></table></figure><figure class="highlight c#"><figcaption><span>还可以通过指定文件来创建StreamWriter类的对象</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StreamWriter sw = <span class="keyword">new</span> StreamWriter(<span class="string">&quot;Data.txt&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//创建文件流对象,如果文件不存在则创建Data.txt文件</span></span><br><span class="line">        StreamWriter sw = <span class="keyword">new</span> StreamWriter(<span class="string">&quot;Data.txt&quot;</span>);</span><br><span class="line">        <span class="comment">//向文件中写入一段文字</span></span><br><span class="line">        sw.WriteLine(<span class="string">&quot;传智播客是国内一流教育培训机构&quot;</span>);</span><br><span class="line">        sw.Close();     <span class="comment">//关闭当前流对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IOException ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;文件操作异常&quot;</span>);</span><br><span class="line">        Console.WriteLine(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><figcaption><span>使用StreamWriter类的对象对文件进行追加内容的操作</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//对上面项目中的Data.txt进行追加操作</span></span><br><span class="line">        <span class="built_in">string</span> path = <span class="string">@&quot;Data.txt&quot;</span>;</span><br><span class="line">        StreamWriter sw = <span class="keyword">new</span> StreamWriter(path, <span class="literal">true</span>);</span><br><span class="line">        sw.WriteLine(<span class="string">&quot;网址：www.itcast.cn&quot;</span>); <span class="comment">//向文件中追加一段文字</span></span><br><span class="line">        sw.Close();            <span class="comment">//关闭当前流对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IOException ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;文件操作异常&quot;</span>);</span><br><span class="line">        Console.WriteLine(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="StreamReader类"><a href="#StreamReader类" class="headerlink" title="StreamReader类"></a>StreamReader类</h4><p>当FileStream类的对象存在时，可以通过该对象来创建StreamWriter类的对象</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">FileStream aFile = <span class="keyword">new</span> FileStream(<span class="string">&quot;Data.txt&quot;</span>,FileMode.Open);</span><br><span class="line">StreamReader sr = <span class="keyword">new</span> StreamReader(aFile);</span><br></pre></td></tr></table></figure><p>StreamReader类与StreamWriter类一样，可以通过具体文件路径的字符串来创建StreamReader类的对象</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">StreamReader sr = <span class="keyword">new</span> StreamReader(<span class="string">&quot;Data.txt&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">string</span> line;</span><br><span class="line">    <span class="built_in">string</span> path = <span class="string">@&quot;Data.txt&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        FileStream aFile = <span class="keyword">new</span> FileStream(path, FileMode.Open); <span class="comment">//打开路径为path的文件</span></span><br><span class="line">        StreamReader sr = <span class="keyword">new</span> StreamReader(aFile); <span class="comment">//创建读取流对象</span></span><br><span class="line">        line = sr.ReadLine(); <span class="comment">//读取文件中的第一行</span></span><br><span class="line">        <span class="keyword">while</span> (line != <span class="literal">null</span>)</span><br><span class="line">        &#123;<span class="comment">//如果文件不为空,则继续读取文件并输出至控制台</span></span><br><span class="line">            Console.WriteLine(line);</span><br><span class="line">            line = sr.ReadLine();</span><br><span class="line">        &#125;</span><br><span class="line">        sr.Close();               <span class="comment">//当文件读取完毕后，关闭当前流对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (IOException ex)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;文件操作异常&quot;</span>);</span><br><span class="line">        Console.WriteLine(ex.ToString());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实例：读写文件"><a href="#实例：读写文件" class="headerlink" title="实例：读写文件"></a>实例：读写文件</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">string</span> temp;</span><br><span class="line">    StreamWriter sw = <span class="keyword">new</span> StreamWriter(<span class="string">&quot;Data.txt&quot;</span>, <span class="literal">true</span>, Encoding.Default);</span><br><span class="line">    sw.WriteLine(<span class="string">&quot;传智播客是国内一流IT教育培训机构&quot;</span>);</span><br><span class="line">    sw.Close();          <span class="comment">//关闭StreamWriter文件流</span></span><br><span class="line">    StreamReader sr = <span class="keyword">new</span> StreamReader(<span class="string">&quot;Data.txt&quot;</span>, Encoding.Default);</span><br><span class="line">    <span class="comment">//逐行读取数据，如果未读取到数据则返回null</span></span><br><span class="line">    <span class="keyword">while</span> ((temp = sr.ReadLine()) != <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(temp);</span><br><span class="line">    &#125;</span><br><span class="line">    sr.Close();         <span class="comment">//关闭StreamReader文件流</span></span><br><span class="line">    sr.Dispose();       <span class="comment">//释放StreamReader对象</span></span><br><span class="line">    sw.Dispose();       <span class="comment">//释放StreamWriter对象  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Path类"><a href="#Path类" class="headerlink" title="Path类"></a>Path类</h3><p><code>Path</code>类中包含了一系列用于对文件路径进行操作的方法</p><div class="table-container"><table><thead><tr><th>方法</th><th>功能描述</th></tr></thead><tbody><tr><td>string Combine(params string[] paths)</td><td>将字符串或字符串数组组合成一个路径</td></tr><tr><td>string GetDirectoryName(string path)</td><td>返回指定路径字符串的目录信息</td></tr><tr><td>string GetExtension(string path)</td><td>返回指定路径字符串的扩展名</td></tr><tr><td>string GetFileName(string path)</td><td>返回指定路径字符串的文件名和扩展名</td></tr><tr><td>string GetFullPath(string path)</td><td>返回指定路径字符串的绝对路径</td></tr><tr><td>bool HasExtension(string path)</td><td>确定路径是否包括文件扩展名</td></tr><tr><td>string GetPathRoot(string path)</td><td>获取指定路径的根目录信息</td></tr><tr><td>string GetTempPath()</td><td>返回当前用户的临时文件夹的路径</td></tr><tr><td>string GetTempFileName()</td><td>创建磁盘上唯一命名的零字节的临时文件并返回该文件的完整路径</td></tr><tr><td>string ChangeExtension(string path,string extension)</td><td>更改路径字符串的扩展名</td></tr></tbody></table></div><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">string</span> path = <span class="string">@&quot;D:\C#\ConsoleApp2\bin\Debug\netcoreapp3.1\Data.txt&quot;</span>;</span><br><span class="line">    <span class="comment">//修改文件的扩展名</span></span><br><span class="line">    <span class="built_in">string</span> str = Path.ChangeExtension(path, <span class="string">&quot;exe&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;修改文件扩展名后：&quot;</span> + str);</span><br><span class="line">    <span class="comment">//拼接路径D:\C#\ConsoleApp2\bin\Debug\netcoreapp3.1\Data.txt</span></span><br><span class="line">    <span class="built_in">string</span> path1 = Path.Combine(<span class="string">@&quot;D:\C#\ConsoleApp2\bin\Debug\&quot;</span>, <span class="string">@&quot;netcoreapp3.1\Data.txt&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;拼接后的路径：&quot;</span> + path1);</span><br><span class="line">    <span class="comment">//获取文件或文件夹的路径 </span></span><br><span class="line">    <span class="built_in">string</span> path2 = Path.GetDirectoryName(path);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;返回的目录信息为：&quot;</span> + path2);</span><br><span class="line">    <span class="comment">//获取扩展名 </span></span><br><span class="line">    <span class="built_in">string</span> ext = Path.GetExtension(path);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;获取扩展名为：&quot;</span> + ext);</span><br><span class="line">    <span class="comment">//获取文件名 </span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;包含扩展名：&quot;</span> + Path.GetFileName(path));</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;不包含扩展名：&quot;</span> + Path.GetFileNameWithoutExtension(path));</span><br><span class="line">    <span class="comment">//获取根目录信息</span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;根目录信息为：&quot;</span> + Path.GetPathRoot(path));</span><br><span class="line">    <span class="comment">//由相对路径获取绝对路径</span></span><br><span class="line">    <span class="built_in">string</span> str1 = Path.GetFullPath(<span class="string">&quot;Data.txt&quot;</span>);</span><br><span class="line">    Console.WriteLine(<span class="string">&quot;全路径名字：&quot;</span> + str1);</span><br><span class="line">    <span class="comment">//修改文件扩展名后：D:\C#\ConsoleApp2\bin\Debug\netcoreapp3.1\Data.exe</span></span><br><span class="line">    <span class="comment">//拼接后的路径：D:\C#\ConsoleApp2\bin\Debug\netcoreapp3.1\Data.txt</span></span><br><span class="line">    <span class="comment">//返回的目录信息为：D:\C#\ConsoleApp2\bin\Debug\netcoreapp3.1</span></span><br><span class="line">    <span class="comment">//获取扩展名为：.txt</span></span><br><span class="line">    <span class="comment">//包含扩展名：Data.txt</span></span><br><span class="line">    <span class="comment">//不包含扩展名：Data</span></span><br><span class="line">    <span class="comment">//根目录信息为：D:\</span></span><br><span class="line">    <span class="comment">//全路径名字：D:\C#\ConsoleApp2\bin\Debug\netcoreapp3.1\Data.txt</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BufferedStream类"><a href="#BufferedStream类" class="headerlink" title="BufferedStream类"></a>BufferedStream类</h3><p>前面的各种操作类及方法都是将文件存储到硬盘，但有时希望将文件临时存储到缓冲区，以便读取。<br>为此，c#中提供<code>BufferedStream</code>类，该类必须与其他流一起使用，并将这些流写入内存中，这样可以提高读取和写入速度。<br>BufferedStream提供了几个常用的操作方法，Read()方法、Write()方法和Flush()方法</p><ol><li><p>Read()方法<br><code>Read()</code>方法用于读取缓冲区中的数据</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">Read</span>(<span class="params"><span class="built_in">byte</span>[] array,<span class="built_in">int</span> offset, <span class="built_in">int</span> count</span>)</span>;</span><br></pre></td></tr></table></figure></li><li><p>Write()方法<br><code>Write()</code>方法用于将字节复制到缓冲流，并在缓冲流内的当前位置继续写入字节</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">int</span> <span class="title">Write</span>(<span class="params"><span class="built_in">byte</span>[] array,<span class="built_in">int</span> offset,<span class="built_in">int</span> count</span>)</span>;</span><br></pre></td></tr></table></figure></li><li><p>Flush()方法<br><code>Flush()</code>方法用于清除当前流中的所有缓冲区，使得所有缓冲的数据都被写入到存储设备中</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Flush</span>()</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight c#"><figcaption><span>创建Data1.txt文件（输入测试BufferedStream类成功！）与Data2.txt文件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">int</span> i;</span><br><span class="line">    FileStream myStream1, myStream2;</span><br><span class="line">    BufferedStream myBStream1, myBStream2;</span><br><span class="line">    <span class="built_in">byte</span>[] myByte = <span class="keyword">new</span> <span class="built_in">byte</span>[<span class="number">1024</span>]; <span class="comment">//定义字节数组</span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;读写前&quot;</span>);</span><br><span class="line">    Print(<span class="string">&quot;Data2.txt&quot;</span>);</span><br><span class="line">    myStream1 = File.OpenRead(<span class="string">&quot;Data1.txt&quot;</span>);    <span class="comment">//打开文件</span></span><br><span class="line">    myStream2 = File.OpenWrite(<span class="string">&quot;Data2.txt&quot;</span>);</span><br><span class="line">    myBStream1 = <span class="keyword">new</span> BufferedStream(myStream1); <span class="comment">//实例化缓冲流对象</span></span><br><span class="line">    myBStream2 = <span class="keyword">new</span> BufferedStream(myStream2);</span><br><span class="line">    <span class="comment">//开始读取myBStream1流对象中的内容，返回读取的字节数</span></span><br><span class="line">    i = myBStream1.Read(myByte, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">while</span> (i &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        myBStream2.Write(myByte, <span class="number">0</span>, i);<span class="comment">//向myBStream2流对象中写入内容</span></span><br><span class="line">        i = myStream1.Read(myByte, <span class="number">0</span>, <span class="number">1024</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    myBStream2.Flush(); <span class="comment">//清空当前流的缓冲空间</span></span><br><span class="line">    myStream1.Close();</span><br><span class="line">    myStream2.Close(); <span class="comment">//关闭当前流对象</span></span><br><span class="line">    Console.WriteLine(<span class="string">&quot;读写后&quot;</span>);</span><br><span class="line">    Print(<span class="string">&quot;Data2.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//读写前</span></span><br><span class="line">    <span class="comment">//文件Data2.txt内容为：</span></span><br><span class="line">    <span class="comment">//读写后</span></span><br><span class="line">    <span class="comment">//文件Data2.txt内容为：测试BufferedStream类成功！</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Print</span>(<span class="params"><span class="built_in">string</span> path</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (StreamReader sr = <span class="keyword">new</span> StreamReader(path, Encoding.Default))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> content = sr.ReadToEnd();</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;文件&#123;0&#125;内容为：&#123;1&#125;&quot;</span>, path, content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note info modern"><p>由于缓冲流在内存的缓冲区中直接读取数据，而不是从磁盘中直接读取数据，所以它处理大容量的文件尤为合适。</p></div><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><p>在程序开发中有时需要传输和保存对象，但对象是无法直接进行数据传输和保存的，所以C#中提供了序列化和反序列化。<strong>序列化是指将对象状态转换为可传输或可保存的过程</strong>，此时必须使用Serializable标签标记该对象。<strong>反序列化是指将存储的流转换为对象的过程</strong>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"><span class="keyword">using</span> System.Runtime.Serialization.Formatters.Binary;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span>&#123;</span><br><span class="line">            Person p = <span class="keyword">new</span> Person();<span class="comment">//构造一个用于序列化操作的对象</span></span><br><span class="line">            p.Name = <span class="string">&quot;IT&quot;</span>;</span><br><span class="line">            p.Age = <span class="number">8</span>;</span><br><span class="line">            <span class="comment">//构造序列化对象</span></span><br><span class="line">            BinaryFormatter bf = <span class="keyword">new</span> BinaryFormatter();</span><br><span class="line">            <span class="comment">//构造输出流</span></span><br><span class="line">            <span class="keyword">using</span> (FileStream fs=<span class="keyword">new</span> FileStream(<span class="string">&quot;Data.txt&quot;</span>,FileMode.OpenOrCreate,FileAccess.ReadWrite))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//进行序列化输出操作</span></span><br><span class="line">                bf.Serialize(fs, p);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;序列化操作成功，对象已写入文件&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">using</span> (FileStream fs1 = <span class="keyword">new</span> FileStream(<span class="string">&quot;Data.txt&quot;</span>, FileMode.OpenOrCreate, FileAccess.ReadWrite))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//进行反序列化，返回一个object类型的对象</span></span><br><span class="line">                <span class="built_in">object</span> obj = bf.Deserialize(fs1);</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;反序列化对象数据为&quot;</span> + obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//序列化操作成功，对象已写入文件</span></span><br><span class="line">        <span class="comment">//反序列化对象数据为Name:IT,Age:8</span></span><br><span class="line">    &#125;</span><br><span class="line">    [<span class="meta">Serializable</span>]<span class="comment">//使用Serializable标签标记Person类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title">Person</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">int</span> Age</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">            <span class="keyword">set</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">string</span>.Format(<span class="string">&quot;Name:&#123;0&#125;,Age:&#123;1&#125;&quot;</span>, <span class="keyword">this</span>.Name, <span class="keyword">this</span>.Age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="使用ADO-NET操作数据库"><a href="#使用ADO-NET操作数据库" class="headerlink" title="使用ADO.NET操作数据库"></a>使用ADO.NET操作数据库</h2><h3 id="认识数据库"><a href="#认识数据库" class="headerlink" title="认识数据库"></a>认识数据库</h3><p>数据库（Database，DB）是按照数据结构来组织、存储和管理数据的仓库，其本身可看作电子化的文件柜，用户可以对文件中的数据进行增加、删除、修改、查找等操作。</p><p><strong>1.数据结构化</strong><br>数据库系统实现了整体数据的结构化，这是数据库的最主要特征之一。这里所说的“整体”结构化，是指在数据库中的数据不只是针对某个应用，而是面向全组织，面向整体的。</p><p><strong>2.实现数据共享</strong><br>因为数据是面向整体的，所以数据可以被多个用户、多个应用程序共享使用，可以大幅度地减少数据冗余，节约存储空间，避免数据之间的不相容性与不一致性。</p><p><strong>3.数据独立性高</strong><br>数据的独立性包含逻辑独立性和物理独立性，其中，逻辑独立性是指数据库中数据的逻辑结构和应用程序相互独立，物理独立性是指数据物理结构的变化不影响数据的逻辑结构。</p><p><strong>4.数据统一管理与控制</strong><br>数据的统一控制包含安全控制、完整控制和并发控制。简单来说就是防止数据丢失、确保数据的正确有效，并且在同一时间内，允许用户对数据进行多路存取，防止用户之间的异常交互。</p><ul><li>常见的数据库有<code>Oracle</code>、<code>SQL Server</code>、<code>MySQL</code>、<code>SQLite</code>等</li><li><code>Oracle</code>是一个大型数据库，具有良好的兼容性、可移值性和可可连接性</li><li><code>SQL Server</code>具有强大、灵活、基于Web的应用程序管理功能，而且界面友好、易于操作，但是只能在Windows上运行，对操作系统稳定性要求高</li><li><code>MySQL</code>是一个多用户、多线程的小型数据库服务器，存储数据速度较快，适合对数据要求不是很严格的情况</li><li><code>SQLite</code>是一个轻量级的数据库，常用于Android应用程序开发</li></ul><h3 id="ADO-NET常用类"><a href="#ADO-NET常用类" class="headerlink" title="ADO.NET常用类"></a>ADO.NET常用类</h3><p>ADO.NET是微软.NET数据库访问架构，它是数据库应用程序和数据源之间沟通的桥梁，主要提供一个面向对象的数据访问架构，用于实现数据的访问功能。</p><p>ADO.NET的名称起源于ADO（ActiveX Data Objects)，ADO是一个COM组件库，也就是一个<strong>通用框架类库</strong>。该类库是在.NET编程环境中使用的数据访问接口，而ADO.NET是与C#、.NET Framework一起使用的类集的名称。ADO.NET有两部分组成，分别是<strong>数据提供程序</strong>（Provider）与<strong>数据集</strong>（DataSet）。</p><ul><li><strong>数据提供程序</strong>（Provider）：能与数据库保持连接，并且可以执行SQL命令，还可以操纵数据集。</li><li><strong>数据集</strong>（DataSet）：能在与数据库断开连接的情况下，对数据库中的数据进行操作。</li></ul><p>在使用ADO.NET对数据库进行操作时，通常会用到5个类，分别是<code>Connection</code>类、<code>Command</code>类、<code>DataReader</code>类、<code>DataAdapter</code>类以及<code>DataSet</code>类。</p><ol><li><p><code>Connection</code>类<br>Connection类主要用于<strong>建立与断开数据库的连接</strong>，通过该类可以获取当前数据连接的状态。在.NET平台下，由于SQL Server数据库提供了一些额外的操作菜单便于对数据库进行操作，因此推荐使用SQL Server数据库。</p></li><li><p><code>Command</code>类<br>Command类主要用于<strong>对数据库中的数据进行增、删、改、查的操作</strong>，该类的对象可以用于执行返回数据、修改数据、运行存储过程、发送或检索参数信息的数据库命令，根据在Command类的对象中传递的SQL语句的不同，可以调用相应的方法来执行对应的SQL语句。</p></li><li><p><code>DataReader</code>类<br>DataReader类用于<strong>读取从数据库中查询到的数据</strong>，在读取数据时，只能向前读不能向后读，同时也不能修该类对象中的数据。当与数据库的连接断开时，该类对象中的数据会被清除。</p></li><li><p><code>DataAdapter</code>类<br>DataAdapter类可以看作是<strong>数据库与<code>DataSet</code>类之间的一个桥梁</strong>，主要使用Command类的对象在数据源中执行SQL命令，以便将数据加载到DataSet数据集中，并确保DataSet数据集中数据的更改与数据源保持一致。</p></li><li><p><code>DataSet</code>类<br>DataSet类与 DataReader 类相似，都<strong>用于读取从数据库中查询到的数据</strong>，不同的是DataSet类中的数据不仅可以多次重复读取，还可以修改DataSet类中读取到的数据。</p></li></ol><h3 id="下载并安装SQL-Server数据库"><a href="#下载并安装SQL-Server数据库" class="headerlink" title="下载并安装SQL Server数据库"></a>下载并安装SQL Server数据库</h3><p>下载安装……</p><h3 id="创建SQL-Server数据库"><a href="#创建SQL-Server数据库" class="headerlink" title="创建SQL Server数据库"></a>创建SQL Server数据库</h3><p><strong>方式1：传统手动创建SQL Server数据库</strong><br>图形界面操作<br><strong>方式2：使用SQL语句创建SQL Server数据库</strong><br>【新建查询】，在窗口中的出现一个空白的页面，供编写SQL语句使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">USE master</span><br><span class="line"><span class="comment">--检查数据库是否存在</span></span><br><span class="line">IF (<span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> sysdatabases <span class="keyword">WHERE</span> name <span class="operator">=</span><span class="string">&#x27;School&#x27;</span>)) </span><br><span class="line">  <span class="keyword">DROP</span> DATABASE School     <span class="comment">--如果已经存在School数据库，则删除School</span></span><br><span class="line">GO</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE School     <span class="comment">--数据库名为School</span></span><br><span class="line"><span class="keyword">ON</span> <span class="keyword">PRIMARY</span> </span><br><span class="line">(</span><br><span class="line"> NAME <span class="operator">=</span> School,                         <span class="comment">--主数据文件逻辑名称</span></span><br><span class="line"> <span class="comment">--数据文件路径及物理名称(D:\school路径需存在)</span></span><br><span class="line"> FILENAME <span class="operator">=</span> <span class="string">&#x27;D:\school\School.mdf&#x27;</span>, </span><br><span class="line"> SIZE <span class="operator">=</span> <span class="number">5</span>MB,                             <span class="comment">--初始大小</span></span><br><span class="line"> MAXSIZE <span class="operator">=</span> UNLIMITED,                  <span class="comment">--最大尺寸</span></span><br><span class="line"> FILEGROWTH <span class="operator">=</span> <span class="number">1</span>MB                       <span class="comment">--自动增长的增量</span></span><br><span class="line">)</span><br><span class="line">LOG <span class="keyword">ON</span></span><br><span class="line">( </span><br><span class="line">NAME <span class="operator">=</span> School_log,                       <span class="comment">--日志文件逻辑名称</span></span><br><span class="line"><span class="comment">--日志文件路径及物理名称(D:\school路径需存在)</span></span><br><span class="line">FILENAME <span class="operator">=</span> <span class="string">&#x27;D:\school\School_log.ldf&#x27;</span>, </span><br><span class="line">SIZE <span class="operator">=</span> <span class="number">2</span>MB,                                  <span class="comment">--初始大小</span></span><br><span class="line">MAXSIZE <span class="operator">=</span> <span class="number">4</span>MB,                              <span class="comment">--最大尺寸</span></span><br><span class="line">FILEGROWTH <span class="operator">=</span> <span class="number">10</span><span class="operator">%</span>                            <span class="comment">--自动增长的增量</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="创建SQL-Server数据库表"><a href="#创建SQL-Server数据库表" class="headerlink" title="创建SQL Server数据库表"></a>创建SQL Server数据库表</h3><p><strong>方式1：传统手动创建SQL Server数据库表</strong><br>图形界面操作<br><strong>方式2：使用SQL语句创建数据库表</strong><br>【新建查询】，在窗口中的出现一个空白的页面，供编写SQL语句使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">use School    <span class="comment">--表示在名为School的数据库中创建表</span></span><br><span class="line">go</span><br><span class="line">if <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> sysobjects <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;Student&#x27;</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> <span class="string">&#x27;该表已存在&#x27;</span></span><br><span class="line">    <span class="keyword">drop</span> <span class="keyword">table</span> Student    <span class="comment">--删除表</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">create</span> <span class="keyword">table</span> Student</span><br><span class="line">    (</span><br><span class="line">        <span class="comment">--设置为主键和自增长列，起始值为1，每次自增1</span></span><br><span class="line">        Id  <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span>  <span class="keyword">identity</span>(<span class="number">1</span>,<span class="number">1</span>)  <span class="keyword">primary</span> key, </span><br><span class="line">        Name nvarchar(<span class="number">25</span>) <span class="keyword">null</span>,</span><br><span class="line">        Age  <span class="type">int</span>  <span class="keyword">null</span>,</span><br><span class="line">        Sex  <span class="type">nchar</span>(<span class="number">10</span>) <span class="keyword">null</span>,</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="使用ADO-NET访问数据库"><a href="#使用ADO-NET访问数据库" class="headerlink" title="使用ADO.NET访问数据库"></a>使用ADO.NET访问数据库</h3><h4 id="使用Connection对象连接SQL-Server数据库"><a href="#使用Connection对象连接SQL-Server数据库" class="headerlink" title="使用Connection对象连接SQL Server数据库"></a>使用Connection对象连接SQL Server数据库</h4><div class="note info modern"><p>Connection类有4种名称，分别是<code>SqlConnection</code>、<code>OracleConnection</code>、<code>OleDBConnection</code>和<code>OdbcConnection</code><br>其中<strong>SqlConnection类用于连接SQL Server数据库</strong>，该类的命名空间为<code>System.Data.SqlClient</code>(<strong>连接数据库需要导包</strong>)</p></div><p><strong>1.定义连接数据库的字符串</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//第1种方式：</span><br><span class="line">server=服务器名称/数据库的实例名;uid=登录名;pwd=密码;database=数据库名称</span><br><span class="line">//第2种方式：</span><br><span class="line">Data Source=服务器名称\数据库实例名;Initial Catalog=数据库名称;User ID=用户名;</span><br><span class="line">Password=密码</span><br></pre></td></tr></table></figure><br>sever与Data Source 的值可以是IP地址或者数据库所在计算机名称，如果访问的是本机数据库或使用默认数据库实例名，则可以使用<code>.</code>代替。</p><p><strong>2. 使用SqlConnection类的对象连接SQL Server数据库</strong><br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//第1步：创建SqlConnection类的实例</span><br><span class="line">SqlConnection 连接对象名 = new SqlConnection( 连接数据库的字符串 );</span><br><span class="line">//第2步：打开数据库连接</span><br><span class="line">数据库连接对象.Open();</span><br><span class="line">//第3步：关闭数据库连接</span><br><span class="line">数据库连接对象.Close();</span><br></pre></td></tr></table></figure></p><div class="note warning modern"><p>如果打开数据库连接是使用异常处理，需要将关闭数据库连接的语句放在<code>finally</code>语句中，保证无论程序是否发生异常都可以将数据库连接断开，并释放资源。</p></div><p>除了使用异常处理的方式释放资源外，还可以使用using语句的方式释放资源，具体语法如下所示：<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span>(SqlConnection 连接对象名 = <span class="keyword">new</span> SQLConnection( 连接数据库的字符串 ))&#123;</span><br><span class="line">    <span class="comment">//打开数据库连接</span></span><br><span class="line">    <span class="comment">//对数据库相关操作的语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><div class="note info modern"><p>关键字<code>using</code>有两个作用，一是引用命名空间，二是创建非托管资源对象。</p></div><details class="toggle"><summary class="toggle-button" style>连接数据库</summary><div class="toggle-content"><p><strong>1.创建程序</strong></p><ul><li>项目名称：ConnectionForm</li><li>项目类型:Windows窗体应用程序</li></ul><p><strong>2.窗体设计</strong><br>步骤</p><ul><li><code>Form1.cs</code>重命名为<code>ConnectionForm</code></li><li><code>Text</code>:连接数据库</li><li>添加一个<strong>Button控件</strong>，<code>Name</code>:buttonCon,<code>Text</code>:连接数据库</li></ul><p><strong>3.实现连接SQL Server数据库</strong></p><figure class="highlight c#"><figcaption><span>按钮Click事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Windows.Forms;</span><br><span class="line"><span class="keyword">using</span> System.Data.SqlClient;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">ConnectionForm</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">ConnectionForm</span> : <span class="title">Form</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ConnectionForm</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buttonCon_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//编写连接数据库的字符串</span></span><br><span class="line">            <span class="built_in">string</span> connStr = <span class="string">&quot;Data source=.;Initial Catalog = School;User ID = sa;Password=root&quot;</span>;</span><br><span class="line">            <span class="comment">//创建SqlConnection 的实例</span></span><br><span class="line">            SqlConnection conn = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                conn = <span class="keyword">new</span> SqlConnection(connStr);</span><br><span class="line">                conn.Open();       <span class="comment">//打开数据库连接</span></span><br><span class="line">                MessageBox.Show(<span class="string">&quot;数据库连接成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;数据库连接失败&quot;</span> + ex.Message);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (conn!=<span class="literal">null</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    conn.Close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.使用using语句释放资源</strong></p><figure class="highlight c#"><figcaption><span>17~34行代码可替换</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">using</span> (SqlConnection conn=<span class="keyword">new</span> SqlConnection(connStr))</span><br><span class="line">    &#123;</span><br><span class="line">        conn.Open();<span class="comment">//打开数据库</span></span><br><span class="line">        MessageBox.Show(<span class="string">&quot;数据库连接成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex)</span><br><span class="line">&#123;</span><br><span class="line">    MessageBox.Show(<span class="string">&quot;数据库连接失败&quot;</span> + ex.Message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></details><h4 id="使用Command对象操作数据库"><a href="#使用Command对象操作数据库" class="headerlink" title="使用Command对象操作数据库"></a>使用Command对象操作数据库</h4><div class="note info modern"><p><code>Command</code>类在<code>System.Data.SqlClient</code>命名空间下对应的类名为<code>SqlCommand</code></p></div><p><strong>1.创建SqlCommand类的实例</strong><br>创建SqlCommand类的实例有两种方式，一种是通过命令类型为Text来创建，另一种是通过命令类型为StoredProcedure来创建<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//第1种方式:通过命令类型为Text来创建SqlCommand类的实例</span><br><span class="line">SqlCommand SqlCommand类的实例名 = new SqlCommand(SQL语句,数据库连接类的实例);</span><br><span class="line">//第2种方式:通过命令类型为StoredProcedure来创建SqlCommand类的实例</span><br><span class="line">SqlCommand SqlCommand类的实例名 = new SqlCommand(存储过程名称,数据库连接类的实例);</span><br></pre></td></tr></table></figure></p><p>需要注意的是，通过第二种方式创建SqlCommand类的实例过程中，存储过程必须是当前数据库实例中的存储过程。在调用带参数的存储过程时，需要在SqlCommand类的实例中添加需要的存储过程参数。为存储过程添加参数需要调用属性Parameters来设置，具体语法如下所示：<br><code>SqlCommand 类实例.Parameters.Add( 参数名 , 参数值 );</code></p><p><strong>2.使用SqlCommand类操作数据库</strong><br>在使用SqlCommand类执行对数据库表中的数据进行操作时，可以通过两种方式来实现，一种是执行非查询SQL语句的操作，即增加、修改、删除操作，一种是执行查询SQL语句的操作<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第1种方式：执行非查询SQL语句</span></span><br><span class="line">SqlCommand 类的实例.ExecuteNonQuery();</span><br><span class="line"><span class="comment">//该方法返回值-1表示SQL语句执行失败，返回0时，表示执行的SQL语句对当前数据表的数据没有影响</span></span><br><span class="line"><span class="comment">//第2种：执行查询SQL语句</span></span><br><span class="line">SqlDataReader dr = SqlCommand 类的实例.ExecuteReader();</span><br><span class="line"><span class="comment">//返回一个 SqlDataReader 类型的值，遍历可以得到返回值</span></span><br><span class="line"><span class="built_in">int</span> <span class="keyword">value</span> = SqlCommand 类的实例.ExecuteScalar();</span><br><span class="line"><span class="comment">//不返回查询结果，只返回一个值，如查询表中指定信息行数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><details class="toggle"><summary class="toggle-button" style>数据库连接实现注册</summary><div class="toggle-content"><p><strong>1.创建程序</strong></p><ul><li>项目名称：RegistrationForm</li><li>项目类型:Windows窗体应用程序</li></ul><p><strong>2.窗体设计</strong><br>步骤</p><ul><li><code>Form1.cs</code>重命名为<code>RegistrationForm</code></li><li><code>Text</code>:注册</li><li>添加2个<strong>Label控件</strong>，设置<code>Text</code>为：“用户”“注册”</li><li>添加2个<strong>TextBox控件</strong>，设置<code>Name</code>为：”tbName””tbPwd”，密码对应的控件<code>PasswordChar</code>属性设置为<code>*</code></li><li>添加1个<strong>Button控件</strong>，<code>Name</code>:btnRegister,<code>Text</code>:注册</li></ul><p><strong>3.创建数据库表Userinfo</strong></p><p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">use School</span><br><span class="line">go</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Userinfo(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">identity</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><br>由SQL语句可知，创建的Userinfo表中的id字段为主键和自增长列，起始值为1，每次自增1。</p><p><strong>4.实现注册功能</strong></p><p><figure class="highlight c#"><figcaption><span>注册按钮Click事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnRegister_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//编写连接数据库的字符串</span></span><br><span class="line">    <span class="built_in">string</span> connStr = <span class="string">&quot;server=.;uid=sa;pwd=root;database=School&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (SqlConnection conn=<span class="keyword">new</span> SqlConnection(connStr))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            <span class="built_in">string</span> sql = <span class="string">&quot;insert into Userinfo(name,password) values(&#x27;&#123;0&#125;&#x27;,&#x27;&#123;1&#125;&#x27;)&quot;</span>;</span><br><span class="line">            <span class="comment">//填充SQL语句</span></span><br><span class="line">            sql = <span class="built_in">string</span>.Format(sql, tbName.Text, tbPwd.Text);</span><br><span class="line">            <span class="comment">//创建SqlCommand对象</span></span><br><span class="line">            SqlCommand cmd = <span class="keyword">new</span> SqlCommand(sql, conn);</span><br><span class="line">            <span class="built_in">int</span> returnvalue = cmd.ExecuteNonQuery();<span class="comment">//执行SQL语句</span></span><br><span class="line">            <span class="comment">//判断SQL是否执行成功</span></span><br><span class="line">            <span class="keyword">if</span> (returnvalue!=<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;注册成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;注册失败&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>5.运行程序</strong><br>注册成功后去数据库查看。</p></div></details><h4 id="使用DataReader对象查询数据库"><a href="#使用DataReader对象查询数据库" class="headerlink" title="使用DataReader对象查询数据库"></a>使用DataReader对象查询数据库</h4><div class="note info modern"><p>在<code>System.Data.SqlClient</code>命名空间中，<code>DataReader</code>类对应的类名是<code>SqlDataReader</code></p></div><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第1步：执行SqlCommand对象中的ExecuteReader()方法</span></span><br><span class="line">SqlDataReader dr=SqlCommand 类的实例.ExecuteReader();</span><br><span class="line"><span class="comment">//第2步：遍历SqlDataReader对象中的数据</span></span><br><span class="line">dr.read();</span><br><span class="line"><span class="comment">//第3步：关闭SqlDataReader对象</span></span><br><span class="line">dr.Close();</span><br></pre></td></tr></table></figure><p>read()方法用于判断该类的对象中是否由数据，并且指向SqlDataReader对象中的数据的下一条记录。<br>如果read()方法的返回值为true。则可以读取该条记录，否则无法读取</p><details class="toggle"><summary class="toggle-button" style>连接数据库查询数据</summary><div class="toggle-content"><p><strong>1.创建程序</strong></p><ul><li>项目名称：QueryUserinfoForm</li><li>项目类型:Windows窗体应用程序</li></ul><p><strong>2.窗体设计</strong><br>步骤</p><ul><li><code>Form1.cs</code>重命名为<code>QueryForm</code></li><li><code>Text</code>:查询数据</li><li>添加2个<strong>Label控件</strong>，设置<code>Text</code>为：“用户名”“没有符合条件的结果”后者<code>Name</code>:lbResult</li><li>添加1个<strong>TextBox控件</strong>，设置<code>Name</code>为：”tbName”</li><li>添加1个<strong>Button控件</strong>，<code>Name</code>:btnQuery,<code>Text</code>:查询</li></ul><p><strong>3.实现查询功能</strong></p><figure class="highlight c#"><figcaption><span>查询按钮Click事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnQuery_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//编写连接数据库的字符串</span></span><br><span class="line">    <span class="built_in">string</span> connStr = <span class="string">&quot;server=.;uid=sa;pwd=root;database=School&quot;</span>;</span><br><span class="line">    SqlDataReader dr = <span class="literal">null</span>;<span class="comment">//定义SqlDataReader 类的对象</span></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (SqlConnection conn=<span class="keyword">new</span> SqlConnection(connStr))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();<span class="comment">//打开数据库连接</span></span><br><span class="line">            <span class="built_in">string</span> sql = <span class="string">&quot;select id,password from Userinfo where name=&#x27;&#123;0&#125;&#x27;&quot;</span>;</span><br><span class="line">            sql = <span class="built_in">string</span>.Format(sql, tbName.Text);<span class="comment">//填充SQL语句</span></span><br><span class="line">            SqlCommand cmd = <span class="keyword">new</span> SqlCommand(sql, conn);</span><br><span class="line">            dr = cmd.ExecuteReader();<span class="comment">//执行SQL语句</span></span><br><span class="line">            <span class="comment">//判断是否读取到信息</span></span><br><span class="line">            <span class="keyword">if</span> (dr.Read())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//读取指定用户名对应的用户编号和密码</span></span><br><span class="line">                <span class="built_in">string</span> msg = <span class="string">&quot;用户编号：&quot;</span> + dr[<span class="number">0</span>] + <span class="string">&quot; 密码：&quot;</span> + dr[<span class="number">1</span>];</span><br><span class="line">                lbResult.Text = msg;<span class="comment">//将msg值显示在界面上</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                lbResult.Text = <span class="string">&quot;没有符合条件的结果&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;查询失败！&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">finally</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (dr!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            dr.Close();<span class="comment">//关闭SqlDataReader类对象</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.运行结果</strong><br><code>F5</code></p></div></details><h4 id="使用DataAdapter与DataSet对象操作数据库"><a href="#使用DataAdapter与DataSet对象操作数据库" class="headerlink" title="使用DataAdapter与DataSet对象操作数据库"></a>使用DataAdapter与DataSet对象操作数据库</h4><div class="note info modern"><p>在<code>System.Data.SqlClient</code>命名空间中，<code>DataAdapter</code>类对应的类名是<code>SqlDataAdapter</code></p></div><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第1步：创建 SqlDataAdapter 类的对象</span></span><br><span class="line">SqlDataAdapter sda = <span class="keyword">new</span> SqlDataAdapter(SQL语句, 数据库连接类的实例);</span><br><span class="line"><span class="comment">//第2步：创建DataSet类的对象</span></span><br><span class="line">DataSet ds = <span class="keyword">new</span> DataSet();</span><br><span class="line"><span class="comment">//第3步：使用SqlDataAdapter对象sda将查询结果填充到Dataset对象ds中</span></span><br><span class="line">sda.Fill(ds);</span><br></pre></td></tr></table></figure><p><code>DataSet</code>类也可以替换为<code>DataTable</code>类，<code>DataSet</code>类中的数据存储实际是通过<code>DataTable</code>类实现的。</p><details class="toggle"><summary class="toggle-button" style>连接数据库查询数据</summary><div class="toggle-content"><p><strong>1.创建程序</strong></p><ul><li>项目名称：QueryAllNameForm</li><li>项目类型:Windows窗体应用程序</li></ul><p><strong>2.窗体设计</strong><br>步骤</p><ul><li><code>Form1.cs</code>重命名为<code>QueryAllNameForm.cs</code></li><li><code>Text</code>:查询数据</li><li>添加1个<strong>Button控件</strong>，<code>Name</code>:btnQuery,<code>Text</code>:查询全部用户名</li><li>添加1个<strong>ListBox控件</strong>，用于显示查询出的所有用户信息，设置<code>Name</code>:lbList</li></ul><p>3.实现查询全部用户名功能</p><figure class="highlight c#"><figcaption><span>【查询全部用户】按钮Click事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnQuery_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//编写连接数据库的字符串</span></span><br><span class="line">    <span class="built_in">string</span> connStr = <span class="string">&quot;Data Source=.;Initial Catalog=School;;User ID=sa;Password=root&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (SqlConnection conn=<span class="keyword">new</span> SqlConnection(connStr))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();<span class="comment">//打开数据库连接</span></span><br><span class="line">            <span class="built_in">string</span> sql = <span class="string">&quot;select name from Userinfo&quot;</span>;</span><br><span class="line">            <span class="comment">//创建SqlDataAdapter类的对象</span></span><br><span class="line">            SqlDataAdapter  sda = <span class="keyword">new</span> SqlDataAdapter(sql, conn);</span><br><span class="line">            DataSet ds = <span class="keyword">new</span> DataSet();<span class="comment">//创建DataSet类的对象</span></span><br><span class="line">            <span class="comment">//使用SqlDataAdapter对象sda将查询的结果填充到DataSet对象ds中</span></span><br><span class="line">            sda.Fill(ds);S</span><br><span class="line">            <span class="comment">//设置ListBox控件的数据源（DataSource）属性</span></span><br><span class="line">            lbList.DataSource = ds.Tables[<span class="number">0</span>];</span><br><span class="line">            <span class="comment">//在listBox控件中显示name列的值</span></span><br><span class="line">            lbList.DisplayMember = ds.Tables[<span class="number">0</span>].Columns[<span class="number">0</span>].ToString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;查询失败&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.将实例中的DataSet对象替换为DataTable对象</strong><br>替换11-19行替换为如下实现同样的效果</p><p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建SqlDataAdapter类的对象</span></span><br><span class="line">SqlDataAdapter sda = <span class="keyword">new</span> SqlDataAdapter(sql, conn);</span><br><span class="line"><span class="comment">//创建DataTable类的对象</span></span><br><span class="line">DataTable dt = <span class="keyword">new</span> DataTable();</span><br><span class="line"><span class="comment">//使用SqlDataAdapter对象sda将查询的结果填充到DataTable对象dt中</span></span><br><span class="line">sda.Fill(dt);</span><br><span class="line"><span class="comment">//设置ListBox控件的数据源（DataSource）属性</span></span><br><span class="line">lbList.DataSource = dt;</span><br><span class="line"><span class="comment">//在listBox控件中显示name列的值</span></span><br><span class="line">lbList.DisplayMember = dt.Columns[<span class="number">0</span>].ToString();</span><br></pre></td></tr></table></figure><br><strong>5.运行程序</strong><br><code>F5</code></p></div></details><h2 id="综合项目——图书管理系统"><a href="#综合项目——图书管理系统" class="headerlink" title="综合项目——图书管理系统"></a>综合项目——图书管理系统</h2><h3 id="项目分析"><a href="#项目分析" class="headerlink" title="项目分析"></a>项目分析</h3><ul><li>实现项目之前的首要任务就是对项目进行分析，如需求分析、可行性分析</li><li>需求分析是根据用户的需求进行分析</li><li>可行性分析是对开发该项目在技术可行性、经济可行性、操作可行性进行分析</li></ul><h4 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h4><p>随着计算机科技的发展，人们的生活变的越来越离不开计算机，通过计算机的普及和信息技术的发展，各类计算机软件逐渐渗透到人们的生活中，迅速的改善了人们的生活质量，提高了人们的工作效率。在学校中，有很多同学会去图书馆看书、借阅图书，图书借阅是学生获取知识的一个很重要的途径。为了方便学生借书又能减轻图书管理员的工作负担，高效地完成图书借阅的管理工作，我们设计了一个图书管理系统软件，并通过C#语言开发了这款软件，供学校与校外的图书馆使用。</p><h4 id="可行性分析"><a href="#可行性分析" class="headerlink" title="可行性分析"></a>可行性分析</h4><ol><li><p>技术可行性分析<br>本书开发的图书管理系统采用的是Visual Studio Community2019+SQL Server2019开发环境，这种Microsoft官网推荐的开发环境在技术上已经十分成熟，并且可以免费下载。</p></li><li><p>经济可行性分析<br>本书开发的图书管理系统，从开发的硬件上来说，只需要一台电脑，开发环境只需要从Microsoft官网上免费下载开发工具Visual Studio Community2019与SQL Server2019。</p></li><li><p>操作可行性分析<br>图书管理系统采用C#软件研发的风格，使用.NET框架中的原生组件与自定义组件进行研发，使界面效果更炫酷，用户体验更友好，因此在操作上也是可行的。</p></li></ol><h3 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h3><h4 id="项目概述"><a href="#项目概述" class="headerlink" title="项目概述"></a>项目概述</h4><p>图书管理系统是一个适用于图书馆的项目，该项目中包含用户注册、用户登录、图书管理系统主菜单、读者类别、读者管理、图书管理以及借书与还书的管理。其中读者类别中包含读者的类别号、类别名称、可借书数量、可借书天数；读者管理中包含读者编号、类别号、姓名、单位、QQ、已借书数量；图书管理中包含书号、书名、作者、出版社、单价以及图书是否在馆的状态；借书与还书管理中包含读者的编号、书号。</p><p>该项目除了显示读者类别、读者管理、图书管理以及借书还书管理中包含的信息之外，还可以对这些信息进行添加、查询、修改、删除的操作。</p><h4 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h4><ul><li>操作系统：Windows 11系统</li><li>开发工具：Visual Studio Community 2019、SQL Server 2019</li><li>框架版本：.NET Framework 4.7.2</li></ul><h4 id="项目功能结构"><a href="#项目功能结构" class="headerlink" title="项目功能结构"></a>项目功能结构</h4><p>图书管理系统项目主要分为6个功能模块，分别是【登录模块】【主菜单模块】【读者类别模块】【读者管理模块】【图书管理模块】和【借书还书模块】。</p><h3 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h3><h4 id="登录窗体"><a href="#登录窗体" class="headerlink" title="登录窗体"></a>登录窗体</h4><p>程序启动后，首先会进入登录窗体，该窗体中主要用于展示用户名与密码的输入框，同时还展示了【登录】与【注册】按钮，单击【登录】按钮，程序会根据用户输入的用户名与密码来实现图书管理系统的登录功能，单击【注册】按钮，程序会隐藏当前窗体，显示注册窗体。<br><img src="/2022/11/25/CSharp/2022-12-01-12-02-08.png" alt="登录窗体"></p><h4 id="注册窗体"><a href="#注册窗体" class="headerlink" title="注册窗体"></a>注册窗体</h4><p>单击登录窗体中的【注册】按钮，程序会隐藏登录窗体，显示注册窗体，该窗体中主要用于展示用户名与密码的输入框，同时还展示了【注册】与【取消】按钮。单击【注册】按钮，程序会根据用户输入的用户名与密码实现注册功能，单击【取消】按钮，程序会关闭当前窗体，显示登录窗体。<br><img src="/2022/11/25/CSharp/2022-12-01-12-02-49.png" alt="注册窗体"></p><h4 id="主菜单窗体"><a href="#主菜单窗体" class="headerlink" title="主菜单窗体"></a>主菜单窗体</h4><p>当用户登录成功后，程序会进入到图书管理系统主菜单窗体，在该窗体中展示【读者类别】【图书管理】【读者管理】【借书还书】【退出系统】等按钮信息，单击【退出系统】按钮，程序会退出整个系统，单击窗体中的其他按钮，程序会隐藏当前窗体，显示每个按钮对应的窗体。<br><img src="/2022/11/25/CSharp/2022-12-01-12-03-39.png" alt="主菜单窗体"></p><h4 id="读者类别窗体"><a href="#读者类别窗体" class="headerlink" title="读者类别窗体"></a>读者类别窗体</h4><p>单击主菜单窗体中的【读者类别】按钮，进入读者类别窗体。在读者类别窗体中通过一个表格展示读者类别号、类别名称、可借书数量、可借书天数信息，选中表格中的任意一行，在窗体的左侧输入框中会显示该行中的读者类别信息。在该窗体中还显示了5个按钮，分别是【返回主菜单】按钮、【添加】按钮、【查询】按钮、【删除】按钮以及【修改】按钮。</p><h4 id="读者管理窗体"><a href="#读者管理窗体" class="headerlink" title="读者管理窗体"></a>读者管理窗体</h4><p>单击读者类别窗体中的【读者管理】按钮，程序会隐藏主菜单窗体，显示读者管理窗体。在读者管理窗体中通过一个表格展示读者编号、类别号、姓名、单位、QQ、已借书数量信息，选中表格中的任意一行，在窗体的左侧输入框中会显示该行中的读者信息。在该窗体中还显示了5个按钮，分别是【返回主菜单】按钮、【添加】按钮、【查询】按钮、【删除】按钮以及【修改】按钮。</p><h4 id="图书管理窗体"><a href="#图书管理窗体" class="headerlink" title="图书管理窗体"></a>图书管理窗体</h4><p>单击读者管理窗体中的【图书管理】按钮，程序会隐藏主菜单窗体，显示图书管理窗体。在图书管理窗体中通过一个表格展示书号、书名、作者、出版社、单价、状态信息，选中表格中的任意一行，在窗体的左侧输入框中会显示该行中的图书信息。在该窗体中还显示了5个按钮，分别是【返回主菜单】按钮、【添加】按钮、【查询】按钮、【删除】按钮以及【修改】按钮。</p><h4 id="借书还书窗体"><a href="#借书还书窗体" class="headerlink" title="借书还书窗体"></a>借书还书窗体</h4><p>单击图书管理窗体中的【借书还书】按钮，程序会隐藏主菜单窗体，显示借书还书窗体。在借书还书窗体中通过一个表格展示读者编号、书号、借书日期、应还日期信息，选中表格中的任意一行，在窗体的左侧输入框中会显示该行中的读者编号与书号信息。在该窗体中还显示了3个按钮，分别是【返回主菜单】按钮、【借书】按钮、【还书】按钮。</p><h3 id="图书管理系统数据库"><a href="#图书管理系统数据库" class="headerlink" title="图书管理系统数据库"></a>图书管理系统数据库</h3><h4 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h4><p>在开发图书管理系统时，我们需要存储一些数据信息，如登录信息、图书信息、读者信息、读者类别信息等，同时也需要对这些数据进行一些增、删、改、查的操作，此时我们需要使用数据库来存储这些数据，这里使用的是SQL Server数据库，在数据库中需要设计以下数据表。</p><p><strong>1.登录表</strong><br>登录信息表中需要设计的字段有用户编号（Id）、用户名称（UserName）、用户密码（Password）。</p><div class="table-container"><table><thead><tr><th>字段名</th><th>类型</th><th>长度</th><th>是否为空</th><th>描述</th></tr></thead><tbody><tr><td>Id</td><td>int</td><td></td><td>否</td><td>用户编号（主键）</td></tr><tr><td>UserName</td><td>nvarchar</td><td>25</td><td>否</td><td>用户名称</td></tr><tr><td>Password</td><td>nvarchar</td><td>25</td><td>否</td><td>用户密码</td></tr></tbody></table></div><p><strong>2. 图书表</strong><br>图书表中需要设计的字段有图书编号（bkID）、图书名称（bkName）、作者（bkAuthor）、出版社（bkPress）、单价（bkPrice）、是否在馆（bkStatus）。</p><div class="table-container"><table><thead><tr><th>字段名</th><th>类型</th><th>长度</th><th>是否为空</th><th>描述</th></tr></thead><tbody><tr><td>bkId</td><td>char</td><td>9</td><td>否</td><td>图书编号（主键）</td></tr><tr><td>bkName</td><td>varchar</td><td>50</td><td>是</td><td>图书名称</td></tr><tr><td>bkAuthor</td><td>varchar</td><td>50</td><td>是</td><td>作者</td></tr><tr><td>bkPress</td><td>varchar</td><td>50</td><td>是</td><td>出版社</td></tr><tr><td>bkPrice</td><td>decimal</td><td></td><td>是</td><td>单价</td></tr><tr><td>bkStatus</td><td>int</td><td></td><td>是</td><td>是否在馆，1：在馆，0：不在馆</td></tr></tbody></table></div><p><strong>3.读者类别表</strong><br>读者类别表中需要设计的字段有读者类别编号（rdType）、读者类别名称（rdTypeName）、可借书数量（canLendQty）、可借书天数（canLendDay）。</p><div class="table-container"><table><thead><tr><th>字段名</th><th>类型</th><th>长度</th><th>是否为空</th><th>描述</th></tr></thead><tbody><tr><td>rdType</td><td>int</td><td></td><td>否</td><td>读者类别编号（主键）</td></tr><tr><td>rdTypeName</td><td>varchar</td><td>20</td><td>是</td><td>读者类别名称</td></tr><tr><td>canLendQty</td><td>int</td><td></td><td>是</td><td>可借书数量</td></tr><tr><td>canLendDay</td><td>int</td><td></td><td>是</td><td>可借书天数</td></tr></tbody></table></div><p><strong>4.读者表</strong><br>读者表中需要设计的字段有读者编号（rdID）、读者类别编号（rdType）、读者姓名（rdName）、读者单位（rdDept）、读者QQ（rdQQ）、已借书数量（rdBorrowQty）。</p><div class="table-container"><table><thead><tr><th>字段名</th><th>类型</th><th>长度</th><th>是否为空</th><th>描述</th></tr></thead><tbody><tr><td>rdID</td><td>char</td><td>9</td><td>否</td><td>读者编号（主键）</td></tr><tr><td>rdType</td><td>int</td><td></td><td>是</td><td>读者类别编号</td></tr><tr><td>rdName</td><td>varchar</td><td>25</td><td>是</td><td>读者姓名</td></tr><tr><td>rdDept</td><td>varchar</td><td>40</td><td>是</td><td>读者单位</td></tr><tr><td>rdQQ</td><td>varchar</td><td>25</td><td>是</td><td>读者QQ</td></tr><tr><td>rdBorrowQty</td><td>int</td><td></td><td>是</td><td>已借书数量</td></tr></tbody></table></div><p><strong>5.借书表</strong><br>借书表中需要设计的字段有读者编号（rdID）、图书编号（bkID）、借书日期（DateBorrow）、还书日期（DateLendPlan）。</p><div class="table-container"><table><thead><tr><th>字段名</th><th>类型</th><th>长度</th><th>是否为空</th><th>描述</th></tr></thead><tbody><tr><td>rdID</td><td>char</td><td>9</td><td>否</td><td>读者编号</td></tr><tr><td>bkId</td><td>char</td><td>9</td><td>否</td><td>图书编号</td></tr><tr><td>DateBorrow</td><td>datetime</td><td></td><td>是</td><td>借书日期</td></tr><tr><td>DateLendPlan</td><td>datetime</td><td></td><td>是</td><td>应还日期</td></tr></tbody></table></div><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><p>由于本项目中需要创建1个图书数据库BookDB与5个数据库表Login、Book、ReaderType、Reader、Borrow，通过SQL语句创建图书数据库与数据库表的具体内容如下。</p><p><strong>1.创建图书数据库BookDB</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database BooksDB</span><br><span class="line"><span class="keyword">on</span> <span class="keyword">primary</span></span><br><span class="line">(name<span class="operator">=</span><span class="string">&#x27;BooksDB_DATA&#x27;</span>,</span><br><span class="line">filename<span class="operator">=</span><span class="string">&#x27;D:\books\BooksDB.MDF&#x27;</span>,<span class="comment">-- 文件夹需要存在</span></span><br><span class="line">size<span class="operator">=</span><span class="number">5</span>MB,</span><br><span class="line">maxsize<span class="operator">=</span><span class="number">30</span>MB,</span><br><span class="line">filegrowth<span class="operator">=</span><span class="number">20</span><span class="operator">%</span>)</span><br><span class="line">log <span class="keyword">on</span></span><br><span class="line">(name<span class="operator">=</span><span class="string">&#x27;BooksDB_LOG&#x27;</span>,</span><br><span class="line">filename<span class="operator">=</span><span class="string">&#x27;D:\books\BooksDB.LDF&#x27;</span>,</span><br><span class="line">size<span class="operator">=</span><span class="number">5</span>MB,</span><br><span class="line">maxsize<span class="operator">=</span><span class="number">30</span>MB,</span><br><span class="line">filegrowth<span class="operator">=</span><span class="number">3</span>MB)</span><br></pre></td></tr></table></figure></p><p><strong>2.创建数据库表</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">use BookDB</span><br><span class="line">go</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Login(<span class="comment">--创建登录表</span></span><br><span class="line"><span class="comment">-- 设置为主键和自增长列，起始值为1，每次自增1</span></span><br><span class="line">Id <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">identity</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">primary</span> key,</span><br><span class="line">UserName nvarchar(<span class="number">25</span>) <span class="keyword">not</span> <span class="keyword">null</span>,<span class="comment">-- 登录名</span></span><br><span class="line">Password nvarchar(<span class="number">25</span>) <span class="keyword">not</span> <span class="keyword">null</span>, <span class="comment">-- 密码</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> ReaderType( <span class="comment">-- 创建读者类别表</span></span><br><span class="line">rdType <span class="type">int</span> <span class="keyword">primary</span> key,<span class="comment">-- 读者类别编号</span></span><br><span class="line">rdTypeName <span class="type">varchar</span>(<span class="number">20</span>),<span class="comment">--读者类别名称</span></span><br><span class="line">canLendQty <span class="type">int</span>,<span class="comment">-- 可借书天数</span></span><br><span class="line">canLendDay <span class="type">int</span>,<span class="comment">-- 可借书天数</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Reader(<span class="comment">--创建读者表</span></span><br><span class="line">rdID <span class="type">char</span>(<span class="number">9</span>) <span class="keyword">primary</span> key,<span class="comment">-- 读者编号</span></span><br><span class="line">rdType <span class="type">int</span> <span class="keyword">references</span> ReaderType(rdType),<span class="comment">--读者类别编号</span></span><br><span class="line">rdName <span class="type">varchar</span>(<span class="number">25</span>),<span class="comment">-- 读者姓名</span></span><br><span class="line">rdDept <span class="type">varchar</span>(<span class="number">40</span>),<span class="comment">-- 读者单位</span></span><br><span class="line">rdQQ <span class="type">varchar</span>(<span class="number">25</span>),<span class="comment">-- 读者QQ</span></span><br><span class="line">rdBorrowQty <span class="type">int</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">check</span>(rdBorrowQty <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">10</span>)<span class="comment">-- 已借书数量</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Book(<span class="comment">-- 创建图书表</span></span><br><span class="line">bkID <span class="type">char</span>(<span class="number">9</span>) <span class="keyword">primary</span> key,<span class="comment">-- 图书编号</span></span><br><span class="line">bkName <span class="type">varchar</span>(<span class="number">50</span>),<span class="comment">-- 图书名字</span></span><br><span class="line">bkAuthor <span class="type">varchar</span>(<span class="number">50</span>),<span class="comment">-- 作者</span></span><br><span class="line">bkPress <span class="type">varchar</span>(<span class="number">50</span>),<span class="comment">-- 出版社</span></span><br><span class="line">bkPrice <span class="type">decimal</span>(<span class="number">5</span>,<span class="number">2</span>), <span class="comment">--单价</span></span><br><span class="line">bkStatus <span class="type">int</span> <span class="keyword">default</span> <span class="number">1</span>,<span class="comment">-- 是否在馆，1：在，2：不在</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Borrow(<span class="comment">-- 创建借书表</span></span><br><span class="line">rdID <span class="type">char</span>(<span class="number">9</span>) <span class="keyword">references</span> Reader(rdID), <span class="comment">-- 读者编号</span></span><br><span class="line">bkID <span class="type">char</span>(<span class="number">9</span>) <span class="keyword">references</span> Book(bkID),<span class="comment">-- 图书编号</span></span><br><span class="line">DateBorrow DateTime,<span class="comment">-- 借书日期</span></span><br><span class="line">DateLendPlan DateTime,<span class="comment">-- 还书日期</span></span><br><span class="line"><span class="keyword">primary</span> key(rdID,bkID)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p><strong>3.向数据库表中添加数据</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">use BookDB</span><br><span class="line">go</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> ReaderType <span class="comment">-- 向读者类别表添加数据</span></span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;教师&#x27;</span>,<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;60&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;本科生&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;30&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;硕士研究生&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;40&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;博士研究生&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;50&#x27;</span>)</span><br><span class="line">go</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Reader <span class="comment">-- 向读者表添加数据</span></span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;rd2022001&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;黑马&#x27;</span>,<span class="string">&#x27;计算机科学学院&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;0&#x27;</span>),</span><br><span class="line">(<span class="string">&#x27;rd2022002&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;Qing&#x27;</span>,<span class="string">&#x27;软件学院&#x27;</span>,<span class="string">&#x27;1234567890&#x27;</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">go</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Book <span class="comment">-- 向图书表中添加数据</span></span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(<span class="string">&#x27;bk2020001&#x27;</span>,<span class="string">&#x27;C#程序设计基础入门教程&#x27;</span>,<span class="string">&#x27;黑马程序员&#x27;</span>,<span class="string">&#x27;人民邮电出版社&#x27;</span>,<span class="string">&#x27;59.80&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure></p><h3 id="登录功能业务实现"><a href="#登录功能业务实现" class="headerlink" title="登录功能业务实现"></a>登录功能业务实现</h3><h4 id="登录窗体设计"><a href="#登录窗体设计" class="headerlink" title="登录窗体设计"></a>登录窗体设计</h4><p>登录窗体实现【登录】【注册】<br><strong>1.创建程序</strong></p><ul><li>项目名称：BookManagementSystem</li><li>项目类型:Windows窗体应用程序</li></ul><p><strong>2.窗体设计</strong><br>步骤</p><ul><li><code>Form1.cs</code>重命名为<code>LoginForm.cs</code></li><li><code>Text</code>:管理员登录</li><li><code>BackgroundImage</code>:”login.png”,<code>BackgroundImageLayout</code>:Stretch</li><li>添加2个<strong>TextBox控件</strong>用于输入用户名和密码，<code>Name</code>:”tbUserName””tbPassword”,<code>Font</code>:”宋体””10.5pt(五号)”,密码框<code>PasswordChar</code>:*</li><li>添加2个<strong>ButtonBox控件</strong>用于【登录】【注册】，<code>Name</code>:”btnLogin””btnRegister”,<code>Text</code>“登录”“注册”,<code>BlackColor</code>:”Transparent(透明)”,<code>FlatStyle</code>:”Flat（按钮外观平滑）”,<code>BorderSize</code>:0,<code>MouseDownBackColor</code>和<code>MouseOverBackColor</code>:”Transparent(透明)”,<code>ForeColor</code>:White,<code>Font</code>:”宋体””12pt(小四)”</li></ul><h4 id="实现登录功能"><a href="#实现登录功能" class="headerlink" title="实现登录功能"></a>实现登录功能</h4><p>当用户注册过账号时，在登录窗体中输入用户名与密码后，单击【登录】按钮，程序会与数据库连接来判断输入的用户名与密码是否正确，如果正确，则登录成功进入到主菜单窗体，否则，程序会根据不同的情况提示“密码错误！”或“用户不存在！”或“操作数据库出错！”。如果用户还未注册账号，此时可以单击登录窗体中的【注册】按钮，进入到注册窗体中注册一个账号。</p><p><strong>1.实现登录功能</strong><br><figure class="highlight c#"><figcaption><span>【登录】按钮Click事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> LoginForm loginForm = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LoginForm <span class="title">getInstance</span>()<span class="comment">//单例模式</span></span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (loginForm == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        loginForm = <span class="keyword">new</span> LoginForm();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> loginForm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnLogin_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//编写连接数据库的字符串</span></span><br><span class="line">    <span class="built_in">string</span> connStr = <span class="string">&quot;server=.;uid=sa;pwd=root;database=BookDB&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">string</span> User = tbUserName.Text;</span><br><span class="line">        <span class="built_in">string</span> Pwd = tbPassword.Text;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrWhiteSpace(User) || <span class="built_in">string</span>.IsNullOrWhiteSpace(Pwd))</span><br><span class="line">        &#123;</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;用户名或密码不能为空!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">using</span> (SqlConnection conn = <span class="keyword">new</span> SqlConnection(connStr))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            <span class="comment">//创建SqlCommand对象</span></span><br><span class="line">            SqlCommand cmd = conn.CreateCommand();</span><br><span class="line">            cmd.CommandText = <span class="string">&quot;select * from Login where UserName=&#x27;&quot;</span> + User + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">            SqlDataReader reader = cmd.ExecuteReader();</span><br><span class="line">            <span class="keyword">if</span> (reader.Read())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">string</span> passward = reader.GetString(reader.GetOrdinal(<span class="string">&quot;Password&quot;</span>));</span><br><span class="line">                <span class="keyword">if</span> (Pwd == passward)</span><br><span class="line">                &#123;</span><br><span class="line">                        MessageBox.Show(<span class="string">&quot;登录成功！&quot;</span>);</span><br><span class="line">                    <span class="keyword">this</span>.Hide();<span class="comment">//隐藏当前窗体</span></span><br><span class="line">                    <span class="keyword">new</span> MainMenuForm().Show();<span class="comment">//开启主菜单窗体</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    MessageBox.Show(<span class="string">&quot;密码错误！&quot;</span>);</span><br><span class="line">                    tbPassword.Text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;用户不存在！&quot;</span>);</span><br><span class="line">                tbUserName.Text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">                tbPassword.Text = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;数据库操作失败&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>2.实现显示注册窗体的功能</strong><br><figure class="highlight c#"><figcaption><span>【注册】按钮Click事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnRegister_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.Hide();<span class="comment">//隐藏当前窗体</span></span><br><span class="line">    <span class="keyword">new</span> RegisterFrom().Show();<span class="comment">//显示注册窗体</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">LoginForm_FormClosing</span>(<span class="params"><span class="built_in">object</span> sender, FormClosingEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    loginForm = <span class="literal">null</span>;<span class="comment">//将loginForm设置为null</span></span><br><span class="line">    Application.Exit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="注册功能业务实现"><a href="#注册功能业务实现" class="headerlink" title="注册功能业务实现"></a>注册功能业务实现</h3><h4 id="注册窗体设计"><a href="#注册窗体设计" class="headerlink" title="注册窗体设计"></a>注册窗体设计</h4><p>登录窗体实现【注册】【取消】<br><strong>1.创建注册窗体</strong></p><ul><li>窗体名称：RegisterForm.cs</li></ul><p><strong>2.窗体设计</strong><br>步骤</p><ul><li><code>Text</code>:注册</li><li><code>BackgroundImage</code>:”register_bg.png”,<code>BackgroundImageLayout</code>:Stretch</li><li>添加2个<strong>TextBox控件</strong>用于输入用户名和密码，<code>Name</code>:”tbUserName””tbPassword”,<code>Font</code>:”宋体””15pt(小三号)”,密码框<code>PasswordChar</code>:*</li><li>添加2个<strong>ButtonBox控件</strong>用于【注册】【取消】，<code>Name</code>:”btnRegister””btnCancel”,<code>Text</code>“注册”“取消”,<code>BlackColor</code>:”Transparent(透明)”,<code>FlatStyle</code>:”Flat（按钮外观平滑）”,<code>BorderSize</code>:0,<code>MouseDownBackColor</code>和<code>MouseOverBackColor</code>:”Transparent(透明)”,<code>ForeColor</code>:White,<code>Font</code>:”宋体””15pt(小三)”</li></ul><h4 id="实现注册窗体"><a href="#实现注册窗体" class="headerlink" title="实现注册窗体"></a>实现注册窗体</h4><p>1.实现注册功能<br><figure class="highlight c#"><figcaption><span>【注册】按钮Click事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnRegister_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//编写连接数据库的字符串</span></span><br><span class="line">    <span class="built_in">string</span> connStr = <span class="string">&quot;server=.;uid=sa;pwd=root;database=BookDB&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (SqlConnection conn =<span class="keyword">new</span> SqlConnection(connStr))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">string</span>.IsNullOrWhiteSpace(tbUserName.Text) || <span class="built_in">string</span>.IsNullOrWhiteSpace(tbPassword.Text))</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;用户名或密码不能为空!&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">string</span> sql = <span class="string">&quot;insert into Login(UserName,Password) values(&#x27;&#123;0&#125;&#x27;,&#x27;&#123;1&#125;&#x27;)&quot;</span>;</span><br><span class="line">            sql = <span class="built_in">string</span>.Format(sql, tbUserName.Text, tbPassword.Text);</span><br><span class="line">            SqlCommand cmd = <span class="keyword">new</span> SqlCommand(sql, conn);</span><br><span class="line">            <span class="built_in">int</span> returnvalue = cmd.ExecuteNonQuery();</span><br><span class="line">            <span class="keyword">if</span> (returnvalue!=<span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;注册成功！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;注册失败！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;注册失败&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>2.实现取消显示登录窗体功能<br><figure class="highlight c#"><figcaption><span>【取消】按钮Click事件以及窗体FormClosing事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnCancel_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.Close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RegisterFrom_FormClosing</span>(<span class="params"><span class="built_in">object</span> sender, FormClosingEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    LoginForm.getInstance().Show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="主菜单功能业务实现"><a href="#主菜单功能业务实现" class="headerlink" title="主菜单功能业务实现"></a>主菜单功能业务实现</h3><h4 id="主菜单窗体设计"><a href="#主菜单窗体设计" class="headerlink" title="主菜单窗体设计"></a>主菜单窗体设计</h4><h4 id="实现主菜单功能"><a href="#实现主菜单功能" class="headerlink" title="实现主菜单功能"></a>实现主菜单功能</h4><ol><li>显示4个按钮对应的窗体</li><li>实现退出系统功能</li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> MainMenuForm mainMenForm = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MainMenuForm <span class="title">getInstacce</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (mainMenForm == <span class="literal">null</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MainMenuForm();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mainMenForm;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnCategory_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.Hide();</span><br><span class="line">    <span class="keyword">new</span> ReaderCategoryForm().Show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MainMenForm_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.Hide();</span><br><span class="line">    <span class="keyword">new</span> BookManagementForm().Show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnReader_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.Hide();</span><br><span class="line">    <span class="keyword">new</span> ReaderManagementForm().Show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnBorrRet_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.Hide();</span><br><span class="line">    <span class="keyword">new</span> BorrAndRetForm().Show();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnExit_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Application.Exit();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">MainMenuForm_FormClosed</span>(<span class="params"><span class="built_in">object</span> sender, FormClosedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    mainMenForm = <span class="literal">null</span>;</span><br><span class="line">    Application.Exit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="读者类别功能业务实现"><a href="#读者类别功能业务实现" class="headerlink" title="读者类别功能业务实现"></a>读者类别功能业务实现</h3><h4 id="读者类别窗体设计"><a href="#读者类别窗体设计" class="headerlink" title="读者类别窗体设计"></a>读者类别窗体设计</h4><p><strong>1.创建读者类别窗体</strong><br>在项目中创建一个名为ReaderCategoryForm的读者类别窗体。<br><strong>2.添加窗体控件：</strong></p><ul><li>添加4个<strong>Label控件</strong>分别用于显示“类别号”“类别名称”“可借书数量”“可借书天数”，设置<code>BackColor</code>:Transparent<code>,</code>ForeColor`:White</li><li>添加4个<strong>TextBox控件</strong>用于显示对应输入框，设置<code>Name</code>:”tbRdType””tbRdTypeName””tbCanLendQty””tbRdCanLendDay”</li><li>添加5个<strong>Button控件</strong>用于【返回主菜单】【添加】【查询】【删除】【修改】按钮，设置<code>Name</code>:”btnBackMenu””btnAdd””btnQuery””btnDelete””brnAlter”<code>BlackColor</code>:”Transparent(透明)”,<code>FlatStyle</code>:”Flat（按钮外观平滑）”,<code>BorderSize</code>:0,<code>MouseDownBackColor</code>和<code>MouseOverBackColor</code>:”Transparent(透明)”,<code>ForeColor</code>:White,<code>Font</code>:”宋体””18pt(小二)”</li><li>添加1个<strong>DataGridView</strong>控件，设置<code>Name</code>:dgvRdCategory,<code>BackgroundColor</code>:White</li><li><img src="/2022/11/25/CSharp/2022-12-01-11-36-20.png" alt="读者类别窗体设计"></li></ul><h4 id="实现读者类别管理功能"><a href="#实现读者类别管理功能" class="headerlink" title="实现读者类别管理功能"></a>实现读者类别管理功能</h4><p>读者类别窗体中主要实现的是5个按钮的单击事件，这5个按钮分别是 【返回主菜单】按钮、【添加】按钮、【查询】按钮、【删除】按钮、【修改】按钮。单击这5个按钮，程序会修改数据库中指定的读者类别对应的任意数据信息。</p><p><strong>1.实现【返回主菜单】按钮的单击事件</strong><br><figure class="highlight c#"><figcaption><span>【返回主菜单】按钮Click事件</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnBackMenu_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.Close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ReaderCategoryForm_FormClosed</span>(<span class="params"><span class="built_in">object</span> sender, FormClosedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    MainMenuForm.getInstacce().Show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>2.实现加载读者类别信息功能</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">string</span>  conStr = <span class="string">&quot;server=.;uid=sa;pwd=root;database=BookDB&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DataBind</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (SqlConnection conn =<span class="keyword">new</span>  SqlConnection(conStr))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            SqlCommand comm = conn.CreateCommand();</span><br><span class="line">            comm.CommandText = <span class="string">&quot;select rdType 类别号,rdTypeName 类别名称,CanLendQty 可借数量,canLendDay 可借天数 from ReaderType&quot;</span>;</span><br><span class="line">            SqlDataAdapter sda = <span class="keyword">new</span> SqlDataAdapter(comm);</span><br><span class="line">            DataSet ds = <span class="keyword">new</span> DataSet();</span><br><span class="line">            sda.Fill(ds);</span><br><span class="line">            dgvRdCategory.DataSource = ds.Tables[<span class="number">0</span>];</span><br><span class="line">            tbRdType.DataBindings.Clear();</span><br><span class="line">            tbRdTypeName.DataBindings.Clear();</span><br><span class="line">            tbCanLendQty.DataBindings.Clear();</span><br><span class="line">            tbCanLendDay.DataBindings.Clear();</span><br><span class="line">            tbRdType.DataBindings.Add(<span class="string">&quot;Text&quot;</span>, ds.Tables[<span class="number">0</span>], <span class="string">&quot;类别号&quot;</span>);</span><br><span class="line">            tbRdTypeName.DataBindings.Add(<span class="string">&quot;Text&quot;</span>, ds.Tables[<span class="number">0</span>], <span class="string">&quot;类别名称&quot;</span>);</span><br><span class="line">            tbCanLendQty.DataBindings.Add(<span class="string">&quot;Text&quot;</span>, ds.Tables[<span class="number">0</span>], <span class="string">&quot;可借数量&quot;</span>);</span><br><span class="line">            tbCanLendDay.DataBindings.Add(<span class="string">&quot;Text&quot;</span>, ds.Tables[<span class="number">0</span>], <span class="string">&quot;可借天数&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;操作数据库出错！&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ReaderCategoryForm_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DataBind();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>3.实现【添加】按钮的单击事件</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnAdd_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (SqlConnection conn =<span class="keyword">new</span> SqlConnection(conStr))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            SqlCommand comm = conn.CreateCommand();</span><br><span class="line">            comm.CommandText = <span class="string">&quot;insert into ReaderType values(@rdType,@rdTypeName,@canLendQty,@canLendDay)&quot;</span>;</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@rdType&quot;</span>, tbRdType.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@rdTypeName&quot;</span>, tbRdTypeName.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@canLendQty&quot;</span>, tbCanLendQty.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@canLendDay&quot;</span>, tbCanLendDay.Text);</span><br><span class="line">            <span class="keyword">try</span></span><br><span class="line">            &#123;</span><br><span class="line">                comm.ExecuteNonQuery();</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;添加成功！&quot;</span>);</span><br><span class="line">                DataBind();<span class="comment">//重新加载数据库中的数据（刷新窗格中的数据）</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;添加失败！&quot;</span>+ex.Message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;操作数据库出错！&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>4.实现【查询】按钮的单击事件</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnQuery_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (SqlConnection conn= <span class="keyword">new</span> SqlConnection(conStr))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            SqlCommand comm = conn.CreateCommand();</span><br><span class="line">            comm.CommandText= <span class="string">&quot;select rdType 类别号,rdTypeName 类别名称,CanLendQty 可借数量,canLendDay 可借天数 from ReaderType where rdTypeName like @rdTypeName+&#x27;%&#x27;&quot;</span>;</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@rdTypeName&quot;</span>, tbRdTypeName.Text);</span><br><span class="line">            SqlDataAdapter sda = <span class="keyword">new</span> SqlDataAdapter(comm);</span><br><span class="line">            DataSet ds = <span class="keyword">new</span> DataSet();</span><br><span class="line">            sda.Fill(ds);</span><br><span class="line">            dgvRdCategory.DataSource = ds.Tables[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;操作数据库出错！&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>5.实现【删除】按钮的单击事件</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnDelete_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DialogResult dr = MessageBox.Show(<span class="string">&quot;确定要删除吗？&quot;</span>, <span class="string">&quot;确定&quot;</span>, MessageBoxButtons.OKCancel);</span><br><span class="line">    <span class="keyword">if</span> (dr==DialogResult.OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (SqlConnection conn=<span class="keyword">new</span> SqlConnection(conStr))</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                SqlCommand comm = conn.CreateCommand();</span><br><span class="line">                comm.CommandText = <span class="string">&quot;delete from ReaderType where rdType =@rdType&quot;</span>;</span><br><span class="line">                comm.Parameters.AddWithValue(<span class="string">&quot;@rdType&quot;</span>, tbRdType.Text);</span><br><span class="line">                comm.ExecuteNonQuery();</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">                DataBind();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;删除失败！&quot;</span>+ex.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>6.实现【修改】按钮的单击事件</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnAlter_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (SqlConnection conn = <span class="keyword">new</span> SqlConnection(conStr))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            SqlCommand comm = conn.CreateCommand();</span><br><span class="line">            comm.CommandText = <span class="string">&quot;update ReaderType set rdType=@rdType,rdTypeName=@rdTypeName,canLendQty=@canLendQty,canLendDay=@canLendDay where rdType=@rdType&quot;</span>;</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@rdType&quot;</span>, tbRdType.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@rdTypeName&quot;</span>, tbRdTypeName.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@canLendQty&quot;</span>, tbCanLendQty.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@canLendDay&quot;</span>, tbCanLendDay.Text);</span><br><span class="line">            comm.ExecuteNonQuery();</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;修改成功！&quot;</span>);</span><br><span class="line">            DataBind();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;修改失败！&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="读者管理功能业务实现"><a href="#读者管理功能业务实现" class="headerlink" title="读者管理功能业务实现"></a>读者管理功能业务实现</h3><h4 id="读者管理窗体设计"><a href="#读者管理窗体设计" class="headerlink" title="读者管理窗体设计"></a>读者管理窗体设计</h4><p><strong>1.创建读者管理窗体</strong><br>在项目中创建一个名为ReaderManagementForm的读者管理窗体<br><strong>2.添加窗体控件</strong></p><ul><li>添加6个<strong>Label控件</strong></li><li>添加6个<strong>TextBox控件</strong></li><li>添加5个<strong>Button控件</strong></li><li>添加1个<strong>DataGridView控件</strong></li><li><img src="/2022/11/25/CSharp/2022-12-01-11-37-58.png" alt="读者管理窗体设计"></li></ul><h4 id="实现读者管理功能"><a href="#实现读者管理功能" class="headerlink" title="实现读者管理功能"></a>实现读者管理功能</h4><p>读者管理窗体中主要实现的是5个按钮的单击事件，这5个按钮分别是 【返回主菜单】按钮、【添加】按钮、【查询】按钮、【删除】按钮、【修改】按钮。单击这5个按钮，程序会修改数据库中指定的读者类别对应的任意数据信息。</p><p><strong>1.实现【返回主菜单】按钮的单击事件</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnBackMenu_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.Close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ReaderManagementForm_FormClosed</span>(<span class="params"><span class="built_in">object</span> sender, FormClosedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    MainMenuForm.getInstacce().Show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>2.实现加载读者信息功能</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">string</span> conStr = <span class="string">&quot;server=.;uid=sa;pwd=root;database=BookDB&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DataBind</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (SqlConnection conn = <span class="keyword">new</span> SqlConnection(conStr))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            SqlCommand comm = conn.CreateCommand();</span><br><span class="line">            comm.CommandText = <span class="string">&quot;select rdID 读者编号,rdType 读者类别号,rdName 读者姓名,rdDept 读者单位,rdQQ 读者QQ,rdBorrowQty 已借书数量 from Reader&quot;</span>;</span><br><span class="line">            SqlDataAdapter sda = <span class="keyword">new</span> SqlDataAdapter(comm);</span><br><span class="line">            DataSet ds = <span class="keyword">new</span> DataSet();</span><br><span class="line">            sda.Fill(ds);</span><br><span class="line">            dgvReader.DataSource = ds.Tables[<span class="number">0</span>];</span><br><span class="line">            tbRdId.DataBindings.Clear();</span><br><span class="line">            tbRdType.DataBindings.Clear();</span><br><span class="line">            tbRdName.DataBindings.Clear();</span><br><span class="line">            tbRdDept.DataBindings.Clear();</span><br><span class="line">            tbRdQQ.DataBindings.Clear();</span><br><span class="line">            tbRdBorrowQty.DataBindings.Clear();</span><br><span class="line">            tbRdId.DataBindings.Add(<span class="string">&quot;Text&quot;</span>, ds.Tables[<span class="number">0</span>], <span class="string">&quot;读者编号&quot;</span>);</span><br><span class="line">            tbRdType.DataBindings.Add(<span class="string">&quot;Text&quot;</span>, ds.Tables[<span class="number">0</span>], <span class="string">&quot;读者类别号&quot;</span>);</span><br><span class="line">            tbRdName.DataBindings.Add(<span class="string">&quot;Text&quot;</span>, ds.Tables[<span class="number">0</span>], <span class="string">&quot;读者姓名&quot;</span>);</span><br><span class="line">            tbRdDept.DataBindings.Add(<span class="string">&quot;Text&quot;</span>, ds.Tables[<span class="number">0</span>], <span class="string">&quot;读者单位&quot;</span>);</span><br><span class="line">            tbRdQQ.DataBindings.Add(<span class="string">&quot;Text&quot;</span>, ds.Tables[<span class="number">0</span>], <span class="string">&quot;读者QQ&quot;</span>);</span><br><span class="line">            tbRdBorrowQty.DataBindings.Add(<span class="string">&quot;Text&quot;</span>, ds.Tables[<span class="number">0</span>], <span class="string">&quot;已借书数量&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;操作数据库出错！&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ReaderManagementForm_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DataBind();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>3.实现【添加】按钮的单击事件</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnAdd_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (SqlConnection conn =<span class="keyword">new</span> SqlConnection(conStr))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            SqlCommand comm = conn.CreateCommand();</span><br><span class="line">            comm.CommandText = <span class="string">&quot;insert into Reader values(@rdID,@rdType,@rdName,@rdDept,@rdQQ,@rdBorrowQty)&quot;</span>;</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@rdID&quot;</span>,tbRdId.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@rdType&quot;</span>,tbRdType.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@rdName&quot;</span>,tbRdName.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@rdDept&quot;</span>,tbRdDept.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@rdQQ&quot;</span>,tbRdQQ.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@rdBorrowQty&quot;</span>,tbRdBorrowQty.Text);</span><br><span class="line">            comm.ExecuteNonQuery();</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;添加成功！&quot;</span>);</span><br><span class="line">            DataBind();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;添加失败&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>4.实现【查询】按钮的单击事件</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnQuery_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (SqlConnection conn = <span class="keyword">new</span> SqlConnection(conStr))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            SqlCommand comm = conn.CreateCommand();</span><br><span class="line">            comm.CommandText = <span class="string">&quot;select rdID 读者编号,rdType 读者类别号,rdName 读者姓名,rdDept 读者单位,rdQQ 读者QQ,rdBorrowQty 已借书数量 from Reader where rdDept like @rdDept + &#x27;%&#x27;&quot;</span>;</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@rdDept&quot;</span>, tbRdDept.Text);</span><br><span class="line">            SqlDataAdapter sda = <span class="keyword">new</span> SqlDataAdapter(comm);</span><br><span class="line">            DataSet ds = <span class="keyword">new</span> DataSet();</span><br><span class="line">            sda.Fill(ds);</span><br><span class="line">            dgvReader.DataSource = ds.Tables[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;操作数据库失败&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>5.实现【删除】按钮的单击事件</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnDelete_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DialogResult dr = MessageBox.Show(<span class="string">&quot;确定要删除吗？&quot;</span>, <span class="string">&quot;确定&quot;</span>, MessageBoxButtons.OKCancel);</span><br><span class="line">    <span class="keyword">if</span> (dr == DialogResult.OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (SqlConnection conn = <span class="keyword">new</span> SqlConnection(conStr))</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                SqlCommand comm = conn.CreateCommand();</span><br><span class="line">                comm.CommandText = <span class="string">&quot;delete from Reader where rdID=@rdID&quot;</span>;</span><br><span class="line">                comm.Parameters.AddWithValue(<span class="string">&quot;@rdID&quot;</span>, tbRdId.Text);</span><br><span class="line">                comm.ExecuteNonQuery();</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">                DataBind();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;删除失败！&quot;</span> + ex.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>6.实现【修改】按钮的单击事件</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnAlter_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (SqlConnection conn = <span class="keyword">new</span> SqlConnection(conStr))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            SqlCommand comm = conn.CreateCommand();</span><br><span class="line">            comm.CommandText = <span class="string">&quot;update Reader set rdID=@rdID,rdType=@rdType,rdName=@rdName,rdDept=@rdDept,rdQQ=@rdQQ,rdBorrowQty=@rdBorrowQty where rdID=@rdID&quot;</span>;</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@rdID&quot;</span>, tbRdId.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@rdType&quot;</span>, tbRdType.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@rdName&quot;</span>, tbRdName.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@rdDept&quot;</span>, tbRdDept.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@rdQQ&quot;</span>, tbRdQQ.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@rdBorrowQty&quot;</span>, tbRdBorrowQty.Text);</span><br><span class="line">            comm.ExecuteNonQuery();</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;修改成功！&quot;</span>);</span><br><span class="line">            DataBind();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;修改失败！&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="图书管理功能业务实现"><a href="#图书管理功能业务实现" class="headerlink" title="图书管理功能业务实现"></a>图书管理功能业务实现</h3><h4 id="图书管理窗体设计"><a href="#图书管理窗体设计" class="headerlink" title="图书管理窗体设计"></a>图书管理窗体设计</h4><p><strong>1.创建图书管理窗体</strong><br>在项目中创建一个名为BookManagementForm的图书管理窗体。<br><strong>2.添加窗体控件</strong></p><ul><li>添加6个<strong>Label控件</strong></li><li>添加6个<strong>TextBox控件</strong></li><li>添加5个<strong>Button控件</strong></li><li>添加1个<strong>DataGridView控件</strong></li><li><img src="/2022/11/25/CSharp/2022-12-01-11-45-45.png" alt="图书管理窗体设计"></li></ul><h4 id="实现图书管理功能"><a href="#实现图书管理功能" class="headerlink" title="实现图书管理功能"></a>实现图书管理功能</h4><p>图书管理窗体中主要实现的是5个按钮的单击事件，这5个按钮分别是 【返回主菜单】按钮、【添加】按钮、【查询】按钮、【删除】按钮、【修改】按钮。单击这5个按钮，程序会修改数据库中指定的读者类别对应的任意数据信息。</p><p><strong>1.实现【返回主菜单】按钮的单击事件</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnBackMenu_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.Close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BookManagementForm_FormClosed</span>(<span class="params"><span class="built_in">object</span> sender, FormClosedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    MainMenuForm.getInstacce().Show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>2.实现加载读者信息功能</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="built_in">string</span> conStr = <span class="string">&quot;server=.;uid=sa;pwd=root;database=BookDB&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DataBind</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (SqlConnection conn = <span class="keyword">new</span> SqlConnection(conStr))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            SqlCommand comm = conn.CreateCommand();</span><br><span class="line">            comm.CommandText = <span class="string">&quot;select bkID 书号,bkName 书名,bkAuthor 作者,bkPress 出版社,bkPrice 单价,bkStatus 状态 from Book&quot;</span>;</span><br><span class="line">            SqlDataAdapter sda = <span class="keyword">new</span> SqlDataAdapter(comm);</span><br><span class="line">            DataSet ds = <span class="keyword">new</span> DataSet();</span><br><span class="line">            sda.Fill(ds);</span><br><span class="line">            dgvBook.DataSource = ds.Tables[<span class="number">0</span>];</span><br><span class="line">            tbBkID.DataBindings.Clear();</span><br><span class="line">            tbBkName.DataBindings.Clear();</span><br><span class="line">            tbBkAuthor.DataBindings.Clear();</span><br><span class="line">            tbBkPress.DataBindings.Clear();</span><br><span class="line">            tbBkPrice.DataBindings.Clear();</span><br><span class="line">            tbBkStatus.DataBindings.Clear();</span><br><span class="line">            tbBkID.DataBindings.Add(<span class="string">&quot;Text&quot;</span>, ds.Tables[<span class="number">0</span>], <span class="string">&quot;书号&quot;</span>);</span><br><span class="line">            tbBkName.DataBindings.Add(<span class="string">&quot;Text&quot;</span>, ds.Tables[<span class="number">0</span>], <span class="string">&quot;书名&quot;</span>);</span><br><span class="line">            tbBkAuthor.DataBindings.Add(<span class="string">&quot;Text&quot;</span>, ds.Tables[<span class="number">0</span>], <span class="string">&quot;作者&quot;</span>);</span><br><span class="line">            tbBkPress.DataBindings.Add(<span class="string">&quot;Text&quot;</span>, ds.Tables[<span class="number">0</span>], <span class="string">&quot;出版社&quot;</span>);</span><br><span class="line">            tbBkPrice.DataBindings.Add(<span class="string">&quot;Text&quot;</span>, ds.Tables[<span class="number">0</span>], <span class="string">&quot;单价&quot;</span>);</span><br><span class="line">            tbBkStatus.DataBindings.Add(<span class="string">&quot;Text&quot;</span>, ds.Tables[<span class="number">0</span>], <span class="string">&quot;状态&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;操作数据库出错！&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BookManagementForm_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DataBind();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>3.实现【添加】按钮的单击事件</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnAdd_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (SqlConnection conn =<span class="keyword">new</span> SqlConnection(conStr))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            SqlCommand comm = conn.CreateCommand();</span><br><span class="line">            comm.CommandText = <span class="string">&quot;insert into Book values(@bkID,@bkName,@bkAuthor,@bkPress,@bkPrice,@bkStatus)&quot;</span>;</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@bkID&quot;</span>, tbBkID.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@bkName&quot;</span>, tbBkName.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@bkAuthor&quot;</span>, tbBkAuthor.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@bkPress&quot;</span>, tbBkPress.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@bkPrice&quot;</span>, tbBkPrice.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@bkStatus&quot;</span>, tbBkStatus.Text);</span><br><span class="line">            comm.ExecuteNonQuery();</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;添加成功！&quot;</span>);</span><br><span class="line">            DataBind();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;添加失败！&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>4.实现【查询】按钮的单击事件</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnQuery_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (SqlConnection conn = <span class="keyword">new</span> SqlConnection(conStr))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            SqlCommand comm = conn.CreateCommand();</span><br><span class="line">            comm.CommandText = <span class="string">&quot;select bkID 书号,bkName 书名,bkAuthor 作者,bkPress 出版社,bkPrice 单价,bkStatus 状态 from Book where bkName like @bkName +&#x27;%&#x27;&quot;</span>;</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@bkName&quot;</span>, tbBkName.Text);</span><br><span class="line">            SqlDataAdapter sda = <span class="keyword">new</span> SqlDataAdapter(comm);</span><br><span class="line">            DataSet ds = <span class="keyword">new</span> DataSet();</span><br><span class="line">            sda.Fill(ds);</span><br><span class="line">            dgvBook.DataSource = ds.Tables[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;查询失败！&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>5.实现【删除】按钮的单击事件</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnDelete_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DialogResult dr = MessageBox.Show(<span class="string">&quot;确定要删除吗？&quot;</span>, <span class="string">&quot;确定&quot;</span>, MessageBoxButtons.OKCancel);</span><br><span class="line">    <span class="keyword">if</span> (dr == DialogResult.OK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (SqlConnection conn = <span class="keyword">new</span> SqlConnection(conStr))</span><br><span class="line">            &#123;</span><br><span class="line">                conn.Open();</span><br><span class="line">                SqlCommand comm = conn.CreateCommand();</span><br><span class="line">                comm.CommandText = <span class="string">&quot;delete from Book where bkID =@bkID&quot;</span>;</span><br><span class="line">                comm.Parameters.AddWithValue(<span class="string">&quot;@bkID&quot;</span>, tbBkID.Text);</span><br><span class="line">                comm.ExecuteNonQuery();</span><br><span class="line">                MessageBox.Show(<span class="string">&quot;删除成功！&quot;</span>);</span><br><span class="line">                DataBind();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">        &#123;</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;删除失败！&quot;</span> + ex.Message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>6.实现【修改】按钮的单击事件</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnAlter_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (SqlConnection conn = <span class="keyword">new</span> SqlConnection(conStr))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            SqlCommand comm = conn.CreateCommand();</span><br><span class="line">            comm.CommandText = <span class="string">&quot;update Book set bkID=@bkID,bkName=@bkName,bkAuthor=@bkAuthor,bkPress=@bkPress,bkPrice=@bkPrice,bkStatus=@bkStatus where bkID=@bkID&quot;</span>;</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@bkID&quot;</span>, tbBkID.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@bkName&quot;</span>, tbBkName.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@bkAuthor&quot;</span>, tbBkAuthor.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@bkPress&quot;</span>, tbBkPress.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@bkPrice&quot;</span>, tbBkPrice.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@bkStatus&quot;</span>, tbBkStatus.Text);</span><br><span class="line">            comm.ExecuteNonQuery();</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;修改成功！&quot;</span>);</span><br><span class="line">            DataBind();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;修改失败！&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="借书还书功能业务实现"><a href="#借书还书功能业务实现" class="headerlink" title="借书还书功能业务实现"></a>借书还书功能业务实现</h3><h4 id="借书还书窗体设计"><a href="#借书还书窗体设计" class="headerlink" title="借书还书窗体设计"></a>借书还书窗体设计</h4><p><strong>1.创建借书还书窗体</strong><br>在项目中创建一个名为BorrAndRetForm的借书还书窗体。<br><strong>2.添加窗体控件</strong></p><ul><li>添加2个<strong>Label控件</strong></li><li>添加2个<strong>TextBox控件</strong></li><li>添加4个<strong>Button控件</strong></li><li>添加1个<strong>DataGridView控件</strong></li><li><img src="/2022/11/25/CSharp/2022-12-01-11-52-52.png" alt="借书还书窗体设计"></li></ul><h4 id="实现借书还书功能"><a href="#实现借书还书功能" class="headerlink" title="实现借书还书功能"></a>实现借书还书功能</h4><p>借书还书窗体中主要实现的是窗体中3个按钮的单击事件，当单击【返回主菜单】按钮时，程序会隐藏当前窗体，显示借书还书窗体。单击【借书】按钮时，程序会向借书表中添加一条数据，单击【还书】按钮时，程序会从借书表中删除一条数据。</p><p><strong>1.创建借书的存储过程usp_BorrowBook</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">use BookDB</span><br><span class="line">go</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> usp_BorrowBook</span><br><span class="line"><span class="variable">@rdID</span> <span class="type">char</span>(<span class="number">9</span>),</span><br><span class="line"><span class="variable">@bkID</span> <span class="type">char</span>(<span class="number">9</span>)</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="comment">-- 判断有没有这本书</span></span><br><span class="line">if <span class="keyword">not</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Book <span class="keyword">where</span> <span class="variable">@bkID</span> <span class="keyword">in</span> (<span class="keyword">select</span> bkID <span class="keyword">from</span> Book))</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line">raiserror(<span class="string">&#x27;图书馆没有该书，借阅失败&#x27;</span>,<span class="number">16</span>,<span class="number">1</span>)<span class="keyword">with</span> nowait</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 判断有没有这个读者ID</span></span><br><span class="line">if <span class="keyword">not</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Reader <span class="keyword">where</span> <span class="variable">@rdID</span> <span class="keyword">in</span> (<span class="keyword">select</span> rdID <span class="keyword">from</span> Reader))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">raiserror(<span class="string">&#x27;图书馆没有该读者，借阅失败&#x27;</span>,<span class="number">16</span>,<span class="number">1</span>)<span class="keyword">with</span> nowait</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 判断书是否在馆</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@bkStatus</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@bkStatus</span><span class="operator">=</span>bkStatus <span class="keyword">from</span> Book <span class="keyword">where</span> bkID<span class="operator">=</span><span class="variable">@bkID</span></span><br><span class="line">if <span class="variable">@bkStatus</span> <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">raiserror(<span class="string">&#x27;该书不在馆，无法借阅&#x27;</span>,<span class="number">16</span>,<span class="number">1</span>)<span class="keyword">with</span> nowait</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 判断该读者的借书数量是否达到最大借书数量</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@rdBorrowQty</span> <span class="type">int</span>,<span class="variable">@canLendQty</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@rdBorrowQty</span> <span class="keyword">from</span> Reader <span class="keyword">where</span> rdID<span class="operator">=</span><span class="variable">@rdID</span></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@canLendQty</span><span class="operator">=</span>canLendQty <span class="keyword">from</span> ReaderType <span class="keyword">where</span> rdType<span class="operator">=</span>(<span class="keyword">select</span> rdType <span class="keyword">from</span> Reader <span class="keyword">where</span> rdID<span class="operator">=</span><span class="variable">@rdID</span>)</span><br><span class="line">if <span class="variable">@rdBorrowQty</span><span class="operator">=</span><span class="variable">@canLendQty</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">raiserror(<span class="string">&#x27;抱歉！你所借书的数量已达最大借书数量！借阅失败！&#x27;</span>,<span class="number">16</span>,<span class="number">1</span>)<span class="keyword">with</span> nowait</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 借书开始（1.修改书的在馆状态，2.修改读者借书数量，3.向借书表Borrow中插入数据）</span></span><br><span class="line"><span class="keyword">update</span> Book <span class="keyword">set</span> bkStatus <span class="operator">=</span> <span class="number">0</span> <span class="keyword">where</span> bkID<span class="operator">=</span><span class="variable">@bkID</span></span><br><span class="line"><span class="keyword">update</span> Reader <span class="keyword">set</span> rdBOrrowQty <span class="operator">=</span>rdBorrowQty <span class="operator">+</span> <span class="number">1</span> <span class="keyword">where</span> rdID<span class="operator">=</span><span class="variable">@rdID</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@canLendDay</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">select</span> <span class="variable">@canLendDay</span><span class="operator">=</span>canLendDay <span class="keyword">from</span> ReaderType <span class="keyword">where</span> rdType<span class="operator">=</span>(<span class="keyword">select</span> rdType <span class="keyword">from</span> Reader <span class="keyword">where</span> rdID<span class="operator">=</span><span class="variable">@rdID</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> Borrow <span class="keyword">values</span>(<span class="variable">@rdID</span>,<span class="variable">@bkID</span>,GETDATE(),DATEADD(dd, <span class="variable">@canLendDay</span>,GETDATE()))</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><strong>2.创建还书的存储过程usp_ReturnBook</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">use BookDB</span><br><span class="line">go</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> usp_ReturnBook</span><br><span class="line"><span class="variable">@rdID</span> <span class="type">char</span>(<span class="number">9</span>),</span><br><span class="line"><span class="variable">@bkID</span> <span class="type">char</span>(<span class="number">9</span>)</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="comment">-- 判断还的书是否借过</span></span><br><span class="line">if <span class="keyword">not</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Borrow <span class="keyword">where</span> rdID<span class="operator">=</span><span class="variable">@rdID</span> <span class="keyword">and</span> bkID<span class="operator">=</span><span class="variable">@bkID</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">raiserror(<span class="string">&#x27;抱歉！您暂时没有借过这本书！&#x27;</span>,<span class="number">16</span>,<span class="number">1</span>)<span class="keyword">with</span> nowait</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="comment">-- 还书（1.修改书的状态，2.修改读者的借书数量，3.在Borrow表中删除这条借书记录）</span></span><br><span class="line"><span class="keyword">update</span> Book <span class="keyword">set</span> BkStatus <span class="operator">=</span> <span class="number">1</span> <span class="keyword">where</span> bkID<span class="operator">=</span><span class="variable">@bkID</span></span><br><span class="line"><span class="keyword">update</span> Reader <span class="keyword">set</span> rdBorrowQty <span class="operator">=</span>rdBorrowQty<span class="number">-1</span> <span class="keyword">where</span> rdID<span class="operator">=</span><span class="variable">@rdID</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> Borrow <span class="keyword">where</span> rdID<span class="operator">=</span><span class="variable">@rdID</span> <span class="keyword">and</span> bkID<span class="operator">=</span><span class="variable">@bkID</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><br><strong>3.实现【返回主菜单】按钮的单击事件</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnBackMenu_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">this</span>.Close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BorrAndRetForm_FormClosed</span>(<span class="params"><span class="built_in">object</span> sender, FormClosedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    MainMenuForm.getInstacce().Show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>4.实现加载借阅信息功能</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BorrAndRetForm_Load</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    DataBind();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="built_in">string</span> conStr = <span class="string">&quot;server=.;uid=sa;pwd=root;database=BookDB&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">DataBind</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (SqlConnection conn = <span class="keyword">new</span> SqlConnection(conStr))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            SqlCommand comm = conn.CreateCommand();</span><br><span class="line">            comm.CommandText = <span class="string">&quot;select rdID 读者编号,bkID 书号,DateBorrow 借书日期,DateLendPlan 应还日期 from Borrow&quot;</span>;</span><br><span class="line">            SqlDataAdapter sda = <span class="keyword">new</span> SqlDataAdapter(comm);</span><br><span class="line">            DataSet ds = <span class="keyword">new</span> DataSet();</span><br><span class="line">            sda.Fill(ds);</span><br><span class="line">            dgvBorrow.DataSource = ds.Tables[<span class="number">0</span>];</span><br><span class="line">            tbRdID.DataBindings.Clear();</span><br><span class="line">            tbBkID.DataBindings.Clear();</span><br><span class="line">            tbRdID.DataBindings.Add(<span class="string">&quot;Text&quot;</span>, ds.Tables[<span class="number">0</span>], <span class="string">&quot;读者编号&quot;</span>);</span><br><span class="line">            tbBkID.DataBindings.Add(<span class="string">&quot;Text&quot;</span>, ds.Tables[<span class="number">0</span>], <span class="string">&quot;书号&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;操作数据库出错！&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>5. 实现【借书】按钮的单击事件</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnBorrBook_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (SqlConnection conn =<span class="keyword">new</span> SqlConnection(conStr))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            SqlCommand comm = conn.CreateCommand();</span><br><span class="line">            comm.CommandText = <span class="string">&quot;exec usp_BorrowBook @rdID,@bkID&quot;</span>;</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@rdID&quot;</span>, tbRdID.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@bkID&quot;</span>, tbBkID.Text);</span><br><span class="line">            comm.ExecuteNonQuery();</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;借书成功！&quot;</span>);</span><br><span class="line">            DataBind();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;借书失败！&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><strong>6. 实现【还书】按钮的单击事件</strong><br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">btnRetBook_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (SqlConnection conn = <span class="keyword">new</span> SqlConnection(conStr))</span><br><span class="line">        &#123;</span><br><span class="line">            conn.Open();</span><br><span class="line">            SqlCommand comm = conn.CreateCommand();</span><br><span class="line">            comm.CommandText = <span class="string">&quot;exec usp_ReturnBook @rdID,@bkID&quot;</span>;</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@rdID&quot;</span>, tbRdID.Text);</span><br><span class="line">            comm.Parameters.AddWithValue(<span class="string">&quot;@bkID&quot;</span>, tbBkID.Text);</span><br><span class="line">            comm.ExecuteNonQuery();</span><br><span class="line">            MessageBox.Show(<span class="string">&quot;还书成功！&quot;</span>);</span><br><span class="line">            DataBind();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;还书失败！&quot;</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NVM</title>
      <link href="/2022/11/24/NVM/"/>
      <url>/2022/11/24/NVM/</url>
      
        <content type="html"><![CDATA[<h2 id="nvm是什么"><a href="#nvm是什么" class="headerlink" title="nvm是什么"></a>nvm是什么</h2><p>nvm全英文也叫node.js version management，是<strong>一个nodejs的版本管理工具</strong>。nvm和n都是node.js版本管理工具，为了解决node.js各种版本存在不兼容现象可以通过它可以<strong>安装和切换不同版本</strong>的<code>node.js</code>。</p><h2 id="nvm安装"><a href="#nvm安装" class="headerlink" title="nvm安装"></a>nvm安装</h2><p><a href="https://github.com/coreybutler/nvm-windows/releases">nvm下载</a></p><p>……</p><h2 id="nvm命令"><a href="#nvm命令" class="headerlink" title="nvm命令"></a>nvm命令</h2><div class="note info modern"><p>管理员身份下执行</p></div><h3 id="查看nvm版本"><a href="#查看nvm版本" class="headerlink" title="查看nvm版本"></a>查看nvm版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm version</span><br></pre></td></tr></table></figure><p><code>version</code> <strong>可简化为</strong> <code>v</code></p><h3 id="开启node-js版本管理"><a href="#开启node-js版本管理" class="headerlink" title="开启node.js版本管理"></a>开启node.js版本管理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm on</span><br></pre></td></tr></table></figure><h3 id="关闭node-js版本管理"><a href="#关闭node-js版本管理" class="headerlink" title="关闭node.js版本管理"></a>关闭node.js版本管理</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm off</span><br></pre></td></tr></table></figure><h3 id="查看nvm安装路径"><a href="#查看nvm安装路径" class="headerlink" title="查看nvm安装路径"></a>查看nvm安装路径</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm root [path]</span><br></pre></td></tr></table></figure><p>可选参数<code>path</code>,使用表示设置路径</p><h3 id="查看已安装的Node-js版本"><a href="#查看已安装的Node-js版本" class="headerlink" title="查看已安装的Node.js版本"></a>查看已安装的Node.js版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list</span><br></pre></td></tr></table></figure><p><code>list</code><strong>可简化为</strong><code>ls</code></p><h3 id="查看所有远程线上可以安装的版本"><a href="#查看所有远程线上可以安装的版本" class="headerlink" title="查看所有远程线上可以安装的版本"></a>查看所有远程线上可以安装的版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list available</span><br></pre></td></tr></table></figure><h3 id="安装最新稳定版Node-js"><a href="#安装最新稳定版Node-js" class="headerlink" title="安装最新稳定版Node.js"></a>安装最新稳定版Node.js</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install latest</span><br></pre></td></tr></table></figure><h3 id="安装指定版本"><a href="#安装指定版本" class="headerlink" title="安装指定版本"></a>安装指定版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 版本号</span><br></pre></td></tr></table></figure><h3 id="切换Node-js版本"><a href="#切换Node-js版本" class="headerlink" title="切换Node.js版本"></a>切换Node.js版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 版本号</span><br></pre></td></tr></table></figure><h3 id="卸载指定版本"><a href="#卸载指定版本" class="headerlink" title="卸载指定版本"></a>卸载指定版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm uninstall 版本号</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React</title>
      <link href="/2022/11/20/React/"/>
      <url>/2022/11/20/React/</url>
      
        <content type="html"><![CDATA[<h2 id="React-是什么？"><a href="#React-是什么？" class="headerlink" title="React 是什么？"></a>React 是什么？</h2><p>React 是一个声明式，高效且灵活的用于构建用户界面的 JavaScript 库。使用 React 可以将一些简短、独立的代码片段组合成复杂的 UI 界面，这些代码片段被称作“<strong>组件</strong>”。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="安装脚手架-CRA"><a href="#安装脚手架-CRA" class="headerlink" title="安装脚手架(CRA)"></a>安装脚手架(CRA)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br></pre></td></tr></table></figure><h3 id="创建React项目"><a href="#创建React项目" class="headerlink" title="创建React项目"></a>创建React项目</h3><p><strong>先进入想要创建项目的路径！</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create-react-app name[项目名称]</span><br></pre></td></tr></table></figure><p>出现 <code>Happy hacking!</code>则创建成功</p><h4 id="使用TS"><a href="#使用TS" class="headerlink" title="使用TS"></a>使用TS</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx create-react-app name[项目名称]--template typescript</span><br></pre></td></tr></table></figure><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd name[项目名称]</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><div class="note info modern"><p>使用的是TS + React</p></div><p>React 中拥有多种不同类型的组件。</p><p>先认识<code>React.Component</code> 的子类。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ShoppingList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">Props</span>&gt; &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;shopping-list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Shopping List for &#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>Instagram<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>WhatsApp<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span>Oculus<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用法示例: &lt;ShoppingList name=&quot;Qing&quot; /&gt;</span></span><br></pre></td></tr></table></figure><p>ShoppingList 是一个 <strong>React 组件类</strong>，或者说是一个 <strong>React 组件类型</strong>。一个组件接收一些参数，我们把这些参数叫做 <code>props</code>（“props” 是 “properties” 简写），然后通过 <code>render</code> 方法返回需要展示在屏幕上的视图的层次结构。</p><p><code>render</code> 方法的返回值描述了你希望在屏幕上看到的内容。React 根据描述，然后把结果展示出来。更具体地来说，<code>render</code> 返回了一个 <strong>React 元素</strong>，这是一种对渲染内容的轻量级描述。大多数的 React 开发者使用了一种名为 “<strong>JSX</strong>” 的特殊语法，JSX 可以让你更轻松地书写这些结构。</p><p>语法 <code>&lt;div /&gt;</code> 会被编译成 <code>React.createElement(&#39;div&#39;)</code>。上述的代码等同于：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>, &#123; <span class="attr">className</span>: <span class="string">&quot;shopping-list&quot;</span>&#125;, </span><br><span class="line">    <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;h1&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;Shopping List for &quot;</span>, props.<span class="property">name</span>), </span><br><span class="line">    <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;ul&quot;</span>, <span class="literal">null</span>, </span><br><span class="line">        <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;Instagram&quot;</span>), </span><br><span class="line">        <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;WhatsApp&quot;</span>), </span><br><span class="line">        <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>, <span class="literal">null</span>, <span class="string">&quot;Oculus&quot;</span>)</span><br><span class="line">    )</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们并不会直接使用这个方法，而是继续使用 <strong>JSX</strong>。</p><p>在 JSX 中你可以任意使用 JavaScript 表达式，只需要用一个大括号把表达式括起来。每一个 React 元素事实上都是一个 JavaScript 对象，你可以在你的程序中把它保存在变量中或者作为参数传递。</p><p><code>ShoppingList</code> 组件只会渲染一些内置的 DOM 组件，如<code>&lt;div /&gt;</code>、<code>&lt;li /&gt;</code>等。但是你也可以组合和渲染自定义的 React 组件。例如，你可以通过 <code>&lt;ShoppingList /&gt;</code>来表示整个购物清单组件。每个组件都是封装好的，并且可以单独运行，这样你就可以通过组合简单的组件来构建复杂的 UI 界面。</p><h3 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h3><div class="tabs" id="game"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#game-1">TS</button></li><li class="tab"><button type="button" data-href="#game-2">CSS</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="game-1"><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;square&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* TODO */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Board</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">renderSquare</span>(<span class="params">i: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Square</span> /&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> status = <span class="string">&#x27;Next player: X&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;status&quot;</span>&gt;</span>&#123;status&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;this.renderSquare(0)&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;this.renderSquare(1)&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;this.renderSquare(2)&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;this.renderSquare(3)&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;this.renderSquare(4)&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;this.renderSquare(5)&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;this.renderSquare(6)&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;this.renderSquare(7)&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;this.renderSquare(8)&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-board&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Board</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;/* status */&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;/* TODO */&#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// ========================================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>));</span><br><span class="line">root.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Game</span> /&gt;</span></span>);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="game-2"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">14px</span> <span class="string">&quot;Century Gothic&quot;</span>, Futura, sans-serif;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ol</span>, <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">padding-left</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.board-row</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.status</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.square</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">24px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">34px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">34px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: -<span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">34px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.square</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.kbd-navigation</span> <span class="selector-class">.square</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ddd</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.game</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.game-info</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>这些初始代码是我们要开发的小游戏的基础代码。由于提供了 CSS 样式，就只需要关注使用 React 来开发这个井字棋就可以了。</p><p>通过阅读代码，可知三个 React 组件：</p><ul><li>Square</li><li>Board</li><li>Game</li></ul><p>Square 组件渲染了一个单独的 <code>&lt;button&gt;</code>。Board 组件渲染了 9 个方块。Game 组件渲染了含有默认值的一个棋盘，下面会修改这些值。到目前为止还没有可以交互的组件。</p><h3 id="通过-Props-传递数据"><a href="#通过-Props-传递数据" class="headerlink" title="通过 Props 传递数据"></a>通过 Props 传递数据</h3><p>将数据从 Board 组件传递到 Square 组件中。</p><p>在 Board 组件的 <code>renderSquare</code> 方法中，我们将代码改写成下面这样，传递一个名为 <code>value</code> 的 prop 到 Square 当中：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span>=&#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Board</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">renderSquare</span>(<span class="params">i:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Square</span> <span class="attr">value</span>=<span class="string">&#123;i&#125;</span> /&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 Square 组件中的 <code>rende</code>r 方法，把 <code>&#123;/* TODO */&#125;</code> 替换为 <code>&#123;this.props.value&#125;</code>，以显示上文中传入的值：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">Props</span>&gt; &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;square&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;this.props.value&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改前：<br><img src="/2022/11/20/React/2022-11-20-15-07-54.png" alt="修改前"><br>修改后：<br><img src="/2022/11/20/React/2022-11-20-15-07-05.png" alt="修改后"></p><p>这样就成功地把一个 prop 从父组件 Board “传递”给了子组件 Square。<br><strong>在 React 应用中，数据通过 props 的传递，从父组件流向子组件</strong>。</p><h3 id="给组件添加交互功能"><a href="#给组件添加交互功能" class="headerlink" title="给组件添加交互功能"></a>给组件添加交互功能</h3><p>下一步让棋盘的每一个格子在点击之后能落下一颗 “X” 作为棋子。<br>把 Square 组件中 <code>render()</code> 方法的返回值中的 button 标签修改为如下内容：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;square&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;function()</span> &#123; <span class="attr">console.log</span>(&#x27;<span class="attr">click</span>&#x27;); &#125;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.props.value&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果此刻点击某个格子，将在浏览器的开发者工具中打印 ‘click’。</p><div class="note warning flat"><p>为了少输入代码，同时为了<strong>避免 this 造成的困扰</strong>，我们在这里使用<strong>箭头函数</strong> 来进行事件处理，如代码块第4行所示！</p></div><div class="note warning flat"><p>此处使用了 <code>onClick={() =&gt; console.log(&#39;click&#39;)}</code> 的方式向 <code>onClick</code> 这个 prop 传入一个函数。 React 将在单击时调用此函数。但很多人经常忘记编写 <code>() =&gt;</code>，而写成了 <code>onClick={console.log(&#39;click&#39;)}</code>，这种常见的错误会导致每次这个组件渲染的时候都会触发控制台输出。</p></div><p>接下来，让 Square 组件可以“记住”它被点击过，然后用 “X” 来填充对应的方格。用 <code>state</code> 来实现所谓“记忆”的功能。</p><p>可以通过在 React 组件的构造函数中设置 <code>this.state</code> 来初始化 state。<code>this.state</code> 应该被视为一个组件的私有属性。在 <code>this.state</code> 中存储当前每个方格（Square）的值，并且在每次方格被点击的时候改变这个值。</p><p>首先，我们向这个 class 中添加一个构造函数，用来初始化 state：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">Props</span>&gt; &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props:Props</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>=&#123;</span><br><span class="line">            <span class="attr">value</span>:<span class="literal">null</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;square&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123; console.log(&#x27;click&#x27;); &#125;&#125;&gt;</span></span><br><span class="line"><span class="language-xml">          &#123;this.props.value&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>在 JavaScript/TypeScript class 中，每次你定义其子类的构造函数时，都需要调用 <code>super</code> 方法。因此，在所有含有构造函数的的 React 组件中，构造函数必须以 <code>super(props)</code> 开头。</p></div><p>现在，修改一下 Square 组件的 <code>render</code> 方法，这样，每当方格被点击的时候，就可以显示当前 state 的值了：</p><ul><li>在 <code>&lt;button&gt;</code> 标签中，把 <code>this.props.value</code> 替换为 <code>this.state.value</code>。</li><li>将 <code>onClick=&#123;...&#125;</code> 事件监听函数替换为 <code>onClick=&#123;() =&gt; this.setState(&#123;value: &#39;X&#39;&#125;)&#125;</code>。</li><li>为了更好的可读性，将 <code>className</code> 和 <code>onClick</code> 的 prop 分两行书写。</li></ul><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">State</span>=&#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="built_in">string</span> | <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">Props</span>,<span class="title class_">State</span>&gt; &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props:Props</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>=&#123;</span><br><span class="line">            <span class="attr">value</span>:<span class="literal">null</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//或者这样写</span></span><br><span class="line">    <span class="comment">// state:State=&#123;</span></span><br><span class="line">    <span class="comment">//     value:null</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">className</span>=<span class="string">&quot;square&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.setState(&#123;value:&#x27;X&#x27;&#125;) &#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          &#123;this.state.value&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Square 组件 <code>render</code> 方法中的 <code>onClick</code> 事件监听函数中调用 this.setState，我们就可以在每次 <code>&lt;button&gt;</code> 被点击的时候通知 React 去重新渲染 Square 组件。组件更新之后，Square 组件的 <code>this.state.value</code> 的值会变为 <code>&#39;X&#39;</code>，因此，我们在游戏棋盘上就能看见 <code>X</code>了。点击任意一个方格，<code>X</code> 就会出现了。</p><h3 id="开发者工具"><a href="#开发者工具" class="headerlink" title="开发者工具"></a>开发者工具</h3><p>在 <strong>Chrome</strong> 或者 <strong>Firefox</strong> 中安装扩展 <strong>React Devtools</strong> 可以让你在浏览器开发者工具中查看 React 的组件树。<br><img src="/2022/11/20/React/2022-11-20-15-56-47.png" alt="开发者工具"><br>还可以在 React DevTools 中检查 React 组件的 state 和 props。</p><p>安装 React DevTools 之后，右键点击页面的任何一个元素，然后选择“查看”，这样就能打开浏览器的开发者工具了，并且工具栏最后会多展示一个 React 的选项卡（包含 “⚛️ Components” 和 “⚛️ Profiler”）。你可以使用 “⚛️ Components” 来检查组件树。</p><h3 id="游戏完善"><a href="#游戏完善" class="headerlink" title="游戏完善"></a>游戏完善</h3><p>现在已经编写好了井字棋游戏中最基础的可以落子的棋盘。要让游戏完整，还需要交替在棋盘上放置 “X” 和 “O”，并且判断出胜者。</p><p>当前，每个 Square 组件都维护了游戏的状态。我们可以把所有 9 个 Square 的值放在一个地方，这样我们就可以判断出胜者了。</p><p>现在我们可以在棋盘 Board 组件中收集每个格子 Square 组件中的 state。虽然技术上来讲是可以实现的，但是代码如此编写会让人很难理解，并且我们以后想要维护重构时也会非常困难。</p><p>所以，最好的解决方式是直接将所有的 state 状态数据存储在 Board 父组件当中。之后 Board 组件可以将这些数据通过 props 传递给各个 Square 子组件，<strong>正如上面我们把数字传递给每一个 Square 一样</strong>。</p><p><strong>当遇到需要同时获取多个子组件数据，或者两个组件之间需要相互通讯的情况时，需要把子组件的 state 数据提升至其共同的父组件当中保存。之后父组件可以通过 props 将状态数据传递到子组件当中。这样应用当中所有组件的状态数据就能够更方便地同步共享了。</strong></p><p>这种将组件的 state 提升到父组件的情形在重构 React 组件时经常会遇到。</p><p>为 Board 组件添加构造函数，将 Board 组件的初始状态设置为长度为 9 的空值数组：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">State1</span>=&#123;</span><br><span class="line">    <span class="attr">squares</span>:<span class="built_in">any</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Board</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;&#123;&#125;,<span class="title class_">State1</span>&gt; &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">&#123;&#125;</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(&#123;&#125;)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>=&#123;</span><br><span class="line">            <span class="attr">squares</span>:<span class="title class_">Array</span>(<span class="number">9</span>).<span class="title function_">fill</span>(<span class="literal">null</span>),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">renderSquare</span>(<span class="params">i: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Square</span> <span class="attr">value</span>=<span class="string">&#123;i&#125;/</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当我们填充棋盘后，<code>this.state.squares</code> 数组的值可能如下所示：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="string">&#x27;O&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;X&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;X&#x27;</span>, <span class="string">&#x27;O&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;O&#x27;</span>, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Board 组件当前的 <code>renderSquare</code> 方法看起来像下面这样：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">renderSquare</span>(<span class="params">i: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Square</span> <span class="attr">value</span>=<span class="string">&#123;i&#125;/</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开始时，我们依次使把 0 到 8 的值通过 prop 从 Board <strong>向下传递</strong>，从而让它们显示出来。上一步与此不同，我们根据 Square 自己内部的 state，使用了 “X” 来代替之前的数字。因此，Square <strong>忽略了</strong>当前从 Board 传递给它的那个 value prop。</p><p>现在再一次使用 prop 的传递机制。我们通过修改 Board 来指示每一个 Square 的当前值（<code>&#39;X&#39;</code>, <code>&#39;O&#39;</code>, 或者 <code>null</code>）。我们在 Board 的构造函数中已经定义好了 squares 数组，这样，我们就可以通过修改 Board 的 <code>renderSquare</code> 方法来读取这些值了。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">renderSquare</span>(<span class="params">i:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Square</span> <span class="attr">value</span>=<span class="string">&#123;this.state.squares[i]&#125;</span> /&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，每个 Square 就都能接收到一个 <code>value</code> prop 了，这个 prop 的值可以是 <code>&#39;X&#39;</code>、 <code>&#39;O&#39;</code>、 或 <code>null</code>（null 代表空方格）。</p><p>接下来，需要要修改一下 Square 的点击事件监听函数。<strong>Board 组件当前维护了那些已经被填充了的方格</strong>。我们需要想办法让 Square 去更新 Board 的 state。由于 <strong>state 对于每个组件来说是私有的</strong>，因此我们不能直接通过 Square 来更新 Board 的 state。</p><p>相反，从 Board 组件向 Square 组件传递一个函数，当 Square 被点击的时候，这个函数就会被调用。接着，我们将 Board 组件的 <code>renderSquare</code> 方法改写为如下效果：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span>=&#123;</span><br><span class="line">    <span class="attr">value</span>:<span class="built_in">number</span></span><br><span class="line">    <span class="title function_">onClick</span>():<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">renderSquare</span>(<span class="params">i:<span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Square</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;this.state.squares[i]&#125;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onclick</span>=<span class="string">&#123;()</span>=&gt;</span>this.handleClick(i)&#125;</span></span><br><span class="line"><span class="language-xml">    /&gt;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>为了提高可读性，我们把返回的 React 元素拆分成了多行，同时在最外层加了小括号（上面未添加，下面代码添加了），这样 JavaScript 解析的时候就不会在 <code>return</code> 的后面自动插入一个分号从而破坏代码结构了。</p></div><p>现在我们从 Board 组件向 Square 组件中传递两个 props 参数：<code>value</code> 和 <code>onClick</code>。<code>onClick</code> prop 是一个 Square 组件点击事件监听函数。接下来，我们需要修改 Square 的代码：</p><ul><li>将 Square 组件的 <code>render</code> 方法中的 <code>this.state.value</code> 替换为 <code>this.props.value</code> 。</li><li>将 Square 组件的 <code>render</code> 方法中的 <code>this.setState()</code> 替换为 <code>this.props.onClick()</code> 。</li><li>删掉 Square 组件中的构造函数 <code>constructor</code>，因为该组件不需要再保存游戏的 state。</li></ul><p>进行上述修改之后，代码会变成下面这样:</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">Props</span>,<span class="title class_">State</span>&gt; &#123;</span><br><span class="line">    <span class="comment">// constructor(props:Props)&#123;</span></span><br><span class="line">    <span class="comment">//     super(props);</span></span><br><span class="line">    <span class="comment">//     this.state=&#123;</span></span><br><span class="line">    <span class="comment">//         value:null,</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// state:State=&#123;</span></span><br><span class="line">    <span class="comment">//     value:null</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">className</span>=<span class="string">&quot;square&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.props.onClick()&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;</span></span><br><span class="line"><span class="language-xml">          &#123;this.props.value&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一个 Square 被点击时，Board 提供的 <code>onClick</code> 函数就会触发。我们回顾一下这是怎么实现的：</p><ol><li>向 DOM 内置元素 <code>&lt;button&gt;</code> 添加 <code>onClick</code> prop，让 React 开启对点击事件的监听。</li><li>当 button 被点击时，React 会调用 Square 组件的 <code>render()</code> 方法中的 onClick 事件处理函数。</li><li>事件处理函数触发了传入其中的 <code>this.props.onClick()</code> 方法。这个方法是由 Board 传递给 Square 的。</li><li>由于 Board 把 <code>onClick=&#123;() =&gt; this.handleClick(i)&#125;</code> 传递给了 Square，所以当 Square 中的事件处理函数触发时，其实就是触发的 Board 当中的 <code>handleClick(i)</code> 方法。</li><li>现在我们还尚未定义 <code>handleClick()</code> 方法，所以代码还不能正常工作。如果此时点击 Square，你会在屏幕上看到红色的错误提示，提示内容为：“this.handleClick is not a function”。</li></ol><div class="note warning flat"><p>因为 DOM 元素 <code>&lt;button&gt;</code> 是一个内置组件，因此其 <code>onClick</code> 属性在 React 中有特殊的含义。而对于用户自定义的组件来说，命名就可以由用户自己来定义了。我们给 Square 的 <strong>onClick</strong> 和 Board 的 <strong>handleClick</strong> 赋予任意的名称，代码依旧有效。在 React 中，有一个命名规范，通常会将代表事件的监听 prop 命名为 <code>on[Event]</code>，将处理事件的监听方法命名为 <code>handle[Event]</code> 这样的格式。</p></div><p>点击 Square 的时候，浏览器会报错，因为还没有定义 handleClick 方法。我们现在来向 Board 里添加 <code>handleClick</code> 方法：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handleClick</span>(<span class="params">i</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> squares = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">squares</span>.<span class="title function_">slice</span>();</span><br><span class="line">    squares[i] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">squares</span>: squares&#125;);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>现在，我们可以通过点击 Square 来填充那些方格，效果与之前相同。但是，当前 state 没有保存在单个的 Square 组件中，而是保存在了 Board 组件中。每当 Board 的 state 发生变化的时候，这些 Square 组件都会重新渲染一次。把所有 Square 的 state 保存在 Board 组件中可以让我们在将来判断出游戏的胜者。</p><p>因为 Square 组件不再持有 state，因此每次它们被点击的时候，Square 组件就会从 Board 组件中接收值，并且通知 Board 组件。在 React 术语中，我们把目前的 Square 组件称做“<strong>受控组件</strong>”。在这种情况下，Board 组件完全控制了 Square 组件。</p><div class="note warning flat"><p>调用了 <code>.slice()</code> 方法创建了 squares 数组的一个副本，而不是直接在现有的数组上进行修改。<br>下面，说明为什么需要创建 square 数组的副本。</p></div><h3 id="为什么不可变性在-React-中非常重要"><a href="#为什么不可变性在-React-中非常重要" class="headerlink" title="为什么不可变性在 React 中非常重要"></a>为什么不可变性在 React 中非常重要</h3><p>建议使用 .slice() 函数对 squares 数组进行拷贝，而非直接修改现有的数组。<br>是因为不可变性的重要性</p><p>改变数据的方式有两种：第一种方式是<strong>直接修改变量的值</strong>，第二种方式是<strong>使用新的一份数据替换旧数据</strong>。</p><mark class="hl-label blue">直接修改数据</mark> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> player = &#123;<span class="attr">score</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Jeff&#x27;</span>&#125;;</span><br><span class="line">player.<span class="property">score</span> = <span class="number">2</span>;</span><br><span class="line"><span class="comment">// player 修改后的值为 &#123;score: 2, name: &#x27;Jeff&#x27;&#125;</span></span><br></pre></td></tr></table></figure><mark class="hl-label blue">新数据替换旧数据</mark> <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> player = &#123;<span class="attr">score</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;Jeff&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newPlayer = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, player, &#123;<span class="attr">score</span>: <span class="number">2</span>&#125;);</span><br><span class="line"><span class="comment">// player 的值没有改变, 但是 newPlayer 的值是 &#123;score: 2, name: &#x27;Jeff&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用对象展开语法，就可以写成：</span></span><br><span class="line"><span class="comment">// let newPlayer = &#123;...player, score: 2&#125;;</span></span><br></pre></td></tr></table></figure><p>不直接修改（或改变底层数据）这种方式和前一种方式的结果是一样的，这种方式有以下几点好处：</p><ul><li><p><strong>简化复杂的功能</strong><br>不可变性使得复杂的特性更容易实现。在后面的章节里，我们会实现一种叫做“时间旅行”的功能。“时间旅行”可以使我们回顾井字棋的历史步骤，并且可以“跳回”之前的步骤。这个功能并不是只有游戏才会用到——撤销和恢复功能在开发中是一个很常见的需求。不直接在数据上修改可以让我们追溯并复用游戏的历史记录。</p></li><li><p><strong>跟踪数据的改变</strong><br>如果直接修改数据，那么就很难跟踪到数据的改变。跟踪数据的改变需要可变对象可以与改变之前的版本进行对比，这样整个对象树都需要被遍历一次。<br>跟踪不可变数据的变化相对来说就容易多了。如果发现对象变成了一个新对象，那么我们就可以说对象发生改变了。</p></li><li><p><strong>确定在 React 中何时重新渲染</strong><br>不可变性最主要的优势在于它可以帮助我们在 React 中创建 pure components。我们可以很轻松的确定不可变数据是否发生了改变，从而确定何时对组件进行重新渲染。</p></li></ul><h3 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h3><p>接下来把 Square 组件重写为一个函数组件。</p><p>如果想写的组件只包含一个 <code>render</code> 方法，并且不包含 state，那么使用<strong>函数组件</strong>就会更简单。我们不需要定义一个继承于 <code>React.Component</code> 的类，我们可以定义一个函数，这个函数接收 props 作为参数，然后返回需要渲染的元素。函数组件写起来并不像 class 组件那么繁琐，很多组件都可以使用函数组件来写。</p><p>把 Square 类替换成下面的函数：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Square</span>(<span class="params">props:Props</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;square&quot;</span> <span class="attr">onClick</span>=<span class="string">&#123;props.onClick&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;props.value&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样把两个 <code>this.props</code> 都替换成了 <code>props</code>。</p><div class="note warning flat"><p>在把 Square 修改成函数组件时，同时也把 <code>onClick={() =&gt; this.props.onClick()}</code> 改成了更短的 <code>onClick={props.onClick}</code>（注意两侧都没有括号）。</p></div><h3 id="轮流落子"><a href="#轮流落子" class="headerlink" title="轮流落子"></a>轮流落子</h3><p>现在井字棋还有一个明显的缺陷有待完善：目前还不能在棋盘上标记 “O”。</p><p>我们将 “X” 默认设置为先手棋。你可以通过修改 Board 组件的构造函数中的初始 state 来设置默认的第一步棋子：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">State1</span>=&#123;</span><br><span class="line">    <span class="attr">squares</span>:<span class="built_in">any</span>[]</span><br><span class="line">    <span class="attr">xIsNext</span>:<span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Board</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">Props1</span>,<span class="title class_">State1</span>&gt; &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props: Props1</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(props)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>=&#123;</span><br><span class="line">            <span class="attr">squares</span>:<span class="title class_">Array</span>(<span class="number">9</span>).<span class="title function_">fill</span>(<span class="literal">null</span>),</span><br><span class="line">            <span class="attr">xIsNext</span>:<span class="literal">true</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>棋子每移动一步，<code>xIsNext</code>（布尔值）都会反转，该值将确定下一步轮到哪个玩家，并且游戏的状态会被保存下来。我们将通过修改 Board 组件的 <code>handleClick</code> 函数来反转 <code>xIsNext</code> 的值：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handleClick</span>(<span class="attr">i</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> squares=<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">squares</span>.<span class="title function_">slice</span>()</span><br><span class="line">    squares[i]=<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">xIsNext</span>?<span class="string">&#x27;X&#x27;</span>:<span class="string">&#x27;O&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">squares</span>:squares,</span><br><span class="line">        <span class="attr">xIsNext</span>:!<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">xIsNext</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改之后，就实现了 “X” 和 “O” 轮流落子的效果。</p><p>接下来修改 Board 组件 render 方法中 “status” 的值(修改提示信息)，这样就可以显示下一步是哪个玩家的了。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> status = <span class="string">&#x27;Next player: &#x27;</span> + (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">xIsNext</span> ? <span class="string">&#x27;X&#x27;</span> : <span class="string">&#x27;O&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="comment">// 其他部分没有改变</span></span><br></pre></td></tr></table></figure><h3 id="判断出胜者"><a href="#判断出胜者" class="headerlink" title="判断出胜者"></a>判断出胜者</h3><p>至此我们就可以看出下一步会轮到哪位玩家，与此同时，还需要显示游戏的结果来判定游戏结束。<br>判赢函数<code>calculateWinner</code></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">calculateWinner</span>(<span class="params">squares:<span class="built_in">any</span>[]</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> lines = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">3</span>, <span class="number">6</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">4</span>, <span class="number">7</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>],</span><br><span class="line">  ];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lines.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> [a, b, c] = lines[i];</span><br><span class="line">    <span class="keyword">if</span> (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) &#123;</span><br><span class="line">      <span class="keyword">return</span> squares[a];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传入长度为 9 的数组，此函数将判断出获胜者，并根据情况返回 “X”，“O” 或 “null”。</p><p>接着，在 Board 组件的 <code>render</code> 方法中调用 <code>calculateWinner(squares)</code> 检查是否有玩家胜出。一旦有一方玩家胜出，就把获胜玩家的信息显示出来，比如，“胜者：X” 或者“胜者：O”。现在，我们把 Board 的 <code>render</code> 函数中的 status 的定义修改为如下代码：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> winner =<span class="title function_">calculateWinner</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">squares</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">status</span>:<span class="built_in">string</span></span><br><span class="line">    <span class="keyword">if</span>(winner)&#123;</span><br><span class="line">        status=<span class="string">&#x27;Winner&#x27;</span>+ winner</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        status = <span class="string">&#x27;Next player: &#x27;</span>+ (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">xIsNext</span> ? <span class="string">&#x27;X&#x27;</span> : <span class="string">&#x27;O&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后，修改 <code>handleClick</code> 事件，当有玩家胜出时，或者某个 Square 已经被填充时，该函数不做任何处理直接返回。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handleClick</span>(<span class="attr">i</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> squares=<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">squares</span>.<span class="title function_">slice</span>()</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">calculateWinner</span>(squares) || squares[i]) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    squares[i]=<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">xIsNext</span>?<span class="string">&#x27;X&#x27;</span>:<span class="string">&#x27;O&#x27;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">squares</span>:squares,</span><br><span class="line">        <span class="attr">xIsNext</span>:!<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">xIsNext</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>恭喜！现在已经完成了井字棋！</p><h3 id="时间旅行"><a href="#时间旅行" class="headerlink" title="时间旅行"></a>时间旅行</h3><p>将实现“<strong>回到过去</strong>”的功能，从而在游戏里跳回到历史步骤。</p><h4 id="保存历史记录"><a href="#保存历史记录" class="headerlink" title="保存历史记录"></a>保存历史记录</h4><p>如果直接修改了 <code>square</code> 数组，实现时间旅行就会变得很棘手了。</p><p>不过，我们可以使用 <code>slice()</code> 函数为每一步创建 <code>squares</code> 数组的副本，同时把这个数组当作<strong>不可变对象</strong>。这样我们就可以把所有 <code>squares</code> 数组的历史版本都保存下来了，然后可以在历史的步骤中随意跳转。</p><p>可以把历史的 <code>squares</code> 数组保存在另一个名为 <code>history</code> 的数组中。<code>history</code> 数组保存了从第一步到最后一步的所有的棋盘状态。<code>history</code> 数组的结构如下所示:</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">history = [</span><br><span class="line">  <span class="comment">// 第一步之前</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">squares</span>: [</span><br><span class="line">      <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">      <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">      <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 第一步之后</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">squares</span>: [</span><br><span class="line">      <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">      <span class="literal">null</span>, <span class="string">&#x27;X&#x27;</span>, <span class="literal">null</span>,</span><br><span class="line">      <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 第二步之后</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">squares</span>: [</span><br><span class="line">      <span class="literal">null</span>, <span class="literal">null</span>, <span class="literal">null</span>,</span><br><span class="line">      <span class="literal">null</span>, <span class="string">&#x27;X&#x27;</span>, <span class="literal">null</span>,</span><br><span class="line">      <span class="literal">null</span>, <span class="literal">null</span>, <span class="string">&#x27;O&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>现在，需要确定应该在哪一个组件里保存 <code>history</code> 这个 <strong>state</strong>。</p><h4 id="游戏再优化"><a href="#游戏再优化" class="headerlink" title="游戏再优化"></a>游戏再优化</h4><p>让顶层 Game 组件展示出一个历史步骤的列表是个不错的选择。这个功能需要访问 <code>history</code> 的数据，因此我们把 <code>history</code> 这个 state 放在顶层 Game 组件中。</p><p>首先，我们在 Game 组件的构造函数中初始化 state：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">State2</span>=&#123;</span><br><span class="line">    <span class="attr">history</span>:<span class="built_in">any</span>[]</span><br><span class="line">    <span class="attr">xIsNext</span>:<span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">Props1</span>,<span class="title class_">State2</span>&gt; &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props:Props1</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(props)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>=&#123;</span><br><span class="line">            <span class="attr">history</span>:[&#123;</span><br><span class="line">                <span class="attr">squares</span>: <span class="title class_">Array</span>(<span class="number">9</span>).<span class="title function_">fill</span>(<span class="literal">null</span>)</span><br><span class="line">            &#125;],</span><br><span class="line">            <span class="attr">xIsNext</span>:<span class="literal">true</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    ...<span class="comment">//其他不变</span></span><br></pre></td></tr></table></figure><p>下一步，需要让 Board 组件从 Game 组件中接收 <code>squares</code> 和 <code>onClick</code> 这两个 props。因为当前在 Board 组件中已经有一个对 Square 点击事件的监听函数了，所以需要把每一个 Square 的对应位置传递给 onClick 监听函数，这样监听函数就知道具体哪一个 Square 被点击了。以下是修改 Board 组件的几个必要步骤：</p><ul><li>删除 Board 组件中的 <code>constructor</code> 构造函数。</li><li>把 Board 组件的 <code>renderSquare</code> 中的 <code>this.state.squares[i]</code> 替换为 <code>this.props.squares[i]</code>。</li><li>把 Board 组件的 <code>renderSquare</code> 中的 <code>this.handleClick(i)</code> 替换为 <code>this.props.onClick(i)</code>。</li></ul><p>修改后的 Board 组件如下所示：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props1</span>=&#123;</span><br><span class="line">    <span class="attr">squares</span>:<span class="built_in">any</span>[]</span><br><span class="line">    <span class="title function_">onClick</span>(<span class="attr">i</span>:<span class="built_in">number</span>):<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">renderSquare</span>(<span class="params">i</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Square</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;this.props.squares[i]&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.props.onClick(i)&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//其他不变</span></span><br></pre></td></tr></table></figure><p>接着，更新 Game 组件的 <code>render</code> 函数，使用最新一次历史记录来确定并展示游戏的状态：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其他不变</span></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> history=<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">history</span></span><br><span class="line">        <span class="keyword">const</span> current = history[history.<span class="property">length</span>-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">const</span> winner=<span class="title function_">calculateWinner</span>(current.<span class="property">squares</span>)</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">status</span>:<span class="built_in">string</span></span><br><span class="line">        <span class="keyword">if</span>(winner)&#123;</span><br><span class="line">            status=<span class="string">&#x27;Winner&#x27;</span>+ winner</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            status = <span class="string">&#x27;Next player: &#x27;</span>+ (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">xIsNext</span> ? <span class="string">&#x27;X&#x27;</span> : <span class="string">&#x27;O&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-board&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Board</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">squares</span>=<span class="string">&#123;current.squares&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">onClick</span>=<span class="string">&#123;(i)</span>=&gt;</span>this.handleClick(i)&#125;</span></span><br><span class="line"><span class="language-xml">            /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;status&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;/* TODO */&#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 Game 组件渲染了游戏的状态，因此可以将 Board 组件 <code>render</code> 方法中对应的代码移除。修改之后，Board 组件的 <code>render</code> 函数如下所示：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.renderSquare(0)&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;this.renderSquare(1)&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;this.renderSquare(2)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.renderSquare(3)&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;this.renderSquare(4)&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;this.renderSquare(5)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;board-row&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.renderSquare(6)&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;this.renderSquare(7)&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;this.renderSquare(8)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，需要把 Board 组件的 <code>handleClick</code>方法移动 Game 组件中。同时，我们也需要修改一下 <code>handleClick</code> 方法，因为这两个组件的 state 在结构上有所不同。在 Game 组件的 <code>handleClick</code> 方法中，需要把新的历史记录拼接到 <code>history</code> 上。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handleClick</span>(<span class="attr">i</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">       <span class="keyword">const</span> history=<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">history</span></span><br><span class="line">       <span class="keyword">const</span> current=history[history.<span class="property">length</span>-<span class="number">1</span>]</span><br><span class="line">       <span class="keyword">const</span> squares=current.<span class="property">squares</span>.<span class="title function_">slice</span>()</span><br><span class="line">       <span class="keyword">if</span> (<span class="title function_">calculateWinner</span>(squares) || squares[i]) &#123;</span><br><span class="line">           <span class="keyword">return</span></span><br><span class="line">       &#125;</span><br><span class="line">       squares[i]=<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">xIsNext</span>?<span class="string">&#x27;X&#x27;</span>:<span class="string">&#x27;O&#x27;</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">           <span class="attr">history</span>: history.<span class="title function_">concat</span>([&#123;</span><br><span class="line">               <span class="attr">squares</span>:squares,</span><br><span class="line">           &#125;]),</span><br><span class="line">           <span class="attr">xIsNext</span>:!<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">xIsNext</span>,</span><br><span class="line">       &#125;)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p><code>concat()</code> 方法可能与你比较熟悉的 <code>push()</code> 方法不太一样，它并不会改变原数组，所以我们推荐使用 <code>concat()</code>。</p></div><p>到目前为止，Board 组件只需要 <code>renderSquare</code> 和 <code>render</code> 这两个方法。而游戏的状态和 handleClick 方法则会放在 Game 组件当中。</p><h4 id="展示历史步骤记录"><a href="#展示历史步骤记录" class="headerlink" title="展示历史步骤记录"></a>展示历史步骤记录</h4><p>由于我们已经记录了井字棋的历史记录，因此可以把这些记录以历史步骤列表的形式展示给玩家。</p><p>在前文中提到的 React 元素被视为 JavaScript 一等公民中的对象（first-class JavaScript objects），因此我们可以把 React 元素在应用程序中当作参数来传递。在 React 中，还可以使用 React 元素的数组来渲染多个元素。</p><p>在 JavaScript 中，数组拥有 map() 方法，该方法通常用于把某数组映射为另一个数组，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> doubled = numbers.<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x * <span class="number">2</span>); <span class="comment">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure><p>可以通过使用 <code>map</code> 方法，把历史步骤映射为代表按钮的 React 元素，然后可以展示出一个按钮的列表，点击这些按钮，可以“跳转”到对应的历史步骤。</p><p>现在，我们在 Game 组件的 <code>render</code> 方法中调用 <code>history</code> 的 <code>map</code> 方法：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> history=<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">history</span></span><br><span class="line">        <span class="keyword">const</span> current = history[history.<span class="property">length</span>-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">const</span> winner=<span class="title function_">calculateWinner</span>(current.<span class="property">squares</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> moves = history.<span class="title function_">map</span>(<span class="function">(<span class="params">step,move</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> desc =move ?</span><br><span class="line">                <span class="string">&#x27;Go to move #&#x27;</span> + move :</span><br><span class="line">                <span class="string">&#x27;Go to game start&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span>(</span><br><span class="line">                <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span>=&gt;</span>this.jumpTo(move)&#125;&gt;&#123;desc&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">let</span> <span class="attr">status</span>:<span class="built_in">string</span></span><br><span class="line">        <span class="keyword">if</span>(winner)&#123;</span><br><span class="line">            status=<span class="string">&#x27;Winner&#x27;</span>+ winner</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            status = <span class="string">&#x27;Next player: &#x27;</span>+ (<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">xIsNext</span> ? <span class="string">&#x27;X&#x27;</span> : <span class="string">&#x27;O&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-board&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Board</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">squares</span>=<span class="string">&#123;current.squares&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">onClick</span>=<span class="string">&#123;(i)</span>=&gt;</span>this.handleClick(i)&#125;</span></span><br><span class="line"><span class="language-xml">            /&gt;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;game-info&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;status&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">ol</span>&gt;</span>&#123;moves&#125;<span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当我们遍历 <code>history</code> 数组时，<code>step</code> 变量指向的是当前 <code>history</code> 元素的值，而 move 则指向的是 history 元素的索引。此处，我们只对 move 感兴趣，因此未对 step 做任何处理。</p><p>对于井字棋历史记录的每一步，我们都创建出了一个包含按钮 <code>&lt;button&gt;</code> 元素的 <code>&lt;li&gt;</code> 的列表。这些按钮拥有一个 <code>onClick</code>事件处理函数，在这个函数里调用了 <code>this.jumpTo()</code> 方法。但是我们还没有实现 jumpTo() 方法。<br>到目前为止，可以看到一个游戏历史步骤的列表，以及开发者工具控制台的警告信息，警告信息如下：<br><div class="note warning flat"><p>Warning: Each child in an array or iterator should have a unique “key” prop. Check the render method of “Game”.</p></div><br><img src="/2022/11/20/React/2022-11-20-22-02-43.png" alt="警告信息"></p><h4 id="选择一个-key"><a href="#选择一个-key" class="headerlink" title="选择一个 key"></a>选择一个 key</h4><p>当需要渲染一个列表的时候，React 会存储这个列表每一项的相关信息。当我们要更新这个列表时，React 需要确定哪些项发生了改变。有可能增加、删除、重新排序或者更新列表项。</p><p>想象一下把下面的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Alexa: 7 tasks left<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Ben: 5 tasks left<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>转换成下面的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Ben: 9 tasks left<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Claudia: 8 tasks left<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Alexa: 5 tasks left<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除了数字发生了改变之外，阅读这段代码的人也许会认为我们把 Alexa 和 Ben 的顺序交换了位置，然后把 Claudia 插入到 Alexa 和 Ben 之间。然而，React 是电脑程序，它并不知道我们想要什么。因为 React 无法得知我们的意图，所以我们需要给每一个列表项一个确定的 key 属性，它可以用来区分不同的列表项和他们的同级兄弟列表项。可以使用字符串，比如 <strong>alexa, ben, claudia</strong>。如果我们使用从数据库里获取的数据，那么 Alexa、Ben 和 Claudia 的数据库 ID 就可以作为 key 来使用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;user.id&#125;</span>&gt;</span>&#123;user.name&#125;: &#123;user.taskCount&#125; tasks left<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每当一个列表重新渲染时，React 会根据每一项列表元素的 <code>key</code> 来检索上一次渲染时与每个 <code>key</code> 所匹配的列表项。如果 React 发现当前的列表有一个之前不存在的 <code>key</code>，那么就会创建出一个新的组件。如果 React 发现和之前对比少了一个 <code>key</code>，那么就会销毁之前对应的组件。如果一个组件的 <code>key</code> 发生了变化，这个组件会被销毁，然后使用新的 state 重新创建一份。</p><p><code>key</code> 是 React 中一个特殊的保留属性（还有一个是 <strong>ref</strong>，拥有更高级的特性）。当 React 元素被创建出来的时候，React 会提取出 <code>key</code> 属性，然后把 <code>key</code> 直接存储在返回的元素上。虽然 <code>key</code> 看起来好像是 props 中的一个，但是你不能通过 this.props.<code>key</code> 来获取 <code>key</code>。React 会通过 <code>key</code> 来自动判断哪些组件需要更新。组件是不能访问到它的 <code>key</code> 的。</p><p>我们强烈推荐，每次只要你构建动态列表的时候，都要指定一个合适的 <code>key</code>。如果你没有找到一个合适的 <code>key</code>，那么你就需要考虑重新整理你的数据结构了，这样才能有合适的 <code>key</code>。</p><p>如果你没有指定任何 <code>key</code>，React 会发出警告，并且会把数组的索引当作默认的 <code>key</code>。但是如果想要对列表进行重新排序、新增、删除操作时，把数组索引作为 <code>key</code> 是有问题的。显式地使用 <code>key=&#123;i&#125;</code> 来指定 <code>key</code> 确实会消除警告，但是仍然和数组索引存在同样的问题，所以大多数情况下最好不要这么做。</p><p>组件的 <code>key</code> 值并不需要在全局都保证唯一，只需要在当前的同一级元素之前保证唯一即可。</p><h4 id="实现时间旅行"><a href="#实现时间旅行" class="headerlink" title="实现时间旅行"></a>实现时间旅行</h4><p>在井字棋的历史记录中，每一个历史步骤都有一个与之对应的唯一 ID：这个 ID 就是每一步棋的序号。因为历史步骤不需要重新排序、新增、删除，所以使用步骤的索引作为 <code>key</code> 是安全的。</p><p>在 Game 组件的 render 方法中，我们可以这样添加 key，<li key="{move}">，这样关于 key 的警告就会消失了。</li></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> moves = history.<span class="title function_">map</span>(<span class="function">(<span class="params">step, move</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> desc = move ?</span><br><span class="line">        <span class="string">&#x27;Go to move #&#x27;</span> + move :</span><br><span class="line">        <span class="string">&#x27;Go to game start&#x27;</span>;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;move&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.jumpTo(move)&#125;&gt;&#123;desc&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>在实现 <code>jumpTo</code> 之前，先向 Game 组件的 state 中添加 <code>stepNumber</code>，这个值代表我们当前正在查看哪一项历史记录。</p><p>在 Game 的构造函数 <code>constructor</code> 中向初始 state 中添加 <code>stepNumber: 0</code>：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">State2</span>=&#123;</span><br><span class="line">    <span class="attr">history</span>:<span class="built_in">any</span>[]</span><br><span class="line">    <span class="attr">stepNumber</span>:<span class="built_in">number</span></span><br><span class="line">    <span class="attr">xIsNext</span>:<span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Game</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">Props2</span>,<span class="title class_">State2</span>&gt; &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props:Props2</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(props)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>=&#123;</span><br><span class="line">            <span class="attr">history</span>:[&#123;</span><br><span class="line">                <span class="attr">squares</span>: <span class="title class_">Array</span>(<span class="number">9</span>).<span class="title function_">fill</span>(<span class="literal">null</span>)</span><br><span class="line">            &#125;],</span><br><span class="line">            <span class="attr">stepNumber</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="attr">xIsNext</span>:<span class="literal">true</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后，在 Game 组件中定义 <code>jumpTo</code> 方法以更新状态 <code>stepNumber</code>。除此之外，当状态 stepNumber 是偶数时，还要把 <code>xIsNext</code> 设为 <code>true</code>：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">jumpTo</span>(<span class="params">step:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">stepNumber</span>:step,</span><br><span class="line">        <span class="attr">xIsNext</span>:(step%<span class="number">2</span>)===<span class="number">0</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>jumpTo</code> 方法中, 我们没有更新 state 中的 <code>history</code> 属性。这是因为 state 更新被合并了，或者用更简单的话说，React 不会更新 setState 方法中未提到的属性。</p><p>接下来，我们还要修改 Game 组件的 <code>handleClick</code> 方法，当你点击方格的时候触发该方法。</p><p>新添加的 <code>stepNumber</code> state 用于给用户展示当前的步骤。每当我们落下一颗新棋子的时候，我们需要调用 <code>this.setState</code> 并传入参数 <code>stepNumber: history.length</code>，以更新 stepNumber。这就保证了保证每走一步 stepNumber 会跟着改变。</p><p>我们还把读取 <code>this.state.history</code> 换成了读取 <code>this.state.history.slice(0, this.state.stepNumber + 1)</code> 的值。如果我们“回到过去”，然后再走一步新棋子，原来的“未来”历史记录就不正确了，这个替换可以保证我们把这些“未来”的不正确的历史记录丢弃掉。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">handleClick</span>(<span class="attr">i</span>: <span class="built_in">number</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> history=<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">history</span>.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">stepNumber</span>+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">const</span> current=history[history.<span class="property">length</span>-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">const</span> squares=current.<span class="property">squares</span>.<span class="title function_">slice</span>()</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">calculateWinner</span>(squares) || squares[i]) &#123;</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        squares[i]=<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">xIsNext</span>?<span class="string">&#x27;X&#x27;</span>:<span class="string">&#x27;O&#x27;</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">history</span>: history.<span class="title function_">concat</span>([&#123;</span><br><span class="line">                <span class="attr">squares</span>:squares,</span><br><span class="line">            &#125;]),</span><br><span class="line">            <span class="attr">stepNumber</span>:history.<span class="property">length</span>,</span><br><span class="line">            <span class="attr">xIsNext</span>:!<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">xIsNext</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>最后，修改 Game 组件的 render 方法，将代码从始终根据最后一次移动渲染修改为根据当前 <code>stepNumber</code> 渲染。</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> history = <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">history</span>;</span><br><span class="line">  <span class="keyword">const</span> current = history[<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">stepNumber</span>];</span><br><span class="line">  <span class="keyword">const</span> winner = <span class="title function_">calculateWinner</span>(current.<span class="property">squares</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 其他部分没有改变</span></span><br></pre></td></tr></table></figure><p>此时点击游戏历史记录的任何一步，井字棋的棋盘就会立即更新为刚走那一步棋时候的样子。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>至此！你已经完成了一个拥有以下功能的井字棋啦：</p><ul><li>tic-tac-toe(三连棋)游戏的所有功能</li><li>能够判定玩家何时获胜</li><li>能够记录游戏进程</li><li>允许玩家查看游戏的历史记录，也可以查看任意一个历史版本的游戏棋盘状态</li></ul><p>干的不错！我们希望至此已经基本掌握了 React 的使用。</p><p>如果还有充裕的时间，或者想练习一下刚刚学会的 React 新技能，这里有一些可以改进游戏的想法供你参考，这些功能的实现顺序的难度是递增的：</p><ul><li>在游戏历史记录列表显示每一步棋的坐标，格式为 (列号, 行号)。</li><li>在历史记录列表中加粗显示当前选择的项目。</li><li>使用两个循环来渲染出棋盘的格子，而不是在代码里写死（hardcode）。</li><li>添加一个可以升序或降序显示历史记录的按钮。</li><li>每当有人获胜时，高亮显示连成一线的 3 颗棋子。</li><li>当无人获胜时，显示一个平局的消息。</li></ul><p>通过这篇教程，我们接触了 React 中的一些概念，比如 React 元素、React 组件、props，还有 state。</p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm——Node 包管理器</title>
      <link href="/2022/11/20/AboutNPM/"/>
      <url>/2022/11/20/AboutNPM/</url>
      
        <content type="html"><![CDATA[<h2 id="About-npm"><a href="#About-npm" class="headerlink" title="About npm"></a>About npm</h2><h3 id="npm-是什么"><a href="#npm-是什么" class="headerlink" title="npm 是什么"></a>npm 是什么</h3><p>npm（“<strong>Node 包管理器</strong>”）是 JavaScript 运行时 Node.js 的默认程序包管理器。</p><h3 id="环境准本"><a href="#环境准本" class="headerlink" title="环境准本"></a>环境准本</h3><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p><a href="https://nodejs.org/">Node.js官网下载</a></p><a href="/2022/11/24/NVM/" title="NVM"><b>建议使用<code>nvm</code>安装 <em>Node.js</em></b></a><h3 id="版本检测"><a href="#版本检测" class="headerlink" title="版本检测"></a>版本检测</h3><ul><li>检测node.js 版本：<code>node -v</code></li><li>检测npm 版本：<code>npm -v</code></li></ul><h2 id="npm-的使用"><a href="#npm-的使用" class="headerlink" title="npm 的使用"></a>npm 的使用</h2><h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><p>用于创建 <strong>React项目</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g create-react-app</span><br></pre></td></tr></table></figure><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>快速、简洁且高效的博客框架</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop 生态</title>
      <link href="/2022/11/12/HadoopBase/"/>
      <url>/2022/11/12/HadoopBase/</url>
      
        <content type="html"><![CDATA[<div class="note default modern"><p><a href="#HDFS-shell命令行常用操作">HDFS shell 命令行常用操作</a></p></div><h2 id="大数据导论"><a href="#大数据导论" class="headerlink" title="大数据导论"></a>大数据导论</h2><h3 id="企业数据分析方向"><a href="#企业数据分析方向" class="headerlink" title="企业数据分析方向"></a>企业数据分析方向</h3><h4 id="数据是什么"><a href="#数据是什么" class="headerlink" title="数据是什么"></a>数据是什么</h4><ul><li>数据是指对<strong>客观事件进行记录并可以鉴别的符号</strong>，是对客观事物的性质、状态以及相互关系等进行记载的物理符号或这些物理符号的组合，它是可识别的、抽象的符号。</li><li>它不仅指狭义上的<strong>数字</strong>，还可以是具有一定意义的<strong>文字、字母、数字符号的组合、图形、图像、视频、音频</strong>等，也是客观事物的属性、数量、位置及其相互关系的抽象表示。例如，“0、1、2…”、“阴、雨、下降”、“学生的档案记录、货物的运输情况”等都是数据。<img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-14-02-20.jpg" style="height:300px"></li></ul><h4 id="数据如何产生"><a href="#数据如何产生" class="headerlink" title="数据如何产生"></a>数据如何产生</h4><p>对客观事物的<strong>计量和记录产生</strong>数据<br><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-14-07-17.png" style="height:200px"><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-14-07-30.png" style="height:200px"></p><h4 id="分析方向"><a href="#分析方向" class="headerlink" title="分析方向"></a>分析方向</h4><p><strong>把隐藏在数据背后的信息集中和提炼出来，总结出所研究对象的内在规律，帮助管理者进行有效的判断和决策</strong>。</p><p>数据分析在企业日常经营分析中主要有三大方向：<br><blockquote class="pullquote right"><p><img src="/2022/11/12/HadoopBase/2022-11-19-14-21-20.png" alt="企业数据分析方向"></p></blockquote></p><ul><li><strong>现状分析</strong>（分析<strong>当下</strong>的数据）：现阶段的整体情况，各个部分的构成占比、发展、变动；</li><li><strong>原因分析</strong>（分析<strong>过去</strong>的数据）：某一现状为什么发生，确定原因，做出调整优化；</li><li><strong>预测分析</strong>（结合数据预测<strong>未来</strong>）：结合已有数据预测未来发展趋势。</li></ul><div class="tabs" id="分析方向"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分析方向-1">现状分析</button></li><li class="tab"><button type="button" data-href="#分析方向-2">原因分析</button></li><li class="tab"><button type="button" data-href="#分析方向-3">预测分析</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分析方向-1"><p><strong>实时分析</strong>（Real Time Processing |<strong>Streaming</strong>）</p><p>面向当下，分析实时产生的数据；<br>所谓的实时是指从数据产生到数据分析到数据应用的时间间隔很短，可细分秒级、毫秒级。<br><img src="/2022/11/12/HadoopBase/2022-11-19-14-27-18.png" alt="实时分析"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分析方向-2"><p><strong>离线分析</strong>（<strong>Batch</strong> Processing）</p><p>面向过去，面向<strong>历史</strong>，分析已有的数据；<br>在时间维度明显成<strong>批次性变化</strong>。一周一分析(T+7)，一天一分析（T+1），所以也叫做<strong>批处理</strong>。<br><img src="/2022/11/12/HadoopBase/2022-11-19-14-29-41.png" alt="离线分析"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分析方向-3"><p><strong>机器学习</strong>（<strong>Machine Learning</strong>）</p><p>基于历史数据和当下产生的实时数据预测未来发生的事情；<br>侧重于<strong>数学算法</strong>的运用，如分类、聚类、关联、预测。<br><img src="/2022/11/12/HadoopBase/2022-11-19-14-30-55.png" alt="机器学习"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="数据分析基本步骤"><a href="#数据分析基本步骤" class="headerlink" title="数据分析基本步骤"></a>数据分析基本步骤</h3><p>数据分析步骤（流程）的重要性体现在：对<strong>如何开展数据分析提供了强有力的逻辑支撑</strong>;<br>张文霖在《数据分析六步曲》说，典型的数据分析应该包含以下几个步骤<br><img src="/2022/11/12/HadoopBase/2022-11-19-14-33-05.png" alt="数据分析六步曲"></p><h4 id="Step1：明确分析目的和思路"><a href="#Step1：明确分析目的和思路" class="headerlink" title="Step1：明确分析目的和思路"></a>Step1：明确分析目的和思路</h4><ul><li>目的是整个分析流程的起点，为数据的收集、处理及分析提供清晰的指引方向；</li><li>思路是使<strong>分析框架体系化</strong>，比如先分析什么，后分析什么，使各分析点之间具有逻辑联系，保证分析维度的<strong>完整性</strong>，分析结果的<strong>有效性</strong>以及<strong>正确性</strong>，需要数据分析方法论进行支撑；</li><li>数据分析方法论是一些营销管理类相关理论，比如用户行为理论、<strong>PEST分析法</strong>、5W2H分析法等。</li></ul><p><img src="/2022/11/12/HadoopBase/2022-11-19-14-35-53.png" alt="PEST分析法"></p><h4 id="Step2：数据收集"><a href="#Step2：数据收集" class="headerlink" title="Step2：数据收集"></a>Step2：数据收集</h4><ul><li>数据<strong>从无到有</strong>的过程：比如传感器收集气象数据、埋点收集用户行为数据</li><li>数据<strong>传输搬运</strong>的过程：比如采集数据库数据到数据分析平台</li></ul><p><img src="/2022/11/12/HadoopBase/2022-11-19-14-37-13.png" alt="数据收集"></p><h4 id="Step3：数据处理"><a href="#Step3：数据处理" class="headerlink" title="Step3：数据处理"></a>Step3：数据处理</h4><ul><li>准确来说，应该称之为<strong>数据预处理</strong>。</li><li>数据预处理需要对收集到的数据进行加工整理，形成适合数据分析的样式，主要包括<strong>数据清洗、数据转化、数据提取、数据计算</strong>；</li><li>数据预处理可以保证数据的一致性和有效性，让数据变成干净规整的<strong>结构化数据</strong>。</li></ul><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-14-38-59.png" style="height:300px"><h4 id="Step4：数据分析"><a href="#Step4：数据分析" class="headerlink" title="Step4：数据分析"></a>Step4：数据分析</h4><ul><li>用适当的分析方法及分析工具，对处理过的数据进行分析，提取有价值的信息，形成有效结论的过程；</li><li>需要掌握各种<strong>数据分析方法</strong>，还要熟悉<strong>数据分析软件</strong>的操作；</li></ul><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-14-42-20.png" style="height:300px"><h4 id="Step5：数据展现"><a href="#Step5：数据展现" class="headerlink" title="Step5：数据展现"></a>Step5：数据展现</h4><ul><li>数据展现又称之为<strong>数据可视化</strong>，指的是<strong>分析结果图表展示</strong>，因为人类是视觉动物；</li><li>数据可视化（Data Visualization）属于数据应用的一种；</li><li>注意，<strong>数据分析的结果不是只有可视化展示</strong>，还可以继续数据挖掘（Data Mining）、即席查询（Ad Hoc）等。</li></ul><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-14-42-09.png" style="height:300px"><h4 id="Step6：报告撰写"><a href="#Step6：报告撰写" class="headerlink" title="Step6：报告撰写"></a>Step6：报告撰写</h4><ul><li>数据分析报告是对整个数据分析过程的一个总结与呈现</li><li>把数据分析的起因、过程、结果及建议完整地呈现出来，供决策者参考</li><li>需要有明确的结论，最好有建议或解决方案</li></ul><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-14-44-29.png" style="height:400px"><div class="note info modern"><p>数据分析</p><ul><li><strong>一切围绕着数据</strong></li><li>通俗描述：<strong>数据从哪里来、数据到哪里去</strong></li><li>核心步骤:采集、处理、分析、应用</li></ul></div><h3 id="大数据时代"><a href="#大数据时代" class="headerlink" title="大数据时代"></a>大数据时代</h3><div class="note info modern"><ul><li>解决海量数据<strong>储存</strong>问题</li><li>解决海量数据<strong>计算</strong>问题</li></ul></div><h4 id="大数据时代背景"><a href="#大数据时代背景" class="headerlink" title="大数据时代背景"></a>大数据时代背景</h4><ul><li>最早提出“<strong>大数据</strong>”<strong>时代</strong>到来的是全球知名咨询公司<strong>麦肯锡</strong>，其称：“数据，已经渗透到当今每一个行业和业务职能领域，成为重要的生产因素。人们对于海量数据的挖掘和运用，预示着新一波生产率增长和消费者盈余浪潮的到来。”</li><li>2019年，央视推出了国内首部大数据产业题材纪录片《大数据时代》，节目细致而生动地讲述了大数据技术在<strong>政府治理、民生服务、数据安全、工业转型、未来生活</strong>等方面给我们带来的改变和影响。<br><img src="/2022/11/12/HadoopBase/2022-11-19-15-29-35.png" alt="大数据时代"></li></ul><h4 id="大数据定义"><a href="#大数据定义" class="headerlink" title="大数据定义"></a>大数据定义</h4><ul><li><strong>大数据（big data）</strong>是指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合；</li><li>是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产。<br><img src="/2022/11/12/HadoopBase/2022-11-19-15-30-31.png" alt="big data"></li></ul><h4 id="大数据5V特征"><a href="#大数据5V特征" class="headerlink" title="大数据5V特征"></a>大数据5V特征</h4><p>5个V开头的单词，从5个方面准确、生动、形象的介绍了大数据特征。<br><img src="/2022/11/12/HadoopBase/2022-11-19-15-31-43.png" alt="大数据5V特征"></p><p><img src="/2022/11/12/HadoopBase/2022-11-19-15-32-24.png" alt="大数据5V特征"></p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li><p><strong>电商领域</strong><br>精准广告位、个性化推荐、大数据杀熟</p></li><li><p><strong>传媒领域</strong><br>精准营销、猜你喜欢、交互推荐</p></li></ul><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-15-36-52.png" style="height:200px"><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-15-37-00.png" style="height:200px"><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-15-41-40.png" style="height:200px"><ul><li><p><strong>金融方面</strong><br>理财投资，通过对个人的信用评估，风险承担能力评估，集合众多理财产品、推荐响应的投资理财产品。<br><img src="/2022/11/12/HadoopBase/2022-11-19-15-46-35.png" alt="金融方面"></p></li><li><p><strong>交通领域</strong><br>拥堵预测、智能红绿灯、导航最优规划</p></li><li><p><strong>电信领域</strong><br>基站选址优化、舆情监控、客户用户画像</p><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-15-47-53.png" style="height:200px"><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-15-47-59.png" style="height:200px"><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-15-48-04.png" style="height:200px"></li><li><p><strong>安防领域</strong><br>犯罪预防、天网监控</p></li><li><p><strong>医疗领域</strong><br>智慧医疗、疾病预防、病源追踪</p></li></ul><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-15-50-27.png" style="height:200px"><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-15-50-32.png" style="height:200px"><h3 id="分布式与集群"><a href="#分布式与集群" class="headerlink" title="分布式与集群"></a>分布式与集群</h3><p>分布式、集群是两个不同的概念，但口语中经常混淆二者。<br><img src="/2022/11/12/HadoopBase/2022-11-19-15-52-16.png" alt="分布式与集群"></p><ul><li>分布式、集群的共同点是：<strong>都是多台机器（服务器）组成的</strong>；</li><li>因此口语中混淆两者概念的时候都是：<strong>相对于单机来说的</strong>。</li></ul><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-15-53-33.png" style="height:200px"><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-15-53-38.png" style="height:200px"><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>数据大爆炸，海量数据处理场景面临问题<br><img src="/2022/11/12/HadoopBase/2022-11-19-15-57-22.png" alt="大数据背景下"></p><h2 id="Apache-Hadoop、HDFS"><a href="#Apache-Hadoop、HDFS" class="headerlink" title="Apache Hadoop、HDFS"></a>Apache Hadoop、HDFS</h2><h3 id="Apache-Hadoop概述"><a href="#Apache-Hadoop概述" class="headerlink" title="Apache Hadoop概述"></a>Apache Hadoop概述</h3><h4 id="Hadoop介绍、发展简史、现状"><a href="#Hadoop介绍、发展简史、现状" class="headerlink" title="Hadoop介绍、发展简史、现状"></a>Hadoop介绍、发展简史、现状</h4><h5 id="Hadoop介绍"><a href="#Hadoop介绍" class="headerlink" title="Hadoop介绍"></a>Hadoop介绍</h5><ul><li><mark class="hl-label blue">狭义上Hadoop指的是Apache软件基金会的一款开源软件。</mark> <p>用java语言实现，开源<br>允许用户使用<strong>简单的编程模型</strong>实现<strong>跨机器</strong>集群对海量数据进行<strong>分布式计算</strong>处理</p></li><li><mark class="hl-label blue">Hadoop核心组件</mark> <p>Hadoop HDFS（分布式文件<strong>存储</strong>系统）：解决海量数据存储<br>Hadoop YARN（集群<strong>资源管理</strong>和任务调度框架）：解决资源任务调度<br>Hadoop MapReduce（分布式<strong>计算</strong>框架）：解决海量数据计算</p></li><li><mark class="hl-label blue">官网</mark> <p><a href="http://hadoop.apache.org/">http://hadoop.apache.org/</a></p></li><li><mark class="hl-label red">广义上Hadoop指的是围绕Hadoop打造的大数据生态圈。</mark> <p><img src="/2022/11/12/HadoopBase/2022-11-12-22-38-08.png" alt="广义Hadoop"></p></li></ul><h5 id="Hadoop发展简史"><a href="#Hadoop发展简史" class="headerlink" title="Hadoop发展简史"></a>Hadoop发展简史</h5><blockquote class="pullquote right"><p><img src="/2022/11/12/HadoopBase/2022-11-12-22-42-09.png" alt="Hadoop之父"></p></blockquote><ul><li><mark class="hl-label blue">Hadoop之父</mark> <p><strong>Doug Cutting</strong></p></li><li><mark class="hl-label blue">Hadoop起源于ApacheLucene子项目：Nutch</mark> <p>Nutch的设计目标是构建一个大型的全网搜索引擎。<br>遇到瓶颈：如何解决数十亿网页的存储和索引问题</p></li><li><mark class="hl-label red">Google三篇论文</mark> <p>《The Google file system》：谷歌分布式文件系统GFS<br>《MapReduce: Simplified Data Processing on Large Clusters》：谷歌分布式计算框架MapReduce<br>《Bigtable: A Distributed Storage System for Structured Data》：谷歌结构化数据存储系统</p></li></ul><h5 id="Hadoop现状"><a href="#Hadoop现状" class="headerlink" title="Hadoop现状"></a>Hadoop现状</h5><ul><li><strong>HDFS</strong>作为分布式文件存储系统，处在<strong>生态圈的底层与核心地位</strong>；</li><li><strong>YARN</strong>作为分布式通用的集群资源管理系统和任务调度平台，<strong>支撑各种计算引擎运行</strong>，保证了Hadoop地位；</li><li><strong>MapReduce</strong>作为大数据生态圈第一代分布式计算引擎，由于自身设计的模型所产生的弊端，导致企业一线<strong>几乎不再直接使用</strong>MapReduce进行编程处理，但是很多软件的底层依然在使用MapReduce引擎来处理数据。</li></ul><div class="note info modern"><ol><li>狭义上Hadoop指软件，广义上Hadoop指生态圈</li><li>Hadoop之父Doug Cutting</li><li>Hadoop起源于Nutch项目</li><li>受Google3篇论文启发</li><li>2008年开源给Apache软件基金会</li></ol></div><h4 id="Hadoop特性优点、国内外应用"><a href="#Hadoop特性优点、国内外应用" class="headerlink" title="Hadoop特性优点、国内外应用"></a>Hadoop特性优点、国内外应用</h4><h5 id="Hadoop特性优点"><a href="#Hadoop特性优点" class="headerlink" title="Hadoop特性优点"></a>Hadoop特性优点</h5><ol><li><p><strong>扩容能力</strong> scalability<br>Hadoop是在可用的计算机集群间分配数据并完成计算任务的，这些集群可方便灵活的方式扩展到数以千计的节点。</p></li><li><p><strong>成本低</strong> Economical<br>Hadoop集群允许通过部署普通廉价的机器组成集群来处理大数据，以至于成本很低。看重的是集群整体能力。</p></li><li><p><strong>效率高</strong> efficiency<br>通过<strong>并发数据</strong>，Hadoop可以在节点之间动态<strong>并行</strong>的移动数据，使得速度非常快。</p></li><li><p>可靠性 reliability<br>能自动维护数据的多份复制，并且在任务失败后能自动地重新部署（redeploy）计算任务。所以Hadoop的按位存储和处理数据的能力值得人们信赖。</p></li></ol><h5 id="Hadoop国外应用"><a href="#Hadoop国外应用" class="headerlink" title="Hadoop国外应用"></a>Hadoop国外应用</h5><ul><li><p>Yahoo<br>支持广告系统<br>用户行为分析<br>支持Web搜索<br>反垃圾邮件系统</p></li><li><p>Facebook<br>存储处理数据挖掘和日志统计<br>构建基于Hadoop数据仓库平台（Apache Hive来自FB）</p></li><li><p>IBM<br>蓝云基础设施构建<br>商业化Hadoop发行、解决方案支持</p></li></ul><h5 id="Hadoop国内应用"><a href="#Hadoop国内应用" class="headerlink" title="Hadoop国内应用"></a>Hadoop国内应用</h5><ul><li><p>百度<br>用户搜索表征的需求数据、阿拉丁爬虫数据存储<br>数据分析和挖掘竞价排名</p></li><li><p>阿里巴巴<br>为电子商务网络平台提供底层的基础计算和存储服务<br>交易数据、信用数据</p></li><li><p>腾讯<br>用户关系数据<br>基于Hadoop、Hive构建TDW（腾讯分布式数据仓库）</p></li><li><p>华为<br>对Hadoop的HA方案，以及HBase领域有深入研究</p></li></ul><div class="note info modern"><ul><li><p>Hadoop成功的魅力—<strong>通用性</strong><br>精准区分做什么和怎么做<br>做什么属于业务问题怎么做属于技术问题。<br>用户负责业务Hadoop负责技术</p></li><li><p>Hadoop成功的魅力—<strong>简单</strong><br><strong>一个东西你用起来比较简单，可不是你的能力！</strong></p></li></ul></div><h4 id="Hadoop发行版本、架构变迁"><a href="#Hadoop发行版本、架构变迁" class="headerlink" title="Hadoop发行版本、架构变迁"></a>Hadoop发行版本、架构变迁</h4><h5 id="Hadoop发行版本"><a href="#Hadoop发行版本" class="headerlink" title="Hadoop发行版本"></a>Hadoop发行版本</h5><p><img src="/2022/11/12/HadoopBase/2022-11-12-23-32-21.png" alt="Hadoop发行版本"></p><ul><li><p>Apache开源社区版本<br><a href="http://hadoop.apache.org/">http://hadoop.apache.org/</a></p></li><li><p>商业发行版本<br>Cloudera: <a href="https://www.cloudera.com/products/open-source/apache-hadoop.html">https://www.cloudera.com/products/open-source/apache-hadoop.html</a><br>Hortonworks: <a href="https://www.cloudera.com/products/hdp.html">https://www.cloudera.com/products/hdp.html</a></p></li></ul><h5 id="Hadoop架构变迁（1-0-2-0变迁）"><a href="#Hadoop架构变迁（1-0-2-0变迁）" class="headerlink" title="Hadoop架构变迁（1.0-2.0变迁）"></a>Hadoop架构变迁（1.0-2.0变迁）</h5><ul><li><p>Hadoop 1.0<br>HDFS（分布式文件存储）<br>MapReduce（资源管理和分布式数据处理）</p></li><li><p>Hadoop 2.0<br>HDFS（分布式文件存储）<br>MapReduce（分布式数据处理）<br><strong>YARN</strong>（集群资源管理、任务调度）</p></li></ul><p><img src="/2022/11/12/HadoopBase/2022-11-12-23-38-22.png" alt="Hadoop架构变迁（1.0-2.0变迁）"></p><h5 id="Hadoop架构变迁（3-0新版本）"><a href="#Hadoop架构变迁（3-0新版本）" class="headerlink" title="Hadoop架构变迁（3.0新版本）"></a>Hadoop架构变迁（3.0新版本）</h5><p><img src="/2022/11/12/HadoopBase/2022-11-12-23-39-05.png" alt="Hadoop架构变迁（3.0新版本）"><br>Hadoop 3.0架构组件和Hadoop 2.0类似,<strong>3.0着重于性能优化</strong>。</p><ul><li><p>通用方面<br>精简内核、类路径隔离、shell脚本重构</p></li><li><p>Hadoop HDFS<br>EC纠删码、多NameNode支持</p></li><li><p>Hadoop MapReduce<br>任务本地化优化、内存参数自动推断</p></li><li><p>Hadoop YARN<br>Timeline Service V2、队列配置</p></li></ul><h3 id="Apache-Hadoop集群搭建"><a href="#Apache-Hadoop集群搭建" class="headerlink" title="Apache Hadoop集群搭建"></a>Apache Hadoop集群搭建</h3><h4 id="Hadoop集群简介"><a href="#Hadoop集群简介" class="headerlink" title="Hadoop集群简介"></a>Hadoop集群简介</h4><ul><li>Hadoop集群包括两个集群：HDFS集群、YARN集群</li><li>两个集群<strong>逻辑上分离、通常物理上在一起</strong>(可单独启动，部署于一台计算机)</li><li>两个集群都是标准的<strong>主从架构</strong>集群</li></ul><p><img src="/2022/11/12/HadoopBase/2022-11-12-23-46-13.png" alt="Hadoop集群"><br><img src="/2022/11/12/HadoopBase/2022-11-12-23-48-36.png" alt="Hadoop集群"></p><ul><li><p>逻辑上分离<br>两个集群<strong>互相之间没有依赖、互不影响</strong></p></li><li><p>物理上在一起<br>某些角色进程往往<strong>部署在同一台物理服务器上</strong></p></li><li><p>MapReduce集群呢？<br>MapReduce是计算框架、代码层面的组件没有集群之说</p></li></ul><h4 id="Hadoop集群模式-分布式-安装（Cluster-mode）"><a href="#Hadoop集群模式-分布式-安装（Cluster-mode）" class="headerlink" title="Hadoop集群模式(分布式)安装（Cluster mode）"></a>Hadoop集群模式(分布式)安装（Cluster mode）</h4><p>详细的集群搭建步骤可参考<a href="/2022/10/25/HadoopClusterBuilding3-3-4/" title="Hadoop 3.3.4 集群搭建">Hadoop 3.3.4 集群搭建</a></p><h5 id="Hadoop源码编译"><a href="#Hadoop源码编译" class="headerlink" title="Hadoop源码编译"></a>Hadoop源码编译</h5><ul><li>安装包、源码包下载地址<br><a href="https://archive.apache.org/dist/hadoop/common/">https://archive.apache.org/dist/hadoop/common/</a><br><img src="/2022/11/12/HadoopBase/2022-11-13-00-08-55.png" alt="Hadoop版本"></li><li>为什么要重新编译Hadoop源码?<br>匹配不同<strong>操作系统本地库环境</strong>，Hadoop某些操作比如压缩、IO需要调用系统本地库（<em>.so|</em>.dll）<br><strong>修改源码、重构源码</strong></li><li>如何编译Hadoop<br>源码包根目录下文件：BUILDING.txt<br><img src="/2022/11/12/HadoopBase/2022-11-13-00-09-25.png" alt="如何编译Hadoop"></li></ul><h5 id="Step1-集群角色规划"><a href="#Step1-集群角色规划" class="headerlink" title="Step1:集群角色规划"></a>Step1:集群角色规划</h5><ul><li><p>角色规划的准则<br>根据软件工作特性和服务器硬件资源情况合理分配<br>比如依赖内存工作的NameNode是不是部署在大内存机器上？</p></li><li><p>角色规划注意事项<br><strong>资源上有抢夺冲突的，尽量不要部署在一起</strong><br><strong>工作上需要互相配合的。尽量部署在一起</strong></p></li></ul><div class="table-container"><table><thead><tr><th>服务器</th><th>运行角色</th></tr></thead><tbody><tr><td>node1.itcast.cn</td><td>namenode datanode resourcemanager nodemanager</td></tr><tr><td>node2.itcast.cn</td><td>secondarynamenode datanode nodemanager</td></tr><tr><td>node3.itcast.cn</td><td>datanode nodemanager</td></tr></tbody></table></div><h5 id="Step2-服务器基础环境准备"><a href="#Step2-服务器基础环境准备" class="headerlink" title="Step2:服务器基础环境准备"></a>Step2:服务器基础环境准备</h5><ul><li><p>主机名（3台机器）<br><code>vim /etc/hostname</code></p></li><li><p>Hosts映射（3台机器）<br><code>vim /etc/hosts</code></p></li><li><p>防火墙关闭（3台机器）<br><code>systemctl stop firewalld.service</code> #关闭防火墙<br><code>systemctl disable firewalld.service</code> #禁止防火墙开启自启</p></li><li><p>ssh免密登录<br><code>ssh-keygen</code>#4个回车生成公钥、私钥<br><code>ssh-copy-id node1</code>、<code>ssh-copy-id node2</code>、<code>ssh-copy-id node3</code></p></li><li><p>集群时间同步（3台机器）<br><code>yum -y install ntpdate</code><br><code>ntpdate ntp4.aliyun.com</code></p></li><li><p>创建统一工作目录（3台机器）</p></li></ul><h5 id="Step3-上传安装包、解压安装包"><a href="#Step3-上传安装包、解压安装包" class="headerlink" title="Step3:上传安装包、解压安装包"></a>Step3:上传安装包、解压安装包</h5><ul><li>JDK 1.8安装（3台机器）</li><li>上传、解压Hadoop安装包</li></ul><h5 id="Step4-Hadoop安装包目录结构"><a href="#Step4-Hadoop安装包目录结构" class="headerlink" title="Step4:Hadoop安装包目录结构"></a>Step4:Hadoop安装包目录结构</h5><div class="table-container"><table><thead><tr><th>目录</th><th>说明</th></tr></thead><tbody><tr><td><strong>bin</strong></td><td>Hadoop最基本的<strong>管理脚本</strong>和使用脚本的目录，这些脚本是sbin目录下管理脚本的基础实现，用户可以直接使用这些脚本管理和使用Hadoop。</td></tr><tr><td><strong>etc</strong></td><td>Hadoop<strong>配置文件</strong>所在的目录</td></tr><tr><td>include</td><td>对外提供的编程库头文件（具体动态库和静态库在lib目录中），这些头文件均是用C++定义的，通常用于C++程序访问HDFS或者编写MapReduce程序。</td></tr><tr><td>lib</td><td>该目录包含了Hadoop对外提供的编程动态库和静态库，与include目录中的头文件结合使用。</td></tr><tr><td>libexec</td><td>各个服务对用的shell配置文件所在的目录，可用于配置日志输出、启动参数（比如JVM参数）等基本信息。</td></tr><tr><td><strong>sbin</strong></td><td>Hadoop管理脚本所在的目录，主要包含HDFS和YARN中各类服务的<strong>启动/关闭脚本</strong>。</td></tr><tr><td><strong>share</strong></td><td>Hadoop各个模块编译后的<strong>jar包</strong>所在的目录，<strong>官方自带示例</strong>。</td></tr></tbody></table></div><h5 id="配置文件概述"><a href="#配置文件概述" class="headerlink" title="配置文件概述"></a>配置文件概述</h5><ul><li><p>官网文档<br><a href="https://hadoop.apache.org/docs/">https://hadoop.apache.org/docs/</a></p></li><li><p>第一类1个: <strong>hadoop-env.sh</strong></p></li><li><p>第二类4个：xxxx-site.xml ,site表示的是用户定义的配置，会覆盖default中的默认配置。</p><ul><li><strong>core-site.xml</strong> 核心模块配置</li><li><strong>hdfs-site.xml</strong> hdfs文件系统模块配置</li><li><strong>mapred-site.xml</strong> MapReduce模块配置</li><li><strong>yarn-site.xml</strong> yarn模块配置</li></ul></li><li><p>第三类1个：<strong>workers</strong></p></li><li>上述的配置文件目录：$HADOOP_HOME/etc/hadoop</li></ul><h5 id="Step5-编辑Hadoop配置文件-hadoop-env-sh"><a href="#Step5-编辑Hadoop配置文件-hadoop-env-sh" class="headerlink" title="Step5:编辑Hadoop配置文件 hadoop-env.sh"></a>Step5:编辑Hadoop配置文件 hadoop-env.sh</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=jdk安装路径</span><br><span class="line"><span class="comment">#文件最后添加</span></span><br><span class="line"><span class="built_in">export</span> HDFS_NAMENODE_USER=rootexport HDFS_DATANODE_USER=root</span><br><span class="line"><span class="built_in">export</span> HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line"><span class="built_in">export</span> YARN_RESOURCEMANAGER_USER=root</span><br><span class="line"><span class="built_in">export</span> YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure><h5 id="Step5-编辑Hadoop配置文件-core-site-xml"><a href="#Step5-编辑Hadoop配置文件-core-site-xml" class="headerlink" title="Step5:编辑Hadoop配置文件 core-site.xml"></a>Step5:编辑Hadoop配置文件 core-site.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置默认使用的文件系统Hadoop支持file、HDFS、GFS、ali|Amazon云等文件系统--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://node1:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--设置Hadoop本地保存数据路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/export/data/hadoop-3.3.0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--设置HDFS web UI用户身份--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.http.staticuser.user<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--整合hive 用户代理设置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--垃圾桶文件保存时间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.trash.interval<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1440<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Step5-编辑Hadoop配置文件hdfs-site-xml"><a href="#Step5-编辑Hadoop配置文件hdfs-site-xml" class="headerlink" title="Step5:编辑Hadoop配置文件hdfs-site.xml"></a>Step5:编辑Hadoop配置文件hdfs-site.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置SNN进程运行机器位置信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node2:9868<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Step5-编辑Hadoop配置文件-mapred-site-xml"><a href="#Step5-编辑Hadoop配置文件-mapred-site-xml" class="headerlink" title="Step5:编辑Hadoop配置文件 mapred-site.xml"></a>Step5:编辑Hadoop配置文件 mapred-site.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置MR程序默认运行模式：yarn集群模式local本地模式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--MR程序历史服务器端地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--历史服务器web端地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Step5-编辑Hadoop配置文件-yarn-site-xml"><a href="#Step5-编辑Hadoop配置文件-yarn-site-xml" class="headerlink" title="Step5:编辑Hadoop配置文件 yarn-site.xml"></a>Step5:编辑Hadoop配置文件 yarn-site.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置YARN集群主角色运行机器位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--是否将对容器实施物理内存限制--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.pmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--是否将对容器实施虚拟内存限制。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--开启日志聚集--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--设置yarn历史服务器地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://node1:19888/jobhistory/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--保存的时间7天--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Step5-编辑Hadoop配置文件-workers"><a href="#Step5-编辑Hadoop配置文件-workers" class="headerlink" title="Step5:编辑Hadoop配置文件 workers"></a>Step5:编辑Hadoop配置文件 workers</h5><pre><code class="highlight plaintext">node1.itcast.cnnode2.itcast.cnnode3.itcast.cn</code></pre><h5 id="Step6-分发同步安装包"><a href="#Step6-分发同步安装包" class="headerlink" title="Step6:分发同步安装包"></a>Step6:分发同步安装包</h5><ul><li>在node1机器上将Hadoop安装包scp同步到其他机器</li></ul><h5 id="Step7-配置Hadoop环境变量"><a href="#Step7-配置Hadoop环境变量" class="headerlink" title="Step7:配置Hadoop环境变量"></a>Step7:配置Hadoop环境变量</h5><ul><li><p>在node1上配置Hadoop环境变量<br><code>vim /etc/profile</code><br><code>export HADOOP_HOME=hadoop安装路径</code><br><code>export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</code></p></li><li><p>将修改后的环境变量同步其他机器<br><code>scp /etc/profile root@node2:/etc/</code><br><code>scp /etc/profile root@node3:/etc/</code></p></li><li><p>重新加载环境变量验证是否生效（3台机器）<br><code>source /etc/profile</code><br><code>hadoop</code> #验证环境变量是否生效</p></li></ul><h5 id="Step8-NameNode-format（格式化操作）"><a href="#Step8-NameNode-format（格式化操作）" class="headerlink" title="Step8:NameNode format（格式化操作）"></a>Step8:NameNode format（格式化操作）</h5><ul><li>首次启动HDFS时，必须对其进行格式化操作</li><li>format本质上是<strong>初始化工作，进行HDFS清理和准备工作</strong></li><li>命令：<br><code>hdfs namenode -format</code></li></ul><div class="note info modern"><ol><li>首次启动之前需要format操作;</li><li>format只能进行一次后续不再需要;</li><li>如果多次format除了造成数据丢失外，还会导致hdfs集群主从角色之间互不识别。通过删除所有机器hadoop.tmp.dir目录重新format解决</li></ol></div><h4 id="Hadoop集群启停命令、Web-UI"><a href="#Hadoop集群启停命令、Web-UI" class="headerlink" title="Hadoop集群启停命令、Web UI"></a>Hadoop集群启停命令、Web UI</h4><h5 id="手动逐个进程启停"><a href="#手动逐个进程启停" class="headerlink" title="手动逐个进程启停"></a>手动逐个进程启停</h5><p>每台机器上每次手动启动关闭一个角色进程,可以精准控制每个进程启停，避免群起群停。</p><ul><li><p>HDFS集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">hadoop2.x版本命令</span></span><br><span class="line">hadoop-daemon.sh start|stop namenode|datanode|secondarynamenode</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">hadoop3.x版本命令</span></span><br><span class="line">hdfs --daemon start|stop namenode|datanode|secondarynamenode</span><br></pre></td></tr></table></figure></li><li><p>YARN集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">hadoop2.x版本命令</span></span><br><span class="line">yarn-daemon.sh start|stop resourcemanager|nodemanager</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">hadoop3.x版本命令</span></span><br><span class="line">yarn --daemon start|stop resourcemanager|nodemanager</span><br></pre></td></tr></table></figure></li></ul><h5 id="shell脚本一键启停"><a href="#shell脚本一键启停" class="headerlink" title="shell脚本一键启停"></a>shell脚本一键启停</h5><p>在node1上，使用软件自带的shell脚本一键启动。前提：<strong>配置好机器之间的SSH免密登录和workers文件</strong>。</p><ul><li><p>HDFS集群<br><code>start-dfs.sh</code><br><code>stop-dfs.sh</code></p></li><li><p>YARN集群<br><code>start-yarn.sh</code><br><code>stop-yarn.sh</code></p></li><li><p>Hadoop集群<br><code>start-all.sh</code><br><code>stop-all.sh</code></p></li></ul><h5 id="进程状态、日志查看"><a href="#进程状态、日志查看" class="headerlink" title="进程状态、日志查看"></a>进程状态、日志查看</h5><ul><li>启动完毕之后可以使用<strong>jps命令</strong>查看进程是否启动成功</li><li>Hadoop启动日志路径：$HADOOP_HOME/logs/</li></ul><h5 id="HDFS集群web界面"><a href="#HDFS集群web界面" class="headerlink" title="HDFS集群web界面"></a>HDFS集群web界面</h5><p>地址：<a href="http://namenode_host:9870">http://namenode_host:9870</a></p><p>其中namenode_host是namenode运行所在机器的主机名或者ip<br>如果使用主机名访问，别忘了在Windows配置hosts<br><img src="/2022/11/12/HadoopBase/2022-11-13-17-27-37.png" alt="HDFS集群web界面"><br><img src="/2022/11/12/HadoopBase/2022-11-13-17-27-57.png" alt="HDFS集群web界面"></p><h5 id="YARN集群web界面"><a href="#YARN集群web界面" class="headerlink" title="YARN集群web界面"></a>YARN集群web界面</h5><p>地址：<a href="http://resourcemanager_host:8088">http://resourcemanager_host:8088</a></p><p>其中resourcemanager_host是resourcemanager运行所在机器的主机名或者ip<br>如果使用主机名访问，别忘了在Windows配置hosts<br><img src="/2022/11/12/HadoopBase/2022-11-13-17-28-12.png" alt="YARN集群web界面"></p><h4 id="Hadoop初体验"><a href="#Hadoop初体验" class="headerlink" title="Hadoop初体验"></a>Hadoop初体验</h4><h5 id="HDFS-初体验"><a href="#HDFS-初体验" class="headerlink" title="HDFS 初体验"></a>HDFS 初体验</h5><h6 id="shell命令操作"><a href="#shell命令操作" class="headerlink" title="shell命令操作"></a>shell命令操作</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoopfs-mkdir /itcast</span><br><span class="line">hadoopfs-put zookeeper.out/itcast</span><br><span class="line">hadoopfs-ls/</span><br></pre></td></tr></table></figure><h6 id="Web-UI页面操作"><a href="#Web-UI页面操作" class="headerlink" title="Web UI页面操作"></a>Web UI页面操作</h6><p><img src="/2022/11/12/HadoopBase/2022-11-13-17-34-40.png" alt="Web UI页面操作"></p><h5 id="MapReduce-YARN初体验"><a href="#MapReduce-YARN初体验" class="headerlink" title="MapReduce+YARN初体验"></a>MapReduce+YARN初体验</h5><p>执行Hadoop官方自带的MapReduce案例，评估圆周率π的值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $HADOOP_HOME/share/hadoop/mapreduce/</span><br><span class="line">hadoop jar hadoop-mapreduce-examples-3.3.0.jar pi 2 4</span><br></pre></td></tr></table></figure><p><img src="/2022/11/12/HadoopBase/2022-11-13-17-42-07.png" alt="MapReduce+YARN初体验"></p><h3 id="HDFS分布式文件系统基础"><a href="#HDFS分布式文件系统基础" class="headerlink" title="HDFS分布式文件系统基础"></a>HDFS分布式文件系统基础</h3><h4 id="文件系统、分布式文件系统"><a href="#文件系统、分布式文件系统" class="headerlink" title="文件系统、分布式文件系统"></a>文件系统、分布式文件系统</h4><h5 id="文件系统定义"><a href="#文件系统定义" class="headerlink" title="文件系统定义"></a>文件系统定义</h5><ul><li>文件系统是一种<strong>存储</strong>和<strong>组织数据</strong>的方法，实现了数据的存储、分级组织、访问和获取等操作，使得用户对文件访问和查找变得容易；</li><li>文件系统使用<strong>树形目录</strong>的<strong>抽象逻辑</strong>概念代替了硬盘等物理设备使用数据块的概念，用户不必关心数据底层存在硬盘哪里，只需要记住这个文件的所属目录和文件名即可；</li><li>文件系统通常使用硬盘和光盘这样的存储设备，并<strong>维护文件在设备中的物理位置</strong>。<br><img src="/2022/11/12/HadoopBase/2022-11-13-17-56-16.png" alt="文件系统"></li></ul><h5 id="传统常见的文件系统"><a href="#传统常见的文件系统" class="headerlink" title="传统常见的文件系统"></a>传统常见的文件系统</h5><ul><li>所谓传统常见的文件系统更多指的的<strong>单机的文件系统</strong>，也就是<strong>底层不会横跨多台机器</strong>实现。比如windows操作系统上的文件系统、Linux上的文件系统、FTP文件系统等等。</li><li>这些文件系统的共同特征包括：<ol><li>带有<strong>抽象的目录树结构</strong>，树都是从<strong>\/根目录开始</strong>往下蔓延；</li><li>树中节点分为两类：<strong>目录</strong>和<strong>文件</strong>；</li><li>从根目录开始，节点<strong>路径具有唯一性</strong>。</li></ol></li></ul><h5 id="数据、元数据"><a href="#数据、元数据" class="headerlink" title="数据、元数据"></a>数据、元数据</h5><h6 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h6><p>指存储的内容本身，比如文件、视频、图片等，这些<strong>数据底层最终是存储在磁盘</strong>等存储介质上的，一般<strong>用户无需关心</strong>，只需要基于目录树进行增删改查即可，实际针对数据的操作由文件系统完成。</p><h6 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h6><p>元数据（metadata）又称之为解释性数据，记录数据的数据；<br>文件系统元数据一般指<strong>文件大小、最后修改时间、底层存储位置、属性、所属用户、权限等信息</strong>。</p><p><img src="/2022/11/12/HadoopBase/2022-11-13-18-00-22.png" alt="元数据"></p><h5 id="海量数据存储遇到的问题"><a href="#海量数据存储遇到的问题" class="headerlink" title="海量数据存储遇到的问题"></a>海量数据存储遇到的问题</h5><ul><li><p><strong>成本高</strong><br>传统存储硬件通用性差，设备投资加上后期维护、<strong>升级扩容的成本非常高</strong>。<br><img src="/2022/11/12/HadoopBase/2022-11-13-18-12-07.png" alt="成本高"></p></li><li><p>如何支撑高效率的计算分析<br>传统存储方式意味着数据：存储是存储，计算是计算，当<strong>需要处理数据的时候把数据移动过来</strong>。<br>程序和数据存储是属于不同的技术厂商实现，无法有机统一整合在一起。</p></li><li><p><strong>性能低</strong><br><strong>单节点I/O性能瓶</strong>颈无法逾越，难以支撑海量数据的<strong>高并发高吞吐</strong>场景。</p></li><li><p><strong>可扩展性差</strong><br>无法实现快速部署和弹性扩展，动态扩容、缩容成本高，技术实现难度大。</p></li></ul><h4 id="分布式存储系统的核心属性及功能含义"><a href="#分布式存储系统的核心属性及功能含义" class="headerlink" title="分布式存储系统的核心属性及功能含义"></a>分布式存储系统的核心属性及功能含义</h4><p>分布式存储系统核心属性</p><ul><li>分布式存储</li><li>元数据记录</li><li>分块存储</li><li>副本机制</li></ul><h5 id="分布式存储的优点"><a href="#分布式存储的优点" class="headerlink" title="分布式存储的优点"></a>分布式存储的优点</h5><ul><li>问题：数据量大，单机存储遇到瓶颈</li><li>解决：<br>单机纵向扩展：磁盘不够加磁盘，有上限瓶颈限制<br><strong>多机横向扩展</strong>：机器不够加机器，理论上<strong>无限扩展</strong></li></ul><p><img src="/2022/11/12/HadoopBase/2022-11-13-18-16-54.png" alt="分布式存储"></p><h5 id="元数据记录的功能"><a href="#元数据记录的功能" class="headerlink" title="元数据记录的功能"></a>元数据记录的功能</h5><ul><li>问题：文件分布在不同机器上不利于寻找</li><li>解决：元数据记录下文件及其存储位置信息，<strong>快速定位文件位置</strong></li></ul><p><img src="/2022/11/12/HadoopBase/2022-11-13-18-18-30.png" alt="元数据记录的功能"></p><h5 id="分块存储好处"><a href="#分块存储好处" class="headerlink" title="分块存储好处"></a>分块存储好处</h5><ul><li>问题：文件过大导致单机存不下、上传下载效率低</li><li>解决：文件分块存储在不同机器，<strong>针对块并行操作提高效率</strong></li></ul><p><img src="/2022/11/12/HadoopBase/2022-11-13-18-20-30.png" alt="分块存储好处"></p><h5 id="副本机制的作用"><a href="#副本机制的作用" class="headerlink" title="副本机制的作用"></a>副本机制的作用</h5><ul><li>问题：硬件故障难以避免，数据易丢失</li><li>解决：不同机器设置备份，<strong>冗余存储，保障数据安全</strong></li></ul><p><img src="/2022/11/12/HadoopBase/2022-11-13-18-22-03.png" alt="副本机制的作用"></p><div class="note info modern"><ol><li><div class="hide-block"><button type="button" class="hide-button" style>分布式存储的优点是什么？ </button><div class="hide-content"><p><strong>无限扩展</strong>支撑海量数据存储</p></div></div></li><li><div class="hide-block"><button type="button" class="hide-button" style>元数据记录的功能是什么？ </button><div class="hide-content"><p>快速<strong>定位文件</strong>位置便于查找</p></div></div></li><li><div class="hide-block"><button type="button" class="hide-button" style>文件分块存储好处是什么？ </button><div class="hide-content"><p>针对块<strong>并行操作</strong>提高效率</p></div></div></li><li><div class="hide-block"><button type="button" class="hide-button" style>设置副本备份的作用是什么？ </button><div class="hide-content"><p>冗余存储保障<strong>数据安全</strong></p></div></div></li></ol></div><h4 id="HDFS简介"><a href="#HDFS简介" class="headerlink" title="HDFS简介"></a>HDFS简介</h4><ul><li><p>HDFS（Hadoop Distributed File System ），意为：<strong>Hadoop分布式文件系统</strong>。</p></li><li><p>是Apache Hadoop核心组件之一，作为<strong>大数据生态圈最底层</strong>的分布式存储服务而存在。也可以说大数据首先要解决的问题就是海量数据的存储问题。<br><img src="/2022/11/12/HadoopBase/2022-11-12-22-38-08.png" alt="广义Hadoop"></p></li><li><p>HDFS主要是<strong>解决大数据如何存储问题的</strong>。分布式意味着是HDFS是横跨在多台计算机上的存储系统。</p></li><li><p>HDFS是一种能够在普通硬件上运行的分布式文件系统，它是<strong>高度容错</strong>的，适应于具有大数据集的应用程序，它非常适于存储大型数据(比如TB 和PB)。</p></li><li><p>HDFS使用多台计算机存储文件, 并且提供<strong>统一的访问接口</strong>, 像是访问一个普通文件系统一样使用分布式文件系统。</p></li><li><p><img src="/2022/11/12/HadoopBase/2022-11-13-18-38-51.png" alt="HDFS简介"></p></li></ul><h4 id="HDFS起源发展、设计目标"><a href="#HDFS起源发展、设计目标" class="headerlink" title="HDFS起源发展、设计目标"></a>HDFS起源发展、设计目标</h4><h5 id="HDFS起源发展"><a href="#HDFS起源发展" class="headerlink" title="HDFS起源发展"></a>HDFS起源发展</h5><ul><li><p><strong>Doug Cutting</strong> 领导<strong>Nutch项目</strong>研发，Nutch的设计目标是构建一个大型的全网搜索引擎，包括网页抓取、索引、查询等功能。</p></li><li><p>随着爬虫抓取网页数量的增加，遇到了严重的可扩展性问题——<strong>如何解决数十亿网页的存储和索引问题</strong>。</p></li><li><p>2003年的时候, Google发表的论文为该问题提供了可行的解决方案。<br>《<strong>分布式文件系统（GFS）</strong>，可用于处理海量网页的存储》<br><img src="/2022/11/12/HadoopBase/2022-11-13-19-16-18.png" alt="GFS"></p></li><li><p>Nutch的开发人员完成了相应的开源实现HDFS，并从Nutch中剥离和MapReduce成为独立项目HADOOP。</p></li></ul><h5 id="HDFS设计目标"><a href="#HDFS设计目标" class="headerlink" title="HDFS设计目标"></a>HDFS设计目标</h5><ul><li>硬件故障（Hardware Failure）是常态，HDFS可能有成百上千的服务器组成，每一个组件都有可能出现故障。因此<strong>故障检测和自动快速恢复</strong>是HDFS的核心架构目标。</li><li>HDFS上的应用主要是以流式读取数据（Streaming Data Access）。HDFS被设计成用于批处理，而不是用户交互式的。相较于数据访问的反应时间，更<strong>注重数据访问的高吞吐量</strong>。</li><li>典型的HDFS文件大小是GB到TB的级别。所以，HDFS被调整成<strong>支持大文件（Large Data Sets）</strong>。它应该提供很高的聚合数据带宽，一个集群中支持数百个节点，一个集群中还应该支持千万级别的文件。</li><li>大部分HDFS应用对文件要求的是<strong>write-one-read-many</strong>访问模型。一个文件一旦<strong>创建、写入、关闭之后就不需要修改</strong>了。这一假设简化了数据一致性问题，使高吞吐量的数据访问成为可能。</li><li><strong>移动计算的代价比之移动数据的代价低</strong>。一个应用请求的计算，离它操作的数据越近就越高效。将计算移动到数据附近，比之将数据移动到应用所在显然更好。</li><li>HDFS被设计为可从一个平台<strong>轻松移植</strong>到另一个平台。这有助于将HDFS广泛用作大量应用程序的首选平台。</li></ul><h4 id="HDFS应用场景"><a href="#HDFS应用场景" class="headerlink" title="HDFS应用场景"></a>HDFS应用场景</h4><p><img src="/2022/11/12/HadoopBase/2022-11-13-20-17-58.png" alt="HDFS应用场景"></p><h4 id="HDFS重要特性"><a href="#HDFS重要特性" class="headerlink" title="HDFS重要特性"></a>HDFS重要特性</h4><blockquote class="pullquote right"><p><img src="/2022/11/12/HadoopBase/2022-11-13-20-19-47.png" alt="HDFS"></p></blockquote><h5 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h5><ul><li>主从架构</li><li>分块存储</li><li>副本机制</li><li>元数据记录</li><li>抽象统一的目录树结构（namespace）</li></ul><h5 id="（1）主从架构"><a href="#（1）主从架构" class="headerlink" title="（1）主从架构"></a>（1）主从架构</h5><ul><li>HDFS集群是标准的master/slave主从架构集群。</li><li>一般一个HDFS集群是有一个Namenode和一定数目的Datanode组成。</li><li><strong>Namenode是HDFS主节点，Datanode是HDFS从节点，两种角色各司其职，共同协调</strong>完成分布式的文件存储服务。</li><li>官方架构图中是<strong>一主五从</strong>模式，其中五个从角色位于两个机架（Rack）的不同服务器上。</li></ul><h5 id="（2）分块存储"><a href="#（2）分块存储" class="headerlink" title="（2）分块存储"></a>（2）分块存储</h5><ul><li>HDFS中的文件在<strong>物理上是分块存储（block）</strong>的，默认大小是128M（134217728），不足128M则本身就是一块。</li><li>块的大小可以通过配置参数来规定，参数位于hdfs-default.xml中：dfs.blocksize。</li></ul><p><img src="/2022/11/12/HadoopBase/2022-11-13-20-30-29.png" alt="分块存储"></p><h5 id="（3）副本机制"><a href="#（3）副本机制" class="headerlink" title="（3）副本机制"></a>（3）副本机制</h5><ul><li>文件的所有block都会有副本。副本系数可以在文件创建的时候指定，也可以在之后通过命令改变。</li><li>副本数由参数dfs.replication控制，<strong>默认值是3</strong>，也就是会<strong>额外再复制2份</strong>，连同本身总共3份副本。</li></ul><h5 id="（4）元数据管理"><a href="#（4）元数据管理" class="headerlink" title="（4）元数据管理"></a>（4）元数据管理</h5><p>在HDFS中，Namenode管理的元数据具有两种类型：</p><ul><li><p><strong>文件自身属性信息</strong><br>文件名称、权限，修改时间，文件大小，复制因子，数据块大小。</p></li><li><p><strong>文件块位置映射信息</strong><br>记录文件块和DataNode之间的映射信息，即哪个块位于哪个节点上。</p></li></ul><h5 id="（5）namespace"><a href="#（5）namespace" class="headerlink" title="（5）namespace"></a>（5）namespace</h5><ul><li>HDFS支持传统的<strong>层次型文件组织结构</strong>。用户可以创建目录，然后将文件保存在这些目录里。文件系统名字空间的层次结构和大多数现有的文件系统类似：用户可以创建、删除、移动或重命名文件。</li><li>Namenode负责维护文件系统的namespace名称空间，任何对文件系统名称空间或属性的修改都将被Namenode记录下来。</li><li>HDFS会给客户端提供一个<strong>统一的抽象目录树</strong>，客户端通过路径来访问文件，形如：hdfs://namenode:port/dir-a/dir-b/dir-c/file.data。</li></ul><h5 id="（6）数据块存储"><a href="#（6）数据块存储" class="headerlink" title="（6）数据块存储"></a>（6）数据块存储</h5><ul><li>文件的各个block的<strong>具体存储管理由DataNode节点承担</strong>。</li><li>每一个block都可以在多个DataNode上存储。</li></ul><h3 id="HDFS-shell操作"><a href="#HDFS-shell操作" class="headerlink" title="HDFS shell操作"></a>HDFS shell操作</h3><h4 id="HDFS-shell命令行解释说明"><a href="#HDFS-shell命令行解释说明" class="headerlink" title="HDFS shell命令行解释说明"></a>HDFS shell命令行解释说明</h4><p><strong>命令行界面</strong>（英语：command-line interface，缩写：CLI），是指用户通过键盘输入指令，计算机接收到指令后，予以执行一种人际交互方式。</p><p>Hadoop提供了文件系统的shell命令行客户端: <code>hadoop fs [generic options]</code></p><h5 id="文件系统协议"><a href="#文件系统协议" class="headerlink" title="文件系统协议"></a>文件系统协议</h5><ul><li>HDFS Shell CLI支持操作多种文件系统，包括本地文件系统（file:///）、分布式文件系统（hdfs://nn:8020）等</li><li>具体操作的是什么文件系统取决于命令中文件路径<strong>URL中的前缀协议</strong>。</li><li>如果没有指定前缀，则将会读取环境变量中的<code>fs.defaultFS</code>属性，以该属性值作为默认文件系统。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -ls file:/// #操作本地文件系统</span><br><span class="line">hadoop fs -ls hdfs://node1:8020/ #操作HDFS分布式文件系统</span><br><span class="line">hadoop fs -ls / #直接根目录，没有指定协议将加载读取fs.defaultFS值</span><br></pre></td></tr></table></figure><h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><ul><li>hadoop dfs 只能操作HDFS文件系统（包括与Local FS间的操作），不过已经Deprecated；</li><li>hdfs dfs 只能操作HDFS文件系统相关（包括与Local FS间的操作）,常用；</li><li><code>hadoop fs</code> 可操作任意文件系统，不仅仅是hdfs文件系统，使用范围更广；</li></ul><p>目前版本来看，官方最终推荐使用的是hadoop fs。当然hdfs dfs在市面上的使用也比较多。</p><h5 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h5><ul><li>HDFS文件系统的操作命令很多和Linux类似，因此学习成本相对较低。</li><li>可以通过<code>hadoop fs -help</code>命令来查看每个命令的详细用法。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Usage: hadoop fs [generic options]</span><br><span class="line">[-appendToFile&lt;localsrc&gt; ... &lt;dst&gt;]</span><br><span class="line">[-cat [-ignoreCrc] &lt;src&gt; ...]</span><br><span class="line">……</span><br><span class="line">-appendToFile&lt;localsrc&gt; ... &lt;dst&gt; :</span><br><span class="line">Appends the contents of all the given local files to the given dst file. The dst</span><br><span class="line">file will be created if it does not exist. If &lt;localSrc&gt; is -, then the input is</span><br><span class="line">read from stdin.</span><br><span class="line">-cat [-ignoreCrc] &lt;src&gt; ... :</span><br><span class="line">Fetch all files that match the file pattern &lt;src&gt; and display their content on</span><br><span class="line">stdout.</span><br></pre></td></tr></table></figure><h4 id="HDFS-shell命令行常用操作"><a href="#HDFS-shell命令行常用操作" class="headerlink" title="HDFS shell命令行常用操作"></a>HDFS shell命令行常用操作</h4><h5 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -mkdir [-p] &lt;path&gt; ...</span><br></pre></td></tr></table></figure><ul><li><code>path</code> 为待创建的目</li><li><code>-p</code>选项的行为与Unix mkdir -p非常相似，它<strong>会创建路径中的各级父目录</strong>。</li></ul><h5 id="查看指定目录下内容"><a href="#查看指定目录下内容" class="headerlink" title="查看指定目录下内容"></a>查看指定目录下内容</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -ls [-h] [-R] [&lt;path&gt; ...]</span><br></pre></td></tr></table></figure><ul><li><code>path</code> 指定目录路径</li><li><code>-h</code> 人性化显示文件size</li><li><code>-R</code> 递归查看指定目录及其子目录</li></ul><h5 id="上传文件到HDFS指定目录下"><a href="#上传文件到HDFS指定目录下" class="headerlink" title="上传文件到HDFS指定目录下"></a>上传文件到HDFS指定目录下</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -put [-f] [-p] &lt;localsrc&gt; ... &lt;dst&gt;</span><br></pre></td></tr></table></figure><ul><li><code>-f</code> 覆盖目标文件（已存在下）</li><li><code>-p</code> 保留访问和修改时间，所有权和权限。</li><li><code>localsrc</code> 本地文件系统（客户端所在机器）</li><li><code>dst</code> 目标文件系统（HDFS）</li></ul><h5 id="查看HDFS文件内容"><a href="#查看HDFS文件内容" class="headerlink" title="查看HDFS文件内容"></a>查看HDFS文件内容</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -cat &lt;src&gt; ...</span><br></pre></td></tr></table></figure><p>读取指定文件全部内容，显示在标准输出控制台。<br>注意：对于<strong>大文件内容读取，慎重</strong>。</p><h5 id="下载HDFS文件"><a href="#下载HDFS文件" class="headerlink" title="下载HDFS文件"></a>下载HDFS文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -get [-f] [-p] &lt;src&gt; ... &lt;localdst&gt;</span><br></pre></td></tr></table></figure><ul><li>下载文件到本地文件系统指定目录，localdst必须是目录</li><li><code>-f</code> 覆盖目标文件（已存在下）</li><li><code>-p</code> 保留访问和修改时间，所有权和权限。</li></ul><h5 id="拷贝HDFS文件"><a href="#拷贝HDFS文件" class="headerlink" title="拷贝HDFS文件"></a>拷贝HDFS文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -cp [-f] &lt;src&gt; ... &lt;dst&gt;</span><br></pre></td></tr></table></figure><ul><li><code>-f</code> 覆盖目标文件（已存在下）</li></ul><h5 id="追加数据到HDFS文件中"><a href="#追加数据到HDFS文件中" class="headerlink" title="追加数据到HDFS文件中"></a>追加数据到HDFS文件中</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -appendToFile&lt;localsrc&gt; ... &lt;dst&gt;</span><br></pre></td></tr></table></figure><p>将所有给定本地文件的内容追加到给定dst文件。<br>dst如果文件不存在，将创建该文件。<br>注意：<strong>appendToFile 是将当地文件内容追加的到 hadoop 上的文件（不能hadoop上的文件1 追加给 hadoop上的文件2）</strong></p><h5 id="HDFS数据移动操作"><a href="#HDFS数据移动操作" class="headerlink" title="HDFS数据移动操作"></a>HDFS数据移动操作</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -mv &lt;src&gt; ... &lt;dst&gt;</span><br></pre></td></tr></table></figure><p>移动文件到指定文件夹下<br>可以使用该命令移动数据，重命名文件的名称</p><h5 id="HDFS-shell其他命令"><a href="#HDFS-shell其他命令" class="headerlink" title="HDFS shell其他命令"></a>HDFS shell其他命令</h5><p>命令官方指导文档<br><a href="https://hadoop.apache.org/docs/">https://hadoop.apache.org/docs/</a><br><a href="https://hadoop.apache.org/docs/r3.3.4/hadoop-project-dist/hadoop-common/FileSystemShell.html">https://hadoop.apache.org/docs/r3.3.4/hadoop-project-dist/hadoop-common/FileSystemShell.html</a></p><p>常见的操作自己最好能够记住，其他操作可以根据需要查询文档使用。<br>命令属于<strong>多用多会，孰能生巧，不用就忘</strong>。</p><h3 id="HDFS工作流程与机制"><a href="#HDFS工作流程与机制" class="headerlink" title="HDFS工作流程与机制"></a>HDFS工作流程与机制</h3><h4 id="HDFS集群角色与职责"><a href="#HDFS集群角色与职责" class="headerlink" title="HDFS集群角色与职责"></a>HDFS集群角色与职责</h4><h5 id="官方架构图"><a href="#官方架构图" class="headerlink" title="官方架构图"></a>官方架构图</h5><p><img src="/2022/11/12/HadoopBase/2022-11-13-20-19-47.png" alt="HDFS"></p><h5 id="主角色：namenode"><a href="#主角色：namenode" class="headerlink" title="主角色：namenode"></a>主角色：namenode</h5><p><img src="/2022/11/12/HadoopBase/2022-11-17-00-10-53.png" alt="namenode"></p><ul><li><code>NameNode</code>是Hadoop分布式文件系统的核心，架构中的主角色。</li><li><strong>NameNode维护和管理文件系统元数据</strong>，包括名称空间目录树结构、文件和块的位置信息、访问权限等信息。</li><li>基于此，<strong>NameNode成为了访问HDFS的唯一入口</strong>。</li><li>NameNode内部通过<strong>内存</strong>和<strong>磁盘文件</strong>两种方式管理元数据。</li><li>其中磁盘上的元数据文件包括Fsimage内存元数据镜像文件和edits log（Journal）编辑日志。</li></ul><h5 id="从角色：datanode"><a href="#从角色：datanode" class="headerlink" title="从角色：datanode"></a>从角色：datanode</h5><blockquote class="pullquote right"><p><img src="/2022/11/12/HadoopBase/2022-11-17-00-16-51.png" alt="datanode"></p></blockquote><ul><li><code>DataNode</code>是Hadoop HDFS中的从角色，负责<strong>具体的数据块存储</strong>。</li><li>DataNode的数量决定了HDFS集群的整体数据存储能力。通过和NameNode配合维护着数据块。</li></ul><h5 id="主角色辅助角色：secondarynamenode"><a href="#主角色辅助角色：secondarynamenode" class="headerlink" title="主角色辅助角色：secondarynamenode"></a>主角色辅助角色：secondarynamenode</h5><ul><li>Secondary NameNode充当NameNode的辅助节点，但不能替代NameNode。</li><li>主要是帮助主角色进行元数据文件的合并动作。可以通俗的理解为主角色的“秘书”。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-00-18-47.png" alt="secondarynamenode"></li></ul><h5 id="namenode职责"><a href="#namenode职责" class="headerlink" title="namenode职责"></a>namenode职责</h5><ul><li>NameNode仅<strong>存储HDFS的元数据</strong>：文件系统中所有文件的目录树，并跟踪整个集群中的文件，不存储实际数据。</li><li>NameNode知道HDFS中任何<strong>给定文件的块列表及其位置</strong>。使用此信息NameNode知道如何从块中构建文件。</li><li>NameNode<strong>不持久化存储每个文件中各个块所在的datanode的位置信息</strong>，这些信息会在系统启动时从DataNode重建。</li><li>NameNode是Hadoop集群中的<strong>单点故障</strong>。</li><li>NameNode所在机器通常会配置有<strong>大量内存（RAM）</strong>。</li></ul><h5 id="datanode职责"><a href="#datanode职责" class="headerlink" title="datanode职责"></a>datanode职责</h5><ul><li>DataNode负责<strong>最终数据块block的存储</strong>。是集群的<strong>从角色</strong>，也称为Slave。</li><li>DataNode启动时，会将自己<strong>注册</strong>到NameNode并<strong>汇报</strong>自己负责持有的块列表。</li><li>当某个DataNode关闭时，不会影响数据的可用性。NameNode将安排由其他DataNode管理的块进行副本复制。</li><li>DataNode所在机器通常配置有大量的<strong>硬盘</strong>空间，因为实际数据存储在DataNode中。</li></ul><h4 id="HDFS写数据流程（上传文件）"><a href="#HDFS写数据流程（上传文件）" class="headerlink" title="HDFS写数据流程（上传文件）"></a>HDFS写数据流程（上传文件）</h4><h5 id="写数据完整流程图"><a href="#写数据完整流程图" class="headerlink" title="写数据完整流程图"></a>写数据完整流程图</h5><p><img src="/2022/11/12/HadoopBase/2022-11-17-00-25-38.png" alt="写数据完整流程图"></p><h5 id="核心概念—Pipeline管道"><a href="#核心概念—Pipeline管道" class="headerlink" title="核心概念—Pipeline管道"></a>核心概念—Pipeline管道</h5><ul><li><code>Pipeline</code>，中文翻译为管道。这是HDFS在上传文件写数据过程中采用的一种数据传输方式。</li><li>客户端将数据块写入第一个数据节点，第一个数据节点保存数据之后再将块复制到第二个数据节点，后者保存后将其复制到第三个数据节点。</li><li>为什么datanode之间采用pipeline线性传输，而不是一次给三个datanode拓扑式传输呢？</li><li>因为数据以管道的方式，<strong>顺序的沿着一个方向传输，这样能够充分利用每个机器的带宽，避免网络瓶颈和高延迟时的连接，最小化推送所有数据的延时</strong>。</li><li>在线性推送模式下，每台机器所有的出口宽带都用于以最快的速度传输数据，而不是在多个接受者之间分配宽带。</li></ul><h5 id="核心概念—ACK应答响应"><a href="#核心概念—ACK应答响应" class="headerlink" title="核心概念—ACK应答响应"></a>核心概念—ACK应答响应</h5><p><img src="/2022/11/12/HadoopBase/2022-11-17-00-31-42.png" alt="核心概念"></p><ul><li>ACK (Acknowledge character）即是确认字符，在数据通信中，接收方发给发送方的一种传输类控制字符。表示发来的数据已确认接收无误。</li><li>在HDFS pipeline管道传输数据的过程中，传输的反方向会进行ACK校验，确保数据传输安全。</li></ul><h5 id="核心概念—默认3副本存储策略"><a href="#核心概念—默认3副本存储策略" class="headerlink" title="核心概念—默认3副本存储策略"></a>核心概念—默认3副本存储策略</h5><ul><li>默认副本存储策略是由BlockPlacementPolicyDefault指定。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-00-34-22.png" alt="默认3副本存储策略"></li><li>第一块副本：优先客户端本地，否则随机</li><li>第二块副本：不同于第一块副本的不同机架。</li><li>第三块副本：第二块副本相同机架不同机器。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-00-35-49.png" alt="默认3副本存储策略"></li></ul><h5 id="写数据完整流程图文字描述"><a href="#写数据完整流程图文字描述" class="headerlink" title="写数据完整流程图文字描述"></a>写数据完整流程图文字描述</h5><ol><li>HDFS客户端创建对象实例<code>DistributedFileSystem</code>，该对象中封装了与HDFS文件系统操作的相关方法。</li><li>调用DistributedFileSystem对象的create()方法，通过<code>RPC</code>(远程过程调用)请求NameNode创建文件。<br>NameNode执行各种检查判断：目标文件是否存在、父目录是否存在、客户端是否具有创建该文件的权限。检查通过，NameNode就会为本次请求记下一条记录，返回<code>FSDataOutputStream输出流</code>对象给客户端用于写数据。</li><li>客户端通过FSDataOutputStream输出流开始写入数据。</li><li>客户端写入数据时，将数据分成一个个数据包（<strong>packet 默认64k</strong>）,内部组件<code>DataStreamer</code>请求NameNode挑选出适合存储数据副本的一组DataNode地址，默认是3副本存储。<br>DataStreamer将数据包流式传输到<code>pipeline</code>的第一个DataNode,该DataNode存储数据包并将它发送到pipeline的第二个DataNode。同样，第二个DataNode存储数据包并且发送给第三个（也是最后一个）DataNode。</li><li>传输的反方向上，会通过<code>ACK机制</code>校验数据包传输是否成功；</li><li>客户端完成数据写入后，在FSDataOutputStream输出流上调用close()方法关闭。</li><li>DistributedFileSystem联系NameNode告知其文件写入完成，等待NameNode确认。<br>因为namenode已经知道文件由哪些块组成（DataStream请求分配数据块），因此仅需等待最小复制块即可成功返回。<br>最小复制是由参数dfs.namenode.replication.min指定，默认是1.</li></ol><h4 id="HDFS读数据流程（下载文件）"><a href="#HDFS读数据流程（下载文件）" class="headerlink" title="HDFS读数据流程（下载文件）"></a>HDFS读数据流程（下载文件）</h4><h5 id="读数据完整流程图"><a href="#读数据完整流程图" class="headerlink" title="读数据完整流程图"></a>读数据完整流程图</h5><p><img src="/2022/11/12/HadoopBase/2022-11-17-00-46-15.png" alt="读数据完整流程图"></p><ol><li>HDFS客户端创建对象实例<code>DistributedFileSystem</code>，调用该对象的open()方法来打开希望读取的文件。</li><li>DistributedFileSystem使用RPC调用namenode来确定<strong>文件中前几个块的块位置（分批次读取）信息</strong>。<br>对于每个块，namenode返回具有该块所有副本的datanode位置地址列表，并且该地址列表是排序好的，与客户端的网络拓扑距离近的排序靠前。</li><li>DistributedFileSystem将FSDataInputStream输入流返回到客户端以供其读取数据。</li><li>客户端在FSDataInputStream输入流上调用read()方法。然后，已存储DataNode地址的InputStream连接到文件中第一个块的最近的DataNode。数据从DataNode流回客户端，结果客户端可以在流上重复调用read（）。</li><li>当该块结束时，FSDataInputStream将关闭与DataNode的连接，然后寻找下一个block块的最佳datanode位置。这些操作对用户来说是透明的。所以用户感觉起来它一直在读取一个连续的流。<br>客户端从流中读取数据时，也会根据需要询问NameNode来<strong>检索下一批数据块的DataNode位置信息</strong>。</li><li>一旦客户端完成读取，就对FSDataInputStream调用close()方法。</li></ol><h2 id="Hadoop-MapReduce与Hadoop-YARN"><a href="#Hadoop-MapReduce与Hadoop-YARN" class="headerlink" title="Hadoop MapReduce与Hadoop YARN"></a>Hadoop MapReduce与Hadoop YARN</h2><h3 id="Hadoop-MapReduce"><a href="#Hadoop-MapReduce" class="headerlink" title="Hadoop MapReduce"></a>Hadoop MapReduce</h3><h4 id="MapReduce思想"><a href="#MapReduce思想" class="headerlink" title="MapReduce思想"></a>MapReduce思想</h4><blockquote class="pullquote right"><p><img src="/2022/11/12/HadoopBase/2022-11-17-10-15-37.png" alt="分而治之"></p></blockquote><ul><li>MapReduce的思想核心是“<strong>先分再合，分而治之</strong>”。</li><li>所谓“分而治之”就是<strong>把一个复杂的问题，按照一定的“分解”方法分为等价的规模较小的若干部分，然后逐个解决，分别找出各部分的结果，然后把各部分的结果组成整个问题的最终结果</strong>。</li><li>这种思想来源于日常生活与工作时的经验。即使是发布过论文实现分布式计算的谷歌也只是实现了这种思想，而不是自己原创。</li><li>Map表示第一阶段，负责“<strong>拆分</strong>”：即把复杂的任务<strong>分解为若干个“简单的子任务”来并行处理</strong>。可以进行拆分的前提是这些小任务可以并行计算，彼此间几乎<strong>没有依赖关系</strong>。</li><li>Reduce表示第二阶段，负责“<strong>合并</strong>”：即对map阶段的结果进行全局汇总。</li><li>这两个阶段合起来正是MapReduce思想的体现。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-10-17-49.png" alt="apReduce思想"></li><li>一个比较形象的例子解释MapReduce<br>要数停车场中的所有停放车的总数量。<br>你数第一列，我数第二列…这就是Map阶段，人越多，能够同时数车的人就越多，速度就越快。<br>数完之后，聚到一起，把所有人的统计数加在一起。这就是Reduce合并汇总阶段。<br><img src="/2022/11/12/HadoopBase/2022-11-17-10-19-06.png" alt="MapReduce思想"></li></ul><h4 id="Hadoop-MapReduce设计构思"><a href="#Hadoop-MapReduce设计构思" class="headerlink" title="Hadoop MapReduce设计构思"></a>Hadoop MapReduce设计构思</h4><h5 id="（1）如何对付大数据处理场景"><a href="#（1）如何对付大数据处理场景" class="headerlink" title="（1）如何对付大数据处理场景"></a>（1）如何对付大数据处理场景</h5><ul><li>对相互间不具有计算依赖关系的大数据计算任务，实现并行最自然的办法就是<strong>采取MapReduce分而治之</strong>的策略。</li><li>首先Map阶段进行拆分，把大数据拆分成若干份小数据，多个程序同时并行计算产生中间结果；然后是Reduce聚合阶段，通过程序对并行的结果进行最终的汇总计算，得出最终的结果。</li><li><strong>不可拆分的计算任务或相互间有依赖关系的数据无法进行并行计算</strong>！</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-10-24-30.png" alt="MapReduce思想"></li></ul><h5 id="（2）构建抽象编程模型"><a href="#（2）构建抽象编程模型" class="headerlink" title="（2）构建抽象编程模型"></a>（2）构建抽象编程模型</h5><ul><li><p>MapReduce借鉴了<strong>函数式</strong>语言中的思想，用<strong>Map</strong>和<strong>Reduce</strong>两个函数提供了高层的并行编程抽象模型。<br>map: 对一组数据元素进行某种重复式的处理；<br>reduce: 对Map的中间结果进行某种进一步的结果整理。<br><img src="/2022/11/12/HadoopBase/2022-11-17-10-29-25.png" alt="构建抽象编程模型"></p></li><li><p>MapReduce中定义了如下的Map和Reduce两个抽象的编程接口，由用户去编程实现:<br>map: (k1; v1) → (k2; v2)<br>reduce: (k2; [v2]) → (k3; v3)</p></li><li><p>通过以上两个编程接口，大家可以看出MapReduce处理的数据类型是<code>&lt;key,value&gt;键值对</code>。</p></li></ul><h5 id="（3）统一架构、隐藏底层细节"><a href="#（3）统一架构、隐藏底层细节" class="headerlink" title="（3）统一架构、隐藏底层细节"></a>（3）统一架构、隐藏底层细节</h5><ul><li>如何提供统一的计算框架，如果没有统一封装底层细节，那么程序员则需要考虑诸如数据存储、划分、分发、结果收集、错误恢复等诸多细节；为此，MapReduce设计并提供了统一的计算框架，为程序员隐藏了绝大多数系统层面的处理细节。</li><li>MapReduce最大的亮点在于通过抽象模型和计算框架把需要<strong>做什么(what need to do)</strong>与具体<strong>怎么做(how to do)</strong>分开了，为程序员提供一个抽象和高层的编程接口和框架。</li><li><strong>程序员仅需要关心其应用层的具体计算问题，仅需编写少量的处理应用本身计算问题的业务程序代码</strong>。</li><li>至于如何具体完成这个并行计算任务所相关的诸多系统层细节被隐藏起来,交给计算框架去处理：从分布代码的执行，到大到数千小到单个节点集群的自动调度使用。</li></ul><h4 id="Hadoop-MapReduce介绍"><a href="#Hadoop-MapReduce介绍" class="headerlink" title="Hadoop MapReduce介绍"></a>Hadoop MapReduce介绍</h4><h5 id="分布式计算概念"><a href="#分布式计算概念" class="headerlink" title="分布式计算概念"></a>分布式计算概念</h5><ul><li><strong>分布式计算</strong>是一种计算方法，和<strong>集中式计算</strong>是相对的。</li><li>随着计算技术的发展，有些应用需要非常巨大的计算能力才能完成，如果采用集中式计算，需要耗费相当长的时间来完成。</li><li>分布式计算<strong>将该应用分解成许多小的部分，分配给多台计算机进行处理</strong>。这样可以节约整体计算时间，大大提高计算效率。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-10-37-36.png" alt="分布式计算概念"></li></ul><h5 id="Hadoop-MapReduce概述"><a href="#Hadoop-MapReduce概述" class="headerlink" title="Hadoop MapReduce概述"></a>Hadoop MapReduce概述</h5><ul><li>Hadoop MapReduce是一个<strong>分布式计算框架</strong>，用于轻松编写分布式应用程序，这些应用程序以可靠，容错的方式并行处理大型硬件集群（数千个节点）上的大量数据（多TB数据集）。</li><li>MapReduce是一种面向海量数据处理的一种指导思想，也是一种用于对大规模数据进行分布式计算的编程模型。</li></ul><h5 id="MapReduce产生背景"><a href="#MapReduce产生背景" class="headerlink" title="MapReduce产生背景"></a>MapReduce产生背景</h5><ul><li>MapReduce最早由<strong>Google</strong>于2004年在一篇名为《MapReduce:SimplifiedData Processingon Large Clusters》的<strong>论文</strong>中提出。</li><li>论文中谷歌把分布式数据处理的过程拆分为Map和Reduce两个操作函数（受到函数式编程语言的启发），随后被Apache Hadoop参考并作为开源版本提供支持，叫做Hadoop MapReduce。</li><li>它的出现解决了人们在最初面临海量数据束手无策的问题，同时它还是<strong>易于使用和高度可扩展的</strong>，使得开发者无需关系分布式系统底层的复杂性即可很容易的编写分布式数据处理程序，并在成千上万台普通的商用服务器中运行。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-10-51-39.png" alt="MapReduce产生背景"></li></ul><h5 id="MapReduce特点"><a href="#MapReduce特点" class="headerlink" title="MapReduce特点"></a>MapReduce特点</h5><ul><li><p><strong>易于编程</strong><br>Mapreduce框架提供了用于二次开发的接口；简单地实现一些接口，就可以完成一个分布式程序。任务计算交给计算框架去处理，将分布式程序部署到hadoop集群上运行，集群节点可以扩展到成百上千个等。</p></li><li><p><strong>良好的扩展性</strong><br>当计算机资源不能得到满足的时候，可以通过增加机器来扩展它的计算能力。基于MapReduce的分布式计算得特点可以随节点数目增长保持近似于线性的增长，这个特点是MapReduce处理海量数据的关键，通过将计算节点增至几百或者几千可以很容易地处理数百TB甚至PB级别的离线数据。</p></li><li><p><strong>高容错性</strong><br>Hadoop集群是分布式搭建和部署得，任何单一机器节点宕机了，它可以把上面的计算任务转移到另一个节点上运行，不影响整个作业任务得完成，过程完全是由Hadoop内部完成的。</p></li><li><p><strong>适合海量数据的离线处理</strong><br>可以处理GB、TB和PB级别得数据量</p></li></ul><h5 id="MapReduce局限性"><a href="#MapReduce局限性" class="headerlink" title="MapReduce局限性"></a>MapReduce局限性</h5><p>MapReduce虽然有很多的优势，也有相对得局限性，局限性不代表不能做，而是在有些场景下实现的效果比较差，并不适合用MapReduce来处理，主要表现在以下结果方面：</p><ul><li><p><strong>实时计算性能差</strong><br>MapReduce主要应用于离线作业，无法作到秒级或者是亚秒级得数据响应。</p></li><li><p><strong>不能进行流式计算</strong><br>流式计算特点是数据是源源不断得计算，并且数据是动态的；而MapReduce作为一个离线计算框架，主要是针对静态数据集得，数据是不能动态变化得。</p></li></ul><h5 id="MapReduce实例进程"><a href="#MapReduce实例进程" class="headerlink" title="MapReduce实例进程"></a>MapReduce实例进程</h5><p>一个完整的MapReduce程序在分布式运行时有<strong>三类</strong></p><ul><li><code>MRAppMaster</code>：负责整个MR程序的过程调度及状态协调</li><li><code>MapTask</code>：负责map阶段的整个数据处理流程</li><li><code>ReduceTask</code>：负责reduce阶段的整个数据处理流程</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-10-56-12.png" alt="MapReduce实例进程"></li></ul><h5 id="MapReduce阶段组成"><a href="#MapReduce阶段组成" class="headerlink" title="MapReduce阶段组成"></a>MapReduce阶段组成</h5><ul><li>一个MapReduce编程模型中<strong>只能包含一个Map阶段和一个Reduce阶段，或者只有Map阶段</strong>；</li><li>不能有诸如多个map阶段、多个reduce阶段的情景出现；</li><li>如果用户的业务逻辑非常复杂，那就只能多个MapReduce程序串行运行。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-10-57-30.png" alt="阶段组成"></li></ul><h5 id="MapReduce数据类型"><a href="#MapReduce数据类型" class="headerlink" title="MapReduce数据类型"></a>MapReduce数据类型</h5><ul><li>注意：整个MapReduce程序中，数据都是以<strong>kv键值对的形式流转</strong>的；</li><li>在实际编程解决各种业务问题中，需要考虑每个阶段的输入输出kv分别是什么；</li><li>MapReduce内置了很多默认属性，比如排序、分组等，都和数据的k有关，所以说kv的类型数据确定及其重要的</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-10-58-42.png" alt="MapReduce数据类型"></li></ul><h4 id="Hadoop-MapReduce官方示例"><a href="#Hadoop-MapReduce官方示例" class="headerlink" title="Hadoop MapReduce官方示例"></a>Hadoop MapReduce官方示例</h4><ul><li>一个最终完整版本的MR程序需要<strong>用户编写的代码</strong>和<strong>Hadoop自己实现的代码</strong>整合在一起才可以；</li><li>其中用户负责map、reduce两个阶段的业务问题，Hadoop负责底层所有的技术问题；</li><li>由于MapReduce计算引擎天生的弊端（慢），当下企业中直接使用率已经日薄西山了，所以在<strong>企业中工作很少涉及到MapReduce直接编程</strong>，但是某些软件的背后还依赖MapReduce引擎。</li><li>可以通过官方提供的示例来<strong>感受MapReduce及其内部执行流程</strong>，因为后续的新的计算引擎比如Spark，当中就有MapReduce深深的影子存在。</li></ul><h5 id="MapReduce示例说明"><a href="#MapReduce示例说明" class="headerlink" title="MapReduce示例说明"></a>MapReduce示例说明</h5><ul><li>示例程序路径：<code>$HADOOP_HOME/share/hadoop/mapreduce/</code></li><li>示例程序：hadoop-mapreduce-examples-3.3.0.jar</li><li>MapReduce程序提交命令：<code>[hadoop jar|yarn jar] hadoop-mapreduce-examples-3.3.0.jar args…</code></li><li>提交到哪里去？<strong>提交到YARN集群上分布式执行</strong>。</li></ul><h5 id="评估圆周率π（PI）的值"><a href="#评估圆周率π（PI）的值" class="headerlink" title="评估圆周率π（PI）的值"></a>评估圆周率π（PI）的值</h5><p>Hadoop MapReduce示例提供了Monte Carlo方法计算圆周率。</p><h6 id="Monte-Carlo方法"><a href="#Monte-Carlo方法" class="headerlink" title="Monte Carlo方法"></a>Monte Carlo方法</h6><blockquote class="pullquote right"><p><img src="/2022/11/12/HadoopBase/2022-11-17-22-42-30.png" alt="评估圆周率π（PI）的值"></p></blockquote><p>假设正方形边长为1，圆半径也为1，那么1/4圆的面积为：$\frac{1}{4} \pi r^2$</p><p>在正方形内随机撒点，分布于1/4圆内的数量假设为a ，分布于圆外的数量为b，N则是所产生的总数：$N=a+b$</p><p>那么数量a与N的比值应与1/4圆面积及正方形面积成正比，于是：$\frac{\pi}{4}:1=a:N$</p><script type="math/tex; mode=display">\pi = \frac{4a}{N}</script><h6 id="评估圆周率π参数设置"><a href="#评估圆周率π参数设置" class="headerlink" title="评估圆周率π参数设置"></a>评估圆周率π参数设置</h6><p>运行MapReduce程序评估一下圆周率的值，执行中可以去YARN页面上观察程序的执行的情况。</p><ul><li>第一个参数：pi表示MapReduce程序执行圆周率计算任务；</li><li>第二个参数：用于指定map阶段运行的任务task次数，并发度，这里是10；</li><li>第三个参数：用于指定每个map任务取样的个数，这里是50。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar hadoop-mapreduce-examples-3.3.0.jar pi 10 50</span><br></pre></td></tr></table></figure><h5 id="wordcount单词词频统计"><a href="#wordcount单词词频统计" class="headerlink" title="wordcount单词词频统计"></a>wordcount单词词频统计</h5><details class="toggle"><summary class="toggle-button" style>1.txt</summary><div class="toggle-content"><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hello tom hello allen hello</span><br><span class="line">allen tom mac apple</span><br><span class="line">hello allen apple</span><br><span class="line">hello apple spark allen hadoop spark</span><br></pre></td></tr></table></figure></div></details><p>WordCount中文叫做单词统计、词频统计；<br>指的是统计指定文件中，每个<strong>单词出现的总次数</strong>。</p><h6 id="WordCount概述"><a href="#WordCount概述" class="headerlink" title="WordCount概述"></a>WordCount概述</h6><p>WordCount算是大数据计算领域经典的入门案例，相当于Hello World。</p><p>虽然WordCount业务极其简单，但关键是能够通过案例<strong>感受背后MapReduce的执行流程和默认的行为机制</strong>。</p><p><img src="/2022/11/12/HadoopBase/2022-11-17-22-49-46.png" alt="WordCount"></p><h6 id="WordCount编程实现思路"><a href="#WordCount编程实现思路" class="headerlink" title="WordCount编程实现思路"></a>WordCount编程实现思路</h6><ul><li>map阶段的核心：把输入的<strong>数据经过切割，全部标记1</strong>，因此输出就是&lt;单词，1&gt;。</li><li><strong>shuffle阶段核心：经过MR程序内部自带默认的排序分组等功能，把key相同的单词会作为一组数据构成新的kv对</strong>。</li><li>reduce阶段核心：处理shuffle完的一组数据，该组数据就是该单词所有的键值对。对所有的1进行累加求和，就是单词的总次数。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-22-51-54.png" alt="WordCount"></li></ul><h6 id="WordCount程序提交"><a href="#WordCount程序提交" class="headerlink" title="WordCount程序提交"></a>WordCount程序提交</h6><ul><li><p>上传文本文件1.txt(写入一些单词)到HDFS文件系统的/input目录下，如果没有这个目录，使用shell创建<br><code>hadoop fs -mkdir /input</code><br><code>hadoop fs -put 1.txt /input</code></p></li><li><p>执行官方MapReduce实例，对上述文件进行单词次数统计<br>第一个参数：wordcount表示执行单词统计任务；<br>第二个参数：指定输入文件的路径；<br>第三个参数：指定输出结果的路径（该路径不能已存在）；</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar hadoop-mapreduce-examples-3.3.0.jar wordcount /input /output</span><br></pre></td></tr></table></figure><h4 id="Map阶段执行流程"><a href="#Map阶段执行流程" class="headerlink" title="Map阶段执行流程"></a>Map阶段执行流程</h4><h5 id="WordCount执行流程图"><a href="#WordCount执行流程图" class="headerlink" title="WordCount执行流程图"></a>WordCount执行流程图</h5><p><img src="/2022/11/12/HadoopBase/2022-11-17-22-51-54.png" alt="WordCount"></p><h5 id="MapReduce整体执行流程图"><a href="#MapReduce整体执行流程图" class="headerlink" title="MapReduce整体执行流程图"></a>MapReduce整体执行流程图</h5><p><img src="/2022/11/12/HadoopBase/2022-11-17-23-04-23.png" alt="MapReduce整体执行流程图"></p><h5 id="Map阶段执行过程"><a href="#Map阶段执行过程" class="headerlink" title="Map阶段执行过程"></a>Map阶段执行过程</h5><blockquote class="pullquote right"><p><img src="/2022/11/12/HadoopBase/2022-11-17-23-05-01.png" alt="Map阶段执行过程"></p></blockquote><ul><li><p>第一阶段：把输入目录下文件按照一定的标准逐个进行<strong>逻辑切片</strong>，形成切片规划。<br>默认Split size = Block size（128M），每一个切片由一个MapTask处理。（getSplits）</p></li><li><p>第二阶段：对切片中的数据按照一定的规则读取解析返回<key,value>对。<br>默认是<strong>按行读取数据</strong>。key是每一行的起始位置偏移量，value是本行的文本内容。（TextInputFormat）</key,value></p></li><li><p>第三阶段：调用Mapper类中的<strong>map方法处理数据</strong>。<br>每读取解析出来的一个<key,value> ，调用一次map方法。</key,value></p></li><li><p>第四阶段：按照一定的规则对Map输出的键值对进行<strong>分区partition</strong>。默认不分区，因为只有一个reducetask。<br>分区的数量就是reducetask运行的数量。</p></li><li><p>第五阶段：Map输出数据写入<strong>内存缓冲区</strong>，达到比例溢出到磁盘上。<strong>溢出spill</strong>的时候根据key进行<strong>排序sort</strong>。<br>默认根据key字典序排序。</p></li><li><p>第六阶段：对所有溢出文件进行最终的<strong>merge合并</strong>，成为一个文件。</p></li></ul><h4 id="Reduce阶段执行流程"><a href="#Reduce阶段执行流程" class="headerlink" title="Reduce阶段执行流程"></a>Reduce阶段执行流程</h4><ul><li>第一阶段：ReduceTask会主动从MapTask<strong>复制拉取</strong>属于需要自己处理的数据。</li><li>第二阶段：把拉取来数据，全部进行<strong>合并merge</strong>，即把分散的数据合并成一个大的数据。再对合并后的数据<strong>排序</strong>。</li><li>第三阶段是对排序后的键值对<strong>调用reduce方法</strong>。<strong>键相等</strong>的键值对调用一次reduce方法。最后把这些输出的键值对写入到HDFS文件中。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-23-16-08.png" alt="Reduce阶段执行流程"></li></ul><h4 id="Shuffle机制"><a href="#Shuffle机制" class="headerlink" title="Shuffle机制"></a>Shuffle机制</h4><h5 id="shuffle概念"><a href="#shuffle概念" class="headerlink" title="shuffle概念"></a>shuffle概念</h5><ul><li><code>Shuffle</code>的本意是洗牌、混洗的意思，把一组有规则的数据尽量打乱成无规则的数据。</li><li>而在MapReduce中，Shuffle更像是洗牌的<strong>逆</strong>过程，指的是<strong>将map端的无规则输出按指定的规则“打乱”成具有一定规则的数据，以便reduce端接收处理</strong>。</li><li><strong>一般把从Map产生输出开始到Reduce取得数据作为输入之前的过程称作shuffle</strong>。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-23-56-07.png" alt="shuffle概念"></li></ul><h5 id="Map端Shuffle"><a href="#Map端Shuffle" class="headerlink" title="Map端Shuffle"></a>Map端Shuffle</h5><ul><li>Collect阶段：将MapTask的结果收集输出到默认大小为100M的环形缓冲区，保存之前会对key进行分区的计算，默认Hash分区。</li><li>Spill阶段：当内存中的数据量达到一定的阀值的时候，就会将数据写入本地磁盘，在将数据写入磁盘之前需要对数据进行一次排序的操作，如果配置了combiner，还会将有相同分区号和key的数据进行排序。</li><li>Merge阶段：把所有溢出的临时文件进行一次合并操作，以确保一个MapTask最终只产生一个中间数据文件。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-23-57-34.png" alt="Map端Shuffle"></li></ul><h5 id="Reducer端shuffle"><a href="#Reducer端shuffle" class="headerlink" title="Reducer端shuffle"></a>Reducer端shuffle</h5><ul><li>Copy阶段：ReduceTask启动Fetcher线程到已经完成MapTask的节点上复制一份属于自己的数据。</li><li>Merge阶段：在ReduceTask远程复制数据的同时，会在后台开启两个线程对内存到本地的数据文件进行合并操作。</li><li>Sort阶段：在对数据进行合并的同时，会进行排序操作，由于MapTask阶段已经对数据进行了局部的排序，ReduceTask只需保证Copy的数据的最终整体有效性即可。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-23-58-30.png" alt="Reducer端shuffle"></li></ul><h5 id="shuffle机制弊端"><a href="#shuffle机制弊端" class="headerlink" title="shuffle机制弊端"></a>shuffle机制弊端</h5><ul><li>Shuffle是MapReduce程序的核心与精髓，是MapReduce的灵魂所在。</li><li>Shuffle也是MapReduce被诟病最多的地方所在。MapReduce相比较于Spark、Flink计算引擎慢的原因，跟Shuffle机制有很大的关系。</li><li>Shuffle中<strong>频繁涉及到数据在内存、磁盘之间的多次往复</strong>。</li></ul><h3 id="Hadoop-YARN"><a href="#Hadoop-YARN" class="headerlink" title="Hadoop YARN"></a>Hadoop YARN</h3><h4 id="Hadoop-YARN介绍"><a href="#Hadoop-YARN介绍" class="headerlink" title="Hadoop YARN介绍"></a>Hadoop YARN介绍</h4><h5 id="YARN简介"><a href="#YARN简介" class="headerlink" title="YARN简介"></a>YARN简介</h5><ul><li>Apache Hadoop YARN （Yet Another Resource Negotiator，另一种资源协调者）是一种新的Hadoop资源管理器。</li><li>YARN是一个<code>通用</code><strong>资源管理系统</strong>和<strong>调度平台</strong>，可为上层应用提供统一的资源管理和调度。</li><li>它的引入为集群在利用率、资源统一管理和数据共享等方面带来了巨大好处。</li><li><img src="/2022/11/12/HadoopBase/2022-11-18-00-02-20.png" alt="YARN简介"></li></ul><h5 id="YARN功能说明"><a href="#YARN功能说明" class="headerlink" title="YARN功能说明"></a>YARN功能说明</h5><ul><li><strong>资源管理系统</strong>：集群的硬件资源，和程序运行相关，比如内存、CPU等。</li><li><strong>调度平台</strong>：多个程序同时申请计算资源如何分配，调度的规则（算法）。</li><li><strong>通用</strong>：不仅仅支持MapReduce程序，理论上<strong>支持各种计算程序</strong>。YARN不关心你干什么，只关心你要资源，在有的情况下给你，用完之后还我。</li></ul><h5 id="YARN概述"><a href="#YARN概述" class="headerlink" title="YARN概述"></a>YARN概述</h5><ul><li>可以把Hadoop YARN理解为相当于一个分布式的操作系统平台，而MapReduce等计算程序则相当于运行于操作系统之上的应用程序，<strong>YARN为这些程序提供运算所需的资源</strong>（内存、CPU等）。</li><li>Hadoop能有今天这个地位，YARN可以说是功不可没。因为有了YARN ，更多计算框架可以接入到HDFS中，而不单单是MapReduce，<strong>正是因为YARN的包容，使得其他计算框架能专注于计算性能的提升</strong>。</li><li>HDFS可能不是最优秀的大数据存储系统，但却是应用最广泛的大数据存储系统，YARN功不可没。</li></ul><h4 id="Hadoop-YARN架构、组件"><a href="#Hadoop-YARN架构、组件" class="headerlink" title="Hadoop YARN架构、组件"></a>Hadoop YARN架构、组件</h4><h5 id="YARN官方架构图"><a href="#YARN官方架构图" class="headerlink" title="YARN官方架构图"></a>YARN官方架构图</h5><p><img src="/2022/11/12/HadoopBase/2022-11-18-00-05-28.png" alt="YARN官方架构图"></p><h5 id="官方架构图中出现的概念"><a href="#官方架构图中出现的概念" class="headerlink" title="官方架构图中出现的概念"></a>官方架构图中出现的概念</h5><ul><li><img src="/2022/11/12/HadoopBase/2022-11-18-00-06-43.png" alt="官方架构图中出现的概念"></li><li>Client</li><li>Container容器（资源的抽象）</li></ul><h5 id="YARN3大组件"><a href="#YARN3大组件" class="headerlink" title="YARN3大组件"></a>YARN3大组件</h5><ul><li><p><strong>ResourceManager（RM）</strong><br>YARN集群中的主角色，决定系统中所有应用程序之间<strong>资源分配的最终权限，即最终仲裁者</strong>。<br>接收用户的作业提交，并通过NM分配、管理各个机器上的计算资源。</p></li><li><p><strong>NodeManager（NM）</strong><br>YARN中的从角色，一台机器上一个，负责<strong>管理本机器上的计算资源</strong>。<br>根据RM命令，启动Container容器、监视容器的资源使用情况。并且向RM主角色汇报资源使用情况。</p></li><li><p><strong>ApplicationMaster（AM）</strong><br>用户提交的每个应用程序均包含一个AM。<br><strong>应用程序内的“老大”</strong>，负责程序内部各阶段的资源申请，监督程序的执行情况。</p></li></ul><h4 id="程序提交YARN交互流程"><a href="#程序提交YARN交互流程" class="headerlink" title="程序提交YARN交互流程"></a>程序提交YARN交互流程</h4><h5 id="核心交互流程"><a href="#核心交互流程" class="headerlink" title="核心交互流程"></a>核心交互流程</h5><ul><li>MR作业提交Client—&gt;RM</li><li>资源的申请MrAppMaster—&gt;RM</li><li>MR作业状态汇报Container（Map|Reduce Task）—&gt;Container（MrAppMaster）</li><li>节点的状态汇报NM—&gt;RM</li></ul><h5 id="交互流程概述"><a href="#交互流程概述" class="headerlink" title="交互流程概述"></a>交互流程概述</h5><p>当用户向YARN 中提交一个应用程序后，YARN将分两个阶段运行该应用程序。</p><ul><li>第一个阶段是<strong>客户端申请资源启动运行本次程序的ApplicationMaster</strong>；</li><li>第二个阶段是由<strong>ApplicationMaster根据本次程序内部具体情况，为它申请资源，并监控它的整个运行过程</strong>，直到运行完成。</li></ul><h5 id="MR提交YARN交互流程"><a href="#MR提交YARN交互流程" class="headerlink" title="MR提交YARN交互流程"></a>MR提交YARN交互流程</h5><ul><li>第1步、用户通过客户端向YARN中ResourceManager提交应用程序（比如hadoop jar提交MR程序）。</li><li>第2步、ResourceManager为该应用程序分配第一个Container（容器），并与对应的NodeManager通信，要求它在这个Container中启动这个应用程序的ApplicationMaster。</li><li>第3步、ApplicationMaster启动成功之后，首先向ResourceManager注册并保持通信，这样用户可以直接通过ResourceManage查看应用程序的运行状态（处理了百分之几）。</li><li>第4步、AM为本次程序内部的各个Task任务向RM申请资源，并监控它的运行状态。</li></ul><p><img src="/2022/11/12/HadoopBase/2022-11-18-00-15-11.png" alt="YARN核心交互流程"></p><ul><li>第5步、一旦ApplicationMaster 申请到资源后，便与对应的NodeManager 通信，要求它启动任务。</li><li>第6步、NodeManager 为任务设置好运行环境后，将任务启动命令写到一个脚本中，并通过运行该脚本启动任务。</li><li>第7步、各个任务通过某个RPC 协议向ApplicationMaster 汇报自己的状态和进度，以让ApplicationMaster 随时掌握各个任务的运行状态，从而可以在任务失败时重新启动任务。在应用程序运行过程中，用户可随时通过RPC 向ApplicationMaster 查询应用程序的当前运行状态。</li><li>第8步、应用程序运行完成后，ApplicationMaster 向ResourceManager 注销并关闭自己。</li></ul><h4 id="YARN资源调度器Scheduler"><a href="#YARN资源调度器Scheduler" class="headerlink" title="YARN资源调度器Scheduler"></a>YARN资源调度器Scheduler</h4><h5 id="MR程序提交YARN交互流程"><a href="#MR程序提交YARN交互流程" class="headerlink" title="MR程序提交YARN交互流程"></a>MR程序提交YARN交互流程</h5><p><img src="/2022/11/12/HadoopBase/2022-11-18-00-24-33.png" alt="YARN资源调度器Scheduler"></p><h5 id="如何理解资源调度"><a href="#如何理解资源调度" class="headerlink" title="如何理解资源调度"></a>如何理解资源调度</h5><ul><li>在理想情况下，应用程序提出的请求将立即得到YARN批准。但是实际中，<strong>资源是有限的</strong>，并且在<strong>繁忙的群集上</strong>，应用程序通常将需要等待其某些请求得到满足。YARN调度程序的工作是<strong>根据一些定义的策略为应用程序分配资源</strong>。</li><li>在YARN中，负责给应用分配资源的就是<code>Scheduler</code>，它是ResourceManager的核心组件之一。Scheduler完全专用于调度作业，它无法跟踪应用程序的状态。</li><li>一般而言，调度是一个难题，并且没有一个“最佳”策略，为此，YARN提供了多种调度器和可配置的策略供选择。</li></ul><h5 id="调度器策略"><a href="#调度器策略" class="headerlink" title="调度器策略"></a>调度器策略</h5><ul><li><p>三种调度器<br><code>FIFO Scheduler</code>（先进先出调度器）、<code>Capacity Scheduler</code>（容量调度器）、<code>Fair Scheduler</code>（公平调度器）。</p></li><li><p>Apache版本YARN默认使用<code>Capacity Scheduler</code>。</p></li><li>如果需要使用其他的调度器，可以在yarn-site.xml中的yarn.resourcemanager.scheduler.class进行配置。</li><li><img src="/2022/11/12/HadoopBase/2022-11-18-00-27-16.png" alt="三种调度器"></li></ul><div class="tabs" id="diaoduqi"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#diaoduqi-1"><b>FIFO Scheduler</b></button></li><li class="tab"><button type="button" data-href="#diaoduqi-2"><b>Capacity Scheduler</b></button></li><li class="tab"><button type="button" data-href="#diaoduqi-3"><b>Fair Scheduler</b></button></li></ul><div class="tab-contents"><div class="tab-item-content" id="diaoduqi-1"><p><mark class="hl-label green">FIFO&nbsp;Scheduler概述</mark> </p><p><img src="/2022/11/12/HadoopBase/2022-11-18-00-28-28.png" alt="FIFO Schedule"></p><ul><li><code>FIFO Scheduler</code>是Hadoop1.x中JobTracker原有的调度器实现，此调度器在YARN中保留了下来。</li><li>FIFO Scheduler是一个<strong>先进先出</strong>的思想，即<strong>先提交的应用先运行</strong>。调度工作不考虑优先级和范围，适用于负载较低的小规模集群。当使用大型共享集群时，它的效率较低且会导致一些问题。</li><li>FIFO Scheduler拥有一个控制全局的队列queue，默认queue名称为default，该调度器会获取当前集群上所有的资源信息作用于这个全局的queue。</li></ul><p><mark class="hl-label green">FIFO&nbsp;Scheduler优势、坏处</mark> </p><ul><li><p>优势：<br>无需配置、先到先得、易于执行</p></li><li><p>坏处：<br>任务的优先级不会变高，因此高优先级的作业需要等待<br>不适合共享集群</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="diaoduqi-2"><p><mark class="hl-label green">Capacity&nbsp;Scheduler概述</mark> </p><p><img src="/2022/11/12/HadoopBase/2022-11-18-00-34-07.png" alt="Capacity Scheduler"></p><ul><li>Capacity Scheduler容量调度是<strong>Apache Hadoop3.x默认调度策略</strong>。该策略允许<strong>多个组织共享整个集群资源</strong>，每个组织可以获得集群的一部分计算能力。<strong>通过为每个组织分配专门的队列，然后再为每个队列分配一定的集群资源</strong>，这样整个集群就可以通过设置多个队列的方式给多个组织提供服务了。</li><li>Capacity可以理解成一个个的资源队列，这个资源队列是用户自己去分配的。队列内部又可以垂直划分，这样一个组织内部的多个成员就可以共享这个队列资源了，在一个队列内部，资源的调度是采用的是先进先出(FIFO)策略。</li></ul><p><mark class="hl-label green">Capacity&nbsp;Scheduler资源队列划分</mark> </p><p>Capacity Scheduler调度器以队列为单位划分资源。简单通俗点来说，就是一个个队列有独立的资源，队列的结构和资源是可以进行配置的。</p><p><img src="/2022/11/12/HadoopBase/2022-11-18-00-35-41.png" alt="Capacity Scheduler资源队列划分"></p><p><mark class="hl-label green">Capacity&nbsp;Scheduler特性优势</mark> </p><ul><li><p><strong>层次化的队列设计</strong>（Hierarchical Queues）<br>层次化的管理，可以更容易、更合理分配和限制资源的使用。</p></li><li><p><strong>容量保证</strong>（Capacity Guarantees）<br>每个队列上都可以设置一个资源的占比，保证每个队列都不会占用整个集群的资源。</p></li><li><p><strong>安全</strong>（Security）<br>每个队列有严格的访问控制。用户只能向自己的队列里面提交任务，而且不能修改或者访问其他队列的任务。</p></li><li><p><strong>弹性分配</strong>（Elasticity）<br>空闲的资源可以被分配给任何队列。<br>当多个队列出现争用的时候，则会按照权重比例进行平衡。</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="diaoduqi-3"><p><mark class="hl-label green">Fair&nbsp;Scheduler概述</mark> </p><p><img src="/2022/11/12/HadoopBase/2022-11-18-00-38-13.png" alt="Fair Scheduler概述"></p><ul><li><strong>Fair Scheduler叫做公平调度</strong>，提供了YARN应用程序<strong>公平地共享大型集群中资源</strong>的另一种方式。使所有应用在平均情况下随着时间的流逝可以获得相等的资源份额。</li><li>Fair Scheduler设计目标是为所有的应用分配公平的资源（对公平的定义通过参数来设置）。</li><li>公平调度可以在多个队列间工作，允许资源共享和抢占。</li></ul><p><mark class="hl-label green">如何理解公平共享</mark> </p><ul><li>有两个用户A和B，每个用户都有自己的队列。</li><li>A启动一个作业，由于没有B的需求，它分配了集群所有可用的资源。</li><li>然后B在A的作业仍在运行时启动了一个作业，经过一段时间，A,B各自作业都使用了一半的资源。</li><li>现在，如果B用户在其他作业仍在运行时开始第二个作业，它将与B的另一个作业共享其资源，因此B的每个作业将拥有资源的四分之一，而A的继续将拥有一半的资源。结果是资源在用户之间公平地共享。</li></ul><p><mark class="hl-label green">Fair&nbsp;特性优势</mark> </p><ul><li><strong>分层队列</strong>：队列可以按层次结构排列以划分资源，并可以配置权重以按特定比例共享集群。</li><li><strong>基于用户或组的队列映射</strong>：可以根据提交任务的用户名或组来分配队列。如果任务指定了一个队列,则在该队列中提交任务。</li><li><strong>资源抢占</strong>：根据应用的配置，抢占和分配资源可以是友好的或是强制的。默认不启用资源抢占。</li><li><strong>保证最小配额</strong>：可以设置队列最小资源，允许将保证的最小份额分配给队列，保证用户可以启动任务。当队列不能满足最小资源时,可以从其它队列抢占。当队列资源使用不完时,可以给其它队列使用。这对于确保某些用户、组或生产应用始终获得足够的资源。</li><li><strong>允许资源共享</strong>：即当一个应用运行时,如果其它队列没有任务执行,则可以使用其它队列,当其它队列有应用需要资源时再将占用的队列释放出来。所有的应用都从资源队列中分配资源。</li><li><strong>默认不限制每个队列和用户可以同时运行应用的数量</strong>。可以配置来限制队列和用户并行执行的应用数量。限制并行执行应用数量不会导致任务提交失败,超出的应用会在队列中等待。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="数据仓库基础与Apache-Hive入门"><a href="#数据仓库基础与Apache-Hive入门" class="headerlink" title="数据仓库基础与Apache Hive入门"></a>数据仓库基础与Apache Hive入门</h2><h3 id="数据仓库基本概念"><a href="#数据仓库基本概念" class="headerlink" title="数据仓库基本概念"></a>数据仓库基本概念</h3><h4 id="数据仓库概念"><a href="#数据仓库概念" class="headerlink" title="数据仓库概念"></a>数据仓库概念</h4><h5 id="数仓概念"><a href="#数仓概念" class="headerlink" title="数仓概念"></a>数仓概念</h5><ul><li>数据仓库（Data Warehouse，简称<strong>数仓、DW</strong>）,是一个<strong>用于存储、分析、报告的数据系统</strong>。</li><li>数据仓库的目的是构建<strong>面向分析</strong>的集成化数据环境，分析结果为企业提供决策支持（Decision Support）。</li><li><img src="/2022/11/12/HadoopBase/2023-01-10-17-23-10.png" alt="数仓"></li></ul><div class="note red icon-padding modern"><i class="note-icon fas fa-question"></i><p>1.假如你现在手里有2000w,当下的时间点去投资口罩生产，你做不做？能不能赚钱？<br>2.假如你是公司营销总监，是否愿意招聘女主播进行短视频带货直播销售？</p></div><h5 id="数仓专注分析"><a href="#数仓专注分析" class="headerlink" title="数仓专注分析"></a>数仓专注分析</h5><ul><li>数据仓库<strong>本身并不“生产”任何数据</strong>，其数据来源于不同外部系统；</li><li>同时数据仓库自身<strong>也不需要“消费”任何的数据</strong>，其结果开放给各个外部应用使用；</li><li>这也是为什么叫“仓库”，而不叫“工厂”的原因。</li><li><img src="/2022/11/12/HadoopBase/2023-01-10-17-31-34.png" alt="数仓专注分析"></li></ul><h4 id="场景案例：数据仓库为何而来"><a href="#场景案例：数据仓库为何而来" class="headerlink" title="场景案例：数据仓库为何而来"></a>场景案例：数据仓库为何而来</h4><div class="note info modern"><p>数仓<strong>为了分析数据而来</strong>，分析结果给企业决策提供支撑。</p></div><p>下面以中国人寿保险公司（chinalife）发展为例，阐述数据仓库为何而来。<br><strong>1.业务数据存储问题</strong></p><ul><li>中国人寿保险（集团）公司下辖多条业务线，包括：人寿险、财险、车险，养老险等。各业务线的业务正常运营需要记录维护包括客户、保单、收付费、核保、理赔等信息。这么多<strong>业务数据存储在哪里呢</strong>？</li><li><mark class="hl-label red">联机事务处理系统（OLTP）</mark> 正好可以满足上述业务需求开展, 其主要任务是执行联机事务处理。其基本特征是<strong>前台接收的用户数据可以立即传送到后台进行处理，并在很短的时间内给出处理结果</strong>。</li><li><mark class="hl-label red">关系型数据库（RDBMS）是OLTP典型应用</mark> ，比如：Oracle、MySQL、SQL Server等。</li><li><img src="/2022/11/12/HadoopBase/2023-01-10-17-36-36.png" alt="人寿例子"></li></ul><p><strong>2.分析型决策的制定</strong><br>随着集团业务的持续运营，<strong>业务数据将会越来越多</strong>。由此也产生出许多运营相关的困惑：</p><ul><li>能够确定哪些险种正在恶化或已成为不良险种？</li><li>能够用有效的方式制定新增和续保的政策吗？</li><li>理赔过程有欺诈的可能吗？</li><li>现在得到的报表是否只是某条业务线的？集团整体层面数据如何？</li></ul><p>为了能够正确认识这些问题，制定相关的解决措施，瞎拍桌子是肯定不行的。<br>最稳妥办法就是：<strong>基于业务数据开展数据分析，基于分析的结果给决策提供支撑</strong>。也就是所谓的数据驱动决策的制定。</p><h5 id="OLTP环境开展分析可行吗？"><a href="#OLTP环境开展分析可行吗？" class="headerlink" title="OLTP环境开展分析可行吗？"></a>OLTP环境开展分析可行吗？</h5><p><strong>可以，但是没必要</strong>!</p><p>OLTP系统的核心是面向业务，支持业务，支持事务。所有的业务操作可以分为读、写两种操作，一般来说<strong>读的压力明显大于写的压力</strong>。如果在OLTP环境直接开展各种分析，有以下问题需要考虑：</p><ul><li>数据分析也是对数据进行读取操作，<strong>会让读取压力倍增</strong>；</li><li>OLTP<strong>仅存储数周或数月的数据</strong>；</li><li><strong>数据分散</strong>在不同系统不同表中，字段类型属性不统一；</li></ul><h5 id="数据仓库面世"><a href="#数据仓库面世" class="headerlink" title="数据仓库面世"></a>数据仓库面世</h5><ul><li>当分析所涉及数据规模较小的时候，在业务低峰期时可以在OLTP系统上开展直接分析。</li><li>但<strong>为了更好的进行各种规模的数据分析，同时也不影响OLTP系统运行，此时需要构建一个集成统一的数据分析平台</strong>。该平台的目的很简单：<strong>面向分析，支持分析</strong>，并且和OLTP系统解耦合。</li><li>基于这种需求，数据仓库的雏形开始在企业中出现了。</li></ul><h5 id="数据仓库的构建"><a href="#数据仓库的构建" class="headerlink" title="数据仓库的构建"></a>数据仓库的构建</h5><ul><li>就如数仓定义所说,<strong>数仓是一个用于存储、分析、报告的数据系统</strong>，目的是<strong>构建面向分析的集成化数据环境</strong>。我们把这种<strong>面向分析、支持分析的系统</strong>称之为<mark class="hl-label red">OLAP（联机分析处理）系统</mark> 。当然，数据仓库是OLAP系统的一种实现。</li><li>中国人寿保险公司就可以基于分析决策需求，构建数仓平台。</li><li><img src="/2022/11/12/HadoopBase/2023-01-10-17-46-08.png" alt="数仓构建"></li></ul><h4 id="数据仓库主要特征"><a href="#数据仓库主要特征" class="headerlink" title="数据仓库主要特征"></a>数据仓库主要特征</h4><p><img src="/2022/11/12/HadoopBase/2023-01-10-17-47-19.png" alt="数据仓库主要特征"></p><p>1.<strong>面向主题性(Subject-Oriented)</strong></p><ul><li>主题是一个抽象的概念，是较高层次上企业信息系统中的<strong>数据综合、归类</strong>并进行分析利用的抽象。在逻辑意义上，它是对应企业中某一宏观分析领域所涉及的分析对象。</li><li>传统OLTP系统对数据的划分并不适用于决策分析。而基于主题组织的数据则不同，它们被划分为各自独立的领域，每个领域有各自的逻辑内涵但互不交叉，在<strong>抽象层次上对数据进行完整、一致和准确的描述</strong>。</li></ul><p>2.<strong>集成性(Integrated)</strong></p><ul><li>主题相关的<strong>数据通常会分布在多个操作型系统中，彼此分散、独立、异构</strong>。</li><li>因此在数据进入数据仓库之前，必然要经过<strong>统一与综合，对数据进行抽取、清理、转换和汇总</strong>，这一步是数据仓库建设中最关键、最复杂的一步，需要完成的工作有：<ul><li>要<strong>统一源数据中所有矛盾之处</strong>；<br>如字段的同名异义、异名同义、单位不统一、字长不一致等等。</li><li>进行<strong>数据综合和计算</strong>。<br>数据仓库中的数据综合工作可以在从原有数据库抽取数据时生成，但许多是在数据仓库内部生成的，即进入数据仓库以后进行综合生成的。</li></ul></li><li>下图说明了保险公司综合数据的简单处理过程，其中数据仓库中与“承保”主题有关的数据来自于多个不同的操作型系统。</li><li>这些系统内部数据的命名可能不同，数据格式也可能不同。把不同来源的数据存储到数据仓库之前，需要去除这些不一致。<br><img src="/2022/11/12/HadoopBase/2023-01-10-17-55-35.png" alt="集成性说明"></li></ul><p>3.<strong>非易失性、非异变性(Non-Volatile)</strong></p><ul><li><strong>数据仓库是分析数据的平台，而不是创造数据的平台</strong>。我们是通过数仓去分析数据中的规律，而不是去创造修改其中的规律。因此数据进入数据仓库后，它便稳定且不会改变。</li><li><strong>数据仓库的数据反映的是一段相当长的时间内历史数据的内容</strong>，数据仓库的用户对数据的操作大多是数据查询或比较复杂的挖掘，一旦数据进入数据仓库以后，一般情况下被较长时间保留。</li><li><strong>数据仓库中一般有*</strong>大量的查询操作<em>，<em>*但修改和删除操作很少。</em></em></li></ul><p>4.<strong>时变性(Time-Variant)</strong></p><ul><li>数据仓库包含各种粒度的<strong>历史数据</strong>，数据可能与某个特定日期、星期、月份、季度或者年份有关。</li><li>当业务变化后会失去时效性。因此数据仓库的<strong>数据需要随着时间更新，以适应决策的需要</strong>。</li><li>从这个角度讲，数据仓库建设是一个项目，更是一个过程。</li></ul><h4 id="数据仓库主流开发语言—SQL"><a href="#数据仓库主流开发语言—SQL" class="headerlink" title="数据仓库主流开发语言—SQL"></a>数据仓库主流开发语言—SQL</h4><h5 id="数仓开发语言概述"><a href="#数仓开发语言概述" class="headerlink" title="数仓开发语言概述"></a>数仓开发语言概述</h5><ul><li>数仓作为面向分析的数据平台，其主职工作就是对存储在其中的数据开展分析，那么如何读取数据分析呢？</li><li>理论上来说，<strong>任何一款编程语言只要具备读写数据、处理数据的能力，都可以用于数仓的开发</strong>。比如C、java、Python等；</li><li><strong>关键在于编程语言是否易学、好用、功能是否强大</strong>。遗憾的是上面所列出的C、Python等编程语言都需要一定的时间进行语法的学习，并且学习语法之后还需要结合分析的业务场景进行编码，跑通业务逻辑。</li><li>不管从学习成本还是开发效率来说，上述所说的编程语言都不是十分友好的。</li><li>在数据分析领域，不得不提的就是<strong>SQL编程语言，应该称之为分析领域主流开发语言</strong>。</li></ul><h5 id="SQL语言介绍"><a href="#SQL语言介绍" class="headerlink" title="SQL语言介绍"></a>SQL语言介绍</h5><ul><li><strong>结构化查询语言</strong>(Structured Query Language) 简称<code>SQL</code>，是一种数据库查询和程序设计语言，用于<strong>存取</strong>数据以及<strong>查询</strong>、<strong>更新</strong>和<strong>管理</strong>数据。</li><li>SQL语言使我们有能力访问数据库，并且SQL是一种ANSI（美国国家标准化组织）的<strong>标准计算机语言</strong>，各大数据库厂商在生产数据库软件的时候，几乎都会去支持SQL的语法，以使得用户在使用软件时更加容易上手，以及在不同厂商软件之间进行切换时更加适应，因为大家的SQL语法都差不多。</li><li>SQL语言<strong>功能很强</strong>，十分简洁，核心功能只用了9个动词。语法接近英语口语，所以，很容易学习和使用。<br><img src="/2022/11/12/HadoopBase/2023-01-10-18-03-00.png" alt="SQL语言功能很强"></li></ul><h5 id="数仓与SQL"><a href="#数仓与SQL" class="headerlink" title="数仓与SQL"></a>数仓与SQL</h5><ul><li>虽然SQL语言本身是针对数据库软件设计的，但是在<strong>数据仓库领域</strong>，尤其是大数据数仓领域，很多数仓软件<strong>都会去支持SQL语法</strong>；</li><li>原因在于一是用户<strong>学习SQL成本低</strong>，二是SQL语言对于<strong>数据分析真的十分友好，爱不释手</strong>。<br><img src="/2022/11/12/HadoopBase/2023-01-10-18-04-48.png" alt="SQL语言"></li></ul><div class="note red icon-padding modern"><i class="note-icon fas fa-question"></i><p>1.SQL全称叫做结构化查询语言，结构化是什么意思？<br>2.有没有非结构化之说？</p></div><h5 id="结构化数据"><a href="#结构化数据" class="headerlink" title="结构化数据"></a>结构化数据</h5><ul><li><strong>结构化数据</strong>也称作行数据，是由<strong>二维表结构来逻辑表达和实现的数据</strong>，严格地遵循数据格式与长度规范，主要通过关系型数据库进行存储和管理。</li><li>与结构化数据相对的是不适于由数据库二维表来表现的<strong>非结构化数据</strong>，包括所有格式的办公文档、XML、HTML、各类报表、图片和音频、视频信息等。</li><li>通俗来说，结构化数据会有严格的行列对齐，便于解读与理解。<br><img src="/2022/11/12/HadoopBase/2023-01-10-18-07-07.png" alt="结构化数据与非结构化数据"></li></ul><h5 id="二维表结构"><a href="#二维表结构" class="headerlink" title="二维表结构"></a>二维表结构</h5><ul><li>表由一个名字标识（例如“客户”或者“订单”），叫做表名。表包含带有数据的记录（行）。</li><li>下面的例子是一个名为“Persons” 的表，包含三条记录（每一条对应一个人）和五个列（Id、姓、名、地址和城市）。<br><img src="/2022/11/12/HadoopBase/2023-01-10-18-08-09.png" alt="二维表结构"></li></ul><h5 id="SQL语法分类"><a href="#SQL语法分类" class="headerlink" title="SQL语法分类"></a>SQL语法分类</h5><div class="note info modern"><p>SQL主要语法分为两个部分：<strong>数据定义语言(DDL)</strong>和<strong>数据操纵语言(DML)</strong> 。</p></div><ul><li><p>DDL语法使我们有能力<strong>创建或删除表</strong>，以及数据库、索引等各种对象，但是不涉及表中具体数据操作：<br><mark class="hl-label red">CREATE</mark> DATABASE -创建新数据库<br>CREATE TABLE -创建新表</p></li><li><p>DML语法是我们有能力针对<strong>表中的数据进行插入、更新、删除、查询</strong>操作：<br><mark class="hl-label red">SELECT</mark>  -从数据库表中获取数据<br><mark class="hl-label red">UPDATE</mark>  -更新数据库表中的数据<br><mark class="hl-label red">DELETE</mark>  -从数据库表中删除数据<br><mark class="hl-label red">INSERT</mark>  -向数据库表中插入数据</p></li></ul><h3 id="Apache-Hive入门"><a href="#Apache-Hive入门" class="headerlink" title="Apache Hive入门"></a>Apache Hive入门</h3><h4 id="Apache-Hive概述"><a href="#Apache-Hive概述" class="headerlink" title="Apache Hive概述"></a>Apache Hive概述</h4><h5 id="什么是Hive"><a href="#什么是Hive" class="headerlink" title="什么是Hive"></a>什么是Hive</h5><ul><li>Apache Hive是一款建立在Hadoop之上的开源<strong>数据仓库</strong>系统，可以将存储在Hadoop文件中的<strong>结构化、半结构化数据文件映射为一张数据库表</strong>，基于表提供了一种类似SQL的查询模型，称为<strong>Hive查询语言（HQL）</strong>，用于访问和分析存储在Hadoop文件中的大型数据集。</li><li>Hive核心是将<strong>HQL转换为MapReduce程序</strong>，然后将程序提交到Hadoop群集执行。</li><li>Hive由Facebook实现并开源。<br><img src="/2022/11/12/HadoopBase/2023-01-10-18-15-37.png" alt="Hive"></li></ul><h5 id="为什么使用Hive"><a href="#为什么使用Hive" class="headerlink" title="为什么使用Hive"></a>为什么使用Hive</h5><ul><li><p>使用Hadoop MapReduce直接处理数据所面临的问题<br>人员学习成本太高需要掌握java语言<br>MapReduce实现复杂查询逻辑开发难度太大</p></li><li><p>使用Hive处理数据的好处<br>操作接口采用<strong>类SQL语法</strong>，提供快速开发的能力（简单、容易上手）<br>避免直接写MapReduce，减少开发人员的学习成本<br>支持自定义函数，功能扩展很方便<br>背靠Hadoop，<strong>擅长存储分析海量数据集</strong></p></li></ul><h5 id="Hive和Hadoop关系"><a href="#Hive和Hadoop关系" class="headerlink" title="Hive和Hadoop关系"></a>Hive和Hadoop关系</h5><ul><li><p>从功能来说，数据仓库软件，至少需要具备下述两种能力：<br>存储数据的能力、分析数据的能力</p></li><li><p>Apache Hive作为一款大数据时代的数据仓库软件，当然也具备上述两种能力。只不过Hive并不是自己实现了上述两种能力，而是借助Hadoop。<br><strong>Hive利用HDFS存储数据，利用MapReduce查询分析数据</strong>。</p></li><li><p>这样突然发现Hive没啥用，不过是套壳Hadoop罢了。其实不然，Hive的最大的魅力在于<strong>用户专注于编写HQL，Hive帮您转换成为MapReduce程序完成对数据的分析</strong>。<br><img src="/2022/11/12/HadoopBase/2023-01-10-18-18-50.png" alt="Hive和Hadoop关系"></p></li></ul><h4 id="场景设计：如何模拟实现Hive功能"><a href="#场景设计：如何模拟实现Hive功能" class="headerlink" title="场景设计：如何模拟实现Hive功能"></a>场景设计：如何模拟实现Hive功能</h4><div class="note red icon-padding modern"><i class="note-icon fas fa-question"></i><p>如果我们来设计Hive这款软件，要求能够实现用户只编写sql语句，Hive自动将<strong>sql转换MapReduce程序</strong>，处理位于HDFS上的结构化数据。如何实现？</p></div><mark class="hl-label green">案例：如何模拟实现Apache&nbsp;Hive的功能</mark> <p>在HDFS文件系统上有一个文件，路径为/data/china_user.txt；<br>需求：统计来自于上海年龄大于25岁的用户有多少个？<br><img class="inline-img" src="/2022/11/12/HadoopBase/2023-01-10-18-33-08.png" style="height:150px"></p><div class="note icon-padding modern"><i class="note-icon fas fa-question"></i><p>Hive能将数据文件映射成为一张表，这个<strong>映射</strong>是指什么？<br>Hive软件本身到底承担了什么<strong>功能职责</strong>？</p></div><h5 id="映射信息记录"><a href="#映射信息记录" class="headerlink" title="映射信息记录"></a>映射信息记录</h5><ul><li><strong>映射</strong>在数学上称之为一种<strong>对应关系</strong>，比如y=x+1，对于每一个x的值都有与之对应的y的值。</li><li>在hive中<strong>能够写sql处理的前提是针对表，而不是针对文件</strong>，因此需要将<strong>文件和表之间的对应关系</strong>描述记录清楚。映射信息专业的叫法称之为<strong>元数据信息</strong>（元数据是指用来描述数据的数据metadata）。<br><img src="/2022/11/12/HadoopBase/2023-01-10-18-36-11.png" alt="映射信息记录"></li><li>具体来看，要记录的元数据信息包括：<ul><li>表对应着哪个文件（位置信息）</li><li>表的列对应着文件哪一个字段（顺序信息）</li><li>文件字段之间的分隔符是什么</li></ul></li></ul><h5 id="SQL语法解析、编译"><a href="#SQL语法解析、编译" class="headerlink" title="SQL语法解析、编译"></a>SQL语法解析、编译</h5><ul><li>用户写完sql之后，hive需要针对sql进行语法校验，并且根据记录的元数据信息解读sql背后的含义，制定执行计划。</li><li>并且把执行计划转换成MapReduce程序来具体执行，把执行的结果封装返回给用户。</li></ul><h5 id="对Hive的理解"><a href="#对Hive的理解" class="headerlink" title="对Hive的理解"></a>对Hive的理解</h5><ul><li><p>Hive能将数据文件映射成为一张表，这个<strong>映射</strong>是指什么？<br><strong>文件和表之间的对应关系</strong></p></li><li><p>Hive软件本身到底承担了什么<strong>功能职责</strong>？<br><strong>SQL语法解析编译成为MapReduce</strong></p></li><li><p>基于上述分析，最终要想模拟实现的Hive的功能，大致需要下图所示组件参与其中。</p></li><li>从中可以感受一下Hive承担了什么职责，当然，也可以把这个理解为Hive的架构图。<br><img src="/2022/11/12/HadoopBase/2023-01-10-18-41-04.png" alt="对Hive的理解"></li></ul><h4 id="Apache-Hive架构、组件"><a href="#Apache-Hive架构、组件" class="headerlink" title="Apache Hive架构、组件"></a>Apache Hive架构、组件</h4><h5 id="Hive架构图"><a href="#Hive架构图" class="headerlink" title="Hive架构图"></a>Hive架构图</h5><p><img src="/2022/11/12/HadoopBase/2023-01-12-22-04-11.png" alt="Hive架构图"></p><h5 id="Hive组件"><a href="#Hive组件" class="headerlink" title="Hive组件"></a>Hive组件</h5><ul><li><p><strong>用户接口</strong><br>包括CLI、JDBC/ODBC、WebGUI。其中，CLI(command line interface)为shell命令行；Hive中的Thrift服务器允许外部客户端通过网络与Hive进行交互，类似于JDBC或ODBC协议。WebGUI是通过浏览器访问Hive。<br><img src="/2022/11/12/HadoopBase/2023-01-12-22-07-09.png" alt="用户接口"></p></li><li><p><strong>元数据存储</strong><br>通常是存储在关系数据库如mysql/derby中。Hive 中的元数据包括表的名字，表的列和分区及其属性，表的属性（是否为外部表等），表的数据所在目录等。<br><img src="/2022/11/12/HadoopBase/2023-01-12-22-08-07.png" alt="元数据存储"></p></li><li><p><strong>Driver驱动程序，包括语法解析器、计划编译器、优化器、执行器</strong><br>完成HQL 查询语句从词法分析、语法分析、编译、优化以及查询计划的生成。生成的查询计划存储在HDFS 中，并在随后有执行引擎调用执行。<br><img src="/2022/11/12/HadoopBase/2023-01-12-22-08-20.png" alt="Driver驱动程序"></p></li><li><p><strong>执行引擎</strong><br>Hive本身并不直接处理数据文件。而是通过执行引擎处理。当下Hive支持MapReduce、Tez、Spark3种执行引擎。<br><img src="/2022/11/12/HadoopBase/2023-01-12-22-08-37.png" alt="执行引擎"></p></li></ul><h3 id="Apache-Hive安装部署"><a href="#Apache-Hive安装部署" class="headerlink" title="Apache Hive安装部署"></a>Apache Hive安装部署</h3><h4 id="Apache-Hive元数据"><a href="#Apache-Hive元数据" class="headerlink" title="Apache Hive元数据"></a>Apache Hive元数据</h4><p><strong>元数据</strong>（Metadata），又称中介数据、中继数据，为<strong>描述数据的数据</strong>（data about data），主要是描述数据属性（property）的信息，用来支持如指示存储位置、历史数据、资源查找、文件记录等功能。</p><h5 id="Hive-Metadata"><a href="#Hive-Metadata" class="headerlink" title="Hive Metadata"></a>Hive Metadata</h5><ul><li><strong>Hive Metadata即Hive的元数据</strong>。</li><li>包含用Hive创建的database、table、表的位置、类型、属性，字段顺序类型等元信息。</li><li><strong>元数据存储在关系型数据库中</strong>。如hive内置的Derby、或者第三方如MySQL等。</li><li>Metastore即<strong>元数据服务</strong>。Metastore服务的作用是<strong>管理metadata元数据</strong>，对外暴露服务地址，让各种客户端通过连接metastore服务，由metastore再去连接MySQL数据库来存取元数据。</li><li>有了metastore服务，就可以有多个客户端同时连接，而且这些客户端不需要知道MySQL数据库的用户名和密码，只需要连接metastore 服务即可。某种程度上也保证了hive元数据的安全。</li><li><img src="/2022/11/12/HadoopBase/2023-01-12-22-15-15.png" alt="Hive Metadata"></li></ul><h5 id="metastore配置方式"><a href="#metastore配置方式" class="headerlink" title="metastore配置方式"></a>metastore配置方式</h5><ul><li>metastore服务配置有3种模式：内嵌模式、本地模式、<strong>远程模式</strong>。</li><li>区分3种配置方式的关键是弄清楚两个问题：<ul><li>Metastore服务是否需要单独配置、单独启动？</li><li>Metadata是存储在内置的derby中，还是第三方RDBMS,比如MySQL。</li></ul></li><li>企业推荐模式—远程模式部署。</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">内嵌模式</th><th style="text-align:center">本地模式</th><th style="text-align:center">远程模式</th></tr></thead><tbody><tr><td style="text-align:center">Metastore单独配置、启动</td><td style="text-align:center">否</td><td style="text-align:center">否</td><td style="text-align:center">是</td></tr><tr><td style="text-align:center">Metastore存储介质</td><td style="text-align:center">Derby</td><td style="text-align:center">Mysql</td><td style="text-align:center">Mysql</td></tr></tbody></table></div><h5 id="metastore远程模式"><a href="#metastore远程模式" class="headerlink" title="metastore远程模式"></a>metastore远程模式</h5><p>在生产环境中，建议用远程模式来配置Hive Metastore。在这种情况下，其他依赖hive的软件都可以通过Metastore访问hive。由于还可以完全屏蔽数据库层，因此这也带来了更好的可管理性/安全性。<br><img src="/2022/11/12/HadoopBase/2023-01-12-22-24-04.png" alt="metastore远程模式"></p><h4 id="Apache-Hive部署实战"><a href="#Apache-Hive部署实战" class="headerlink" title="Apache Hive部署实战"></a>Apache Hive部署实战</h4><mark class="hl-label pink">安装前准备</mark> <ul><li>由于Apache Hive是一款基于Hadoop的数据仓库软件，通常部署运行在Linux系统之上。因此不管使用何种方式配置Hive Metastore，必须要先保证服务器的基础环境正常，Hadoop集群健康可用。</li><li><strong>服务器基础环境</strong><br>集群时间同步、防火墙关闭、主机Host映射、免密登录、JDK安装</li><li><strong>Hadoop集群健康可用</strong><br><strong><em>启动Hive之前必须先启动Hadoop集群</em></strong>。特别要注意，需等待HDFS安全模式关闭之后再启动运行Hive。<br>Hive不是分布式安装运行的软件，其分布式的特性主要借由Hadoop完成。包括分布式存储、分布式计算。</li></ul><mark class="hl-label pink">Hadoop与Hive整合</mark> <ul><li>因为Hive需要把数据存储在HDFS上，并且通过MapReduce作为执行引擎处理数据；</li><li>因此需要在Hadoop中添加相关配置属性，以满足Hive在Hadoop上运行。</li><li>修改Hadoop中<code>core-site.xml</code>，并且Hadoop集群同步配置文件，重启生效。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--整合hive --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><mark class="hl-label pink">Step1：MySQL安装</mark> <div class="note warning modern"><p>MySQL只需要在一台机器安装并且需要授权远程访问</p></div><figure class="highlight bash"><figcaption><span>安装mysql</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]<span class="comment"># mkdir mysoft/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#上传 mysql-5.7.29-1.el7.x86_64.rpm-bundle.tar 到上述文件夹下  解压</span></span><br><span class="line"><span class="built_in">cd</span> mysoft/mysql</span><br><span class="line">tar xvf mysql-5.7.29-1.el7.x86_64.rpm-bundle.tar</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行安装</span></span><br><span class="line">yum -y install libaio</span><br><span class="line"></span><br><span class="line">rpm -ivh mysql-community-common-5.7.29-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-5.7.29-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-5.7.29-1.el7.x86_64.rpm --force --nodeps</span><br><span class="line">rpm -ivh mysql-community-server-5.7.29-1.el7.x86_64.rpm --force --nodeps</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>mysql初始化设置</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#初始化</span></span><br><span class="line">mysqld --initialize</span><br><span class="line"></span><br><span class="line"><span class="comment">#更改所属组</span></span><br><span class="line"><span class="built_in">chown</span> mysql:mysql /var/lib/mysql -R</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动mysql</span></span><br><span class="line">systemctl start mysqld.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看生成的临时root密码</span></span><br><span class="line"><span class="built_in">cat</span>  /var/log/mysqld.log</span><br><span class="line"></span><br><span class="line">[Note] A temporary password is generated <span class="keyword">for</span> root@localhost: o+TU+KDOm004</span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>修改root密码 授权远程访问 设置开机自启动</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]<span class="comment"># mysql -u root -p</span></span><br><span class="line">Enter password:     <span class="comment">#这里输入在日志中生成的临时密码</span></span><br><span class="line">Welcome to the MySQL monitor.  Commands end with ; or \g.</span><br><span class="line">Your MySQL connection <span class="built_in">id</span> is 3</span><br><span class="line">Server version: 5.7.29</span><br><span class="line"></span><br><span class="line">Copyright (c) 2000, 2020, Oracle and/or its affiliates. All rights reserved.</span><br><span class="line"></span><br><span class="line">Oracle is a registered trademark of Oracle Corporation and/or its</span><br><span class="line">affiliates. Other names may be trademarks of their respective</span><br><span class="line">owners.</span><br><span class="line"></span><br><span class="line">Type <span class="string">&#x27;help;&#x27;</span> or <span class="string">&#x27;\h&#x27;</span> <span class="keyword">for</span> <span class="built_in">help</span>. Type <span class="string">&#x27;\c&#x27;</span> to clear the current input statement.</span><br><span class="line"></span><br><span class="line">mysql&gt; </span><br><span class="line"></span><br><span class="line"><span class="comment">#更新root密码  设置为hadoop</span></span><br><span class="line">mysql&gt; alter user user() identified by <span class="string">&quot;hadoop&quot;</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">#授权</span></span><br><span class="line">mysql&gt; use mysql;</span><br><span class="line"></span><br><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED BY <span class="string">&#x27;hadoop&#x27;</span> WITH GRANT OPTION;</span><br><span class="line"></span><br><span class="line">mysql&gt; FLUSH PRIVILEGES; </span><br><span class="line"></span><br><span class="line"><span class="comment">#mysql的启动和关闭 状态查看 （这几个命令必须记住）</span></span><br><span class="line">systemctl stop mysqld</span><br><span class="line">systemctl status mysqld</span><br><span class="line">systemctl start mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment">#建议设置为开机自启动服务</span></span><br><span class="line">[root@hsq01 ~]<span class="comment"># systemctl enable  mysqld</span></span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/mysqld.service to /usr/lib/systemd/system/mysqld.service.</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看是否已经设置自启动成功</span></span><br><span class="line">[root@hsq01 ~]<span class="comment"># systemctl list-unit-files | grep mysqld</span></span><br><span class="line">mysqld.service                                enabled</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><figcaption><span>干净卸载mysql 5.7</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#关闭mysql服务</span></span><br><span class="line">systemctl stop mysqld.service</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找安装mysql的rpm包</span></span><br><span class="line">[root@hsq01 ~]<span class="comment"># rpm -qa | grep -i mysql</span></span><br><span class="line">mysql-community-libs-5.7.29-1.el7.x86_64</span><br><span class="line">mysql-community-common-5.7.29-1.el7.x86_64</span><br><span class="line">mysql-community-client-5.7.29-1.el7.x86_64</span><br><span class="line">mysql-community-server-5.7.29-1.el7.x86_64</span><br><span class="line"></span><br><span class="line"><span class="comment">#卸载</span></span><br><span class="line">[root@hsq01 ~]<span class="comment"># yum remove mysql-community-libs-5.7.29-1.el7.x86_64 mysql-community-common-5.7.29-1.el7.x86_64 mysql-community-client-5.7.29-1.el7.x86_64 mysql-community-server-5.7.29-1.el7.x86_64</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看是否卸载干净</span></span><br><span class="line">rpm -qa | grep -i mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找mysql相关目录 删除</span></span><br><span class="line">[root@hsq01 ~]<span class="comment"># find / -name mysql</span></span><br><span class="line">/var/lib/mysql</span><br><span class="line">/var/lib/mysql/mysql</span><br><span class="line">/usr/share/mysql</span><br><span class="line"></span><br><span class="line">[root@hsq01 ~]<span class="comment"># rm -rf /var/lib/mysql</span></span><br><span class="line">[root@hsq01 ~]<span class="comment"># rm -rf /var/lib/mysql/mysql</span></span><br><span class="line">[root@hsq01 ~]<span class="comment"># rm -rf /usr/share/mysql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除默认配置 日志</span></span><br><span class="line"><span class="built_in">rm</span> -rf /etc/my.cnf</span><br><span class="line"><span class="built_in">rm</span> -rf /var/log/mysqld.log</span><br></pre></td></tr></table></figure><mark class="hl-label pink">Step2：上传解压Hive安装包（node1安装即可）</mark> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /mysoft</span><br><span class="line"></span><br><span class="line"><span class="comment">#上传 apache-hive-3.1.2-bin.tar.gz 到上述文件夹下  解压</span></span><br><span class="line">tar zxvf apache-hive-3.1.2-bin.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment">#解决Hive与Hadoop之间guava版本差异</span></span><br><span class="line"><span class="built_in">cd</span> /mysoft/apache-hive-3.1.2-bin/</span><br><span class="line"><span class="built_in">rm</span> -rf lib/guava-19.0.jarcp</span><br><span class="line"><span class="built_in">cp</span> <span class="variable">$HADOOP_HOME</span>/share/hadoop/common/lib/guava-27.0-jre.jar ./lib/</span><br></pre></td></tr></table></figure><mark class="hl-label pink">Step3：修改hive-env.sh</mark> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /mysoft/apache-hive-3.1.2-bin/conf</span><br><span class="line"><span class="built_in">mv</span> hive-env.sh.template hive-env.sh</span><br><span class="line"></span><br><span class="line">vi hive-env.sh</span><br><span class="line"><span class="built_in">export</span> HADOOP_HOME=/usr/local/hadoop-3.3.4</span><br><span class="line"><span class="built_in">export</span> HIVE_CONF_DIR=/mysoft/apache-hive-3.1.2-bin/conf</span><br><span class="line"><span class="built_in">export</span> HIVE_AUX_JARS_PATH=/mysoft/apache-hive-3.1.2-bin/lib</span><br></pre></td></tr></table></figure><mark class="hl-label pink">Step4：新增hive-site.xml</mark> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 存储元数据mysql相关配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>jdbc:mysql://hsq01:3306/hive3?createDatabaseIfNotExist=true<span class="symbol">&amp;amp;</span>useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionUserName<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hadoop<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- H2S运行绑定host --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.server2.thrift.bind.host<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hsq01<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 远程模式部署metastore metastore地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.uris<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>thrift://hsq01:9083<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 关闭元数据存储授权  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hive.metastore.event.db.notification.api.auth<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><mark class="hl-label pink">Step5：添加驱动、初始化</mark> <ul><li>上传MySQL JDBC驱动到Hive安装包lib路径下<code>mysql-connector-java-5.1.32.jar</code></li><li>初始化Hive的元数据<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /mysoft/apache-hive-3.1.2-bin/</span><br><span class="line"></span><br><span class="line">bin/schematool -initSchema -dbType mysql -verbos</span><br><span class="line"><span class="comment">#初始化成功会在mysql中创建74张表</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="metastore服务启动方式"><a href="#metastore服务启动方式" class="headerlink" title="metastore服务启动方式"></a>metastore服务启动方式</h5><mark class="hl-label green">前台启动</mark> <p><strong>前台启动</strong>，进程会一直占据终端，<code>ctrl + c</code>结束进程，服务关闭。<br>可以根据需求添加参数开启debug日志，获取详细日志信息，便于排错。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#前台启动  关闭ctrl+c</span></span><br><span class="line">/mysoft/apache-hive-3.1.2-bin/bin/hive --service metastore</span><br><span class="line"></span><br><span class="line"><span class="comment">#前台启动开启debug日志</span></span><br><span class="line">/mysoft/apache-hive-3.1.2-bin/bin/hive --service metastore --hiveconf hive.root.logger=DEBUG,console</span><br><span class="line"></span><br><span class="line"><span class="comment">#前台启动关闭方式ctrl+c结束进程</span></span><br></pre></td></tr></table></figure><mark class="hl-label green">后台启动</mark> <p><strong>后台启动</strong>，输出日志信息在/root目录下nohup.out</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> /mysoft/apache-hive-3.1.2-bin/bin/hive --service metastore &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">#后台挂起启动结束进程使用jps查看进程 使用kill -9 杀死进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#nohup 命令，在默认情况下（非重定向时），会输出一个名叫nohup.out 的文件到当前目录下</span></span><br></pre></td></tr></table></figure><h4 id="Apache-Hive客户端使用"><a href="#Apache-Hive客户端使用" class="headerlink" title="Apache Hive客户端使用"></a>Apache Hive客户端使用</h4><h5 id="（1）Hive自带客户端"><a href="#（1）Hive自带客户端" class="headerlink" title="（1）Hive自带客户端"></a>（1）Hive自带客户端</h5><p><code>bin/hive</code>、<code>bin/beeline</code></p><p><img src="/2022/11/12/HadoopBase/2023-01-13-11-26-19.png" alt="Remote Metastore远程模式"></p><ul><li>Hive发展至今，总共历经了两代客户端工具。</li><li>第一代客户端（deprecated不推荐使用）：<code>$HIVE_HOME/bin/hive</code>, 是一个shellUtil。主要功能：一是可用于以交互或批处理模式运行Hive查询；二是用于Hive相关服务的启动，比如metastore服务。</li><li>第二代客户端（recommended 推荐使用）：<code>$HIVE_HOME/bin/beeline</code>，是一个JDBC客户端，是<strong>官方强烈推荐使用</strong>的Hive命令行工具，和第一代客户端相比，性能加强安全性提高。</li></ul><h5 id="HiveServer2服务介绍"><a href="#HiveServer2服务介绍" class="headerlink" title="HiveServer2服务介绍"></a>HiveServer2服务介绍</h5><ul><li><strong>远程模式下beeline通过Thrift 连接到单独的HiveServer2服务上</strong>，这也是官方推荐在生产环境中使用的模式。</li><li>HiveServer2支持多客户端的并发和身份认证，旨在为开放API客户端如JDBC、ODBC提供更好的支持。</li></ul><h5 id="Hive客户端和服务的关系"><a href="#Hive客户端和服务的关系" class="headerlink" title="Hive客户端和服务的关系"></a>Hive客户端和服务的关系</h5><ul><li><p>HiveServer2通过Metastore服务读写元数据。所以在远程模式下，<strong>启动HiveServer2之前必须先首先启动metastore服务</strong>。</p></li><li><p>特别注意：远程模式下，<code>Beeline</code>客户端只能通过HiveServer2服务访问Hive。而<code>bin/hive</code>是通过Metastore服务访问的。具体关系如下：<br><img src="/2022/11/12/HadoopBase/2023-01-13-11-33-50.png" alt="Hive客户端和服务的关系"></p></li></ul><h5 id="bin-beeline客户端使用"><a href="#bin-beeline客户端使用" class="headerlink" title="bin/beeline客户端使用"></a><code>bin/beeline</code>客户端使用</h5><ul><li><p>在hive安装的服务器上，<strong>首先启动metastore服务，然后启动hiveserver2服务</strong>。</p><figure class="highlight bash"><figcaption><span>先启动metastore服务然后启动hiveserver2服务</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">nohup</span> /mysoft/apache-hive-3.1.2-bin/bin/hive --service metastore &amp;</span><br><span class="line"><span class="built_in">nohup</span> /mysoft/apache-hive-3.1.2-bin/bin/hive --service hiveserver2 &amp;</span><br></pre></td></tr></table></figure><div class="note warning modern"><p>启动hiveserver2需要一定的时间  不要启动之后立即beeline连接 可能连接不上</p></div></li><li><p>在node3上使用beeline客户端进行连接访问。需要注意<strong>hiveserver2服务启动之后需要稍等一会才可以对外提供服务</strong>。</p><figure class="highlight bash"><figcaption><span>拷贝node1安装包到beeline客户端机器上（node3）</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r /mysoft/apache-hive-3.1.2-bin/ hsq03:/mysoft/</span><br></pre></td></tr></table></figure><div class="note info modern"><p>node3中同样需要配置hadoop集群<code>core-site.xml</code>文件，<a href="#Apache-Hive部署实战">同上</a></p></div></li><li><p>Beeline是JDBC的客户端，通过JDBC协议和Hiveserver2服务进行通信，协议的地址是：jdbc:hive2://node1:10000</p><figure class="highlight bash"><figcaption><span>连接访问</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/mysoft/apache-hive-3.1.2-bin/bin/beeline</span><br><span class="line"></span><br><span class="line">beeline&gt; ! connect jdbc:hive2://node1:10000</span><br><span class="line">beeline&gt; root</span><br><span class="line">beeline&gt; 直接回车</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2022/11/07/TypeScript/"/>
      <url>/2022/11/07/TypeScript/</url>
      
        <content type="html"><![CDATA[<h2 id="TypeScript-介绍"><a href="#TypeScript-介绍" class="headerlink" title="TypeScript 介绍"></a>TypeScript 介绍</h2><h3 id="TypeScript-是什么"><a href="#TypeScript-是什么" class="headerlink" title="TypeScript 是什么"></a>TypeScript 是什么</h3><p>TypeScript（简称：TS）是JavaScript 的<strong>超集</strong>（JS 有的TS 都有）。<br>TypeScript = <strong>Type</strong> + JavaScript（在JS 基础之上，为JS 添加了<strong>类型支持</strong>）。<br>TypeScript 是微软开发的开源编程语言，可以在任何运行JavaScript 的地方运行。</p><h3 id="TypeScript-为什么要为JS-添加类型支持？"><a href="#TypeScript-为什么要为JS-添加类型支持？" class="headerlink" title="TypeScript 为什么要为JS 添加类型支持？"></a>TypeScript 为什么要为JS 添加类型支持？</h3><p>背景：JS 的类型系统存在“先天缺陷”，JS 代码中绝大部分错误都是<strong>类型</strong>错误（Uncaught TypeError）。<br>问题：增加了找Bug、改Bug 的时间，严重影响开发效率。</p><p>从编程语言的动静来区分，TypeScript 属于静态类型的编程语言，JS 属于动态类型的编程语言。<br>静态类型：编译期做类型检查； 动态类型：执行期做类型检查。<br>代码编译和代码执行的顺序：1 编译2 执行。</p><p>对于JS 来说：需要等到代码真正去执行的时候才能发现错误（晚）。<br>对于TS 来说：在代码编译的时候（代码执行前）就可以发现错误（早）。<br>并且，配合VSCode 等开发工具，TS 可以<strong>提前到在编写代码的同时</strong>就发现代码中的错误，<strong>减少找Bug、改Bug 时间</strong>。</p><h3 id="TypeScript-相比JS-的优势"><a href="#TypeScript-相比JS-的优势" class="headerlink" title="TypeScript 相比JS 的优势"></a>TypeScript 相比JS 的优势</h3><ol><li>更早（写代码的同时）发现错误，减少找Bug、改Bug 时间，提升开发效率。</li><li>程序中任何位置的代码都有代码提示，随时随地的安全感，增强了开发体验。</li><li>强大的类型系统提升了代码的可维护性，使得重构代码更加容易。</li><li>支持最新的ECMAScript 语法，优先体验最新的语法，让你走在前端技术的最前沿。</li><li>TS 类型推断机制，不需要在代码中的每个地方都显示标注类型，让你在享受优势的同时，尽量降低了成本。</li></ol><p>除此之外，Vue 3 源码使用TS 重写、Angular 默认支持TS、React 与TS 完美配合，TypeScript 已成为大中型前端<br>项目的首先编程语言。</p><h2 id="TypeScript-初体验"><a href="#TypeScript-初体验" class="headerlink" title="TypeScript 初体验"></a>TypeScript 初体验</h2><h3 id="安装编译TS-的工具包"><a href="#安装编译TS-的工具包" class="headerlink" title="安装编译TS 的工具包"></a>安装编译TS 的工具包</h3><p><strong>Node.js/浏览器，只认识JS 代码，不认识TS 代码。需要先将TS 代码转化为JS 代码，然后才能运行。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g typescript</span><br></pre></td></tr></table></figure><p><strong>typescript 包</strong>：用来编译TS 代码的包，提供了tsc 命令，实现了TS -&gt; JS 的转化。<br>验证是否安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure><p><img src="/2022/11/07/TypeScript/2022-11-07-17-37-21.png" alt="ts"></p><h3 id="编译并运行TS-代码"><a href="#编译并运行TS-代码" class="headerlink" title="编译并运行TS 代码"></a>编译并运行TS 代码</h3><ol><li>创建hello.ts 文件（注意：TS 文件的后缀名为<code>.ts</code>）。</li><li>将TS 编译为JS：在终端中输入命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc hello.ts</span><br></pre></td></tr></table></figure>（此时，在同级目录中会出现一个同名的JS 文件）。</li><li>执行JS 代码：在终端中输入命令。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node hello.js</span><br></pre></td></tr></table></figure></li></ol><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph LRid1[创建 ts 文件] --&gt; id2[编译 Ts] --&gt; id3[执行 js]  </pre></div><p>说明：所有合法的JS 代码都是TS 代码，有JS 基础只需要学习TS 的类型即可。<br>注意：由TS 编译生成的<strong>JS 文件</strong>，代码中就没有<strong>类型信息</strong>了。</p><h3 id="简化运行TS-的步骤"><a href="#简化运行TS-的步骤" class="headerlink" title="简化运行TS 的步骤"></a>简化运行TS 的步骤</h3><p>问题描述：每次修改代码后，都要重复执行两个命令，才能运行TS 代码，太繁琐。<br>简化方式：使用<strong>ts-node 包</strong>，直接在Node.js 中执行TS 代码。<br>安装命令：（ts-node 包提供了ts-node 命令）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g ts-node</span><br></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ts-node .ts文件</span><br></pre></td></tr></table></figure><p>解释：ts-node 命令在内部偷偷的将TS -&gt; JS，然后，再运行JS 代码。</p><h2 id="TypeScript-常用类型"><a href="#TypeScript-常用类型" class="headerlink" title="TypeScript 常用类型"></a>TypeScript 常用类型</h2><p>TypeScript 是JS 的超集，TS 提供了JS 的所有功能，并且额外的增加了：<strong>类型系统</strong>。</p><ul><li>所有的JS 代码都是TS 代码。</li><li>JS 有类型（比如，number/string 等），但是<strong>JS 不会检查变量的类型是否发生变化</strong>，而 <strong>TS 会检查</strong>。</li><li>TypeScript 类型系统的主要优势：可以<strong>显示标记出代码中的意外行为</strong>，从而降低了发生错误的可能性。</li></ul><h3 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age :<span class="built_in">number</span> = <span class="number">18</span></span><br></pre></td></tr></table></figure><p>说明：代码中的<code>: number</code> 就是类型注解。<br>作用：为变量<strong>添加类型约束</strong>。比如，上述代码中，约定变量age 的类型为number（数值类型）。<br>解释：<strong>约定了什么类型，就只能给变量赋值该类型的值</strong>，否则，就会报错。</p><h3 id="常用基础类型概述"><a href="#常用基础类型概述" class="headerlink" title="常用基础类型概述"></a>常用基础类型概述</h3><ol><li>JS 已有类型<ul><li>原始类型：number/string/boolean/null/undefined/symbol。</li><li>对象类型：object（包括，数组、对象、函数等对象）。</li></ul></li><li>TS 新增类型<br> -联合类型、自定义类型（类型别名）、接口、元组、字面量类型、枚举、void、any 等。</li></ol><h3 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h3><p><code>number</code>/<code>string</code>/<code>boolean</code>/<code>null</code>/<code>undefined</code>/<code>symbol</code></p><p>特点：简单。这些类型，完全按照JS 中类型的名称来书写。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> =<span class="number">18</span> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;name&#x27;</span></span><br><span class="line"><span class="keyword">let</span>  <span class="attr">judge</span>: <span class="built_in">boolean</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><p>object（包括，数组、对象、函数等对象）。<br>特点：对象类型，在TS 中更加细化，<strong>每个具体的对象都有自己的类型语法</strong>。</p><p>数组类型的两种写法：（推荐使用 <code>number[]</code> 写法）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">number</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strings</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure><p>需求：数组中既有number 类型，又有string 类型，这个数组的类型应该如何写？</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: (<span class="built_in">number</span> | <span class="built_in">string</span>)[]=[<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">3</span>,<span class="string">&#x27;b&#x27;</span>]</span><br></pre></td></tr></table></figure><p>解释：<code>|</code> （竖线）在TS 中叫做<strong>联合类型</strong>（由两个或多个其他类型组成的类型，表示可以是这些类型中的任意一种）。<br>注意：这是TS 中联合类型的语法，只有一根竖线，不要与JS 中的或（||）混淆了。</p><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>类型别名（自定义类型）：为任意类型起别名。<br>使用场景：当同一类型（复杂）被多次使用时，可以通过类型别名，简化该类型的使用。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">CustomArray</span> = (<span class="built_in">number</span> | <span class="built_in">string</span>)[]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="title class_">CustomArray</span> = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>: <span class="title class_">CustomArray</span> = [<span class="number">1</span>, <span class="string">&#x27;x&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;y&#x27;</span>]</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>使用<code>type</code> 关键字来创建类型别名。</li><li>类型别名（比如，此处的CustomArray），可以是任意合法的变量名称。</li><li>创建类型别名后，直接<strong>使用该类型别名作为变量的类型注解</strong>即可。</li></ol><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>函数的类型实际上指的是：函数<strong>参数</strong>和<strong>返回值</strong>的类型。<br>为函数指定类型的两种方式：</p><ol><li>单独指定参数、返回值的类型：<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = (<span class="attr">num1</span>: <span class="built_in">number</span>, <span class="attr">num2</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>同时指定参数、返回值的类型：<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">add</span>: <span class="function">(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>解释：当函数作为表达式时，可以通过<strong>类似箭头函数形式的语法</strong><code>(num1: number, num2: number) =&gt; number</code>来为函数添加类型。<br>注意：这种形式只适用于函数表达式。</li></ol><p>如果函数没有返回值，那么，函数返回值类型为：<code>void</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>, name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用函数实现某个功能时，参数可以传也可以不传。这种情况下，在给函数参数指定类型时，就用到<strong>可选参数</strong>了。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mySlice</span>(<span class="params">start: <span class="built_in">number</span>, end?: <span class="built_in">number</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;起始索引：&#x27;</span>, start, <span class="string">&#x27;结束索引：&#x27;</span>, end)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">mySlice</span>(<span class="number">10</span>)</span><br><span class="line"><span class="title function_">mySlice</span>(<span class="number">1</span>)</span><br><span class="line"><span class="title function_">mySlice</span>(<span class="number">1</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><details class="toggle"><summary class="toggle-button" style>输出结果</summary><div class="toggle-content"><p>起始索引： 10 结束索引： undefined<br>起始索引： 1 结束索引： undefined<br>起始索引： 1 结束索引： 3</p></div></details><p>可选参数：在可传可不传的参数名称后面添加<code>?</code>（问号）。<br>注意：<strong>可选参数只能出现在参数列表的最后</strong>，也就是说可选参数后面不能再出现必选参数。</p><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><p>JS 中的对象是由属性和方法构成的，而TS 中对象的类型就是在<strong>描述对象的结构</strong>（有什么类型的属性和方法）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span>; <span class="title function_">sayHi</span>(): <span class="built_in">void</span>; <span class="title function_">greet</span>(<span class="attr">name</span>: <span class="built_in">string</span>): <span class="built_in">void</span> &#125; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">greet</span>(<span class="params">name</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>直接使用{} 来描述对象结构。属性采用<code>属性名: 类型</code>的形式；方法采用<code>方法名(): 返回值类型</code>的形式。</li><li>如果方法有参数，就在方法名后面的小括号中指定参数类型（比如：<code>greet(name: string): void</code>）。</li><li>在一行代码中指定对象的多个属性类型时，使用;（分号）来分隔。<ul><li>如果一行代码只指定一个属性类型（通过换行来分隔多个属性类型），可以去掉;（分号）。</li><li>方法的类型也可以使用箭头函数形式（比如：{ <code>sayHi: () =&gt; void</code> }）。</li></ul></li></ol><p>对象的属性或方法，也可以是可选的，此时就用到<strong>可选属性</strong>了。<br>比如，我们在使用 myaxios({ … }) 时，如果发送GET 请求，method 属性就可以省略。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myAxios</span>(<span class="params">config: &#123; url: <span class="built_in">string</span>; method?: <span class="built_in">string</span> &#125;</span>) &#123;&#125;</span><br><span class="line"><span class="title function_">myAxios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>可选属性</strong>的语法与函数可选参数的语法一致，都使用<code>?</code>（问号）来表示。</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>当一个对象类型被多次使用时，一般会使用<strong>接口（interface）</strong>来描述对象的类型，达到<strong>复用</strong>的目的。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="title function_">sayHi</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: <span class="title class_">IPerson</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>使用<code>interface</code> 关键字来声明接口。</li><li>接口名称（比如，此处的IPerson），可以是任意合法的变量名称。</li><li>声明接口后，直接<strong>使用接口名称作为变量的类型</strong>。</li><li>因为每一行只有一个属性类型，因此，属性类型后没有;（分号）。</li></ol><p><code>interface</code>（接口）和 <code>type</code>（类型别名）的对比：</p><ul><li>相同点：都可以给对象指定类型。<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="title function_">sayHi</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IPerson</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="title function_">sayHi</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>不同点：<ul><li>接口，只能为对象指定类型。</li><li>类型别名，不仅可以为对象指定类型，实际上可以为任意类型指定别名。<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NumStr</span> =num | <span class="built_in">string</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>如果两个接口之间有相同的属性或方法，可以将公共的属性或方法抽离出来，通过继承来实现复用。<br>比如，这两个接口都有x、y 两个属性，重复写两次，可以，但很繁琐。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point2D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point3D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>; <span class="attr">z</span>: <span class="built_in">number</span> &#125;</span><br></pre></td></tr></table></figure><p>更好的方式：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point2D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point3D</span> <span class="keyword">extends</span> <span class="title class_">Point2D</span> &#123; <span class="attr">z</span>: <span class="built_in">number</span> &#125;</span><br></pre></td></tr></table></figure><ol><li>使用 <code>extends</code>（继承）关键字实现了接口Point3D 继承Point2D。</li><li>继承后，Point3D 就有了Point2D 的所有属性和方法（此时，Point3D 同时有x、y、z 三个属性）。</li></ol><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>场景：在地图中，使用经纬度坐标来标记位置信息。<br>可以使用数组来记录坐标，那么，该数组中只有两个元素，并且这两个元素都是数值类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">position</span>: <span class="built_in">number</span>[] = [<span class="number">27.123</span>,<span class="number">3.14159</span>]</span><br></pre></td></tr></table></figure><p>使用 <code>number[]</code> 的缺点：不严谨，因为该类型的数组中可以出现任意多个数字。</p><p>更好的方式：<strong>元组（Tuple）</strong>。<br>元组类型是另一种类型的数组，它<strong>确切地知道包含多少个元素，以及特定索引对应的类型</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">position</span>: [<span class="built_in">number</span>,<span class="built_in">number</span>] = [<span class="number">27.123</span>,<span class="number">3.14159</span>]</span><br></pre></td></tr></table></figure><ol><li>元组类型可以确切地标记出有多少个元素，以及每个元素的类型。</li><li>该示例中，元素有两个元素，每个元素的类型都是number。</li></ol><h3 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h3><p>在TS 中，某些没有明确指出类型的地方，TS 的类型推论机制会帮助提供类型。<br>换句话说：由于类型推论的存在，这些地方，类型注解可以省略不写！</p><p>发生类型推论的2 种常见场景：</p><ol><li>声明变量并初始化时<img src="/2022/11/07/TypeScript/2022-11-08-14-24-11.png" alt="ts"></li><li>决定函数返回值时<img src="/2022/11/07/TypeScript/2022-11-08-14-23-17.png" alt="ts"></li></ol><p>注意：这两种情况下，类型注解可以省略不写！<br>推荐：<strong>能省略类型注解的地方就省略</strong>（<del>偷懒</del>，充分利用TS类型推论的能力，提升开发效率）。<br>技巧：如果不知道类型，可以通过鼠标放在变量名称上，利用VSCode 的提示来查看类型。</p><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>有时候你会<strong>比TS 更加明确一个值的类型</strong>，此时，可以使用<code>类型断言</code>来指定更具体的类型。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com/&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/11/07/TypeScript/2022-11-08-14-35-12.png" alt="ts"><br>注意：getElementById 方法返回值的类型是HTMLElement，该类型只包含所有标签公共的属性或方法，不包含a<br>标签特有的href 等属性。<br>因此，<strong>这个类型太宽泛（不具体）</strong>，无法操作href 等 a 标签特有的属性或方法。<br>解决方式：这种情况下就需要<strong>使用类型断言指定更加具体的类型</strong>。</p><p><img src="/2022/11/07/TypeScript/2022-11-08-14-37-27.png" alt="类型断言"></p><ol><li>使用 <code>as</code> 关键字实现类型断言。</li><li>关键字 as 后面的类型是一个更加具体的类型（HTMLAnchorElement 是HTMLElement 的子类型）。</li><li>通过类型断言，aLink 的类型变得更加具体，这样就可以访问a 标签特有的属性或方法了。</li></ol><p>另一种语法，使用 <code>&lt;&gt;</code> 语法，这种语法形式不常用知道即可。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aLink = &lt;<span class="title class_">HTMLAnchorElement</span>&gt;<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;link&#x27;</span>)</span><br></pre></td></tr></table></figure><p>技巧：在浏览器控制台，通过 <code>console.dir()</code> 打印 DOM 元素，在属性列表的最后面，即可看到该元素的类型。</p><h3 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h3><p>思考以下代码，两个变量的类型分别是什么？</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;Hello TS&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">str2</span>: <span class="string">&#x27;Hello TS&#x27;</span> = <span class="string">&#x27;Hello TS&#x27;</span></span><br></pre></td></tr></table></figure><p>通过TS 类型推论机制，可以得到答案：</p><ol><li>str1 是一个变量（let），它的值可以是任意字符串，所以类型为：<code>string</code>。</li><li>str2 是一个常量（const），它的值不能变化只能是’Hello TS’，所以，它的类型为：<code>&quot;Hello TS&quot;</code>。</li></ol><p>注意：此处的”Hello TS”，就是一个<strong>字面量类型</strong>。也就是说某个特定的字符串也可以作为TS 中的类型。<br>除字符串外，任意的JS 字面量（比如，对象、数字等）都可以作为类型使用。</p><p>使用模式：<strong>字面量类型配合联合类型一起使用</strong>。<br>使用场景：用来表示<strong>一组明确的可选值列表</strong>。<br>比如，在贪吃蛇游戏中，游戏的方向的可选值只能是上、下、左、右中的任意一个。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">direction: <span class="string">&#x27;up&#x27;</span> | <span class="string">&#x27;down&#x27;</span> | <span class="string">&#x27;left&#x27;</span> | <span class="string">&#x27;right&#x27;</span></span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p>解释：参数direction 的值只能是up/down/left/right 中的任意一个。<br>优势：相比于string 类型，使用字面量类型更加精确、严谨。</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>枚举的功能类似于字面量类型+联合类型组合的功能，也可以<strong>表示一组明确的可选值</strong>。<br>枚举：定义一组命名常量。它描述一个值，该值可以是这些命名常量中的一个。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123; <span class="title class_">Up</span>,<span class="title class_">Down</span>,<span class="title class_">Left</span>,<span class="title class_">Right</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">direction: Direction</span>) &#123;&#125;</span><br><span class="line"><span class="title function_">changeDirection</span>(<span class="title class_">Direction</span>.<span class="property">Left</span>)</span><br></pre></td></tr></table></figure><ol><li>使用 <code>enum</code> 关键字定义枚举。</li><li>约定枚举名称、枚举中的值以大写字母开头。</li><li>枚举中的多个值之间通过,（逗号）分隔。</li><li>定义好枚举后，直接使用<strong>枚举名称</strong>作为类型注解。</li></ol><p>注意：形参direction 的类型为枚举Direction，那么，实参的值就应该是枚举Direction 成员的任意一个。通过点（<code>.</code>）<strong>语法</strong>访问枚举的成员。</p><p>问题：我们把枚举成员作为了函数的实参，它的值是什么呢？<br>解释：通过将鼠标移入Direction.Up，可以看到枚举成员Up 的值为0。<br>注意：<strong>枚举成员是有值的</strong>，默认为：<strong>从0 开始自增的数值</strong>。<br>我们把，枚举成员的值为数字的枚举，称为：<strong>数字枚举</strong>。</p><p>也可以给枚举中的成员初始化值。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Down -&gt; 11,Left-&gt;12,Right-&gt;13</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123; <span class="title class_">Up</span> = <span class="number">10</span>, <span class="title class_">Down</span>, <span class="title class_">Left</span>, <span class="title class_">Right</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123; <span class="title class_">Up</span> = <span class="number">10</span>, <span class="title class_">Down</span> = <span class="number">4</span>, <span class="title class_">Left</span> = <span class="number">8</span>, <span class="title class_">Right</span> = <span class="number">16</span> &#125;</span><br></pre></td></tr></table></figure><p><strong>字符串枚举</strong>：枚举成员的值是字符串。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">  <span class="title class_">Up</span> = <span class="string">&#x27;UP&#x27;</span>,</span><br><span class="line">  <span class="title class_">Down</span> = <span class="string">&#x27;DOWN&#x27;</span>,</span><br><span class="line">  <span class="title class_">Left</span> = <span class="string">&#x27;LEFT&#x27;</span>,</span><br><span class="line">  <span class="title class_">Right</span> = <span class="string">&#x27;RIGHT&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：字符串枚举没有自增长行为，因此，字符串枚举的每个成员必须有初始值。</p><p>枚举是TS 为数不多的非JavaScript 类型级扩展（不仅仅是类型）的特性之一。<br>因为：其他类型仅仅被当做类型，而<strong>枚举不仅用作类型，还提供值</strong>（枚举成员都是有值的）。<br>也就是说，其他的类型会在编译为JS 代码时自动移除。但是，<strong>枚举类型会被编译为JS 代码</strong>！<br><img src="/2022/11/07/TypeScript/2022-11-08-17-20-25.png" alt="ts"><br>说明：枚举与前面讲到的字面量类型+联合类型组合的功能类似，都用来表示一组明确的可选值列表。<br>一般情况下，<strong>推荐使用字面量类型+联合类型组合的方式</strong>，因为相比枚举，这种方式更加直观、简洁、高效。</p><h3 id="any-类型"><a href="#any-类型" class="headerlink" title="any 类型"></a>any 类型</h3><p>原则：<strong>不推荐使用any</strong>！这会让TypeScript 变为“AnyScript”（失去TS 类型保护的优势）。<br>因为当值的类型为any 时，可以对该值进行任意操作，并且不会有代码提示。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="built_in">any</span> = &#123; <span class="attr">x</span>:<span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">bar</span> = <span class="number">100</span></span><br><span class="line"><span class="title function_">obj</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="attr">n</span>: <span class="built_in">number</span> = obj</span><br></pre></td></tr></table></figure><p>以上操作都不会有任何类型错误提示，即使可能存在错误！<br>尽可能的避免使用any 类型，除非临时使用any 来“避免”书写很长、很复杂的类型！<br>其他隐式具有any 类型的情况：</p><ol><li>声明变量不提供类型也不提供默认值</li><li>函数参数不加类型。</li></ol><p>注意：因为不推荐使用any，所以，这两种情况下都应该提供类型！</p><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>众所周知，JS 中提供了typeof 操作符，用来在JS 中获取数据的类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;Hello world&quot;</span>) <span class="comment">//打印 string</span></span><br></pre></td></tr></table></figure><p>实际上，<strong>TS 也提供了typeof 操作符</strong>：可以在类型上下文中引用变量或属性的类型（类型查询）。<br>使用场景：根据已有变量的值，获取该值的类型，来简化类型书写。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatPoint</span>(<span class="params">point: &#123; x: <span class="built_in">number</span>; y: <span class="built_in">number</span> &#125;</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简化书写</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatPoint</span>(<span class="params">point: <span class="keyword">typeof</span> p</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><ol><li>使用typeof 操作符来获取变量p 的类型，结果与第一种（对象字面量形式的类型）相同。</li><li>typeof 出现在<strong>类型注解的位置</strong>（参数名称的冒号后面）所处的环境就在类型上下文（区别于JS 代码）。</li><li>注意：typeof 只能用来查询变量或属性的类型，无法查询其他形式的类型（比如，函数调用的类型）。<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">ret</span>: <span class="keyword">typeof</span> <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)<span class="comment">//错误写法</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="TypeScript-高级类型"><a href="#TypeScript-高级类型" class="headerlink" title="TypeScript 高级类型"></a>TypeScript 高级类型</h2><h3 id="class-类"><a href="#class-类" class="headerlink" title="class 类"></a>class 类</h3><p>TypeScript 全面支持ES2015 中引入的 <code>class</code> 关键字，并为其添加了类型注解和其他语法（比如，可见性修饰符等）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br></pre></td></tr></table></figure><ol><li>根据TS 中的类型推论，可以知道Person 类的实例对象p 的类型是 <code>Person</code>。</li><li>TS 中的class，<strong>不仅提供了class 的语法功能，也作为一种类型存在</strong>。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  gender = <span class="string">&#x27;男&#x27;</span></span><br><span class="line">  <span class="comment">// gender: string = &#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>声明成员age，类型为number（没有初始值）。</li><li>声明成员gender，并设置初始值，此时，可省略类型注解（TS 类型推论为string 类型）。</li></ol><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">gender</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">age: <span class="built_in">number</span>, gender: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>成员初始化（比如，age: number）后，才可以通过this.age 来访问实例成员。</li><li>需要为构造函数指定类型注解，否则会被隐式推断为any；构造函数不需要返回值类型。</li></ol><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  x = <span class="number">1</span></span><br><span class="line">  y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">scale</span>(<span class="params">n: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> *= n</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> *= n</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法的类型注解（参数和返回值）与函数用法相同。</p><h4 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h4><p>类继承的两种方式：1 <code>extends</code>（继承父类） 2 <code>implements</code>（实现接口）。<br>说明：JS 中只有extends，而implements 是TS 提供的。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">move</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Moving along&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;汪！&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>通过 <code>extends</code> 关键字实现继承。</li><li>子类Dog 继承父类Animal，则Dog 的实例对象dog 就同时具有了父类Animal 和子类Dog 的所有属性和方法。</li></ol><h4 id="类成员可见性"><a href="#类成员可见性" class="headerlink" title="类成员可见性"></a>类成员可见性</h4><p>类成员可见性：可以使用TS 来<strong>控制class 的方法或属性对于class 外的代码是否可见</strong>。<br>可见性修饰符包括：1 public（公有的） 2 protected（受保护的） 3 private（私有的）。</p><ol><li><p><code>public</code>：表示<strong>公有的、公开的</strong>，<strong>公有成员可以被任何地方访问</strong>，默认可见性，所以，<strong>可以直接省略</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">move</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Moving along!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>protected</code>：表示<strong>受保护的</strong>，<strong>仅对其声明所在类和子类中（非实例对象）可见</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="comment">// 这个方法是受保护的</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="title function_">move</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Moving along!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">move</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;旺旺！&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><p><code>private</code>：表示<strong>私有的，只在当前类中可见</strong>，对<strong>实例对象以及子类也是不可见的</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">move</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Moving along!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">walk</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">move</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h4><p>除了可见性修饰符之外，还有一个常见修饰符就是： <code>readonly</code>（只读修饰符）。<br>readonly：表示<strong>只读，用来防止在构造函数之外对属性进行赋值</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">// 只读属性</span></span><br><span class="line">  <span class="comment">// 注意：只要是 readonly 来修饰的属性，必须手动提供明确的类型</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">18</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>使用 <code>readonly</code> 关键字修饰该属性是只读的，注意<strong>只能修饰属性不能修饰方法</strong>。</li><li>注意：属性age 后面的类型注解（比如，此处的number）如果不加，则age 的类型为18 （字面量类型）。</li><li><strong>接口或者{} 表示的对象类型，也可以使用readonly</strong>。</li></ol><h3 id="类型兼容性"><a href="#类型兼容性" class="headerlink" title="类型兼容性"></a>类型兼容性</h3><p>两种类型系统：1 Structural Type System（结构化类型系统） 2 Nominal Type System（标明类型系统）。<br><strong>TS 采用的是结构化类型系统</strong>，也叫做duck typing（鸭子类型），<strong>类型检查关注的是值所具有的形状</strong>。<br>也就是说，在结构类型系统中，如果两个对象具有相同的形状，则认为它们属于同一类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point2D</span> &#123;<span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>: <span class="title class_">Point</span> = <span class="keyword">new</span> <span class="title class_">Point2D</span>()</span><br></pre></td></tr></table></figure><ol><li>Point 和Point2D 是两个名称不同的类。</li><li>变量p 的类型被显示标注为Point 类型，但是，它的值却是Point2D 的实例，并且没有类型错误。</li><li>因为TS 是结构化类型系统，只检查Point 和Point2D 的结构是否相同（相同，都具有x 和y 两个属性，属性类型也相同）。</li><li>但是，如果在Nominal Type System 中（比如，C#、Java 等），它们是不同的类，类型无法兼容。</li></ol><p>注意：在结构化类型系统中，如果两个对象具有相同的形状，则认为它们属于同一类型，这种说法并不准确。<br>更准确的说法：对于对象类型来说，y 的成员至少与x 相同，则x 兼容y（<strong>成员多的可以赋值给少的</strong>）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point3D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>; <span class="attr">z</span>: <span class="built_in">number</span>; &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>: <span class="title class_">Point</span> = <span class="keyword">new</span> <span class="title class_">Point3D</span>()</span><br></pre></td></tr></table></figure><ol><li>Point3D 的成员至少与Point 相同，则Point 兼容Point3D。</li><li>所以，成员多的Point3D 可以赋值给成员少的Point。</li></ol><h4 id="接口兼容性"><a href="#接口兼容性" class="headerlink" title="接口兼容性"></a>接口兼容性</h4><p>除了class 之外，TS 中的其他类型也存在相互兼容的情况，包括：1 接口兼容性2 函数兼容性等。<br>接口之间的兼容性，类似于class。并且，class 和interface 之间也可以兼容。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point2D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">p1</span>: <span class="title class_">Point</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p2</span>: <span class="title class_">Point2D</span> = p1</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point3D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; ;<span class="attr">y</span>: <span class="built_in">number</span>; <span class="attr">z</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">p3</span>: <span class="title class_">Point3D</span></span><br><span class="line">p2 = p3</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point4D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>; <span class="attr">z</span>: <span class="built_in">number</span>&#125;</span><br><span class="line"><span class="attr">p2</span>: <span class="title class_">Point2D</span> = <span class="keyword">new</span> <span class="title class_">Point4D</span>()</span><br></pre></td></tr></table></figure><h4 id="函数兼容性"><a href="#函数兼容性" class="headerlink" title="函数兼容性"></a>函数兼容性</h4><p>函数之间兼容性比较复杂，需要考虑：1 参数个数2 参数类型3 返回值类型。</p><ol><li><p><strong>参数个数</strong>，参数多的兼容参数少的（或者说，<strong>参数少的可以赋值给多的</strong>）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f1</span>: <span class="variable constant_">F1</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f2</span>: <span class="variable constant_">F2</span> =f1</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><ol><li>参数少的可以赋值给参数多的，所以，f1 可以赋值给f2。</li><li>数组forEach 方法的第一个参数是回调函数，该示例中类型为：(value: string, index: number, array: string[]) =&gt; void。</li><li><strong>在JS 中省略用不到的函数参数实际上是很常见的，这样的使用方式，促成了TS 中函数类型之间的兼容性</strong>。</li><li>并且因为回调函数是有类型的，所以，TS 会自动推导出参数item、index、array 的类型。</li></ol></li><li><p><strong>参数类型</strong>，相同位置的参数类型要相同（原始类型）或兼容（对象类型）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f1</span>: <span class="variable constant_">F1</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f2</span>: <span class="variable constant_">F2</span> = f1</span><br></pre></td></tr></table></figure><p>函数类型F2 兼容函数类型F1，因为F1 和F2 的第一个参数类型相同。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point3D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>; <span class="attr">z</span>: <span class="built_in">number</span>; &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="function">(<span class="params">p: Point2D</span>) =&gt;</span> <span class="built_in">void</span> <span class="comment">// 相当于有 2 个参数</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F3</span> = <span class="function">(<span class="params">p: Point3D</span>) =&gt;</span> <span class="built_in">void</span> <span class="comment">// 相当于有 3 个参数</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f2</span>: <span class="variable constant_">F2</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f3</span>: <span class="variable constant_">F3</span> = f2</span><br></pre></td></tr></table></figure><p><strong>将对象拆开，把每个属性看做一个个参数</strong>，则，参数少的（f2）可以赋值给参数多的（f3）。</p></li><li><p><strong>返回值类型</strong>，只关注返回值类型本身即可：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">F5</span> = <span class="function">() =&gt;</span> <span class="built_in">string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F6</span> = <span class="function">() =&gt;</span> <span class="built_in">string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f5</span>: <span class="variable constant_">F5</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f6</span>: <span class="variable constant_">F6</span> = f5</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F7</span> = <span class="function">() =&gt;</span> &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F8</span> = <span class="function">() =&gt;</span> &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">f7</span>: <span class="variable constant_">F7</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f8</span>: <span class="variable constant_">F8</span></span><br><span class="line">f7 = f8</span><br></pre></td></tr></table></figure><ol><li>如果返回值类型是原始类型，此时两个类型要相同，比如，左侧类型F5 和F6。</li><li>如果<strong>返回值类型是对象类型</strong>，此时<strong>成员多的可以赋值给成员少的</strong>，比如，右侧类型F7 和F8。</li></ol></li></ol><h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h3><p>交叉类型（<code>&amp;</code>）：功能类似于接口继承（extends），<strong>用于组合多个类型为一个类型</strong>（常用于对象类型）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Contact</span> &#123; <span class="attr">phone</span>: <span class="built_in">string</span> &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonDetail</span> = <span class="title class_">Person</span> &amp; <span class="title class_">Contact</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="title class_">PersonDetail</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">  <span class="attr">phone</span>: <span class="string">&#x27;133....&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用交叉类型后，新的类型PersonDetail 就<strong>同时具备</strong>了Person 和Contact 的所有属性类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PersonDetail</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">phone</span>: <span class="built_in">string</span> &#125;</span><br></pre></td></tr></table></figure><p>交叉类型（&amp;）和接口继承（extends）的对比：</p><ul><li>相同点：都可以实现对象类型的组合。</li><li>不同点：两种方式实现类型组合时，对于同名属性之间，<strong>处理类型冲突的方式不同</strong>。</li></ul><p><img src="/2022/11/07/TypeScript/2022-11-08-21-49-00.png" alt="交叉类型"><br>以上代码，接口继承会报错（类型不兼容）；交叉类型没有错误，可以简单的理解为:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fn</span>: <span class="function">(<span class="params">value: <span class="built_in">string</span> | <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">string</span></span><br></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h4 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h4><p>泛型是可以在保证类型安全前提下，让函数等与多种类型一起工作，从而实现复用，常用于：函数、接口、class 中。</p><p>需求：创建一个id 函数，传入什么数据就返回该数据本身（也就是说，参数和返回值类型相同）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">id</span>(<span class="params">value: <span class="built_in">number</span></span>):<span class="built_in">number</span> &#123;<span class="keyword">return</span> value &#125;</span><br></pre></td></tr></table></figure><p>比如，id(10) 调用以上函数就会直接返回10 本身。但是，该函数只接收数值类型，无法用于其他类型。<br>为了能让函数能够接受任意类型，可以将参数类型修改为any。但是，这样就失去了TS 的类型保护，类型不安全。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">id</span>(<span class="params">value: <span class="built_in">any</span></span>):<span class="built_in">any</span> &#123;<span class="keyword">return</span> value &#125;</span><br></pre></td></tr></table></figure><p><strong>泛型</strong>在<strong>保证类型安全</strong>（不丢失类型信息）的同时，可以<strong>让函数等与多种不同的类型一起工作</strong>，灵活可<strong>复用</strong>。<br>实际上，在C＃和Java 等编程语言中，泛型都是用来实现可复用组件功能的主要工具之一。</p><p>创建泛型函数：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> id&lt;<span class="title class_">Type</span>&gt;(<span class="attr">value</span>: <span class="title class_">Type</span>):<span class="title class_">Type</span> &#123; <span class="keyword">return</span>  value &#125;</span><br></pre></td></tr></table></figure><ol><li>语法：在函数名称的后面添加 <code>&lt;&gt;</code>（尖括号），尖括号中添加类型变量，比如此处的Type。</li><li><strong>类型变量</strong>Type，是一<strong>种特殊类型的变量，它处理类型</strong>而不是值。</li><li>该类型变量相当于一个类型容器，能够捕获用户提供的类型（具体是什么类型由用户调用该函数时指定）。</li><li>因为Type 是类型，因此可以将其作为函数参数和返回值的类型，表示参数和返回值具有相同的类型。</li><li>类型变量Type，可以是任意合法的变量名称。</li></ol><p>调用泛型函数：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = id&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> str = id&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><ol><li>语法：在函数名称的后面添加<code>&lt;&gt;</code>（尖括号），<strong>尖括号中指定具体的类型</strong>，比如，此处的number。</li><li>当传入类型number 后，这个类型就会被函数声明时指定的类型变量Type 捕获到。</li><li>此时，Type 的类型就是number，所以，函数id 参数和返回值的类型也都是number。</li></ol><p>这样，通过泛型就做到了让id 函数与多种不同的类型一起工作，实现了复用的同时保证了类型安全。</p><p>简化调用泛型函数：</p><p><img src="/2022/11/07/TypeScript/2022-11-08-22-57-41.png" alt="简化调用泛型函数"></p><ol><li>在调用泛型函数时，可以省略&lt;类型&gt; 来简化泛型函数的调用。</li><li>此时，TS 内部会采用一种叫做类型参数推断的机制，来根据传入的实参自动推断出类型变量Type 的类型。</li><li>比如，传入实参10，TS 会自动推断出变量num 的类型number，并作为Type 的类型。</li></ol><p>推荐：使用这种简化的方式调用泛型函数，使代码更短，更易于阅读。<br>说明：当编译器无法推断类型或者推断的类型不准确时，就需要显式地传入类型参数。</p><h4 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h4><p><strong>泛型约束</strong>：默认情况下，泛型函数的类型变量Type 可以代表多个类型，这导致无法访问任何属性。<br>比如，id(‘a’) 调用函数时获取参数的长度：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> id&lt;<span class="title class_">Type</span>&gt;(<span class="attr">value</span>: <span class="title class_">Type</span>):<span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="property">length</span>)</span><br><span class="line">  <span class="keyword">return</span>  value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Type 可以代表任意类型，无法保证一定存在length 属性，比如number 类型就没有length。<br>此时，就需要为泛型添加约束来<strong>收缩类型</strong>（缩窄类型取值范围）。</p><p>添加泛型约束收缩类型，主要有以下两种方式：1 指定更加具体的类型2 添加约束。</p><ol><li><p>指定更加具体的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> id&lt;<span class="title class_">Type</span>&gt;(<span class="attr">value</span>: <span class="title class_">Type</span>[]): <span class="title class_">Type</span>[] &#123;</span><br><span class="line">  value.<span class="property">length</span></span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如，将类型修改为Type[]（Type 类型的数组），因为只要是数组就一定存在length 属性，因此就可以访问了。</p></li><li><p>添加约束</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ILength</span> &#123; <span class="attr">length</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">function</span> id&lt;<span class="title class_">Type</span> <span class="keyword">extends</span> <span class="title class_">ILength</span>&gt;(<span class="attr">value</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  value.<span class="property">length</span></span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建描述约束的接口ILength，该接口要求提供length 属性。</li><li>通过 extends 关键字使用该接口，为泛型（类型变量）添加约束。</li><li>该约束表示：传入的类型必须具有length 属性。<br>注意：传入的实参（比如，数组）只要有length 属性即可，这也符合前面讲到的接口的类型兼容性。</li></ol></li></ol><p>泛型的类型变量可以有多个，并且类型变量之间还可以约束（比如，第二个类型变量受第一个类型变量约束）。<br>比如，创建一个函数来获取对象中属性的值：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> getProp&lt;<span class="title class_">Type</span>, <span class="title class_">Key</span> <span class="keyword">extends</span> keyof <span class="title class_">Type</span>&gt;(<span class="attr">obj</span>: <span class="title class_">Type</span>, <span class="attr">key</span>: <span class="title class_">Key</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>: <span class="string">&#x27;name&#x27;</span>,<span class="attr">age</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="title function_">getProp</span>(person,<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure><ol><li>添加了第二个类型变量Key，两个类型变量之间使用（<code>,</code>）逗号分隔。</li><li><code>keyof</code> 关键字<strong>接收一个对象类型，生成其键名称（可能是字符串或数字）的联合类型</strong>。</li><li>本示例中keyof Type 实际上获取的是 person 对象所有键的联合类型，也就是：’name’ | ‘age’。</li><li>类型变量Key 受Type 约束，可以理解为：Key 只能是Type 所有键中的任意一个，或者说只能访问对象中存在的属性。</li></ol><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><p><strong>泛型接口</strong>：接口也可以配合泛型来使用，以增加其灵活性，增强其复用性。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IdFunc</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="function">(<span class="params">value: Type</span>) =&gt;</span> <span class="title class_">Type</span></span><br><span class="line">  <span class="attr">ids</span>: <span class="function">() =&gt;</span> <span class="title class_">Type</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="title class_">IdFunc</span>&lt;<span class="built_in">number</span>&gt; = &#123;</span><br><span class="line">  <span class="title function_">id</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">ids</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在接口名称的后面添加<code>&lt;类型变量&gt;</code>，那么，这个接口就变成了泛型接口。</li><li>接口的类型变量，对接口中所有其他成员可见，也就是接口中所有成员都可以使用类型变量。</li><li>使用泛型接口时，需要<strong>显式指定具体的类型</strong>（比如，此处的IdFunc\<number>）。</number></li><li>此时，id 方法的参数和返回值类型都是number；ids 方法的返回值类型是number[]。</li></ol><p>实际上，JS 中的数组在TS 中就是一个<strong>泛型接口</strong>。<br><img src="/2022/11/07/TypeScript/2022-11-08-22-38-09.png" alt="泛型"><br>解释：当我们在使用数组时，TS 会根据数组的不同类型，来自动将类型变量设置为相应的类型。<br>技巧：可以通过Ctrl + 鼠标左键（Mac：option + 鼠标左键）来查看具体的类型信息。</p><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><p><strong>泛型类</strong>：class 也可以配合泛型来使用。<br>比如，React 的class 组件的基类Component 就是泛型类，不同的组件有不同的props 和state。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IState</span> &#123; <span class="attr">count</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IProps</span> &#123; <span class="attr">maxLength</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InputCount</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">IProps</span>,<span class="title class_">IState</span>&gt;&#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="title class_">IState</span> = &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.maxLength&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>React.Component 泛型类两个类型变量，分别指定props 和state 类型。</p><p>创建泛类型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GenericNumber</span>&lt;<span class="title class_">NumType</span>&gt; &#123;</span><br><span class="line">  <span class="attr">defaultValue</span>: <span class="title class_">NumType</span></span><br><span class="line">  <span class="attr">add</span>: <span class="function">(<span class="params">x: NumType, y: NumType</span>) =&gt;</span> <span class="title class_">NumType</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>类似于泛型接口，在class 名称后面添加<code>&lt;类型变量&gt;</code>，这个类就变成了泛型类。</li><li>此处的add 方法，采用的是箭头函数形式的类型书写方式。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这种情况下，推荐明确指定 &lt;类型&gt;。因为 TS 无法推导出类型</span></span><br><span class="line"><span class="keyword">const</span> myNum = <span class="keyword">new</span> <span class="title class_">GenericNumber</span>() <span class="comment">//as GenericNumber&lt;number&gt;</span></span><br><span class="line">myNum.<span class="property">defaultValue</span> = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>类似于泛型接口，在创建class 实例时，在类名后面通过&lt;类型&gt; 来指定明确的类型。</p><h4 id="泛型工具类型"><a href="#泛型工具类型" class="headerlink" title="泛型工具类型"></a>泛型工具类型</h4><p><strong>泛型工具类型</strong>：TS 内置了一些常用的工具类型，来简化TS 中的一些常见操作。<br>说明：它们都是基于泛型实现的（泛型适用于多种类型，更加通用），并且是内置的，可以直接在代码中使用。<br>这些工具类型有很多，主要学习以下几个：</p><ol><li>Partial\<Type></Type></li><li>Readonly\<Type></Type></li><li>Pick<Type, keys></Type,></li><li>Record<Keys, type></Keys,></li></ol><div class="tabs" id="fanxing"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#fanxing-1">Partial</button></li><li class="tab"><button type="button" data-href="#fanxing-2">Readonly</button></li><li class="tab"><button type="button" data-href="#fanxing-3">Pick</button></li><li class="tab"><button type="button" data-href="#fanxing-4">Record</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="fanxing-1"><p>源码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>泛型工具类型- <code>Partial&lt;Type&gt;</code> <strong>用来构造（创建）一个类型，将Type 的所有属性全部变为可选。</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">children</span>: <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialProps</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Props</span>&gt;</span><br><span class="line"><span class="comment">//报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p1</span>: <span class="title class_">Props</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: [<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p2</span>: <span class="title class_">PartialProps</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: [<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>构造出来的新类型 PartialProps 结构和 Props 相同，但所有属性都变为可选的。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="fanxing-2"><p>源码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Readonly</span>&lt;T&gt; = &#123;</span><br><span class="line">    <span class="keyword">readonly</span> [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>泛型工具类型- <code>Readonly&lt;Type&gt;</code> <strong>用来构造一个类型，将Type 的所有属性都设置为readonly（只读）</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">children</span>: <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReadonlyProps</span> = <span class="title class_">Readonly</span>&lt;<span class="title class_">Props</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p1</span>: <span class="title class_">ReadonlyProps</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  <span class="attr">children</span>: [<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line">p1.<span class="property">id</span> = <span class="string">&#x27;2&#x27;</span> <span class="comment">//此行报错</span></span><br></pre></td></tr></table></figure><p>构造出来的新类型ReadonlyProps 结构和Props 相同，但所有属性都变为只读的。<br>当我们想重新给id 属性赋值时，就会报错：无法分配到”id” ，因为它是只读属性。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="fanxing-3"><p>源码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Pick</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>泛型工具类型- <code>Pick&lt;Type, Keys&gt;</code> <strong>从Type 中选择一组属性来构造新类型</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">children</span>: <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PickProps</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Props</span>, <span class="string">&#x27;id&#x27;</span> | <span class="string">&#x27;title&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><ol><li>Pick 工具类型有两个类型变量：1 表示选择谁的属性2 表示选择哪几个属性。</li><li>其中第二个类型变量，如果只选择一个则只传入该属性名即可。</li><li><strong>第二个类型变量传入的属性只能是第一个类型变量中存在的属性</strong>。</li><li>构造出来的新类型PickProps，只有id 和title 两个属性类型。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="fanxing-4"><p>源码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Record</span>&lt;K <span class="keyword">extends</span> keyof <span class="built_in">any</span>, T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>泛型工具类型- <code>Record&lt;Keys,Type&gt;</code> <strong>构造一个对象类型，属性键为Keys，属性类型为Type</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">RecordObj</span> = <span class="title class_">Record</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>, <span class="built_in">string</span>[]&gt;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="title class_">RecordObj</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: [<span class="string">&#x27;a&#x27;</span>],</span><br><span class="line">  <span class="attr">b</span>: [<span class="string">&#x27;b&#x27;</span>],</span><br><span class="line">  <span class="attr">c</span>: [<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Record 工具类型有两个类型变量：1 表示对象有哪些属性2 表示对象属性的类型。</li><li>构建的新对象类型RecordObj 表示：这个对象有三个属性分别为a/b/c，属性值的类型都是string[]。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="索引签名类型"><a href="#索引签名类型" class="headerlink" title="索引签名类型"></a>索引签名类型</h3><p>绝大多数情况下，我们都可以在使用对象前就确定对象的结构，并为对象添加准确的类型。<br>使用场景：<strong>当无法确定对象中有哪些属性</strong>（或者说对象中可以出现任意多个属性），此时，就用到索引<strong>签名类型</strong>了。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">AnyObject</span> &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="title class_">AnyObject</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>使用<code>[key: string]</code>来约束该接口中允许出现的属性名称。表示只要是string 类型的属性名称，都可以出现在对象中。</li><li>这样，对象obj 中就可以出现任意多个属性（比如，a、b 等）。</li><li><code>key</code> <strong>只是一个占位符</strong>，可以换成任意合法的变量名称。</li><li>隐藏的前置知识：<strong>JS 中对象（{}）的键是string 类型的</strong>。</li></ol><p>在JS 中数组是一类特殊的对象，特殊在数组的键（索引）是数值类型。<br>并且，数组也可以出现任意多个元素。所以，在数组对应的泛型接口中，也用到了索引签名类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyArray</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="title class_">Type</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>: <span class="title class_">MyArray</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><ol><li>MyArray 接口模拟原生的数组接口，并使用<code>[index: number]</code>来作为索引签名类型。</li><li>该索引签名类型表示：只要是number 类型的键（索引）都可以出现在数组中，或者说数组中可以有任意多个元素。</li><li>同时也符合数组索引是 number 类型这一前提。</li></ol><h3 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h3><p>映射类型：<strong>基于旧类型创建新类型（对象类型）</strong>，减少重复、提升开发效率。<br>比如，类型 PropKeys 有 x/y/z，另一个类型Type1 中也有x/y/z，并且 Type1 中 x/y/z 的类型相同：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PropKeys</span> = <span class="string">&#x27;x&#x27;</span> | <span class="string">&#x27;y&#x27;</span> | <span class="string">&#x27;z&#x27;</span> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Type1</span> = &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>; <span class="attr">z</span>: <span class="built_in">number</span> &#125;</span><br></pre></td></tr></table></figure><p>这样书写没错，但 x/y/z 重复书写了两次。像这种情况，就可以使用映射类型来进行简化。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PropKeys</span> = <span class="string">&#x27;x&#x27;</span> | <span class="string">&#x27;y&#x27;</span> | <span class="string">&#x27;z&#x27;</span> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Type2</span> = &#123; [<span class="title class_">Key</span> <span class="keyword">in</span> <span class="title class_">PropKeys</span>]: <span class="built_in">number</span> &#125;</span><br></pre></td></tr></table></figure><ol><li>映射类型是基于索引签名类型的，所以，该语法类似于索引签名类型，也使用了<code>[]</code>。</li><li><code>Key in PropKeys</code> 表示Key 可以是PropKeys 联合类型中的任意一个，类似于forin(let k in obj)。</li><li>使用映射类型创建的新对象类型Type2 和类型Type1 结构完全相同。</li><li>注意：<strong>映射类型只能在类型别名中使用，不能在接口中使用</strong>。</li></ol><p>映射类型除了根据联合类型创建新类型外，还可以根据对象类型来创建：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123; <span class="attr">a</span>: <span class="built_in">number</span>; <span class="attr">b</span>: <span class="built_in">string</span>; <span class="attr">c</span>: <span class="built_in">boolean</span> &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Type3</span> = &#123; [key <span class="keyword">in</span> keyof <span class="title class_">Props</span>]: <span class="built_in">number</span> &#125;</span><br></pre></td></tr></table></figure><ol><li>首先，先执行 <code>keyof Props</code> 获取到对象类型Props 中所有键的联合类型即，<code>&#39;a&#39; | &#39;b&#39; | &#39;c&#39;</code>。</li><li>然后，Key in … 就表示Key 可以是Props 中所有的键名称中的任意一个。</li></ol><p>实际上，<a href="#泛型工具类型">泛型工具类型</a>（比如，<code>Partial&lt;Type&gt;</code>）都是<strong>基于映射类型实现的</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123; <span class="attr">a</span>: <span class="built_in">number</span>; <span class="attr">b</span>: <span class="built_in">string</span>; <span class="attr">c</span>: <span class="built_in">boolean</span> &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialProps</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Props</span>&gt;</span><br></pre></td></tr></table></figure><ol><li><code>keyof T</code> 即 keyof Props 表示获取Props 的所有键，也就是：’a’ | ‘b’ | ‘c’。</li><li>在[] 后面添加<code>?</code>（问号），表示将这些属性变为可选的，以此来实现Partial 的功能。</li><li>冒号后面的<strong>T[P]表示获取T中每个键对应的类型</strong>。比如，如果是’a’ 则类型是number；如果是’b’ 则类型是string。</li><li>最终，新类型PartialProps 和旧类型Props 结构完全相同，只是让所有类型都变为可选了。</li></ol><p>刚刚用到的T[P] 语法，在TS 中叫做<strong>索引查询（访问）类型</strong>。<br>作用：<strong>用来查询属性的类型</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123; <span class="attr">a</span>: <span class="built_in">number</span>; <span class="attr">b</span>: <span class="built_in">string</span>; <span class="attr">c</span>: <span class="built_in">boolean</span> &#125;</span><br><span class="line"><span class="comment">//   type TypeA = number</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TypeA</span> = <span class="title class_">Props</span>[<span class="string">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure><p><code>Props[&#39;a&#39;]</code> 表示查询类型Props 中属性’a’ 对应的类型number。所以，TypeA 的类型为 number。<br>注意：<strong>[] 中的属性必须存在于被查询类型中</strong>，否则就会报错。</p><p>索引查询类型的其他使用方式：<strong>同时查询多个索引的类型</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123; <span class="attr">a</span>: <span class="built_in">number</span>; <span class="attr">b</span>: <span class="built_in">string</span>; <span class="attr">c</span>: <span class="built_in">boolean</span> &#125;</span><br><span class="line"><span class="comment">//使用字符串字面量的联合类型，获取属性a 和b 对应的类型，结果为： string | number</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TypeA</span> = <span class="title class_">Props</span>[<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="comment">//使用keyof 操作符获取Props 中所有键对应的类型，结果为： string | number | boolean</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TypeB</span> = <span class="title class_">Props</span>[keyof <span class="title class_">Props</span>]</span><br></pre></td></tr></table></figure><h2 id="TypeScript-类型声明文件"><a href="#TypeScript-类型声明文件" class="headerlink" title="TypeScript 类型声明文件"></a>TypeScript 类型声明文件</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>今天几乎所有的JavaScript 应用都会引入许多第三方库来完成任务需求。<br>这些第三方库不管是否是用TS 编写的，最终都要编译成JS 代码，才能发布给开发者使用。<br>我们知道是TS 提供了类型，才有了代码提示和类型保护等机制。<br>但在项目开发中使用第三方库时，你会发现它们几乎都有相应的TS 类型，这些类型是怎么来的呢？类型声明文件<br><strong>类型声明文件：用来为已存在的JS 库提供类型信息</strong>。<br>这样在TS 项目中使用这些库时，就像用TS 一样，都会有代码提示、类型保护等机制了。</p><h3 id="TS-中的两种文件类型"><a href="#TS-中的两种文件类型" class="headerlink" title="TS 中的两种文件类型"></a>TS 中的两种文件类型</h3><p>TS 中有两种文件类型：1 <code>.ts</code> 文件2 <code>.d.ts</code> 文件。</p><ul><li><p>.ts 文件</p><ol><li>既包含类型信息又可执行代码。</li><li>可以被编译为.js 文件，然后，执行代码。</li><li>用途：编写程序代码的地方。</li></ol></li><li><p>.d.ts 文件</p><ol><li><strong>只包含类型信息</strong>的类型声明文件。</li><li>不会生成.js 文件，仅用于提供类型信息。</li><li>用途：为JS 提供类型信息。</li></ol></li></ul><p>总结：<strong>.ts 是implementation（代码实现文件）；.d.ts 是declaration（类型声明文件）。</strong><br>如果要为JS 库提供类型信息，要使用 <code>.d.ts</code> 文件。</p><h3 id="类型声明文件的使用说明"><a href="#类型声明文件的使用说明" class="headerlink" title="类型声明文件的使用说明"></a>类型声明文件的使用说明</h3><p>在使用TS 开发项目时，类型声明文件的使用包括以下两种方式：</p><ol><li>使用已有的类型声明文件</li><li>创建自己的类型声明文件</li></ol><p>学习顺序：<strong>先会用</strong>（别人的）<strong>再会写</strong>（自己的）。</p><h4 id="使用已有的类型声明文件"><a href="#使用已有的类型声明文件" class="headerlink" title="使用已有的类型声明文件"></a>使用已有的类型声明文件</h4><p>使用已有的类型声明文件：1. <strong>内置类型声明文件</strong>； 2. <strong>第三方库的类型声明文件</strong>。</p><h5 id="内置类型声明文件"><a href="#内置类型声明文件" class="headerlink" title="内置类型声明文件"></a>内置类型声明文件</h5><p>内置类型声明文件：<strong>TS 为JS 运行时可用的所有标准化内置API 都提供了声明文件</strong>。<br>比如，在使用数组时，数组所有方法都会有相应的代码提示以及类型信息：<br><img src="/2022/11/07/TypeScript/2022-11-09-14-38-59.png" alt="类型信息"><br>实际上这都是TS 提供的内置类型声明文件。<br>可以通过 <code>Ctrl + 鼠标左键</code>（Mac：option + 鼠标左键）来查看内置类型声明文件内容。<br>比如，查看forEach 方法的类型声明，在VSCode 中会自动跳转到 lib.es5.d.ts 类型声明文件中。<br>当然，像window、document 等BOM、DOM API 也都有相应的类型声明（lib.dom.d.ts）。</p><h5 id="第三方库的类型声明文件"><a href="#第三方库的类型声明文件" class="headerlink" title="第三方库的类型声明文件"></a>第三方库的类型声明文件</h5><p>第三方库的类型声明文件：目前，几乎所有常用的第三方库都有相应的类型声明文件。<br>第三方库的类型声明文件有两种存在形式： <strong>库自带类型声明文件</strong>和<strong>由DefinitelyTyped 提供</strong>。</p><ol><li><p>库自带类型声明文件<br><img src="/2022/11/07/TypeScript/2022-11-09-15-11-41.png" alt="axios"><br>这种情况下，正常导入该库，TS 就会自动加载库自己的类型声明文件，以提供该库的类型声明。</p></li><li><p>由DefinitelyTyped 提供。<br><a href="https://github.com/DefinitelyTyped/DefinitelyTyped/">DefinitelyTyped</a> 是一个github 仓库，用来提供高质量TypeScript 类型声明。可以通过npm/yarn 来下载该仓库提供的TS 类型声明包，这些包的名称格式为：<code>@types/*</code>。<br>比如，@types/react、@types/lodash 等。<br>说明：在实际项目开发时，如果你使用的第三方库没有自带的声明文件，VSCode 会给出明确的提示。<br><img src="/2022/11/07/TypeScript/2022-11-09-15-32-08.png" alt="@type"><br>解释：当安装<code>@types/*</code>类型声明包后，<strong>TS 也会自动加载该类声明包</strong>，以提供该库的类型声明。<br>补充：TS 官方文档提供了一个<a href="https://www.typescriptlang.org/dt/search?search=">页面</a>，可以来查询@types/* 库。</p></li></ol><h4 id="创建自己的类型声明文件"><a href="#创建自己的类型声明文件" class="headerlink" title="创建自己的类型声明文件"></a>创建自己的类型声明文件</h4><p>创建自己的类型声明文件：1. <strong>项目内共享类型</strong> 2. <strong>为已有JS 文件提供类型声明</strong>。</p><h5 id="项目内共享类型"><a href="#项目内共享类型" class="headerlink" title="项目内共享类型"></a>项目内共享类型</h5><p>项目内共享类型：如果多个 <code>.ts</code> 文件中都用到同一个类型，此时可以创建 <code>.d.ts</code> 文件提供该类型，<strong>实现类型共享</strong>。<br><figure class="highlight ts"><figcaption><span>a.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Props</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./index&#x27;</span></span><br><span class="line"><span class="comment">// type Props = &#123; x: number; y: number &#125;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p1</span>: <span class="title class_">Props</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight ts"><figcaption><span>b.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Props</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./index&#x27;</span></span><br><span class="line"><span class="comment">// type Props = &#123; x: number; y: number &#125;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p2</span>: <span class="title class_">Props</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">22</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight ts"><figcaption><span>index.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Props</span> &#125;</span><br></pre></td></tr></table></figure><br>操作步骤：</p><ol><li>创建index<code>.d.ts</code> 类型声明文件。</li><li>创建需要共享的类型，并使用 <code>export</code> 导出（TS 中的类型也可以使用import/export 实现模块化功能）。</li><li>在需要使用共享类型的.ts 文件中，通过 <code>import</code> 导入即可（.d.ts 后缀导入时，直接省略）。</li></ol><h5 id="为已有JS-文件提供类型声明"><a href="#为已有JS-文件提供类型声明" class="headerlink" title="为已有JS 文件提供类型声明"></a>为已有JS 文件提供类型声明</h5><p>以下情况需要为已有JS 文件提供类型声明：</p><ol><li>在将JS 项目<a href="https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html">迁移</a>到TS 项目时，为了让已有的.js 文件有类型声明。</li><li>成为库作者，创建库给其他人使用。</li></ol><p>注意：<strong>类型声明文件的编写与模块化方式相关</strong>，不同的模块化方式有不同的写法。但由于历史原因，JS 模块化的发展经历过多种变化（AMD、CommonJS、UMD、ESModule 等），而TS 支持各种模块化形式的类型声明。这就导致，类型声明文件<a href="https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html">相关内容</a>又多又杂。</p><p>演示：基于最新的ESModule（import/export）来为已有.js 文件，创建类型声明文件。<br>开发环境准备：使用webpack 搭建，通过 <code>ts-loader</code> 处理.ts 文件。</p><h5 id="declare-关键字"><a href="#declare-关键字" class="headerlink" title="declare 关键字"></a>declare 关键字</h5><p>TS 项目中也可以使用.js 文件。<br>在导入.js 文件时，<strong>TS 会自动加载与.js 同名的.d.ts 文件</strong>，以提供类型声明。<br><code>declare</code> 关键字：用于类型声明，为其他地方（比如，.js 文件）已存在的变量声明类型，而不是创建一个新的变量。</p><ol><li>对于type、interface 等这些明确就是TS 类型的（只能在TS 中使用的），可以省略declare 关键字。</li><li>对于let、function 等具有双重含义（在JS、TS 中都能用），应该使用declare 关键字，明确指定此处用于类型声明。</li></ol><div class="tabs" id="declare"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#declare-1">utils.js</button></li><li class="tab"><button type="button" data-href="#declare-2">utils.d.ts</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="declare-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> songName = <span class="string">&#x27;痴心绝对&#x27;</span></span><br><span class="line"><span class="keyword">let</span> position = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">direction</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(direction)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fomartPoint</span> = point =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前坐标：&#x27;</span>, point)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; count, songName, position, add, changeDirection, fomartPoint &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="declare-2"><p>为 utils.js 文件来提供类型声明</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">count</span>: <span class="built_in">number</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">songName</span>: <span class="built_in">string</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">position</span>: <span class="title class_">Point</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params"></span></span><br><span class="line"><span class="params">  direction: <span class="string">&#x27;up&#x27;</span> | <span class="string">&#x27;down&#x27;</span> | <span class="string">&#x27;left&#x27;</span> | <span class="string">&#x27;right&#x27;</span></span></span><br><span class="line"><span class="params"></span>): <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FomartPoint</span> = <span class="function">(<span class="params">point: Point</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">fomartPoint</span>: <span class="title class_">FomartPoint</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：类型提供好以后，需要使用 模块化方案 中提供的</span></span><br><span class="line"><span class="comment">//      模块化语法，来导出声明好的类型。然后，才能在</span></span><br><span class="line"><span class="comment">//      其他的 .ts 文件中使用</span></span><br><span class="line"><span class="keyword">export</span> &#123; count, songName, position, add, changeDirection, fomartPoint, <span class="title class_">Point</span> &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="在React-中使用TypeScript"><a href="#在React-中使用TypeScript" class="headerlink" title="在React 中使用TypeScript"></a>在React 中使用TypeScript</h2><p>掌握 TS 中基础类型、高级类型的使用是不够啊的，如果要在前端项目开发中使用TS，还需要掌握React、Vue、Angular 等这些库或框架中提供的API 的类型，以及在TS 中是如何使用的。</p><p>接下来，我们以React 为例，来学习如何在React 项目中使用TS。包括以下内容：</p><ol><li><a href="#使用CRA创建支持TS的项目">使用 CRA 创建支持 TS 的项目</a></li><li><a href="#TS配置文件">TS 配置文件 <code>tsconfig.json</code></a></li><li><a href="#React中的常用类型">React 中的常用类型</a></li></ol><h3 id="使用CRA创建支持TS的项目"><a href="#使用CRA创建支持TS的项目" class="headerlink" title="使用CRA创建支持TS的项目"></a>使用CRA创建支持TS的项目</h3><p>React 脚手架工具create-react-app（简称：CRA）默认支持TypeScript。<br>创建支持TS 的项目命令：<code>npx create-react-app 项目名称--template</code> typescript。<br>当出现<code>Happy hacking!</code>，表示支持TS 的项目创建成功。</p><p>在已TS有项目中使用TS，请<a href="https://create-react-app.dev/docs/adding-typescript">参阅</a></p><p>相对于非TS 项目，目录结构主要由以下三个变化：</p><ol><li>项目根目录中增加了<code>tsconfig.json</code> 配置文件：指定 <strong>TS 的编译选项</strong>（比如，编译时是否移除注释）。</li><li>React 组件的文件扩展名变为：<code>*.tsx</code>。</li><li>src 目录中增加了<code>react-app-env.d.ts</code>：<strong>React 项目默认的类型声明文件</strong>。</li></ol><p><img src="/2022/11/07/TypeScript/2022-11-10-14-37-04.png" alt="对比"></p><h4 id="react-app-env-d-ts"><a href="#react-app-env-d-ts" class="headerlink" title="react-app-env.d.ts"></a>react-app-env.d.ts</h4><p>react-app-env.d.ts：<strong>React 项目默认的类型声明文件</strong>。<br><strong>三斜线指令</strong>：指定依赖的其他类型声明文件，types 表示依赖的类型声明文件包的名称。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;react-scripts&quot; /&gt;</span></span><br></pre></td></tr></table></figure><p>告诉TS 帮我加载 <code>react-scripts</code> 这个包提供的类型声明。<br>react-scripts 的类型声明文件包含了两部分类型：</p><ol><li>react、react-dom、node 的类型</li><li>图片、样式等模块的类型，以允许在代码中导入图片、SVG 等文件。</li></ol><p>TS 会自动加载该.d.ts 文件，以提供类型声明（通过修改tsconfig.json 中的include 配置来验证）。</p><h3 id="TS配置文件"><a href="#TS配置文件" class="headerlink" title="TS配置文件"></a>TS配置文件</h3><p><code>tsconfig.json</code>指定<strong>项目文件和项目编译所需的配置项</strong>。<br>注意：</p><ul><li>TS 的配置项非常多（100+），以 CRA 项目中的配置为例来学习。</li><li>所有的配置项都可以通过鼠标移入的方式，来查看配置项的解释说明。</li><li>其他的配置项用到时查<a href="https://www.typescriptlang.org/tsconfig/">tsconfig 文档</a>即可。</li></ul><details class="toggle"><summary class="toggle-button" style>CRA项目中tsconfig.json基本配置项</summary><div class="toggle-content"><p><strong>tsconfig 的解释说明</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 编译选项</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 生成代码的语言版本</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 指定要包含在编译中的 library</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;dom&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dom.iterable&quot;</span><span class="punctuation">,</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 允许 ts 编译器编译 js 文件</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 跳过声明文件的类型检查</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// es 模块 互操作，屏蔽 ESModule 和 CommonJS 之间的差异</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 允许通过 import x from &#x27;y&#x27; 即使模块没有显式指定 default 导出</span></span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 开启严格模式</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 对文件名称强制区分大小写</span></span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 为 switch 语句启用错误报告</span></span><br><span class="line">    <span class="attr">&quot;noFallthroughCasesInSwitch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 生成代码的模块化标准</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 模块解析（查找）策略</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 允许导入扩展名为.json的模块</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 是否将没有 import/export 的文件视为旧（全局而非模块化）脚本文件。</span></span><br><span class="line">    <span class="attr">&quot;isolatedModules&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 编译时不生成任何文件（只进行类型检查）</span></span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 指定将 JSX 编译成什么形式</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-jsx&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 指定允许 ts 处理的目录</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div></details><ol><li>tsconfig.json 文件所在目录为项目根目录（与package.json 同级）。</li><li>tsconfig.json 可以自动生成，命令：<code>tsc --init</code>。</li></ol><p>除了在tsconfig.json 文件中使用编译配置外，还可以通过命令行来使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc hello.ts --target es6</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>tsc 后<strong>带有输入文件</strong>时（比如，tsc hello.ts），将忽略tsconfig.json 文件。</li><li>tsc 后<strong>不带输入文件</strong>时（比如，tsc），才会启用tsconfig.json。</li></ol><p><strong>推荐使用tsconfig.json 配置文件。</strong></p><h3 id="React中的常用类型"><a href="#React中的常用类型" class="headerlink" title="React中的常用类型"></a>React中的常用类型</h3><p>前提说明：现在是基于class 组件来讲解React+TS 的使用（最新使用 React Hooks）。<br>在不使用TS 时，可以使用prop-types 库，为React 组件提供<a href="https://reactjs.org/docs/typechecking-with-proptypes.html">类型检查</a>。<br><strong>TS 项目中，推荐使用TypeScript 实现组件类型校验（代替PropTypes）。</strong><br>不管是React 还是Vue，只要是支持TS 的库，都提供了很多类型，来满足该库对类型的需求。<br>注意：</p><ol><li>React 项目是通过@types/react、@types/react-dom 类型声明包，来提供类型的。</li><li>这些包CRA 已帮我们安装好（react-app-env.d.ts），直接用即可。</li></ol><p>参考资料：<a href="https://reactjs.org/docs/static-type-checking.html">React文档-静态类型检查</a>、<a href="https://github.com/typescript-cheatsheets/react">React+TS备忘单</a>。</p><p>React 是<strong>组件化开发模式</strong>，React 开发主要任务就是写组件，两种组件：1.函数组件 2.class 组件。</p><h4 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h4><p>函数组件，主要包括以下内容：</p><ul><li>组件的类型</li><li>组件的属性（props）</li><li>组件属性的默认值（defaultProps）</li><li>事件绑定和事件对象</li></ul><p>函数组件的类型以及组件的属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> =&#123;<span class="attr">name</span>:<span class="built_in">string</span>; age?:<span class="built_in">number</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Hello</span>:<span class="variable constant_">FC</span>&lt;<span class="title class_">Props</span>&gt; = <span class="function">(<span class="params">&#123;name,age&#125;</span>) =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，我叫：&#123;name&#125;，我&#123;age&#125;岁了<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">Hello</span> name=<span class="string">&quot;Huang&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>可以直接简化为（完全按照函数在TS 中的写法）：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Hello</span> = (<span class="params">&#123;name,age&#125;:Props</span>)=&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，我叫：&#123;name&#125;，我&#123;age&#125;岁了<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>函数组件属性的默认值（defaultProps）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Hello</span> = (<span class="params">&#123;name,age&#125;:Props</span>)=&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，我叫：&#123;name&#125;，我&#123;age&#125;岁了<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Hello</span>.<span class="property">defaultProps</span>=&#123;</span><br><span class="line">  <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以直接简化为（完全按照函数在TS 中的写法）：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Hello</span> = (<span class="params">&#123;name,age =<span class="number">18</span> &#125;:Props</span>)=&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，我叫：&#123;name&#125;，我&#123;age&#125;岁了<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>事件绑定和事件对象</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;onClick&#125;&gt;点赞&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onClick</span> = (<span class="params"></span>)=&gt;&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onClick1</span> = (<span class="params">e:React.MouseEvent&lt;HTMLButtonElement&gt;</span>) =&gt;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//再入，文本框</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onChange</span>=(<span class="params">e:React.ChangeEvent&lt;HTMLInputElement&gt; </span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br></pre></td></tr></table></figure><p>技巧：在JSX 中写事件处理程序（<code>e =&gt; &#123;&#125;</code>），然后，把鼠标放在e 上，利用TS 的<strong>类型推论</strong>来查看事件对象类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  鼠标放置查看类型</span></span><br><span class="line">&lt;input onChange = &#123;<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;&#125; /&gt;</span><br></pre></td></tr></table></figure><h4 id="class组件"><a href="#class组件" class="headerlink" title="class组件"></a>class组件</h4><p>class 组件，主要包括以下内容：</p><ul><li>组件的类型、属性、事件</li><li>组件状态（state）</li></ul><p>class 组件的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">State</span>=&#123;<span class="attr">count</span>:<span class="built_in">number</span>&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span>=&#123;message?:<span class="built_in">string</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">c1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;&#125;              <span class="comment">// 无props state</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">c2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">Props</span>&gt;&#123;&#125;       <span class="comment">// 有props 无state</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">c3</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;&#123;&#125;,<span class="title class_">State</span>&gt;&#123;&#125;    <span class="comment">// 无props 有state</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">c4</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">Props</span>,<span class="title class_">State</span>&gt;&#123;&#125; <span class="comment">// 有props 有state</span></span><br></pre></td></tr></table></figure><p>class 组件的属性和属性默认值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123;<span class="attr">name</span>: <span class="built_in">string</span>; age?:<span class="built_in">number</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">Props</span>&gt;&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="attr">defaultProps</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">Props</span>&gt; = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;name,age&#125;=<span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，我叫：&#123;name&#125;，我&#123;age&#125;岁了<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简化</span></span><br><span class="line"><span class="keyword">const</span>&#123;name,age = <span class="number">18</span>&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br></pre></td></tr></table></figure><p>class 组件状态（state）和事件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">State</span> =&#123;<span class="attr">count</span>: <span class="built_in">number</span>&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;&#123;&#125;,<span class="title class_">State</span>&gt;&#123;</span><br><span class="line">  <span class="attr">state</span>:<span class="title class_">State</span>=&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  onIncrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> +<span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="title function_">render</span>(): <span class="title class_">React</span>.<span class="property">ReactNode</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.state.count&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.onIncrement&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TS案例"><a href="#TS案例" class="headerlink" title="TS案例"></a>TS案例</h2><h3 id="React-案例——todos"><a href="#React-案例——todos" class="headerlink" title="React 案例——todos"></a>React 案例——todos</h3><h4 id="要求文档"><a href="#要求文档" class="headerlink" title="要求文档"></a>要求文档</h4><details class="toggle"><summary class="toggle-button" style>todos案例要求文档</summary><div class="toggle-content"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># TS + React 实现 todos 案例</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 功能演示</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 展示任务列表</span><br><span class="line"><span class="bullet">2.</span> 添加任务</span><br><span class="line"></span><br><span class="line">父组件：App</span><br><span class="line">子组件：TodoAdd 、TodoList</span><br><span class="line"></span><br><span class="line"><span class="section">## 展示任务列表</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 思路</span></span><br><span class="line"></span><br><span class="line">使用<span class="code">`状态提升`</span>（为父组件提供状态，通过 props 传递给子组件）来实现 <span class="strong">**父→子**</span> 通讯。</span><br><span class="line"></span><br><span class="line"><span class="section">### 步骤</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 为父组件 App，提供状态（任务列表数据）和类型</span><br><span class="line"><span class="bullet">2.</span> 为子组件 TodoList 指定能够接收到的 props 类型</span><br><span class="line"><span class="bullet">3.</span> 将任务列表数据传递给 TodoList 组件</span><br><span class="line"></span><br><span class="line"><span class="section">### 优化</span></span><br><span class="line"></span><br><span class="line">使用类型声明文件，实现类型共享。</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 创建 todos.d.ts 文件</span><br><span class="line"><span class="bullet">2.</span> 将公共的类型移动到 todos.d.ts 文件中，并导出</span><br><span class="line"><span class="bullet">3.</span> 在用到该类型的组件（App、TodoList）中导入这些类型</span><br><span class="line"></span><br><span class="line"><span class="section">## 添加任务</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 思路</span></span><br><span class="line"></span><br><span class="line">子组件获取到文本框的值，通过 <span class="strong">**子→父**</span> 通讯 将文本框的值传递给父组件。然后，在父组件中将任务添加到状态数据中。</span><br><span class="line"></span><br><span class="line"><span class="section">### 步骤</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 为子组件添加状态和属性及其类型：</span><br><span class="line"><span class="bullet">   -</span> 状态：文本框的值</span><br><span class="line"><span class="bullet">   -</span> 属性：回调函数，接收一个 string 类型的参数</span><br><span class="line"><span class="bullet">2.</span> 通过<span class="code">`受控组件`</span>方式获取到文本框的值</span><br><span class="line"><span class="bullet">3.</span> 在子组件文本框按下回车键时将数据传递给父组件</span><br><span class="line"><span class="bullet">4.</span> 父组件接收子组件传递过来的任务名称（文本框的值）</span><br><span class="line"><span class="bullet">5.</span> 将任务添加到父组件的状态数据中</span><br></pre></td></tr></table></figure></div></details><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><details class="toggle"><summary class="toggle-button" style>项目结构目录</summary><div class="toggle-content"><ul><li>项目根目录<ul><li>public</li><li>src<ul><li>components<ul><li>TodoAdd.tsx</li><li>TodoFooter.tsx</li><li>TodoList.tsx</li></ul></li><li>css<ul><li>todos-base.css</li><li>todos-index.css</li></ul></li><li>index.tsx</li><li>TodoApp.css</li><li>ToDoApp.tsx</li><li>todos.d.ts</li><li>其他文件</li></ul></li></ul></li></ul></div></details><h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><div class="tabs" id="todos"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#todos-1">index.tsx</button></li><li class="tab"><button type="button" data-href="#todos-2">ToDoApp.tsx</button></li><li class="tab"><button type="button" data-href="#todos-3">TodoAdd.tsx</button></li><li class="tab"><button type="button" data-href="#todos-4">TodoFooter.tsx</button></li><li class="tab"><button type="button" data-href="#todos-5">TodoList.tsx</button></li><li class="tab"><button type="button" data-href="#todos-6">todos.d.ts</button></li><li class="tab"><button type="button" data-href="#todos-7">ToDoApp.css</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="todos-1"><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ToDoApp</span> <span class="keyword">from</span> <span class="string">&#x27;./ToDoApp&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> reportWebVitals <span class="keyword">from</span> <span class="string">&#x27;./reportWebVitals&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLElement</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ToDoApp</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title function_">reportWebVitals</span>();</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="todos-2"><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TodoAdd</span> <span class="keyword">from</span> <span class="string">&quot;./components/TodoAdd&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TodoFooter</span> <span class="keyword">from</span> <span class="string">&quot;./components/TodoFooter&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TodoList</span> <span class="keyword">from</span> <span class="string">&quot;./components/TodoList&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./ToDoApp.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span>&#123;<span class="title class_">TodoItem</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./todos&#x27;</span></span><br><span class="line"><span class="comment">//任务项的类型</span></span><br><span class="line"><span class="comment">// type TodoItem=&#123;</span></span><br><span class="line"><span class="comment">//     id: number</span></span><br><span class="line"><span class="comment">//     text :string</span></span><br><span class="line"><span class="comment">//     done: boolean</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//APP组件的状态类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Todos</span>=&#123;</span><br><span class="line">    <span class="attr">todos</span>: <span class="title class_">TodoItem</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">todos</span>:<span class="title class_">TodoItem</span>[] = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">text</span>:<span class="string">&#x27;吃饭&#x27;</span>,</span><br><span class="line">        <span class="attr">done</span>:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="number">2</span>,</span><br><span class="line">        <span class="attr">text</span>:<span class="string">&#x27;休息&#x27;</span>,</span><br><span class="line">        <span class="attr">done</span>:<span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ToDoApp</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&lt;&#123;&#125;,<span class="title class_">Todos</span>&gt;&#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="title class_">Todos</span>=&#123;</span><br><span class="line">        todos</span><br><span class="line">    &#125;</span><br><span class="line">    addTodo=<span class="function">(<span class="params">text:<span class="built_in">string</span></span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// console.log(text);</span></span><br><span class="line">        <span class="keyword">const</span>&#123;todos&#125;=<span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">const</span> id =todos.<span class="property">length</span>===<span class="number">0</span>?<span class="number">1</span>:todos[todos.<span class="property">length</span>-<span class="number">1</span>].<span class="property">id</span>+<span class="number">1</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">todos</span>:[...<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">todos</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                    id,</span><br><span class="line">                    text,</span><br><span class="line">                    <span class="attr">done</span>:<span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;)       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">&quot;todoapp&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;/* 添加任务 */&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">TodoAdd</span> <span class="attr">onAddToDo</span>=<span class="string">&#123;this.addTodo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;toggle-all&quot;</span> <span class="attr">className</span>=<span class="string">&quot;toggle-all&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;toggle-all&quot;</span>&gt;</span>Mark all as complete<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/* 列表组件 */&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">TodoList</span> <span class="attr">list</span>=<span class="string">&#123;this.state.todos&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">              &#123;/* footer 组件 */&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">TodoFooter</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">          )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ToDoApp</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="todos-3"><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">//属性的类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span>=&#123;</span><br><span class="line">  <span class="title function_">onAddToDo</span>(<span class="attr">text</span>:<span class="built_in">string</span>):<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//状态的类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">State</span>=&#123;</span><br><span class="line">  <span class="attr">text</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TodoAdd</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">Props</span>,<span class="title class_">State</span>&gt; &#123;</span><br><span class="line">  <span class="attr">state</span>:<span class="title class_">State</span>=&#123;</span><br><span class="line">    <span class="attr">text</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  onChange= <span class="function">(<span class="params">e:React.ChangeEvent&lt;HTMLInputElement&gt;</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">text</span>:e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  onAdd=<span class="function">(<span class="params">e:React.KeyboardEvent&lt;HTMLInputElement&gt;</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//1.非空判断</span></span><br><span class="line">    <span class="keyword">const</span>&#123;text&#125;=<span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="comment">//去空格</span></span><br><span class="line">    <span class="keyword">if</span> (text.<span class="title function_">trim</span>()===<span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(e.keyCode)</span></span><br><span class="line">    <span class="comment">// console.log(e.code);</span></span><br><span class="line">    <span class="keyword">if</span>(e.<span class="property">code</span>===<span class="string">&#x27;Enter&#x27;</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">onAddToDo</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">text</span>)</span><br><span class="line">       <span class="comment">//2.清空文本框的值</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">text</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>todos<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">className</span>=<span class="string">&quot;new-todo&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">placeholder</span>=<span class="string">&quot;What needs to be done?&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">autoFocus</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;this.state.text&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.onChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onKeyDown</span>=<span class="string">&#123;this.onAdd&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TodoAdd</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="todos-4"><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TodoFooter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">className</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;todo-count&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">strong</span>&gt;</span>0<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> item left</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;filters&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;selected&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              All</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/active&quot;</span>&gt;</span>Active<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/completed&quot;</span>&gt;</span>Completed<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;clear-completed&quot;</span>&gt;</span>Clear completed<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TodoFooter</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="todos-5"><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TodoItem</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../todos&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type TodoItem=&#123;</span></span><br><span class="line"><span class="comment">//     id: number</span></span><br><span class="line"><span class="comment">//     text :string</span></span><br><span class="line"><span class="comment">//     done: boolean</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span>&#123;</span><br><span class="line">    <span class="attr">list</span>: <span class="title class_">TodoItem</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TodoList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">Props</span>&gt; &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>)</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;todo-list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 编辑样式：editing  已完成样式：completed */&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;</span></span><br><span class="line"><span class="language-xml">            //map 遍历</span></span><br><span class="line"><span class="language-xml">            this.props.list.map(todo =&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                return(</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;todo.id&#125;</span> <span class="attr">className</span>=<span class="string">&#123;todo.done</span> ? &#x27;<span class="attr">completed</span>&#x27; <span class="attr">:</span> &#x27;&#x27;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">className</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;todo.text&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;destroy&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">className</span>=<span class="string">&quot;edit&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;Create a TodoMVC template&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                )</span></span><br><span class="line"><span class="language-xml">            &#125;)</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TodoList</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="todos-6"><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">TodoItem</span>=&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">number</span></span><br><span class="line">    text :<span class="built_in">string</span></span><br><span class="line">    <span class="attr">done</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="todos-7"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&#x27;./css/todos-base.css&#x27;</span>);</span><br><span class="line"><span class="keyword">@import</span> url(<span class="string">&#x27;./css/todos-index.css&#x27;</span>);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="hide-block"><button type="button" class="hide-button" style>Code-Download    </button><div class="hide-content"><p><a href="/downloads/code/React-todos.zip">源码下载</a></p></div></div><h3 id="Project——Tic-Tac-Toe"><a href="#Project——Tic-Tac-Toe" class="headerlink" title="Project——Tic Tac Toe"></a>Project——Tic Tac Toe</h3><h4 id="Tic-Tac-Toe-演示"><a href="#Tic-Tac-Toe-演示" class="headerlink" title="Tic Tac Toe 演示"></a>Tic Tac Toe 演示</h4><p><a href="https://cmwlvip.github.io/game/TicTacToe/Tic-Tac-Toe.html">Tic Tac Toe</a></p><h4 id="Tic-Tac-Toe-实现思路"><a href="#Tic-Tac-Toe-实现思路" class="headerlink" title="Tic Tac Toe 实现思路"></a>Tic Tac Toe 实现思路</h4><details class="toggle"><summary class="toggle-button" style>游戏实现思路</summary><div class="toggle-content"><ul><li><p>单元格点击</p><ol><li>获取到所有元素的单元格列表</li><li>遍历单元格列表，给每一个单元格添加事件</li><li>给被点击的单元格添加类名 x</li></ol></li><li><p>切换玩家</p><ol><li>创建一个储存当前玩家的变量（currentPlayer），默认值为x</li><li>将添加单元格时写死的类名x，替换为变量</li><li>切换到另一个玩家：在添加类名（下棋完成一步）后，根据当前当前玩家，得到另一个玩家</li></ol></li><li><p>使用枚举修改当前玩家</p><ol><li>创建字符串枚举（Player），提供x和o两个成员</li><li>将成员X的值设置为：‘x’（类名）；将成员O的值设置为：‘o’（类名）</li><li>将变量（currentPlayer）的类型设置为Player枚举类型,默认值为Player.X</li><li>将所有用到x和o的地方全部用枚举成员代替</li></ol></li><li><p>判断平局</p><ol><li>创建变量（step），默认值为0</li><li>玩家下棋后让step加 1</li><li>判赢的代码后面，判断step是否等于9</li><li>如果等于9 说明是平局，不再执行后续代码</li></ol></li><li><p>展示获胜信息</p><ol><li>拿到相关的DOM元素</li><li>展示获胜信息面板（通过style属性）</li><li>展示获胜信息</li></ol></li><li><p>重新开始</p><ol><li>获取到重新开始按钮，并绑定事件</li><li>在点击事件中重置游戏数据</li><li>隐藏获胜信息，清空棋盘，移除单元格事件，重新给单元格绑定点击事件</li><li>重置下棋次数，重置默认玩家X，重置下棋提示 </li></ol></li></ul></div></details><h4 id="Tic-Tac-Toe-准备"><a href="#Tic-Tac-Toe-准备" class="headerlink" title="Tic Tac Toe 准备"></a>Tic Tac Toe 准备</h4><mark class="hl-label pink">项目html</mark> <figure class="highlight html"><figcaption><span>Tic&nbsp;Tac&nbsp;Toe.html</span><a href="/downloads/code/project/TicTacToe/Tic-Tac-Toe.html">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Tic Tac Toe<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 游戏面板（棋盘） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;bord&quot;</span><span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span><span class="attr">class</span>=<span class="string">&quot;cell&quot;</span><span class="attr">hover</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span><span class="attr">class</span>=<span class="string">&quot;cell&quot;</span><span class="attr">hover</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span><span class="attr">class</span>=<span class="string">&quot;cell&quot;</span><span class="attr">hover</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span><span class="attr">class</span>=<span class="string">&quot;cell&quot;</span><span class="attr">hover</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span><span class="attr">class</span>=<span class="string">&quot;cell&quot;</span><span class="attr">hover</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span><span class="attr">class</span>=<span class="string">&quot;cell&quot;</span><span class="attr">hover</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span><span class="attr">class</span>=<span class="string">&quot;cell last-row&quot;</span><span class="attr">hover</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span><span class="attr">class</span>=<span class="string">&quot;cell last-row&quot;</span><span class="attr">hover</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span><span class="attr">class</span>=<span class="string">&quot;cell last-row&quot;</span><span class="attr">hover</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 游戏获取信息面板 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span> <span class="attr">class</span>=<span class="string">&quot;game-message&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;restart&quot;</span>&gt;</span>Restart 😜<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;winner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./Tic-Tac-Toe.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><mark class="hl-label pink">项目css</mark> <figure class="highlight css"><figcaption><span>Tic&nbsp;Tac&nbsp;Toe.css</span><a href="/downloads/code/project/TicTacToe/Tic-Tac-Toe.css">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>{</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>{</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f9f2e7</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>{</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*标题*/</span></span><br><span class="line"><span class="selector-tag">h1</span>{</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#477998</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*游戏内容容器*/</span></span><br><span class="line"><span class="selector-class">.container</span>{</span><br><span class="line">    <span class="comment">/* position: relative; */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">471px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">471px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#bord</span>{</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">471px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">471px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.row</span>{</span><br><span class="line">    <span class="attribute">display</span>: flex;<span class="comment">/*弹性布局 ，子元素的float clear vertical-align 将失效*/</span></span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.cell</span><span class="selector-class">.last-row</span>{</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">0</span>;</span><br><span class="line">} </span><br><span class="line"><span class="selector-class">.cell</span><span class="selector-pseudo">:last-child</span> {</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell</span>{</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">157px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">157px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">157px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">6px</span> solid <span class="number">#546363</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">6px</span> solid <span class="number">#546363</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">cursor</span> : pointer;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.no-hover</span> {</span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> {</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">attr</span>(hover);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#747474fa</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.2</span>;<span class="comment">/*透明度 */</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.x</span><span class="selector-pseudo">::before</span>{</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;x&quot;</span>;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">21</span>, <span class="number">151</span>, <span class="number">238</span>);</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.o</span><span class="selector-pseudo">::before</span>{</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;o&quot;</span>;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">21</span>, <span class="number">238</span>, <span class="number">57</span>);</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.game-message</span> {</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">69</span>, <span class="number">133</span>, <span class="number">136</span>, <span class="number">0.4</span>);</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#winner</span> {</span><br><span class="line">    <span class="comment">/* font-family: sans-serif; */</span></span><br><span class="line">    <span class="attribute">color</span>: yellow;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">#ff0000</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#restart</span> {</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#f9f2e7</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">2px</span> <span class="number">6px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#5682a1</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">120px</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="Tic-Tac-Toe——code"><a href="#Tic-Tac-Toe——code" class="headerlink" title="Tic Tac Toe——code"></a>Tic Tac Toe——code</h4><figure class="highlight ts"><figcaption><span>准备所需变量</span><a href="/downloads/code/project/TicTacToe/Tic-Tac-Toe.ts">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Player</span>{</span><br><span class="line">    X=<span class="string">&#x27;x&#x27;</span>,</span><br><span class="line">    O=<span class="string">&#x27;o&#x27;</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> cells=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.cell&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cells)</span><br><span class="line"><span class="comment">//let gameBord=document.querySelector(&#x27;#bord&#x27;)</span></span><br><span class="line"><span class="comment">//console.log(gameBord)</span></span><br><span class="line"><span class="keyword">let</span>  hover = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;&#x27;</span>)<span class="comment">//hover 棋牌变换 X ，O  这样也能获取</span></span><br><span class="line"><span class="comment">// console.log(hover)</span></span><br><span class="line"><span class="keyword">let</span> message=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#message&#x27;</span>)<span class="keyword">as</span> <span class="title class_">HTMLDivElement</span></span><br><span class="line"><span class="keyword">let</span> winner=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#winner&#x27;</span>)<span class="keyword">as</span> <span class="title class_">HTMLParagraphElement</span></span><br><span class="line"><span class="keyword">let</span> restart=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#restart&#x27;</span>)<span class="keyword">as</span> <span class="title class_">HTMLButtonElement</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">currentPlayer</span>:<span class="title class_">Player</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">step</span>:<span class="built_in">number</span></span><br><span class="line"><span class="keyword">let</span> winArry=[</span><br><span class="line">    [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>],[<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>],[<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>],[<span class="number">0</span>,<span class="number">4</span>,<span class="number">8</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>游戏主体</span><a href="/downloads/code/project/TicTacToe/Tic-Tac-Toe.ts">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">startGame</span>()</span><br><span class="line"><span class="comment">//重新开始</span></span><br><span class="line">restart.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,startGame)</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>开始函数</span><a href="/downloads/code/project/TicTacToe/Tic-Tac-Toe.ts">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">startGame</span>(<span class="params"></span>){</span><br><span class="line">    currentPlayer=<span class="title class_">Player</span>.<span class="property">X</span></span><br><span class="line">    step=<span class="number">0</span></span><br><span class="line">    message.<span class="property">style</span>.<span class="property">display</span>=<span class="string">&#x27;none&#x27;</span></span><br><span class="line">    cells.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>){</span><br><span class="line">    <span class="keyword">let</span> cell=item <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span></span><br><span class="line">    cell.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="title class_">Player</span>.<span class="property">X</span>,<span class="title class_">Player</span>.<span class="property">O</span>,<span class="string">&#x27;no-hover&#x27;</span>)</span><br><span class="line">    cell.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>,clickCell)</span><br><span class="line">    cell.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,clickCell,{<span class="attr">once</span>:<span class="literal">true</span>})</span><br><span class="line">    <span class="title function_">checkHover</span>()</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>点击函数</span><a href="/downloads/code/project/TicTacToe/Tic-Tac-Toe.ts">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clickCell</span>(<span class="params">event:MouseEvent</span>){</span><br><span class="line">    <span class="keyword">let</span> target=event.<span class="property">target</span> <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span> <span class="comment">//类型断言</span></span><br><span class="line">    target.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;no-hover&#x27;</span>,currentPlayer)<span class="comment">//元素将永远不会成为鼠标事件的target</span></span><br><span class="line">    <span class="comment">//调用判赢函数，判断是否获胜</span></span><br><span class="line">    <span class="keyword">let</span> isWin=<span class="title function_">checkWin</span>(currentPlayer)</span><br><span class="line">    <span class="keyword">if</span>(isWin)</span><br><span class="line">    {</span><br><span class="line">        message.<span class="property">style</span>.<span class="property">display</span>=<span class="string">&#x27;block&#x27;</span></span><br><span class="line">        winner.<span class="property">innerText</span>=currentPlayer+<span class="string">&#x27; won！！！&#x27;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前玩家获胜了&#x27;</span>,currentPlayer)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    step++</span><br><span class="line">    <span class="keyword">if</span>(step===<span class="number">9</span>)</span><br><span class="line">    {</span><br><span class="line">        message.<span class="property">style</span>.<span class="property">display</span>=<span class="string">&#x27;block&#x27;</span></span><br><span class="line">        winner.<span class="property">innerText</span>=<span class="string">&#x27;平局&#x27;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;平局&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//切换玩家：根据当前当前玩家，得到另一个玩家</span></span><br><span class="line">    currentPlayer=currentPlayer===<span class="title class_">Player</span>.<span class="property">X</span>?<span class="title class_">Player</span>.<span class="property">O</span>:<span class="title class_">Player</span>.<span class="property">X</span></span><br><span class="line">    <span class="comment">//处理下一步提示</span></span><br><span class="line">    <span class="title function_">checkHover</span>()</span><br><span class="line">    <span class="comment">//gameBord.classList.remove(&#x27;x&#x27;,&#x27;o&#x27;)</span></span><br><span class="line">    <span class="comment">//gameBord.classList.add(currentPlayer) </span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>判赢函数</span><a href="/downloads/code/project/TicTacToe/Tic-Tac-Toe.ts">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkWin</span>(<span class="params">player:Player</span>):<span class="built_in">boolean</span>{</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        实现判赢函数</span></span><br><span class="line"><span class="comment">        1、使用some方法遍历数组，并使用some方法的返回值作为函数返回值</span></span><br><span class="line"><span class="comment">        2、在some方法的回调函数中，获取每种获胜情况对应的3 个单元格</span></span><br><span class="line"><span class="comment">        3、判断这三个单元格是否同时包含当前玩家类名</span></span><br><span class="line"><span class="comment">        4、如果包含，玩家获胜，返回true停止循环，</span></span><br><span class="line"><span class="comment">        否则继续下一次循环</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">let</span> isWin=winArry.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">item,idex</span>){</span><br><span class="line">            <span class="comment">// 获取每种获胜情况对应的3 个单元格</span></span><br><span class="line">            <span class="comment">// console.log(item)</span></span><br><span class="line">            <span class="comment">// let cell1=cells[item[0]]</span></span><br><span class="line">            <span class="comment">// let cell2=cells[item[1]]</span></span><br><span class="line">            <span class="comment">// let cell3=cells[item[2]]</span></span><br><span class="line">            <span class="comment">// console.log(cell1,cell2,cell3)</span></span><br><span class="line">            <span class="keyword">if</span>(</span><br><span class="line">                cells[item[<span class="number">0</span>]].<span class="property">classList</span>.<span class="title function_">contains</span>(player)&amp;&amp;</span><br><span class="line">                cells[item[<span class="number">1</span>]].<span class="property">classList</span>.<span class="title function_">contains</span>(player)&amp;&amp;</span><br><span class="line">                cells[item[<span class="number">2</span>]].<span class="property">classList</span>.<span class="title function_">contains</span>(player)</span><br><span class="line">            ){</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    })</span><br><span class="line">    <span class="keyword">return</span> isWin</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>（鼠标悬停）提示变更函数</span><a href="/downloads/code/project/TicTacToe/Tic-Tac-Toe.ts">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkHover</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="comment">// for (let i = 0; i &lt; hover.length; i++) {</span></span><br><span class="line">    <span class="comment">//     cells[i].setAttribute(&#x27;hover&#x27;, currentPlayer)</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line">    cells.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item,index</span>){</span><br><span class="line">        item.<span class="title function_">setAttribute</span>(<span class="string">&#x27;hover&#x27;</span>, currentPlayer)</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Built-in Tag Plugins (Hexo内置标签外挂)</title>
      <link href="/2022/11/03/HexoTagPlugins/"/>
      <url>/2022/11/03/HexoTagPlugins/</url>
      
        <content type="html"><![CDATA[<p>Tag plugins are different from post tags. They are ported from Octopress and provide a useful way for you to quickly add specific content to your posts.</p><h2 id="标签外挂（Butterfly-Tag-Plugins）"><a href="#标签外挂（Butterfly-Tag-Plugins）" class="headerlink" title="标签外挂（Butterfly Tag Plugins）"></a>标签外挂（Butterfly Tag Plugins）</h2><div class="note info flat"><p>标签外挂是Hexo独有的功能，并不是标准的Markdown格式。</p><p>以下的写法，只适用于Butterfly主题，用在其它主题上不会有效果，甚至可能会报错。使用前请留意!</p></div><div class="note info warning flat"><p>标签外挂虽然能为主题带来一些额外的功能和UI方面的强化，但是，标签外挂也有明显的限制，使用时请留意。</p></div><h3 id="Note-Bootstrap-Callout"><a href="#Note-Bootstrap-Callout" class="headerlink" title="Note (Bootstrap Callout)"></a>Note (Bootstrap Callout)</h3><p>引导标注。</p><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">通用设置</button></li><li class="tab"><button type="button" data-href="#note-2">用法一</button></li><li class="tab"><button type="button" data-href="#note-3">用法二（自定义icon）</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><p>移植于next主题，并进行修改。</p><p>修改 <code>主题配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><code>icons</code>和<code>light_bg_offset</code>只对方法一生效</p><p>Note 标签外挂有两种用法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td><code>class</code></td><td>[可选]标识，不同的标识有不同的配色<br>(default / primary / success / info / warning / danger )</td></tr><tr><td><code>no-icon</code></td><td>[可选]不显示 icon</td></tr><tr><td><code>style</code></td><td>[可选]可以覆盖配置中的 style<br>(simple/modern/flat/disabled )</td></tr></tbody></table></div><p><strong>For example.</strong></p><div class="tabs" id="note-style"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-style-1">simple</button></li><li class="tab"><button type="button" data-href="#note-style-2">modern</button></li><li class="tab"><button type="button" data-href="#note-style-3">flat</button></li><li class="tab"><button type="button" data-href="#note-style-4">disabled</button></li><li class="tab"><button type="button" data-href="#note-style-5">no-icon</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-style-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;</span><br><span class="line">默认 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-style-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;</span><br><span class="line">默认 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-style-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;</span><br><span class="line">默认 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-style-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;</span><br><span class="line">默认 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-style-5"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;</span><br><span class="line">默认 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><p><blockquote><p>3.2.0 以上版本支持</p></blockquote><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></p><div class="table-container"><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td><code>color</code></td><td>[可选]顔色<br>(default / blue / pink / red / purple / orange / green)</td></tr><tr><td><code>icon</code></td><td>[可选]可配置自定义 icon (只支持 <a href="http://www.fontawesome.com.cn/faicons/">fontawesome</a> 图标, 也可以配置 no-icon )</td></tr><tr><td><code>style</code></td><td>[可选] 可以覆盖配置中的 style<br>(simple/modern/flat/disabled)</td></tr></tbody></table></div><p><strong>For example.</strong></p><div class="tabs" id="note-style_color"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-style_color-1">simple</button></li><li class="tab"><button type="button" data-href="#note-style_color-2">modern</button></li><li class="tab"><button type="button" data-href="#note-style_color-3">flat</button></li><li class="tab"><button type="button" data-href="#note-style_color-4">disabled</button></li><li class="tab"><button type="button" data-href="#note-style_color-5">no-icon</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-style_color-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-style_color-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-style_color-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-style_color-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-style_color-5"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue no-icon %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink no-icon %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red no-icon %&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange no-icon %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple no-icon %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green no-icon %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了….</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Gallery相册图库"><a href="#Gallery相册图库" class="headerlink" title="Gallery相册图库"></a>Gallery相册图库</h3><blockquote><p>2.0.0以上提供</p></blockquote><p>一个图库集合。<br>写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;gallery-group-main&quot;&gt;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>options</th><th>description</th></tr></thead><tbody><tr><td><code>name</code></td><td>图库名字</td></tr><tr><td><code>description</code></td><td>图片描述</td></tr><tr><td><code>link</code></td><td>链接到对应相册的地址</td></tr><tr><td><code>img-url</code></td><td>图库封面的地址</td></tr></tbody></table></div><p>For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup &#x27;貂蝉&#x27; &#x27;貂蝉壁纸&#x27; &#x27;/Gallery/貂蝉&#x27; https://pic1.imgdb.cn/item/6364a58416f2c2beb131f2c6.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup &#x27;壁纸&#x27; &#x27;收藏的一些壁纸&#x27; &#x27;/Gallery/wallpaper&#x27; https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %&#125;</span><br><span class="line">&#123;% galleryGroup &#x27;OH MY GIRL&#x27; &#x27;关于OH MY GIRL的图片&#x27; &#x27;/Gallery/ohmygirl&#x27; https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="https://pic1.imgdb.cn/item/6364a58416f2c2beb131f2c6.jpg" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">貂蝉</div>  <p>貂蝉壁纸</p>  <a href="/Gallery/%E8%B2%82%E8%9D%89"></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">壁纸</div>  <p>收藏的一些壁纸</p>  <a href="/Gallery/wallpaper"></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">OH MY GIRL</div>  <p>关于OH MY GIRL的图片</p>  <a href="/Gallery/ohmygirl"></a>  </figcaption>  </figure>  <!--   <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">漫威</div>  <p>关于漫威的图片</p>  <a href='/Gallery/marvel'></a>  </figcaption>  </figure>   --></div><h3 id="Gallery相册"><a href="#Gallery相册" class="headerlink" title="Gallery相册"></a>Gallery相册</h3><blockquote><p>2.0.0以上提供</p></blockquote><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。<br>The usage</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><p>For example</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt="1"><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt="2"><br><img src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg" alt="3"><br><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" alt="4"><br><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" alt="5"><br><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg" alt="6"><br><img src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg" alt="7"><br><img src="https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg" alt="8"></p>          </div><h3 id="tag-hide"><a href="#tag-hide" class="headerlink" title="tag-hide"></a>tag-hide</h3><blockquote><p>2.2.0以上提供</p></blockquote><div class="note warning flat"><p>请注意，tag-hide内的标签外挂content内都不建议有h1 - h6 等标题。因为Toc会把隐藏内容标题也显示出来，而且当滚动屏幕时，如果隐藏内容没有显示出来，会导致Toc的滚动出现异常。</p></div><div class="note warning flat"><p>隐藏代码块应使用<a href="#代码块">code代码块</a>，使用反引号代码块会报错</p></div><p>如果你想把一些文字、内容隐藏起来，并提供按钮让用户点击显示。可以使用这个标签外挂。</p><div class="tabs" id="tag-hide"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tag-hide-1">Inline</button></li><li class="tab"><button type="button" data-href="#tag-hide-2">Block</button></li><li class="tab"><button type="button" data-href="#tag-hide-3">Toggle</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tag-hide-1"><p><code>inline</code> 在文本里面添加按钮隐藏内容，只限文字<br>( content不能包含英文逗号，可用<code>&amp;sbquo;</code>)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideInline content,display,bg,color %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td><code>content</code></td><td>文本内容</td></tr><tr><td><code>display</code></td><td>[可选]按钮显示的文字</td></tr><tr><td><code>bg</code></td><td>[可选]按钮的背景颜色</td></tr><tr><td><code>color</code></td><td>[可选]按钮的文字颜色</td></tr></tbody></table></div><p>For example</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">哪个英文字母最酷？ &#123;% hideInline 因为西装裤(C装酷),查看答案,#FF7242,#fff %&#125;</span><br><span class="line"></span><br><span class="line">门里站着一个人? &#123;% hideInline 闪 %&#125;</span><br></pre></td></tr></table></figure><p>哪个英文字母最酷？ <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案  </button><span class="hide-content">因为西装裤(C装酷)</span>&lt;/span&gt;</span></p><p>门里站着一个人? <span class="hide-inline"><button type="button" class="hide-button" style>Click  </button><span class="hide-content">闪</span>&lt;/span&gt;</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tag-hide-2"><p><code>block</code> 独立的block隐藏内容，可以隐藏很多内容，包括图片，代码块等等</p><p>( display 不能包含英文逗号，可用<code>&amp;sbquo;</code>)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td><code>content</code></td><td>文本内容</td></tr><tr><td><code>display</code></td><td>[可选]按钮显示的文字</td></tr><tr><td><code>bg</code></td><td>[可选]按钮的背景颜色</td></tr><tr><td><code>color</code></td><td>[可选]按钮的文字颜色</td></tr></tbody></table></div><p>For example</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看答案</span><br><span class="line">&#123;% hideBlock 查看答案 %&#125;</span><br><span class="line">傻子，怎么可能有答案</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><p>查看答案</p><div class="hide-block"><button type="button" class="hide-button" style>查看答案    </button><div class="hide-content"><p>傻子，怎么可能有答案</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tag-hide-3"><blockquote><p>2.3.0以上支持</p></blockquote><p>如果你需要展示的内容太多，可以把它隐藏在收缩框里，需要时再把它展开。</p><p>( display 不能包含英文逗号，可用<code>&amp;sbquo;</code>)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><p>For example</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle Butterfly安装方法 %&#125;</span><br><span class="line">在你的博客根目录里</span><br><span class="line"></span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line"></span><br><span class="line">如果想要安装比较新的dev分支，可以</span><br><span class="line"></span><br><span class="line">git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line"></span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><details class="toggle"><summary class="toggle-button" style>Butterfly安装方法</summary><div class="toggle-content"><p>在你的博客根目录里</p><p>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/Butterfly</p><p>如果想要安装比较新的dev分支，可以</p><p>git clone -b dev <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/Butterfly</p></div></details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h3><p>使用mermaid标签可以绘制Flowchart（流程图）、Sequence diagram（时序图 ）、Class Diagram（类别图）、State Diagram（状态图）、Gantt（甘特图）和Pie Chart（圆形图），具体可以查看<a href="https://mermaid-js.github.io/mermaid/#/">mermaid文档</a><br>修改 <code>主题配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mermaid</span></span><br><span class="line"><span class="comment"># see https://github.com/mermaid-js/mermaid</span></span><br><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># built-in themes: default/forest/dark/neutral</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">dark</span></span><br></pre></td></tr></table></figure><p>The usage</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><p>For example</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">pie</span><br><span class="line"><span class="code">    title Key elements in Product X</span></span><br><span class="line"><span class="code">    &quot;Calcium&quot; : 42.96</span></span><br><span class="line"><span class="code">    &quot;Potassium&quot; : 50.05</span></span><br><span class="line"><span class="code">    &quot;Magnesium&quot; : 10.01</span></span><br><span class="line"><span class="code">    &quot;Iron&quot; :  5</span></span><br><span class="line"><span class="code">&#123;% endmermaid %&#125;</span></span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  pie    title Key elements in Product X    &quot;Calcium&quot; : 42.96    &quot;Potassium&quot; : 50.05    &quot;Magnesium&quot; : 10.01    &quot;Iron&quot; :  5  </pre></div><h3 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h3><p>移植于next主题</p><p>The usage</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line">Unique name   : Unique name of tabs block tag without comma.</span><br><span class="line"><span class="code">                Will be used in #id&#x27;s as prefix for each tab with their index numbers.</span></span><br><span class="line"><span class="code">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.</span></span><br><span class="line"><span class="code">                Only for current url of post/page must be unique!</span></span><br><span class="line"><span class="code">[index]       : Index number of active tab.</span></span><br><span class="line"><span class="code">                If not specified, first tab (1) will be selected.</span></span><br><span class="line"><span class="code">                If index is -1, no tab will be selected. It&#x27;s will be something like spoiler.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code">[Tab caption] : Caption of current tab.</span></span><br><span class="line"><span class="code">                If not caption specified, unique name with tab index suffix will be used as caption of tab.</span></span><br><span class="line"><span class="code">                If not caption specified, but specified icon, caption will empty.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code">[@icon]       : FontAwesome icon name (full-name, look like &#x27;fas fa-font&#x27;)</span></span><br><span class="line"><span class="code">                Can be specified with or without space; e.g. &#x27;Tab caption @icon&#x27; similar to &#x27;Tab caption@icon&#x27;.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td><code>Unique name</code></td><td>不带逗号且唯一名称的 Tabs block。<br>将在#id中用作每个 Tab 索引号的前缀。<br>如果名称中有空格，对于生成#id所有空格都将替换为短划线。<br>仅对于当前 post/page 的网址必须是唯一的！</td></tr><tr><td><code>index</code></td><td>活动 Tab 的索引号。<br>如果未指定，将选择第1个 Tab。<br>如果索引为 -1，则不会选择任何选项卡。这将是类似剧透的东西。<br>[可选参数]</td></tr><tr><td><code>Tab caption</code></td><td>当前 Tab 的标题。<br>如果未指定标题，则<code>Unique name</code> 和索引作为后缀 将是 Tab 的标题。<br>[可选参数]</td></tr><tr><td><code>@icon</code></td><td>FontAwesome 图标名称  (全名, look like ‘fas fa-font’) <br>可以指定带或不带空格；e.g. ‘Tab caption @icon’ similar to ‘Tab caption@icon’.<br>更多图标请参考 <a href="http://www.fontawesome.com.cn/faicons/">Font Awesome 中文网</a><br>[可选参数]</td></tr></tbody></table></div><blockquote><p>Demo 1-预设选择第一个</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>Demo 2-预设选择tabs</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>Demo 3 - 没有预设值</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab。</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字。</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字 + icon。</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>Demo 5-Tab nest tab<br><div class="tabs" id="for-example"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#for-example-1">出师表</button></li><li class="tab"><button type="button" data-href="#for-example-2">图库</button></li><li class="tab"><button type="button" data-href="#for-example-3">李白</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="for-example-1"><p>臣亮言：先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍衞之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>宫中府中，俱为一体；陟罚臧否，不宜异同：若有作奸犯科及为忠善者，宜付有司论其刑赏，以昭陛下平明之理；不宜偏私，使内外异法也。<br>侍中、侍郎郭攸之、费祎、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下：愚以为宫中之事，事无大小，悉以谘之，然后施行，必能裨补阙漏，有所广益。<br>将军向宠，性行淑均，晓畅军事，试用于昔日，先帝称之曰“能”，是以众议举宠为督：愚以为营中之事，悉以谘之，必能使行阵和睦，优劣得所。<br>亲贤臣，远小人，此先汉所以兴隆也；亲小人，远贤臣，此后汉所以倾颓也。先帝在时，每与臣论此事，未嘗不叹息痛恨于桓、灵也。侍中、尚书、长史、参军，此悉贞良死节之臣，愿陛下亲之、信之，则汉室之隆，可计日而待也。<br>臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，谘臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间：尔来二十有一年矣。<br>先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧叹，恐託付不效，以伤先帝之明；故五月渡泸，深入不毛。今南方已定，兵甲已足，当奖率三军，北定中原，庶竭驽钝，攘除奸兇，兴复汉室，还于旧都。此臣所以报先帝而忠陛下之职分也。至于斟酌损益，进尽忠言，则攸之、祎、允之任也。<br>愿陛下託臣以讨贼兴复之效，不效，则治臣之罪，以告先帝之灵。若无兴德之言，则责攸之、祎、允等之慢，以彰其咎；陛下亦宜自谋，以谘诹善道，察纳雅言，深追先帝遗诏。臣不胜受恩感激。<br>今当远离，临表涕零，不知所言。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="for-example-2"><div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt="1"><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt="2"><br><img src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg" alt="3"><br><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" alt="4"><br><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" alt="5"><br><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg" alt="6"><br><img src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg" alt="7"><br><img src="https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg" alt="8"></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="for-example-3"><p>李白（701年5月19日－762年11月30日），字太白，号青莲居士，中国唐朝诗人，自言祖籍陇西成纪（今甘肃省天水市秦安县），先世西凉武昭王李暠之后，与李唐皇室同宗。幼时内迁，寄籍剑南道绵州（今四川省江油市青莲镇）。另外，郭沫若研究认为李白出生于吉尔吉斯碎叶河上的碎叶城，属唐安西都护府（今楚河州托克马克市），该説有一定影响。有「诗仙」、「诗侠」、「酒仙」、「谪仙人」等称唿，活跃于盛唐，为杰出的浪漫主义诗人。与杜甫合称「李杜」。被贺知章惊唿为「天上谪仙」。</p><p><div class="tabs" id="李白"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#李白-1">行路难</button></li><li class="tab"><button type="button" data-href="#李白-2">将进酒</button></li><li class="tab"><button type="button" data-href="#李白-3">清平调</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="李白-1"><p>金樽清酒斗十千，玉盘珍羞值万钱。<br>停杯投箸不能食，拔剑四顾心茫然。<br>欲渡黄河冰塞川，将登太行雪暗天。<br>閒来垂钓碧溪上，忽复乘舟梦日边。<br>行路难，行路难，多歧路，今安在？<br>长风破浪会有时，直挂云帆济沧海。<br>大道如青天，我独不得出。<br>羞逐长安社中儿，赤鸡白狗赌梨慄。<br>弹剑作歌奏苦声，曳裾王门不称情。<br>淮阴市井笑韩信，汉朝公卿忌贾生。<br>君不见昔时燕家重郭隗，拥篲折节无嫌猜。<br>剧辛乐毅感恩分，输肝剖胆效英才。<br>昭王白骨萦蔓草，谁人更扫黄金台？<br>行路难，归去来！<br>有耳莫洗颍川水，有口莫食首阳蕨。<br>含光混世贵无名，何用孤高比云月？<br>吾观自古贤达人，功成不退皆殒身。<br>子胥既弃吴江上，屈原终投湘水滨。<br>陆机雄才岂自保，李斯税驾苦不早。<br>华亭鹤唳讵可闻，上蔡苍鹰何足道。<br>君不见吴中张翰称达生，秋风忽忆江东行。<br>且乐生前一杯酒，何须身后千载名！</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="李白-2"><p>君不见，黄河之水天上来，<br>奔流到海不复回？<br>君不见，高堂明镜悲白髮，<br>朝如青丝暮成雪？<br>人生得意须尽欢，<br>莫使金樽空对月。<br>天生我材必有用，<br>千金散尽还复来。<br>烹羊宰牛且为乐，<br>会须一饮三百杯。<br>岑夫子，丹丘生，<br>将进酒，君莫停。<br>与君歌一曲，<br>请君为我侧耳听：<br>钟鼓馔玉不足贵，<br>但愿长醉不愿醒。<br>古来圣贤皆寂寞，<br>惟有饮者留其名。<br>陈王昔时宴平乐，<br>斗酒十千恣欢嚯。<br>主人何为言小钱？<br>径须沽取对君酌。<br>五花马，千金裘。<br>唿儿将出换美酒，<br>与尔同销万古愁。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="李白-3"><p>《清平调词三首》是唐代大诗人李白的组诗作品，共三首七言乐府诗。第一首从空间角度写，以牡丹花比杨贵妃的美艳；第二首从时间角度写，表现杨贵妃的受宠幸；第三首总承一、二两首，把牡丹和杨贵妃与君王糅合，融为一体。全诗构思精巧，辞藻艳丽，将花与人浑融在一起写，描绘出人花交映、迷离恍惚的景象，显示了诗人高超的艺术功力。</p></div></div></div></p><p></p><p><div class="tabs" id="清平调"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#清平调-1">清平调（一）</button></li><li class="tab"><button type="button" data-href="#清平调-2">清平调（二）</button></li><li class="tab"><button type="button" data-href="#清平调-3">清平调（三）</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="清平调-1"><p>云想衣裳花想容，春风拂槛露华浓；<br>若非羣玉山头见，会向瑶台月下逢。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button>&lt;/div&gt;<div class="tab-item-content" id="清平调-2"><p>一枝红艳露凝香，云雨巫山空断肠。<br>借问汉宫谁得似？可怜飞燕倚新粧。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="清平调-3"><p>名花倾国两相欢，常得君王带笑看。<br>解识春风无限恨，沉香亨北倚阑千。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div>&lt;/div&gt;&lt;/div&gt;<br>&lt;/p&gt;<button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button>&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;<br></div></div></div></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p></blockquote><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><blockquote><p>3.0以上适用</p></blockquote><p>The usage</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td><code>url</code></td><td>链接</td></tr><tr><td><code>text</code></td><td>按钮文字</td></tr><tr><td><code>icon</code></td><td>[可选]图标</td></tr><tr><td><code>color</code></td><td>[可选]改变按钮背景顔色(默认style时);改变按钮字体和边框顔色(style:outline时) default/blue/pink/red/purple/orange/green</td></tr><tr><td><code>style</code></td><td>[可选]按钮样式 实心(default) outline/留空</td></tr><tr><td><code>layout</code></td><td>[可选]按钮佈局 line(default) block/留空</td></tr><tr><td><code>position</code></td><td>[可选]按钮位置 前提：(layout:block) left(default) center/right/留空</td></tr><tr><td><code>size</code></td><td>[可选]按钮大小 larger/留空</td></tr></tbody></table></div><p>For example</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,larger %&#125;</span><br></pre></td></tr></table></figure><p>This is my website, click the button <a class="btn-beautify " href="https://butterfly.js.org/" title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify " href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify outline" href="https://butterfly.js.org/" title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify outline" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,block %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,block center larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,block right outline larger %&#125;</span><br></pre></td></tr></table></figure><a class="btn-beautify block" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify block center larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify block right outline larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><p><strong>more than one button in center.</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,green larger %&#125;</span><br></pre></td></tr></table></figure><a class="btn-beautify larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify blue larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify pink larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify red larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify purple larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify orange larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify green larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-center&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline green larger %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><div class="btn-center"><a class="btn-beautify outline larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline blue larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline pink larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline red larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline purple larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline orange larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline green larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></div><h3 id="inlineImg"><a href="#inlineImg" class="headerlink" title="inlineImg"></a>inlineImg</h3><p>主题中的图片都是默认以<code>块级元素</code>显示，如果你想以<code>内联元素</code>显示，可以使用这个标签外挂。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineImg [src] [height] %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td><code>src</code></td><td>图片链接</td></tr><tr><td><code>height</code></td><td>[可选]图片高度限制</td></tr></tbody></table></div><p>For example</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">你看我长得漂亮不</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://i.loli.net/2021/03/19/2P6ivUGsdaEXSFI.png</span>)</span><br><span class="line"></span><br><span class="line">我觉得很漂亮 &#123;% inlineImg https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png 150px %&#125;</span><br></pre></td></tr></table></figure><p>你看我长得漂亮不</p><p><img src="https://i.loli.net/2021/03/19/2P6ivUGsdaEXSFI.png" alt="pic"></p><p>我觉得很漂亮 <img class="inline-img" src="https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png" style="height:150px"></p><h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><blockquote><p>3.7.5 及以上版本适用</p></blockquote><p>高亮所需的文字</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td><code>text</code></td><td>文字</td></tr><tr><td><code>color</code></td><td>[可选]背景颜色<br> default/blue/pink/red/purple/orange/green</td></tr></tbody></table></div><p>For example</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">臣亮言：&#123;% label 先帝 %&#125;创业未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此诚&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈于内；&#123;% label 忠志之士 purple %&#125;，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。</span><br><span class="line">宫中、府中，俱为一体；陟罚臧否，不宜异同。若有&#123;% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</span><br></pre></td></tr></table></figure><p>臣亮言：<mark class="hl-label default">先帝</mark> 创业未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此诚<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈于内；<mark class="hl-label purple">忠志之士</mark> ，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。</p><p>宫中、府中，俱为一体；陟罚臧否，不宜异同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</p><h3 id="timeline"><a href="#timeline" class="headerlink" title="timeline"></a>timeline</h3><blockquote><p>4.0.0 以上支持</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline title,color %&#125;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td><code>title</code></td><td>标题/时间线</td></tr><tr><td><code>color</code></td><td>timeline 颜色<br>default(留空) / blue / pink / red / purple / orange / green</td></tr></tbody></table></div><p>For example</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022 %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline undefined"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2022</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>01-02</p></div></div><div class="timeline-item-content"><p>这是测试页面</p></div></div></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,blue %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline blue"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2022</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>01-02</p></div></div><div class="timeline-item-content"><p>这是测试页面</p></div></div></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,pink %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline pink"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2022</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>01-02</p></div></div><div class="timeline-item-content"><p>这是测试页面</p></div></div></div><h3 id="flink"><a href="#flink" class="headerlink" title="flink"></a>flink</h3><blockquote><p>4.1.0 支持</p></blockquote><p>可在任何界面插入类似友情链接列表效果</p><p>内容格式与友情链接界面一样，支持 yml 格式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% flink %&#125;</span><br><span class="line">xxxxxx</span><br><span class="line">&#123;% endflink %&#125;</span><br></pre></td></tr></table></figure><p>For example</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;% flink %&#125;</span><br><span class="line"><span class="bullet">-</span> class<span class="emphasis">_name: 友情链接</span></span><br><span class="line"><span class="emphasis">  class_</span>desc: 那些人，那些事</span><br><span class="line">  link<span class="emphasis">_list:</span></span><br><span class="line"><span class="emphasis">    - name: Hexo</span></span><br><span class="line"><span class="emphasis">      link: https://hexo.io/zh-tw/</span></span><br><span class="line"><span class="emphasis">      avatar: https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line"><span class="emphasis">      descr: 快速、简单且强大的网志框架</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">- class_</span>name: 网站</span><br><span class="line">  class<span class="emphasis">_desc: 值得推荐的网站</span></span><br><span class="line"><span class="emphasis">  link_</span>list:</span><br><span class="line"><span class="bullet">    -</span> name: Youtube</span><br><span class="line"><span class="code">      link: https://www.youtube.com/</span></span><br><span class="line"><span class="code">      avatar: https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line"><span class="code">      descr: 视频网站</span></span><br><span class="line"><span class="code">    - name: Weibo</span></span><br><span class="line"><span class="code">      link: https://www.weibo.com/</span></span><br><span class="line"><span class="code">      avatar: https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line"><span class="code">      descr: 中国最大社交分享平台</span></span><br><span class="line"><span class="code">    - name: Twitter</span></span><br><span class="line"><span class="code">      link: https://twitter.com/</span></span><br><span class="line"><span class="code">      avatar: https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line"><span class="code">      descr: 社交分享平台</span></span><br><span class="line"><span class="code">&#123;% endflink %&#125;</span></span><br></pre></td></tr></table></figure><div class="flink"><div class="flink-name">友情链接</div><div class="flink-desc">那些人，那些事</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://hexo.io/zh-tw/" title="Hexo" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg" onerror="this.onerror=null;this.src="/img/friend_404.gif"" alt="Hexo">              </div>              <div class="flink-item-name">Hexo</div>               <div class="flink-item-desc" title="快速、简单且强大的网志框架">快速、简单且强大的网志框架</div>            </a>          </div></div><div class="flink-name">网站</div><div class="flink-desc">值得推荐的网站</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://www.youtube.com/" title="Youtube" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png" onerror="this.onerror=null;this.src="/img/friend_404.gif"" alt="Youtube">              </div>              <div class="flink-item-name">Youtube</div>               <div class="flink-item-desc" title="视频网站">视频网站</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.weibo.com/" title="Weibo" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png" onerror="this.onerror=null;this.src="/img/friend_404.gif"" alt="Weibo">              </div>              <div class="flink-item-name">Weibo</div>               <div class="flink-item-desc" title="中国最大社交分享平台">中国最大社交分享平台</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://twitter.com/" title="Twitter" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png" onerror="this.onerror=null;this.src="/img/friend_404.gif"" alt="Twitter">              </div>              <div class="flink-item-name">Twitter</div>               <div class="flink-item-desc" title="社交分享平台">社交分享平台</div>            </a>          </div></div></div><h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><p>在文章中插入引言，可包含作者、来源、和标题。<br>别名：quote</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><p>例子1：没有提供参数，只是普通输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote %&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote><p>例子2：引用书上的句子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class="line">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote><p>例子3：引用Twitter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %&#125;</span><br><span class="line">NEW: DevDocs now comes with syntax highlighting. http://devdocs.io</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io">http://devdocs.io</a></p><footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote><p>例子4：引用网络上的文章</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span><br><span class="line">Every interaction is both precious and an opportunity to delight.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html">Welcome to Island Marketing</a></cite></footer></blockquote><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>别名：code</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><p>其他可选操作 e.g. <code>line_number:false</code></p><div class="table-container"><table><thead><tr><th style="text-align:center">Extra Options</th><th style="text-align:center">Description</th><th style="text-align:center">Default</th></tr></thead><tbody><tr><td style="text-align:center"><code>line_number</code></td><td style="text-align:center">显示行号</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center"><code>highlight</code></td><td style="text-align:center">启用代码高亮</td><td style="text-align:center">true</td></tr><tr><td style="text-align:center"><code>first_line</code></td><td style="text-align:center">指定第一行号</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center"><code>mark</code></td><td style="text-align:center">突出显示特定行，每个值用逗号分隔。使用短划线指定数字范围。  e.g <code>mark:1,4-7,10</code> 会高亮第 1, 4 到 7 以及第 10行。</td><td style="text-align:center"></td></tr><tr><td style="text-align:center"><code>wrap</code></td><td style="text-align:center">将代码块包装在<code>&lt;table&gt;</code></td><td style="text-align:center">true</td></tr></tbody></table></div><p>例子1：普通代码块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock %&#125;</span><br><span class="line">alert(&#x27;Hello World!&#x27;);</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(&#x27;Hello World!&#x27;);</span><br></pre></td></tr></table></figure><p>例子2：指定语言</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock lang:objc %&#125;</span><br><span class="line">[rectangle setX: 10 y: 10 width: 20 height: 20];</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</span><br></pre></td></tr></table></figure><p>例子3：附加说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock Array.map %&#125;</span><br><span class="line">array.map(callback[, thisArg])</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>Array.map</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.map(callback[, thisArg])</span><br></pre></td></tr></table></figure><p>例子4：附加说明和网址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock _.compact http://underscorejs.org/#compact Underscore.js mark:1 line_number:false wrap:false %&#125;</span><br><span class="line">_.compact([0, 1, false, 2, &#x27;&#x27;, 3]);</span><br><span class="line">=&gt; [1, 2, 3]</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><pre><div class="caption"><span>_.compact</span><a href="http://underscorejs.org/#compact">Underscore.js</a></div><code class="highlight plaintext"><mark>_.compact([0, 1, false, 2, &#x27;&#x27;, 3]);</mark>=&gt; [1, 2, 3]</code></pre><h2 id="反引号代码块"><a href="#反引号代码块" class="headerlink" title="反引号代码块"></a>反引号代码块</h2><p>这与使用代码块相同，但使用三个反引号来分隔块。<br>``` [language] [title] [url] [link text] code snippet ```</p><h2 id="Pull-引用"><a href="#Pull-引用" class="headerlink" title="Pull 引用"></a>Pull 引用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pullquote [class] %&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure><h3 id="Left"><a href="#Left" class="headerlink" title="Left"></a>Left</h3><blockquote class="pullquote left"><p>裸体一旦成为艺术，便是最圣洁的。</p></blockquote><p>年华错落了我们邂逅在光阴下的姻缘，流连的心缘漂泊在红尘里渐渐漂白了岁月的眷恋。凄凉却冷眼观望着繁华三千长长的画卷，生命流淌的岁岁年年婉转着你我一世的情深缘劫。<br>光阴的花开了谢，那生生世世的牵伴天荒地老也无怨。不死心的缘情缘劫放纵心愿予你的心缘无眠的抒写爱的誓言。你的一切总让我忘情的留恋，萦绕在心底的歌经久的吟唱着我爱你的无悔无边，就算爱你爱得心碎也无怨无怯。流走的时光在成长的年华烂漫青涩心愿间莹舞，裂开的心尖流淌着玫瑰香艳的红尘恒古牵恋。</p><h3 id="Right"><a href="#Right" class="headerlink" title="Right"></a>Right</h3><blockquote class="pullquote right"><p>道德一旦沦为虚伪，便是最下流的。</p></blockquote><p>年华错落了我们邂逅在光阴下的姻缘，流连的心缘漂泊在红尘里渐渐漂白了岁月的眷恋。凄凉却冷眼观望着繁华三千长长的画卷，生命流淌的岁岁年年婉转着你我一世的情深缘劫。<br>光阴的花开了谢，那生生世世的牵伴天荒地老也无怨。不死心的缘情缘劫放纵心愿予你的心缘无眠的抒写爱的誓言。你的一切总让我忘情的留恋，萦绕在心底的歌经久的吟唱着我爱你的无悔无边，就算爱你爱得心碎也无怨无怯。流走的时光在成长的年华烂漫青涩心愿间莹舞，裂开的心尖流淌着玫瑰香艳的红尘恒古牵恋。</p><h2 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</span><br></pre></td></tr></table></figure><p>好像加载不出来</p><h2 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure><p>还不明白怎么用</p><h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe &#x27;https://cmwlvip.github.io/&#x27; 100% 300px %&#125;</span><br></pre></td></tr></table></figure><iframe src="https://cmwlvip.github.io/" width="100%" height="300px" frameborder="0" loading="lazy" allowfullscreen></iframe><h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] &#x27;&quot;title text&quot; &quot;alt text&quot;&#x27; %&#125;</span><br></pre></td></tr></table></figure><p><strong>tip:图片宽高不要带px</strong>。<br><strong>For example.</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [png] /HexoTagPlugins/hexo.png 160 90 &#x27;&quot;图片标题和鼠标放上时显示&quot; &quot;图片没有正常加载时显示&quot;&#x27; %&#125;</span><br></pre></td></tr></table></figure><img src="/2022/11/03/HexoTagPlugins/hexo.png" class="[png]" width="160" height="90" title="图片标题和鼠标放上时显示" alt="图片没有正常加载时显示"><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p>在文章插入链接，并自动给外部链接添加<code>target=&quot;_blank&quot;</code>属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link text url [external] [title] %&#125;</span><br></pre></td></tr></table></figure><p><strong>tip:[external]不知道是什么</strong><br><a href="https://www.baidu.com/" title="不知道这是什么 title" target>百度一下</a></p><h2 id="Include-Code"><a href="#Include-Code" class="headerlink" title="Include Code"></a>Include Code</h2><p>在<code>source/downloads/code</code>文件夹中插入代码片段。可以通过配置中的<code>code_dir</code>选项指定文件夹位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code [title] [lang:language] [from:line] [to:line] path/to/file %&#125;</span><br></pre></td></tr></table></figure><p>例子1：嵌入全部内容test.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript test.js %&#125;</span><br></pre></td></tr></table></figure><p>例子2：嵌入仅第三行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript from:3 to:3 test.js %&#125;</span><br></pre></td></tr></table></figure><p>例子3：嵌入5到8行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript from:5 to:8 test.js %&#125;</span><br></pre></td></tr></table></figure><p>例子4：嵌入5到末尾行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript from:5 test.js %&#125;</span><br></pre></td></tr></table></figure><p>例子5：嵌入首行到第8行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript to:8 test.js %&#125;</span><br></pre></td></tr></table></figure><h2 id="YouTube"><a href="#YouTube" class="headerlink" title="YouTube"></a>YouTube</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% youtube video_id %&#125;</span><br></pre></td></tr></table></figure><p>id在url中</p><h2 id="Vimeo"><a href="#Vimeo" class="headerlink" title="Vimeo"></a>Vimeo</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% vimeo video_id [width] [height] %&#125;</span><br></pre></td></tr></table></figure><h2 id="Include-Posts"><a href="#Include-Posts" class="headerlink" title="Include Posts"></a>Include Posts</h2><p>包括指向其他帖子的链接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_path filename %&#125;</span><br><span class="line">&#123;% post_link filename [title] [escape] %&#125;</span><br></pre></td></tr></table></figure><p>使用此标记时，可以忽略永久链接和文件夹信息，例如语言和日期。<br>例如: <code>&#123;% post_link my %&#125;</code>。<br>只要帖子的文件名 <code>my.md</code>，这将起作用,即使帖子位于<code>Source/posts/2015-02-my-family-holiday</code>，并且具有永久链接<code>2018/en/my</code>。<br>您可以自定义要显示的文本，而不是显示帖子的标题。不支持在 Markdown 语法 []() 中使用post_path。<br>默认情况下，帖子的标题和自定义文本会被转义。您可以使用转义选项禁用转义。</p><p><strong>For example.</strong></p><div class="tabs" id="include-posts"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#include-posts-1">显示贴子的标题</button></li><li class="tab"><button type="button" data-href="#include-posts-2">显示自定义文本</button></li><li class="tab"><button type="button" data-href="#include-posts-3">(escape)转义标题</button></li><li class="tab"><button type="button" data-href="#include-posts-4">不转义标题</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="include-posts-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post<span class="emphasis">_link TheCharmOfMarkdown %&#125;</span></span><br></pre></td></tr></table></figure><p><a href="/2022/10/27/TheCharmOfMarkdown/" title="了不起的 Markdown">了不起的 Markdown</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="include-posts-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post<span class="emphasis">_link TheCharmOfMarkdown &#x27;Markdown 的魅力&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><p><a href="/2022/10/27/TheCharmOfMarkdown/" title="了不起的 Markdown">Markdown 的魅力</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="include-posts-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post<span class="emphasis">_link HexoTagPlugins &#x27;How to use <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span> tag in title&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><p><a href="/2022/11/03/HexoTagPlugins/" title="Hexo Built-in Tag Plugins (Hexo内置标签外挂)">How to use &lt;b&gt; tag in title</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="include-posts-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post<span class="emphasis">_link HexoTagPlugins &#x27;<span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>bold<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span> custom title&#x27; false %&#125;</span></span><br></pre></td></tr></table></figure><p><a href="/2022/11/03/HexoTagPlugins/" title="Hexo Built-in Tag Plugins (Hexo内置标签外挂)"><b>bold</b> custom title</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="Include-Assets"><a href="#Include-Assets" class="headerlink" title="Include Assets"></a>Include Assets</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path filename %&#125;</span><br><span class="line">&#123;% asset_img filename [title] %&#125;</span><br><span class="line">&#123;% asset_link filename [title] [escape] %&#125;</span><br></pre></td></tr></table></figure><p>好像是使用文章中出现的资源，<br>不知道怎么用</p><h2 id="Raw"><a href="#Raw" class="headerlink" title="Raw"></a>Raw</h2><p>如果某些内容导致帖子出现处理问题，请使用原始标记包装它以避免呈现错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用快捷键</title>
      <link href="/2022/11/03/KeyboardShutcut/"/>
      <url>/2022/11/03/KeyboardShutcut/</url>
      
        <content type="html"><![CDATA[<!-- Windy Hill  -->    <div id="aplayer-ZjNIpbas" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="0009DtA34CLrKk" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86" data-mini="true"></div><div class="note info modern"><p><strong>Windows 系统下</strong></p></div><h2 id="“宇宙第一编辑器”——VS-Code"><a href="#“宇宙第一编辑器”——VS-Code" class="headerlink" title="“宇宙第一编辑器”——VS Code"></a>“宇宙第一编辑器”——VS Code</h2><h3 id="编辑器与窗口管理"><a href="#编辑器与窗口管理" class="headerlink" title="编辑器与窗口管理"></a>编辑器与窗口管理</h3><div class="table-container"><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>打开一个新的VS code编辑器</td><td><code>Ctrl</code>+<code>Shift</code>+<code>N</code></td></tr><tr><td>关闭当前窗口</td><td><code>Ctrl</code>+<code>W</code></td></tr></tbody></table></div><h3 id="代码编辑"><a href="#代码编辑" class="headerlink" title="代码编辑"></a>代码编辑</h3><div class="table-container"><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>格式化代码</td><td><code>Shift</code>+<code>Alt</code>+<code>F</code></td></tr><tr><td>向上复制一行</td><td><code>Shift</code>+<code>Alt</code>+<code>↑</code></td></tr><tr><td>向下复制一行</td><td><code>Shift</code>+<code>Alt</code>+<code>↓</code></td></tr><tr><td>向上移动一行</td><td><code>Alt</code>+<code>↑</code></td></tr><tr><td>向下移动一行</td><td><code>Alt</code>+<code>↓</code></td></tr><tr><td>从上往下选中相同单词，产生多个光标</td><td><code>Ctrl</code>+<code>D</code></td></tr><tr><td>删除当前行</td><td><code>Ctrl</code>+<code>Shift</code>+<code>K</code></td></tr></tbody></table></div><h3 id="光标"><a href="#光标" class="headerlink" title="光标"></a>光标</h3><div class="table-container"><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>回退上一个光标</td><td><code>Ctrl</code>+<code>U</code></td></tr></tbody></table></div><h2 id="VS"><a href="#VS" class="headerlink" title="VS"></a>VS</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><div class="table-container"><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>注释</td><td><code>Ctrl</code>+<code>K</code>+<code>C</code></td></tr><tr><td>取消注释</td><td><code>Ctrl</code>+<code>K</code>+<code>U</code></td></tr></tbody></table></div><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><div class="table-container"><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>撤销</td><td><code>Ctrl</code>+<code>Z</code></td></tr><tr><td>反撤销</td><td><code>Ctrl</code>+<code>Shift</code> +<code>Z</code> <br><code>Ctrl</code> + <code>Y</code></td></tr></tbody></table></div><h3 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h3><div class="table-container"><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>增加缩进</td><td><code>Tab</code></td></tr><tr><td>减少缩进</td><td><code>Shift</code>+<code>Tab</code></td></tr></tbody></table></div><h3 id="增删查改"><a href="#增删查改" class="headerlink" title="增删查改"></a>增删查改</h3><div class="table-container"><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>查找</td><td><code>Ctrl</code>+<code>F</code></td></tr><tr><td>替换</td><td><code>Ctrl</code>+<code>H</code></td></tr><tr><td>复制整行代码：光标停在该行</td><td><code>Ctrl</code>+<code>C</code></td></tr><tr><td>剪切整行代码：光标停在该行</td><td><code>Ctrl</code>+<code>X</code></td></tr><tr><td>删除整行代码：光标停在该行</td><td><code>Ctrl</code>+<code>L</code></td></tr></tbody></table></div><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><div class="table-container"><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>调试（启动）</td><td><code>F5</code></td></tr><tr><td>新建项</td><td><code>Ctrl</code>+<code>Shift</code>+<code>A</code></td></tr></tbody></table></div><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><div class="table-container"><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>代码提示</td><td><code>Ctrl</code>+<code>J</code></td></tr><tr><td>格式化代码</td><td><code>Ctrl</code>+<code>K</code>+<code>D</code></td></tr><tr><td>隐藏或者展开当前代码</td><td><code>Ctrl</code>+<code>M</code>+<code>M</code></td></tr><tr><td>折叠所有方法</td><td><code>Ctrl</code>+<code>M</code>+<code>O</code></td></tr><tr><td>展开所有方法</td><td><code>Ctrl</code>+<code>M</code>+<code>L</code></td></tr><tr><td>光标所在行的上一行插入一行</td><td><code>Ctrl</code>+<code>Enter</code></td></tr></tbody></table></div><h3 id="有关光标"><a href="#有关光标" class="headerlink" title="有关光标"></a>有关光标</h3><div class="table-container"><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>光标到行首</td><td><code>Home</code></td></tr><tr><td>光标到行尾</td><td><code>End</code></td></tr><tr><td>代码框式选择</td><td><code>Shift</code>+<code>Alt</code>+ 方向键（鼠标）</td></tr><tr><td>多光标</td><td><code>Ctrl</code>+<code>Alt</code></td></tr></tbody></table></div><h2 id="“最好的Java开发工具”——IDEA"><a href="#“最好的Java开发工具”——IDEA" class="headerlink" title="“最好的Java开发工具”——IDEA"></a>“最好的Java开发工具”——IDEA</h2><h3 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h3><h4 id="main-方法"><a href="#main-方法" class="headerlink" title="main 方法"></a>main 方法</h4><p>main方法快捷键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psvm + Tab</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h4><p>输出语句快捷键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sout + Tab</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><h3 id="光标-1"><a href="#光标-1" class="headerlink" title="光标"></a>光标</h3><div class="table-container"><table><thead><tr><th style="text-align:center">功能</th><th style="text-align:center">有小键盘</th><th style="text-align:center">无小键盘</th></tr></thead><tbody><tr><td style="text-align:center">移动到行首</td><td style="text-align:center">Home</td><td style="text-align:center">Fn + ←</td></tr><tr><td style="text-align:center">移动到行尾</td><td style="text-align:center">End</td><td style="text-align:center">Fn + →</td></tr></tbody></table></div><h2 id="浏览器——Edge"><a href="#浏览器——Edge" class="headerlink" title="浏览器——Edge"></a>浏览器——Edge</h2><h3 id="打开开发工具的键盘快捷方式"><a href="#打开开发工具的键盘快捷方式" class="headerlink" title="打开开发工具的键盘快捷方式"></a>打开开发工具的键盘快捷方式</h3><div class="table-container"><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>打开“<strong>控制台</strong>”工具</td><td><code>Ctrl</code> + <code>Shift</code> + <code>J</code></td></tr><tr><td>打开“<strong>元素</strong>”工具</td><td><code>Ctrl</code> + <code>Shift</code> + <code>C</code></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 快捷键 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
            <tag> IDEA </tag>
            
            <tag> VS </tag>
            
            <tag> VS Code </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了不起的 Markdown</title>
      <link href="/2022/10/27/TheCharmOfMarkdown/"/>
      <url>/2022/10/27/TheCharmOfMarkdown/</url>
      
        <content type="html"><![CDATA[<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>支持：底线(-/=) 和 #</p><h5 id="底线的语法"><a href="#底线的语法" class="headerlink" title="底线的语法"></a>底线的语法</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">标题内容</span></span><br><span class="line"><span class="section">======</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">标题内容</span></span><br><span class="line"><span class="section">--------</span></span><br></pre></td></tr></table></figure><ol><li>=表示一级标题</li><li>-表示二级标题</li><li>底线符号的数量至少2个</li><li>这种语法只支持这两级标题</li></ol><h5 id="语法"><a href="#语法" class="headerlink" title="#语法"></a>#语法</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># + 空格 + 标题内容</span></span><br></pre></td></tr></table></figure><ol><li>在行首插入#可标记出标题</li><li>#的个数表示了标题的等级</li><li>建议在#后加一个空格</li><li>Markdown中最多只支持前六级标题</li></ol><p>使用规范:</p><p>1) 推荐使用#的语法。<br>2) 标题的前后都要空1行（除非标题在文档开头）。<br>3) #与标题文本之间也要有1个空格，否则会导致阅读困难。<br>4) 不要有多余的空格，结尾不要有空格。<br>5) 建议标题的结尾不要有标点符号。<br>6) 建议标题要尽量简短，方便引用。</p><h4 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h4><p>粗体由两个* 或两个<em>包裹，斜体由1个* 或1个</em>包裹。</p><h5 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**加粗内容**</span></span><br><span class="line">或</span><br><span class="line"><span class="strong">__加粗内容__</span></span><br></pre></td></tr></table></figure><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体内容*</span></span><br><span class="line">或</span><br><span class="line"><span class="emphasis">_斜体内容_</span></span><br></pre></td></tr></table></figure><p>使用规范：</p><p>1) 建议粗体使用2个*包裹，斜体使用1个* 包裹。<br>2) 在粗体和斜体语法标记的内部，建议不要有空格。</p><h3 id="段落与换行"><a href="#段落与换行" class="headerlink" title="段落与换行"></a>段落与换行</h3><p>1) 如果行与行之间没有空行，则会被视为同一段落。<br>2) 如果行与行之间有空行，则会被视为不同的段落。<br>3) 空行是指行内什么都没有，或者只有空格和制表符。</p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>支持：有序列表和无序列表</p><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数字序号(1 2 ...) + 英文句号 + 空格 + 列表内容</span><br><span class="line">或</span><br><span class="line">( 1) 2) ...) + 空格 + 列表内容</span><br></pre></td></tr></table></figure><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*/+/- + 英文句号 + 空格 + 列表内容</span></span><br></pre></td></tr></table></figure><p>使用规范：建议使用-标记无序列表，*容易与斜体混淆，+不流行。</p><h5 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一层列表</span><br><span class="line">TAB + 第二层列表</span><br><span class="line">TAB + TAB + 第三层列表</span><br></pre></td></tr></table></figure><p>语法说明：</p><p>1) 列表中可以嵌套列表。<br>2) 有序列表和无序列表也可以互相嵌套。</p><h5 id="列表使用规范"><a href="#列表使用规范" class="headerlink" title="列表使用规范"></a>列表使用规范</h5><p>1) 如果一个列表中的每个列表项都只有1行，建议列表项之间不要有空行。<br>2) 如果列表项中有换行，建议在列表项之间空1行。<br>3) 建议在列表前/后都空1行。<br>4) 列表标记使用英文半角符句号<code>.</code>、右括号<code>)</code>。<br>5) 列表标记与列表内容的空格不能少；列表<code>Enter</code>换行默认生成新的列表项，列表项换行可<code>Shift + Enter</code>。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 列表的使用</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 这个列表</span><br><span class="line">有换行</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 这个列表无换行</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果如下：</p><ol><li><p>这个列表<br>有换行</p></li><li><p>这个列表无换行</p></li></ol><h4 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h4><p>语法：</p><p>1) 分隔线须使用至少3个以上的 */-/_ 来标记。<br>2) 行内不能有其他的字符。<br>3) 可以在标记符中间加上空格。<br>4) 建议同一文章使用一样的符号标记分隔线，且数量形式一样。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 星号</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">*</span> <span class="emphasis">* *</span> <span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">*</span>**</span><span class="strong">****</span><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"># 减号</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">---</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">- - -</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">----------</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"># 下划线</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">___</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">_ _ _</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">__________</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br></pre></td></tr></table></figure><p>分隔线如下：</p><hr><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片替代文字</span>](<span class="link">图片地址 &quot;【可选参数】鼠标悬停于图片的提示信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">图片也可以引用链接</span><br><span class="line"></span><br><span class="line">![<span class="string">图片替代文字</span>][<span class="symbol">pic</span>]</span><br><span class="line"> </span><br><span class="line">[<span class="symbol">pic</span>]: <span class="link">url &quot;【可选】&quot;</span></span><br></pre></td></tr></table></figure><p>语法：</p><p>1) 图片替代文字在图片无法正常显示时会比较有用，正常情况下可以为空。<br>2) 图片地址可以是本地图片的路径也可以是网络图片的地址。<br>3) 本地图片支持相对路径和绝对路径两种方式。</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h4 id="文字链接"><a href="#文字链接" class="headerlink" title="文字链接"></a>文字链接</h4><p>文字链接就是把链接地址直接写在文本中。语法是用方括号包裹链接文字，后面紧跟着括号包裹的链接地址。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">链接文字</span>](<span class="link">链接地址 &quot;【可选参数】鼠标悬停于链接文字的提示信息&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在日常工作中我们常用的地址有[<span class="string">baidu</span>](<span class="link">https://www.baidu.com</span>)和[<span class="string">GitHub</span>](<span class="link">https://www.github.com</span>)</span><br></pre></td></tr></table></figure><h4 id="引用链接"><a href="#引用链接" class="headerlink" title="引用链接"></a>引用链接</h4><p>引用链接是把链接地址作为“<strong>变量</strong>”先在Markdown文件的页尾定义好，然后在正文中进行引用。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在正文中引用链接标记可以理解为引用定义好的变量；</span><br><span class="line"></span><br><span class="line">[<span class="string">链接文字</span>][<span class="symbol">链接标记</span>]</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">[链接文字也是链接标记]</span><br><span class="line"></span><br><span class="line">在底部定义链接标记，可以理解为定义一个地址变量；</span><br><span class="line"></span><br><span class="line">[<span class="symbol">链接标记</span>]:<span class="link">链接地址</span></span><br></pre></td></tr></table></figure><p>语法说明：</p><p>1) 链接标记可以有字母、数字、空格和标点符号。<br>2) 链接标记不区分大小写。<br>3) 定义的链接内容可以放在当前文件的任意位置，建议放在页尾。<br>4) 当链接地址为网络地址时要以 http/https开头，否则会被识别为本地地址。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在日常工作中我们常用的地址有[<span class="string">百度</span>][<span class="symbol">baidu</span>]和[GitHub]。</span><br><span class="line">[<span class="symbol">baidu</span>]:<span class="link">https://www.baidu.com/</span></span><br><span class="line">[<span class="symbol">GitHub</span>]:<span class="link">https://www.github.com/</span></span><br></pre></td></tr></table></figure><p>在日常工作中我们常用的地址有<a href="https://www.baidu.com/">百度</a>和<a href="https://www.github.com/">GitHub</a>。</p><h4 id="网址链接"><a href="#网址链接" class="headerlink" title="网址链接"></a>网址链接</h4><p>在Markdown中，将网络地址或邮箱地址使用&lt;&gt;包裹起来会被自动转换为超链接。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">URL</span> <span class="attr">或</span> <span class="attr">邮箱地址</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com">https://www.baidu.com</a><br>使用规范：</p><p>1) 建议链接标题有意义<br>2) 使用&lt;&gt;包裹自动连接，虽然不使用也能连接<br>3) 自动连接要以http/https开头</p><h3 id="行内代码与代码块"><a href="#行内代码与代码块" class="headerlink" title="行内代码与代码块"></a>行内代码与代码块</h3><h4 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`代码`</span></span><br></pre></td></tr></table></figure><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>在Markdown中，代码块以Tab键或4个空格开头。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">以 Tab 键开头：</span><br><span class="line"><span class="code">    def test()&#123;</span></span><br><span class="line"><span class="code">        print(&#x27;hello&#x27;)</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">以 4 个空格开头</span><br><span class="line"><span class="code">    def test()&#123;</span></span><br><span class="line"><span class="code">        print(&#x27;hello&#x27;)</span></span><br><span class="line"><span class="code">    &#125;</span></span><br></pre></td></tr></table></figure><p><strong>Tip：</strong> 因为代码块使用Tab键或4个空格开头的效果不够直观，很多扩展语法（如GFM）提供了围栏代码块，并且支持语法高亮。</p><p>使用规范：</p><p>1) 除行内代码可以使用`包裹以外，如果我们想转义或强调某些字符，也可以使用`包裹。</p><p>2) 如果代码超过1行，请使用围栏代码块（扩展语法），并显式地声明语言，这样做便于阅读，并且可以显示语法高亮。</p><p>3) 如果我们编写的是简单的代码片段，使用4个空格缩进的代码块也许更清晰。</p><p>4) 很多Shell命令都要粘贴到终端中去执行，因此最好避免在Shell命令中使用任何换行操作；<br>可以在行尾使用一个\，这样既能避免命令换行，又能提高源码的可读性。</p><p>5) 建议不要在没有输出内容的Shell命令前加$。<br>在命令没有输出内容的情况下，$是没有必要的，因为内容全是命令，我们不会把命令和输出的内容混淆。<br>推荐：<code>pipenv shell</code><br>不推荐：<code>$ pipenv shell</code></p><p>6) 建议在有输出内容的Shell命令前加上$，这样会比较容易区分命令和输出的内容。</p><p>推荐：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;test&quot;</span></span></span><br><span class="line">test</span><br></pre></td></tr></table></figure><p>不推荐：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;test&quot;</span><br><span class="line">test</span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>在Markdown中，引用由<code>&gt;</code>来标记。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 引用内容</span></span><br></pre></td></tr></table></figure><p>语法说明：</p><p>1) 多行引用也可以在每一行的开头都插入<code>&gt;</code>。<br>2) 在引用中可以嵌套引用。<br>3) 在引用中可以使用其他的Markdown语法。<br>4) 段落与换行的格式在引用中也是适用的。</p><p>使用规范：</p><p>1) 建议在引用的标记符号<code>&gt;</code>之后添加一个空格。<br>2) 建议每一行引用都使用符号<code>&gt;</code>。<br>3) 不要在引用中添加空行。</p><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>当我们想在Markdown文件中插入一些标记符号，但又不想让这些符号被渲染时，可以使用<code>\</code>进行转义。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\特殊符号</span><br></pre></td></tr></table></figure><p>可被转义的特殊符号：</p><ul><li>\ 反斜线</li><li>` 反引号</li><li>* 星号</li><li>_ 底线</li><li>{} 花括号</li><li>[] 方括号</li><li>() 圆括号</li><li># 井字号</li><li>+ 加号</li><li>- 减号</li><li>. 英文句号</li><li>! 英文感叹号</li></ul><h2 id="扩展语法GFM"><a href="#扩展语法GFM" class="headerlink" title="扩展语法GFM"></a>扩展语法GFM</h2><p>在众多Markdown扩展语法中，GitHub Flavored Markdown（简称GFM）无疑是目前最流行的，它提供了包括表格、任务列表、删除线、围栏代码、Emoji等在内的标记语法</p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~被删除的文字~~</span><br></pre></td></tr></table></figure><p><del>被删除的文字</del></p><h3 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h3><p>使用<code>:</code>包裹表情代码即可</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:表情代码:</span><br><span class="line">:+1:</span><br><span class="line">:-1:</span><br><span class="line">:heart:</span><br></pre></td></tr></table></figure><p>更多的表情符号请参考<a href="http://www.webpagefx.com/tools/emoji-cheat-sheet/">http://www.webpagefx.com/tools/emoji-cheat-sheet/</a>。</p><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>在标准语法中，由&lt;&gt;包裹的URL地址被自动识别并解析为超链接，使用GFM扩展语法则可以不使用&lt;&gt;包裹。<br><strong>注意：</strong>自动链接只识别以<code>www</code>或<code>http://</code>开头的URL地址。<br>如果不想使用自动链接，也可以使用`包裹URL地址。</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 表头1 |表头2 | 表头3 |</span><br><span class="line">| :---- | :----: | ----: |</span><br><span class="line">| 内容1 | 内容2 | 内容3 |</span><br><span class="line">| 左对齐 | 居中对齐 | 右对齐 |</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th style="text-align:left">表头1</th><th style="text-align:center">表头2</th><th style="text-align:right">表头3</th></tr></thead><tbody><tr><td style="text-align:left">内容1</td><td style="text-align:center">内容2</td><td style="text-align:right">内容3</td></tr><tr><td style="text-align:left">左对齐</td><td style="text-align:center">居中对齐</td><td style="text-align:right">右对齐</td></tr></tbody></table></div><p>语法：</p><p>1) 单元格使用|来分隔，为了阅读更清晰，建议最前和最后都使用|。<br>2) 单元格和|之间的空格会被移除。<br>3) 表头与其他行使用<code>-</code>来分隔。<br>4) 表格对齐格式如下:</p><pre><code>- 左对齐（默认）：`:-`- 右对齐：`-:`- 居中对齐：`:-:`</code></pre><p>5) 块级元素（代码区块、引用区块）不能插入表格中。</p><p>使用规范：</p><p>1) 在表格的前、后各空1行。<br>2) 在每一行最前和最后都使用|，每一行中的|要尽量都对齐。<br>3) 不要使用庞大复杂的表格，那样会难以维护和阅读。</p><p><strong>补充：</strong></p><p>1) 表格单元格换行可以用<code>&lt;br&gt;</code>。<br>2) <strong>默认和左对齐还是又区别的，默认表头会居中，左对齐表头是左对齐的。</strong></p><h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [ ] 未勾选</span><br><span class="line"><span class="bullet">-</span> [x] 已勾选</span><br></pre></td></tr></table></figure><ul><li>[ ] 未勾选</li><li>[x] 已勾选</li></ul><p>语法说明：</p><p>1) 任务列表以-+空格开头，由 [+空格/x+] 组成。<br>2) x可以小写，也可以大写，有些编辑器可能不支持大写，所以为避免解析错误，推荐使用小写的x。<br>3) 当方括号中的字符为空格时，复选框是未选中状态，为x时是选中状态。</p><h3 id="围栏代码块"><a href="#围栏代码块" class="headerlink" title="围栏代码块"></a>围栏代码块</h3><p>在基础语法中，代码块使用Tab键或4个空格开头；在扩展语法中，围栏代码块使用连续3个`或3个~包裹，还支持语法高亮，可读性和可维护性更强一些。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">~~~</span></span><br><span class="line"><span class="code">    代码</span></span><br><span class="line"><span class="code">~~~</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```python</span></span><br><span class="line"><span class="code">    代码</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h3><p>锚点，也称为书签，用来标记文档的特定位置，使用锚点可以跳转到当前文档或其他文档中指定的标记位置。</p><p>Markdown会被渲染成HTML页面，在HTML页面中可以通过锚点实现跳转；GitHub、GitBook项目文档中的目录也是通过锚点实现跳转的。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">锚点描述</span>](<span class="link">#锚点名</span>)</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用锚点 --&gt;</span><br><span class="line">语法参考 [<span class="string">基础语法</span>](<span class="link">#基础语法</span>) 或 [<span class="string">扩展语法</span>](<span class="link">#扩展语法GFM</span>)</span><br></pre></td></tr></table></figure><p>使用锚点：<br>语法参考 <a href="#基础语法">基础语法</a> 或 <a href="#扩展语法GFM">扩展语法</a></p><p>语法说明：</p><p>1) 锚点名建议使用字母和数字，当然中文也是被支持的，但不排除有些网站支持得不够好。<br>2) 锚点名是区分英文大小写的。<br>3) 在锚点名中不能含有空格，也不能含有特殊字符。</p><h2 id="Inline-HTML"><a href="#Inline-HTML" class="headerlink" title="Inline HTML"></a>Inline HTML</h2><h3 id="Markdown-是支持-HTML-的"><a href="#Markdown-是支持-HTML-的" class="headerlink" title="Markdown 是支持 HTML 的"></a>Markdown 是支持 HTML 的</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span>To reboot your computer, press <span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>ctrl<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>alt<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>del<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>.<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>To reboot your computer, press <kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>del</kbd>.</p><h3 id="效果并不总是理想的"><a href="#效果并不总是理想的" class="headerlink" title="效果并不总是理想的"></a>效果并不总是理想的</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;dt&gt;Definition list&lt;/dt&gt;</span></span><br><span class="line"><span class="code">    &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    &lt;dt&gt;Markdown in HTML&lt;/dt&gt;</span></span><br><span class="line"><span class="code">    &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;</span></span><br><span class="line"><span class="code">&lt;/dl&gt;</span></span><br></pre></td></tr></table></figure><dl>    <dt>Definition list</dt>    <dd>Is something people use sometimes.</dd>    <dt>Markdown in HTML</dt>    <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd></dl><h3 id="特殊HTML字符表"><a href="#特殊HTML字符表" class="headerlink" title="特殊HTML字符表"></a>特殊HTML字符表</h3><div class="table-container"><table><thead><tr><th>HTML原代码</th><th>显示结果</th></tr></thead><tbody><tr><td><code>&amp;lt;</code></td><td>&lt;</td></tr><tr><td><code>&amp;gt;</code></td><td>&gt;</td></tr><tr><td><code>&amp;#124;</code></td><td>&#124;</td></tr><tr><td><code>&amp;amp;</code></td><td>&amp;</td></tr><tr><td><code>&amp;quot;</code></td><td>“</td></tr><tr><td><code>&amp;reg;</code></td><td>&reg;</td></tr><tr><td><code>&amp;copy;</code></td><td>&copy;</td></tr><tr><td><code>&amp;trade;</code></td><td>&trade;</td></tr><tr><td><code>&amp;#64;</code></td><td>@</td></tr><tr><td><code>&amp;nbsp;</code></td><td>&nbsp;不断行空白</td></tr><tr><td><code>&amp;ensp;</code></td><td>&ensp;半个空白位</td></tr><tr><td><code>&amp;emsp;</code></td><td>&emsp;一个空白位</td></tr></tbody></table></div><p>表格单元格内换行：<code>&lt;br&gt;</code></p><h2 id="排版技巧"><a href="#排版技巧" class="headerlink" title="排版技巧"></a>排版技巧</h2><p>有句话叫“听过很多道理，却依然过不好这一生 ”，同样，看过很多文章，却还是不知道怎么排版才好看。其实好的排版就是好的设计，而设计总会遵循一定的规则，当没有人明确告诉我们什么是好的设计时，参考最通用、最流行的做法总是没错的，毕竟能被大众所接受，就是最好的证明。</p><h3 id="关于空格"><a href="#关于空格" class="headerlink" title="关于空格"></a>关于空格</h3><p><strong>建议中文和英文之间加空格，中文/英文和数字之间也要加空格，</strong>不过有些编辑器和输入法（如百度输入法）会自动添加空隙，我们就没必要手动添加了，使用时请多注意。</p><h4 id="加空格的情况"><a href="#加空格的情况" class="headerlink" title="加空格的情况"></a>加空格的情况</h4><ul><li>英文标点符号（如, . ; : ?）与后面的字符之间需要加空格，与前面的字符之间不需要加空格。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">推荐：The world is like a mirror: Frown at it and it frowns at you; smile, and it smiles too.</span><br><span class="line">不推荐：The world is like a mirror:Frown at it and it frowns at you;smile,and it smiles too.</span><br></pre></td></tr></table></figure><ul><li>当在中文、英文中使用＞（半角）标识路径时，两边都需要加空格。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">推荐：Erase data and settings in Settings &gt; General &gt; Reset &gt; Erase all Content and Settings</span><br><span class="line">不推荐：Erase data and settings in Settings&gt; General&gt;Reset &gt;Erase all Content and Settings</span><br><span class="line">推荐：抹掉所有内容和设置的操作步骤：设置 &gt; 通用 &gt; 还原 &gt; 抹掉所有内容和设置</span><br><span class="line">不推荐：抹掉所有内容和设置的操作步骤：设置&gt;通用&gt;还原&gt;抹掉所有内容和设置</span><br></pre></td></tr></table></figure><h4 id="不加空格的情况"><a href="#不加空格的情况" class="headerlink" title="不加空格的情况"></a>不加空格的情况</h4><ul><li>中文标点符号和数字、中文、英文之间不需要添加空格。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">推荐：MacBook Pro（15英寸，2016年年末）</span><br><span class="line">不推荐：MacBook Pro （15英寸，2016年年末）</span><br></pre></td></tr></table></figure><ul><li>数字和百分号之间不需要添加空格。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">推荐：100%</span><br><span class="line">不推荐：100 %</span><br></pre></td></tr></table></figure><ul><li>数字和单位符号之间不需要添加空格。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">推荐：1GB</span><br><span class="line">不推荐：1 GB</span><br></pre></td></tr></table></figure><ul><li>英文和数字组合成的名字之间不需要添加空格。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">推荐：双核Intel Core i7处理器</span><br><span class="line">不推荐：双核Intel Core i 7处理器</span><br></pre></td></tr></table></figure><ul><li><p>当/（半角）表示“或”、“路径”时，与前后的字符之间均不加空格。</p></li><li><p>货币符号后不加空格。</p></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">推荐：售价￥100</span><br><span class="line">不推荐：售价￥ 100</span><br></pre></td></tr></table></figure><ul><li>负号后不加空格。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">推荐：1-2=-1</span><br><span class="line">不推荐：1-2=- 1</span><br></pre></td></tr></table></figure><h3 id="全角和半角"><a href="#全角和半角" class="headerlink" title="全角和半角"></a>全角和半角</h3><p>全角：中文标点符号是全角，占两个字节。<br>半角：英文标点符号和数字是半角，占1个字节。<br>全角：，。；：！？<br>半角：,.;:!?</p><ul><li>在中文排版中，要使用全角标点符号。</li><li>在英文排版中，要使用半角标点符号。</li></ul><h3 id="正确的英文大小写"><a href="#正确的英文大小写" class="headerlink" title="正确的英文大小写"></a>正确的英文大小写</h3><p>错误的写法：IPhone7、MacOS<br>正确的写法：iPhone7、macOS</p><p>专有名词要使用正确的大小写，请参考它们的官方文档。<br>正确：macOS、iPhone、iPad Pro、Macbook Pro、iOS、GitHub</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop 3.3.4 集群搭建</title>
      <link href="/2022/10/25/HadoopClusterBuilding3-3-4/"/>
      <url>/2022/10/25/HadoopClusterBuilding3-3-4/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>虚拟机：Oracle VM VirtualBox<br>操作系统： Centos8<br>Hadoop版本：3.3.4<br>JDK版本：1.8<br>免密登录（SSH协议）：MobaXterm</p><h2 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h2><h3 id="打开Oracle-VM-VirtualBox并新建虚拟机"><a href="#打开Oracle-VM-VirtualBox并新建虚拟机" class="headerlink" title="打开Oracle VM VirtualBox并新建虚拟机"></a>打开Oracle VM VirtualBox并新建虚拟机</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-10-34-44.png" alt="VM."><br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-10-36-41.png" alt="新建虚拟机."></p><h3 id="内存选择"><a href="#内存选择" class="headerlink" title="内存选择"></a>内存选择</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-10-46-50.png" alt="运行内存选择2GB."></p><h3 id="选择现在创建虚拟硬盘"><a href="#选择现在创建虚拟硬盘" class="headerlink" title="选择现在创建虚拟硬盘"></a>选择现在创建虚拟硬盘</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-10-54-23.png" alt="虚拟硬盘."></p><h3 id="设置虚拟硬盘文件类型"><a href="#设置虚拟硬盘文件类型" class="headerlink" title="设置虚拟硬盘文件类型"></a>设置虚拟硬盘文件类型</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-10-55-43.png" alt="VDI."></p><h3 id="建议动态分配"><a href="#建议动态分配" class="headerlink" title="建议动态分配"></a>建议动态分配</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-10-58-25.png" alt="动态分配."></p><h3 id="设置虚拟硬盘大小"><a href="#设置虚拟硬盘大小" class="headerlink" title="设置虚拟硬盘大小"></a>设置虚拟硬盘大小</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-01-22.png" alt="16GB."><br><strong>注意：创建完先不要打开，先进行环境配置</strong><br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-12-14.png" alt="设置."></p><h3 id="设置存储"><a href="#设置存储" class="headerlink" title="设置存储"></a>设置存储</h3><p>选择虚拟盘Centos8，用于启动<br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-15-13.png" alt="虚拟盘."></p><h3 id="设置虚拟机网卡"><a href="#设置虚拟机网卡" class="headerlink" title="设置虚拟机网卡"></a>设置虚拟机网卡</h3><p>这里要设置双网卡，后面才能与主机与外网进行连接<br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-17-57.png" alt="1."><br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-18-21.png" alt="2."></p><h3 id="启动创建的虚拟机"><a href="#启动创建的虚拟机" class="headerlink" title="启动创建的虚拟机"></a>启动创建的虚拟机</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-23-06.png" alt="启动虚拟机."><br><strong>注：虚拟机鼠标到桌面是<code>右Ctrl</code></strong></p><h3 id="选择语言"><a href="#选择语言" class="headerlink" title="选择语言"></a>选择语言</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-26-46.png" alt="语言."></p><h3 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-32-32.png" alt="时间."><br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-33-29.png" alt="上海."></p><h3 id="设置网络"><a href="#设置网络" class="headerlink" title="设置网络"></a>设置网络</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-36-50.png" alt="网络."><br>将网卡打开即可，后面还可更改</p><h3 id="设置root账户"><a href="#设置root账户" class="headerlink" title="设置root账户"></a>设置root账户</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-40-27.png" alt="root."><br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-43-23.png" alt="密码."><br>可创建新用户也可以不创建，但注意区分密码</p><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p>到此，虚拟机创建完成</p><h2 id="Linux系统网络配置"><a href="#Linux系统网络配置" class="headerlink" title="Linux系统网络配置"></a>Linux系统网络配置</h2><h3 id="图形界面与字符界面"><a href="#图形界面与字符界面" class="headerlink" title="图形界面与字符界面"></a>图形界面与字符界面</h3><p>图形界面到字符界面：<code>Ctrl+Alt+F2/F3</code><br>字符界面到图形界面：<code>Ctrl+Alt+F1</code></p><h3 id="root权限登录"><a href="#root权限登录" class="headerlink" title="root权限登录"></a>root权限登录</h3><p>登录…</p><h3 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h3><p>查看主机名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure><p>修改主机名，这里改成名字缩写加序号，便于管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname 主机名</span><br></pre></td></tr></table></figure><h3 id="配置IP映射"><a href="#配置IP映射" class="headerlink" title="配置IP映射"></a>配置IP映射</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-14-57-50.png" alt="IP映射."><br>保存并退出，底行命令下<code>wq</code></p><h3 id="配置网络参数"><a href="#配置网络参数" class="headerlink" title="配置网络参数"></a>配置网络参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-enpOs8</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-15-10-32.png" alt="配置IP."><br>重启虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><ul><li>ONBOOT=yes：表示启动这块网卡</li><li>BOOTPROTO=static：表示静态路由协议，保持IP固定</li><li>IPADDR：虚拟机IP地址，与前面映射一致</li><li>GATEWAY：虚拟机网关，一般是将IP地址最后一位数变成2</li><li>NETMASK：虚拟机掩码，配置为255.255.255.0即可</li></ul><p>另一块网卡(ifcfg-enpOs3)保持打开即可</p><h3 id="配置效果验证"><a href="#配置效果验证" class="headerlink" title="配置效果验证"></a>配置效果验证</h3><p>Linux下查看网卡信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-15-21-26.png" alt="ifconfig."><br>enpOs8下出现自己配置的静态IP，说明配置成功<br>再执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-15-26-41.png" alt="ping baidu."><br>有数据传输说明网络正常，<code>Ctrl+c</code>退出当前命令。<br>window系统下打开cmd窗口执行如下命令，地址为设置的虚拟机地址。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ping</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">56</span>.<span class="number">201</span></span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-15-30-38.png" alt="ping 虚拟机."><br>有数据传输说明主机与虚拟机建立联系。<br>到此虚拟机网络配置完成！</p><h2 id="虚拟机克隆"><a href="#虚拟机克隆" class="headerlink" title="虚拟机克隆"></a>虚拟机克隆</h2><h3 id="右击虚拟机-01，点击复制"><a href="#右击虚拟机-01，点击复制" class="headerlink" title="右击虚拟机 01，点击复制"></a>右击虚拟机 01，点击复制</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-19-14-49.png" alt="克隆."><br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-19-15-25.png" alt="完全复制."></p><h3 id="按如上步骤设置主机名与IP地址"><a href="#按如上步骤设置主机名与IP地址" class="headerlink" title="按如上步骤设置主机名与IP地址"></a>按如上步骤设置主机名与IP地址</h3><p>重复上述步骤<br><strong>注意：与之前设置的 IP 映射一致</strong></p><h3 id="复制好-03-虚拟机"><a href="#复制好-03-虚拟机" class="headerlink" title="复制好 03 虚拟机"></a>复制好 03 虚拟机</h3><p>进行同样的配置</p><h2 id="SSH-服务配置"><a href="#SSH-服务配置" class="headerlink" title="SSH 服务配置"></a>SSH 服务配置</h2><h3 id="打开-MobaXterm-远程连接工具"><a href="#打开-MobaXterm-远程连接工具" class="headerlink" title="打开 MobaXterm 远程连接工具"></a>打开 MobaXterm 远程连接工具</h3><p>点击导航栏上的”Session”,然后单击”SSH”<br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-18-51-16.png" alt="SSH."><br>点击 OK，设置好 MobaXterm 的密码后，输入 root 用户密码后即可实现远程登录。<br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-18-57-19.png" alt="SSH."><br>到此，虚拟机远程密码登录实现！<br>虚拟机在 Oracle VM VirtualBox 即可在 MobaXterm 实现对单台虚拟机的操作。<br><strong>同理：对 02，03 虚拟机实现 SSH 免密登录</strong></p><h3 id="删除虚拟机的-ssh-目录。"><a href="#删除虚拟机的-ssh-目录。" class="headerlink" title="删除虚拟机的~/.ssh 目录。"></a>删除虚拟机的~/.ssh 目录。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# rm -rf .ssh</span><br><span class="line">[root@hsq02 ~]# rm -rf .ssh</span><br><span class="line">[root@hsq03 ~]# rm -rf .ssh</span><br></pre></td></tr></table></figure><h3 id="在-01-虚拟机上新建-SSH-公私密钥对。"><a href="#在-01-虚拟机上新建-SSH-公私密钥对。" class="headerlink" title="在 01 虚拟机上新建 SSH 公私密钥对。"></a>在 01 虚拟机上新建 SSH 公私密钥对。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# ssh-keygen -t rsa -P &#x27;&#x27; -f ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h3 id="实现在-01-虚拟机上免密登录-02，03-虚拟机"><a href="#实现在-01-虚拟机上免密登录-02，03-虚拟机" class="headerlink" title="实现在 01 虚拟机上免密登录 02，03 虚拟机"></a>实现在 01 虚拟机上免密登录 02，03 虚拟机</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# ssh-copy-id root@hsq01</span><br><span class="line">[root@hsq01 ~]# ssh-copy-id root@hsq02</span><br><span class="line">[root@hsq01 ~]# ssh-copy-id root@hsq03</span><br></pre></td></tr></table></figure><p><strong>提示：出现(yes/no)?,输入yes，Enter 即可。</strong></p><h3 id="验证-SSH-免密登录是否配置成功"><a href="#验证-SSH-免密登录是否配置成功" class="headerlink" title="验证 SSH 免密登录是否配置成功"></a>验证 SSH 免密登录是否配置成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">[root@hsq01]# </span><span class="language-bash">ssh hsq02</span></span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-19-30-30.png" alt="hsq02."><br>如此表示登录成功！<br>输入<code>exit</code>，Enter 即可退回 01 虚拟机。</p><h2 id="Hadoop-集群搭建"><a href="#Hadoop-集群搭建" class="headerlink" title="Hadoop 集群搭建"></a>Hadoop 集群搭建</h2><p>提示：<br><strong>Window 下安装好的安装包直接通过 MobaXterm 拖入即可</strong></p><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><h4 id="将-JDK8-安装包放到如下目录"><a href="#将-JDK8-安装包放到如下目录" class="headerlink" title="将 JDK8 安装包放到如下目录"></a>将 JDK8 安装包放到如下目录</h4><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-19-38-27.png" alt="拖入."></p><h4 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# tar -zxvf (安装包name)jdk-8u341-linux-x64.tar.gz -C /usr/local/</span><br></pre></td></tr></table></figure><h4 id="配置-JDK-系统环境变量"><a href="#配置-JDK-系统环境变量" class="headerlink" title="配置 JDK 系统环境变量"></a>配置 JDK 系统环境变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# vi /etc/profile</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-19-48-54.png" alt="JAVA_HOME."></p><h4 id="使配置文件生效"><a href="#使配置文件生效" class="headerlink" title="使配置文件生效"></a>使配置文件生效</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="JDK-环境验证"><a href="#JDK-环境验证" class="headerlink" title="JDK 环境验证"></a>JDK 环境验证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-19-51-25.png" alt="java -version."><br>到此JDK安装和配置成功。</p><h3 id="安装-Hadoop"><a href="#安装-Hadoop" class="headerlink" title="安装 Hadoop"></a>安装 Hadoop</h3><h4 id="将-Hadoop-安装包-放到如下目录"><a href="#将-Hadoop-安装包-放到如下目录" class="headerlink" title="将 Hadoop 安装包 放到如下目录"></a>将 Hadoop 安装包 放到如下目录</h4><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-19-38-27.png" alt="拖入."></p><h4 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# tar -zxvf (安装包name)/root/hadoop-3.3.4.gz -C /usr/local/</span><br></pre></td></tr></table></figure><h4 id="配置-Hadoop-环境变量"><a href="#配置-Hadoop-环境变量" class="headerlink" title="配置 Hadoop 环境变量"></a>配置 Hadoop 环境变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# vi /etc/profile</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-10-04-52.png" alt="HADOOP_HOME."></p><h4 id="让配置文件生效"><a href="#让配置文件生效" class="headerlink" title="让配置文件生效"></a>让配置文件生效</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# hadoop -version</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-10-12-28.png" alt="hadoop version."></p><h3 id="Hadoop-集群配置"><a href="#Hadoop-集群配置" class="headerlink" title="Hadoop 集群配置"></a>Hadoop 集群配置</h3><h4 id="修改-hadoop-env-sh-文件"><a href="#修改-hadoop-env-sh-文件" class="headerlink" title="修改 hadoop-env.sh 文件"></a>修改 hadoop-env.sh 文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# cd $HADOOP_HOME</span><br><span class="line">[root@hsq01 hadoop-3.3.4]# cd etc/hadoop</span><br><span class="line">[root@hsq01 hadoop]# vi hadoop-env.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-10-22-11.png" alt="hadoop-env.sh."></p><h4 id="配置-core-site-xml-文件"><a href="#配置-core-site-xml-文件" class="headerlink" title="配置 core-site.xml 文件"></a>配置 core-site.xml 文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 hadoop]# vi core-site.xml</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-10-27-01.png" alt="core-site.xml."></p><h4 id="配置-hdfs-site-xml"><a href="#配置-hdfs-site-xml" class="headerlink" title="配置 hdfs-site.xml"></a>配置 hdfs-site.xml</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 hadoop]# vi hdfs-site.xml</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-10-31-01.png" alt="hdfs-site.xml."></p><h4 id="配置-mapred-site-xml-文件"><a href="#配置-mapred-site-xml-文件" class="headerlink" title="配置 mapred-site.xml 文件"></a>配置 mapred-site.xml 文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 hadoop]# vi mapred-site.xml</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-10-33-59.png" alt="mapred-site.xml."></p><h4 id="配置-yarn-site-xml-文件"><a href="#配置-yarn-site-xml-文件" class="headerlink" title="配置 yarn-site.xml 文件"></a>配置 yarn-site.xml 文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 hadoop]# vi yarn-site.xml</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-10-38-03.png" alt="yarn-site.xml."></p><h4 id="设置从节点，也就是修改-workers-文件"><a href="#设置从节点，也就是修改-workers-文件" class="headerlink" title="设置从节点，也就是修改 workers 文件"></a>设置从节点，也就是修改 workers 文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 hadoop]# vi workers</span><br></pre></td></tr></table></figure><p>文件中的内容替换如下，即三个虚拟机 hostname，每个主机名占一行<br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-10-41-54.png" alt="workers."><br><strong>注意：Hadoop2.x版本是执行 <code>vi slaves</code></strong></p><h4 id="将主节点的配置分发到其他节点"><a href="#将主节点的配置分发到其他节点" class="headerlink" title="将主节点的配置分发到其他节点"></a>将主节点的配置分发到其他节点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# scp /etc/profile hsq02:/etc/profile</span><br><span class="line">[root@hsq01 ~]# scp /etc/profile hsq03:/etc/profile</span><br><span class="line">[root@hsq01 ~]# scp -r /usr/local/hadoop-3.3.4 hsq02:/usr/local/</span><br><span class="line">[root@hsq01 ~]# scp -r /usr/local/hadoop-3.3.4 hsq03:/usr/local/</span><br><span class="line">[root@hsq01 ~]# scp -r /usr/local/jdk1.8.0_341 hsq02:/usr/local/</span><br><span class="line">[root@hsq01 ~]# scp -r /usr/local/jdk1.8.0_341 hsq03:/usr/local/</span><br></pre></td></tr></table></figure><p>执行完上述命令后，还需要再 02，03 虚拟机上分别执行 <code>source /etc/profile</code> 指令刷新配置文件。到处,整个集群所有节点都有了 Hadoop 运行所需要的环境和文件，Hadoop 集群安装配置完成。</p><h2 id="Hadoop-集群测试"><a href="#Hadoop-集群测试" class="headerlink" title="Hadoop 集群测试"></a>Hadoop 集群测试</h2><h3 id="格式化文件系统"><a href="#格式化文件系统" class="headerlink" title="格式化文件系统"></a>格式化文件系统</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# hdfs namenode -format</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# hadoop namenode -format</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-16-27.png" alt="格式化."><br><strong>注意：</strong></p><ul><li><strong>格式化只需要在 Hadoop 初次启动前执行一次即可；</strong></li><li>出现 <strong>has been successfully formatted</strong> 表明文件系统成功格式化；</li><li>否则，指令错误或者前面配置错误</li></ul><h3 id="启动和查看-Hadoop-进程"><a href="#启动和查看-Hadoop-进程" class="headerlink" title="启动和查看 Hadoop 进程"></a>启动和查看 Hadoop 进程</h3><h4 id="虚拟机01-主节点虚拟机-下启动-Hadoop-进程"><a href="#虚拟机01-主节点虚拟机-下启动-Hadoop-进程" class="headerlink" title="虚拟机01(主节点虚拟机)下启动 Hadoop 进程"></a>虚拟机01(主节点虚拟机)下启动 Hadoop 进程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# start-dfs.sh</span><br><span class="line">[root@hsq01 ~]# start-yarn.sh</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-06-51.png" alt="启动Hadoop."></p><h4 id="查看-Hadoop-进程"><a href="#查看-Hadoop-进程" class="headerlink" title="查看 Hadoop 进程"></a>查看 Hadoop 进程</h4><p>① 在 01 虚拟机中查看。<br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-18-21.png" alt="01jps."><br>② 在 02 虚拟机中查看<br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-19-02.png" alt="02jps."><br>③ 在 03 虚拟机中查看<br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-19-26.png" alt="03jps."><br>此时，看到规划的 Hadoop 均已启动，则 Hadoop 全分布式搭建成功</p><h3 id="查看Web界面"><a href="#查看Web界面" class="headerlink" title="查看Web界面"></a>查看Web界面</h3><h4 id="先配置-window-下的-hosts-文件"><a href="#先配置-window-下的-hosts-文件" class="headerlink" title="先配置 window 下的 hosts 文件"></a>先配置 window 下的 hosts 文件</h4><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-24-53.png" alt="hosts."><br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-26-37.png" alt="保存hosts."><br>用VS Code 打开，用管理员身份保存修改即可</p><h4 id="关闭虚拟机防火墙"><a href="#关闭虚拟机防火墙" class="headerlink" title="关闭虚拟机防火墙"></a>关闭虚拟机防火墙</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure><p>三台虚拟机都执行</p><h4 id="window-下浏览器访问-http-hsq01-9870-和-http-hsq01-8088"><a href="#window-下浏览器访问-http-hsq01-9870-和-http-hsq01-8088" class="headerlink" title="window 下浏览器访问 http://hsq01:9870 和 http://hsq01:8088"></a>window 下浏览器访问 <a href="http://hsq01:9870">http://hsq01:9870</a> 和 <a href="http://hsq01:8088">http://hsq01:8088</a></h4><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-32-48.png" alt="9870."><br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-33-24.png" alt="8088."><br>到此，Hadoop 集群的 HDFS UI 界面和 YARN UI 界面通过 Web 界面均可访问，并且显示正常，便于通过 Web 界面对集群状态进行管理和查看。</p><h2 id="简单使用-Hadoop-集群"><a href="#简单使用-Hadoop-集群" class="headerlink" title="简单使用 Hadoop 集群"></a>简单使用 Hadoop 集群</h2><h3 id="新建-test-txt-文本"><a href="#新建-test-txt-文本" class="headerlink" title="新建 test.txt 文本"></a>新建 test.txt 文本</h3><p>在集群主节点 01 上的/root/目录下，使用<code>vi test.txt</code>新建一个 test.txt 文本文件，并编写内容</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是我的测试文件</span><br></pre></td></tr></table></figure><h3 id="上传-test-txt-到-HDFS-的-目录下"><a href="#上传-test-txt-到-HDFS-的-目录下" class="headerlink" title="上传 test.txt 到 HDFS 的 / 目录下"></a>上传 test.txt 到 HDFS 的 / 目录下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# hdfs dfs -put test.txt /</span><br></pre></td></tr></table></figure><h3 id="查看上传的文件"><a href="#查看上传的文件" class="headerlink" title="查看上传的文件"></a>查看上传的文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# hdfs dfs -cat /test.txt</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-45-43.png" alt="hdfs dfs -cat."></p><h3 id="通过-Web-界面下载文件，用记事本查看"><a href="#通过-Web-界面下载文件，用记事本查看" class="headerlink" title="通过 Web 界面下载文件，用记事本查看"></a>通过 Web 界面下载文件，用记事本查看</h3><p>刚刚的 Web 界面刷新<br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-49-09.png" alt="test.txt."><br>点击文件下载<br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-50-02.png" alt="download."><br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-50-46.png" alt="download."><br>打开<br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-51-30.png" alt="test.txt."><br>内容一致，表明 Hadoop 搭建成功！！！</p><p><strong>说明：之前使用 JDK 19 也成功搭建 Hadoop 集群，但 Web 界面无法下载上传的文件，没有解决，查阅资料说是使用的 JDK 版本过新(只是 Web 界面那有问题，没有找到合适方法解决)，所以建设使用稳定的 JDK 版本，新版本的 Hadoop 暂时没有遇到问题。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/22/hello-world/"/>
      <url>/2022/10/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>ohmygirl</title>
      <link href="/Gallery/ohmygirl/index.html"/>
      <url>/Gallery/ohmygirl/index.html</url>
      
        <content type="html"><![CDATA[<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt="1"><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt="2"><br><img src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg" alt="3"><br><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" alt="4"><br><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" alt="5"><br><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg" alt="6"><br><img src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg" alt="7"><br><img src="https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg" alt="8"></p>          </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<div class="aplayer no-destroy" data-id="8332009741" data-server="tencent" data-type="playlist" data-fixed="true" data-mini="true" data-autoplay="false"> </div><h2 id="穿越灵魂的轻音乐"><a href="#穿越灵魂的轻音乐" class="headerlink" title="穿越灵魂的轻音乐"></a>穿越灵魂的轻音乐</h2><!-- 往后余生 -->    <div id="aplayer-zqBfPVyc" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="0021KaCz32dS7C" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div><!-- Windy Hill  -->    <div id="aplayer-iAmVYkfh" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="0009DtA34CLrKk" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div><!-- 红色高跟鞋 -->    <div id="aplayer-bZkixJPj" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="002Bj8nB1qLBK3" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div><h2 id="悦"><a href="#悦" class="headerlink" title="悦"></a>悦</h2><!-- 起风了 -->    <div id="aplayer-vNYFXekE" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="0004jPDk2eB2dt" data-server="tencent" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div><h2 id="我的歌单"><a href="#我的歌单" class="headerlink" title="我的歌单"></a>我的歌单</h2>    <div id="aplayer-fRwyrFvK" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="8331981931" data-server="tencent" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>wallpaper</title>
      <link href="/Gallery/wallpaper/index.html"/>
      <url>/Gallery/wallpaper/index.html</url>
      
        <content type="html"><![CDATA[<div class="fj-gallery"><p><img src="https://i.loli.net/2019/11/10/lP3rLNUBaGtSVzc.png" alt="1"><br><img src="https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png" alt="2"><br><img src="https://i.loli.net/2019/11/10/53eTB2uiNRlXwFP.png" alt="3"><br><img src="https://i.loli.net/2019/11/10/xthHmnbdNerWOqP.png" alt="4"><br><img src="https://i.loli.net/2019/11/10/rJbFpE65tmxPv7R.png" alt="5"><br><img src="https://i.loli.net/2019/11/10/bEJsXxewpOGuRD8.png" alt="6"><br><img src="https://i.loli.net/2019/11/10/71wgohfPHqXRbG9.png" alt="7"><br><img src="https://i.loli.net/2019/11/10/gcnavZbmepS8d4u.png" alt="8"><br><img src="https://i.loli.net/2019/11/10/3wkO7fuQpgda6vz.png" alt="9"><br><img src="https://i.loli.net/2019/11/10/egVhFWopA5mP2Hk.png" alt="10"></p>          </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>貂蝉</title>
      <link href="/Gallery/%E8%B2%82%E8%9D%89/index.html"/>
      <url>/Gallery/%E8%B2%82%E8%9D%89/index.html</url>
      
        <content type="html"><![CDATA[<div class="fj-gallery"><p><img src="https://pic.imgdb.cn/item/63f48d28f144a01007519f8f.jpg" alt="貂蝉——幻阙歌"><br><img src="https://pic1.imgdb.cn/item/6364a57b16f2c2beb131e55a.jpg" alt="貂蝉——唤灵魅影"><br><img src="https://pic1.imgdb.cn/item/6364abd016f2c2beb13c6aac.jpg" alt="貂蝉——遇见胡旋1"><br><img src="https://pic1.imgdb.cn/item/6364a52216f2c2beb13178cd.jpg" alt="貂蝉——猫影幻舞"><br><img src="https://pic1.imgdb.cn/item/6364a52216f2c2beb13178e4.jpg" alt="貂蝉——异域舞娘"><br><img src="https://pic1.imgdb.cn/item/6364a52216f2c2beb13178b5.jpg" alt="貂蝉——绝世舞姬"><br><img src="https://pic1.imgdb.cn/item/6364a52216f2c2beb13178d8.jpg" alt="貂蝉——圣诞恋歌"><br><img src="https://pic1.imgdb.cn/item/6364a56216f2c2beb131c7dd.jpg" alt="貂蝉——仲夏夜之梦"><br><img src="https://pic1.imgdb.cn/item/6364a56a16f2c2beb131d0ba.jpg" alt="貂蝉——逐梦之音"><br><img src="https://pic1.imgdb.cn/item/6364a52216f2c2beb1317895.jpg" alt="貂蝉——金色仲夏夜之梦"><br><img src="https://pic1.imgdb.cn/item/6364a55c16f2c2beb131c06e.jpg" alt="貂蝉——遇见胡旋"></p>          </div>]]></content>
      
    </entry>
    
    
  
</search>
