<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hadoop 生态</title>
      <link href="/2022/11/12/HadoopBase/"/>
      <url>/2022/11/12/HadoopBase/</url>
      
        <content type="html"><![CDATA[<div class="note default modern"><p><a href="#HDFS-shell命令行常用操作">HDFS shell 命令行常用操作</a></p></div><h2 id="大数据导论"><a href="#大数据导论" class="headerlink" title="大数据导论"></a>大数据导论</h2><h3 id="企业数据分析方向"><a href="#企业数据分析方向" class="headerlink" title="企业数据分析方向"></a>企业数据分析方向</h3><h4 id="数据是什么"><a href="#数据是什么" class="headerlink" title="数据是什么"></a>数据是什么</h4><ul><li>数据是指对<strong>客观事件进行记录并可以鉴别的符号</strong>，是对客观事物的性质、状态以及相互关系等进行记载的物理符号或这些物理符号的组合，它是可识别的、抽象的符号。</li><li>它不仅指狭义上的<strong>数字</strong>，还可以是具有一定意义的<strong>文字、字母、数字符号的组合、图形、图像、视频、音频</strong>等，也是客观事物的属性、数量、位置及其相互关系的抽象表示。例如，“0、1、2…”、“阴、雨、下降”、“学生的档案记录、货物的运输情况”等都是数据。<img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-14-02-20.jpg" style="height:300px"></li></ul><h4 id="数据如何产生"><a href="#数据如何产生" class="headerlink" title="数据如何产生"></a>数据如何产生</h4><p>对客观事物的<strong>计量和记录产生</strong>数据<br><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-14-07-17.png" style="height:200px"><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-14-07-30.png" style="height:200px"></p><h4 id="分析方向"><a href="#分析方向" class="headerlink" title="分析方向"></a>分析方向</h4><p><strong>把隐藏在数据背后的信息集中和提炼出来，总结出所研究对象的内在规律，帮助管理者进行有效的判断和决策</strong>。</p><p>数据分析在企业日常经营分析中主要有三大方向：<br><blockquote class="pullquote right"><p><img src="/2022/11/12/HadoopBase/2022-11-19-14-21-20.png" alt="企业数据分析方向"></p></blockquote></p><ul><li><strong>现状分析</strong>（分析<strong>当下</strong>的数据）：现阶段的整体情况，各个部分的构成占比、发展、变动；</li><li><strong>原因分析</strong>（分析<strong>过去</strong>的数据）：某一现状为什么发生，确定原因，做出调整优化；</li><li><strong>预测分析</strong>（结合数据预测<strong>未来</strong>）：结合已有数据预测未来发展趋势。</li></ul><div class="tabs" id="分析方向"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分析方向-1">现状分析</button></li><li class="tab"><button type="button" data-href="#分析方向-2">原因分析</button></li><li class="tab"><button type="button" data-href="#分析方向-3">预测分析</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分析方向-1"><p><strong>实时分析</strong>（Real Time Processing |<strong>Streaming</strong>）</p><p>面向当下，分析实时产生的数据；<br>所谓的实时是指从数据产生到数据分析到数据应用的时间间隔很短，可细分秒级、毫秒级。<br><img src="/2022/11/12/HadoopBase/2022-11-19-14-27-18.png" alt="实时分析"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分析方向-2"><p><strong>离线分析</strong>（<strong>Batch</strong> Processing）</p><p>面向过去，面向<strong>历史</strong>，分析已有的数据；<br>在时间维度明显成<strong>批次性变化</strong>。一周一分析(T+7)，一天一分析（T+1），所以也叫做<strong>批处理</strong>。<br><img src="/2022/11/12/HadoopBase/2022-11-19-14-29-41.png" alt="离线分析"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分析方向-3"><p><strong>机器学习</strong>（<strong>Machine Learning</strong>）</p><p>基于历史数据和当下产生的实时数据预测未来发生的事情；<br>侧重于<strong>数学算法</strong>的运用，如分类、聚类、关联、预测。<br><img src="/2022/11/12/HadoopBase/2022-11-19-14-30-55.png" alt="机器学习"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="数据分析基本步骤"><a href="#数据分析基本步骤" class="headerlink" title="数据分析基本步骤"></a>数据分析基本步骤</h3><p>数据分析步骤（流程）的重要性体现在：对<strong>如何开展数据分析提供了强有力的逻辑支撑</strong>;<br>张文霖在《数据分析六步曲》说，典型的数据分析应该包含以下几个步骤<br><img src="/2022/11/12/HadoopBase/2022-11-19-14-33-05.png" alt="数据分析六步曲"></p><h4 id="Step1：明确分析目的和思路"><a href="#Step1：明确分析目的和思路" class="headerlink" title="Step1：明确分析目的和思路"></a>Step1：明确分析目的和思路</h4><ul><li>目的是整个分析流程的起点，为数据的收集、处理及分析提供清晰的指引方向；</li><li>思路是使<strong>分析框架体系化</strong>，比如先分析什么，后分析什么，使各分析点之间具有逻辑联系，保证分析维度的<strong>完整性</strong>，分析结果的<strong>有效性</strong>以及<strong>正确性</strong>，需要数据分析方法论进行支撑；</li><li>数据分析方法论是一些营销管理类相关理论，比如用户行为理论、<strong>PEST分析法</strong>、5W2H分析法等。</li></ul><p><img src="/2022/11/12/HadoopBase/2022-11-19-14-35-53.png" alt="PEST分析法"></p><h4 id="Step2：数据收集"><a href="#Step2：数据收集" class="headerlink" title="Step2：数据收集"></a>Step2：数据收集</h4><ul><li>数据<strong>从无到有</strong>的过程：比如传感器收集气象数据、埋点收集用户行为数据</li><li>数据<strong>传输搬运</strong>的过程：比如采集数据库数据到数据分析平台</li></ul><p><img src="/2022/11/12/HadoopBase/2022-11-19-14-37-13.png" alt="数据收集"></p><h4 id="Step3：数据处理"><a href="#Step3：数据处理" class="headerlink" title="Step3：数据处理"></a>Step3：数据处理</h4><ul><li>准确来说，应该称之为<strong>数据预处理</strong>。</li><li>数据预处理需要对收集到的数据进行加工整理，形成适合数据分析的样式，主要包括<strong>数据清洗、数据转化、数据提取、数据计算</strong>；</li><li>数据预处理可以保证数据的一致性和有效性，让数据变成干净规整的<strong>结构化数据</strong>。</li></ul><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-14-38-59.png" style="height:300px"><h4 id="Step4：数据分析"><a href="#Step4：数据分析" class="headerlink" title="Step4：数据分析"></a>Step4：数据分析</h4><ul><li>用适当的分析方法及分析工具，对处理过的数据进行分析，提取有价值的信息，形成有效结论的过程；</li><li>需要掌握各种<strong>数据分析方法</strong>，还要熟悉<strong>数据分析软件</strong>的操作；</li></ul><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-14-42-20.png" style="height:300px"><h4 id="Step5：数据展现"><a href="#Step5：数据展现" class="headerlink" title="Step5：数据展现"></a>Step5：数据展现</h4><ul><li>数据展现又称之为<strong>数据可视化</strong>，指的是<strong>分析结果图表展示</strong>，因为人类是视觉动物；</li><li>数据可视化（Data Visualization）属于数据应用的一种；</li><li>注意，<strong>数据分析的结果不是只有可视化展示</strong>，还可以继续数据挖掘（Data Mining）、即席查询（Ad Hoc）等。</li></ul><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-14-42-09.png" style="height:300px"><h4 id="Step6：报告撰写"><a href="#Step6：报告撰写" class="headerlink" title="Step6：报告撰写"></a>Step6：报告撰写</h4><ul><li>数据分析报告是对整个数据分析过程的一个总结与呈现</li><li>把数据分析的起因、过程、结果及建议完整地呈现出来，供决策者参考</li><li>需要有明确的结论，最好有建议或解决方案</li></ul><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-14-44-29.png" style="height:400px"><div class="note info modern"><p>数据分析</p><ul><li><strong>一切围绕着数据</strong></li><li>通俗描述：<strong>数据从哪里来、数据到哪里去</strong></li><li>核心步骤:采集、处理、分析、应用</li></ul></div><h3 id="大数据时代"><a href="#大数据时代" class="headerlink" title="大数据时代"></a>大数据时代</h3><div class="note info modern"><ul><li>解决海量数据<strong>储存</strong>问题</li><li>解决海量数据<strong>计算</strong>问题</li></ul></div><h4 id="大数据时代背景"><a href="#大数据时代背景" class="headerlink" title="大数据时代背景"></a>大数据时代背景</h4><ul><li>最早提出“<strong>大数据</strong>”<strong>时代</strong>到来的是全球知名咨询公司<strong>麦肯锡</strong>，其称：“数据，已经渗透到当今每一个行业和业务职能领域，成为重要的生产因素。人们对于海量数据的挖掘和运用，预示着新一波生产率增长和消费者盈余浪潮的到来。”</li><li>2019年，央视推出了国内首部大数据产业题材纪录片《大数据时代》，节目细致而生动地讲述了大数据技术在<strong>政府治理、民生服务、数据安全、工业转型、未来生活</strong>等方面给我们带来的改变和影响。<br><img src="/2022/11/12/HadoopBase/2022-11-19-15-29-35.png" alt="大数据时代"></li></ul><h4 id="大数据定义"><a href="#大数据定义" class="headerlink" title="大数据定义"></a>大数据定义</h4><ul><li><strong>大数据（big data）</strong>是指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合；</li><li>是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产。<br><img src="/2022/11/12/HadoopBase/2022-11-19-15-30-31.png" alt="big data"></li></ul><h4 id="大数据5V特征"><a href="#大数据5V特征" class="headerlink" title="大数据5V特征"></a>大数据5V特征</h4><p>5个V开头的单词，从5个方面准确、生动、形象的介绍了大数据特征。<br><img src="/2022/11/12/HadoopBase/2022-11-19-15-31-43.png" alt="大数据5V特征"></p><p><img src="/2022/11/12/HadoopBase/2022-11-19-15-32-24.png" alt="大数据5V特征"></p><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul><li><p><strong>电商领域</strong><br>精准广告位、个性化推荐、大数据杀熟</p></li><li><p><strong>传媒领域</strong><br>精准营销、猜你喜欢、交互推荐</p></li></ul><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-15-36-52.png" style="height:200px"><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-15-37-00.png" style="height:200px"><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-15-41-40.png" style="height:200px"><ul><li><p><strong>金融方面</strong><br>理财投资，通过对个人的信用评估，风险承担能力评估，集合众多理财产品、推荐响应的投资理财产品。<br><img src="/2022/11/12/HadoopBase/2022-11-19-15-46-35.png" alt="金融方面"></p></li><li><p><strong>交通领域</strong><br>拥堵预测、智能红绿灯、导航最优规划</p></li><li><p><strong>电信领域</strong><br>基站选址优化、舆情监控、客户用户画像</p><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-15-47-53.png" style="height:200px"><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-15-47-59.png" style="height:200px"><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-15-48-04.png" style="height:200px"></li><li><p><strong>安防领域</strong><br>犯罪预防、天网监控</p></li><li><p><strong>医疗领域</strong><br>智慧医疗、疾病预防、病源追踪</p></li></ul><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-15-50-27.png" style="height:200px"><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-15-50-32.png" style="height:200px"><h3 id="分布式与集群"><a href="#分布式与集群" class="headerlink" title="分布式与集群"></a>分布式与集群</h3><p>分布式、集群是两个不同的概念，但口语中经常混淆二者。<br><img src="/2022/11/12/HadoopBase/2022-11-19-15-52-16.png" alt="分布式与集群"></p><ul><li>分布式、集群的共同点是：<strong>都是多台机器（服务器）组成的</strong>；</li><li>因此口语中混淆两者概念的时候都是：<strong>相对于单机来说的</strong>。</li></ul><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-15-53-33.png" style="height:200px"><img class="inline-img" src="/2022/11/12/HadoopBase/2022-11-19-15-53-38.png" style="height:200px"><h4 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h4><p>数据大爆炸，海量数据处理场景面临问题<br><img src="/2022/11/12/HadoopBase/2022-11-19-15-57-22.png" alt="大数据背景下"></p><h2 id="Apache-Hadoop、HDFS"><a href="#Apache-Hadoop、HDFS" class="headerlink" title="Apache Hadoop、HDFS"></a>Apache Hadoop、HDFS</h2><h3 id="Apache-Hadoop概述"><a href="#Apache-Hadoop概述" class="headerlink" title="Apache Hadoop概述"></a>Apache Hadoop概述</h3><h4 id="Hadoop介绍、发展简史、现状"><a href="#Hadoop介绍、发展简史、现状" class="headerlink" title="Hadoop介绍、发展简史、现状"></a>Hadoop介绍、发展简史、现状</h4><h5 id="Hadoop介绍"><a href="#Hadoop介绍" class="headerlink" title="Hadoop介绍"></a>Hadoop介绍</h5><ul><li><mark class="hl-label blue">狭义上Hadoop指的是Apache软件基金会的一款开源软件。</mark> <p>用java语言实现，开源<br>允许用户使用<strong>简单的编程模型</strong>实现<strong>跨机器</strong>集群对海量数据进行<strong>分布式计算</strong>处理</p></li><li><mark class="hl-label blue">Hadoop核心组件</mark> <p>Hadoop HDFS（分布式文件<strong>存储</strong>系统）：解决海量数据存储<br>Hadoop YARN（集群<strong>资源管理</strong>和任务调度框架）：解决资源任务调度<br>Hadoop MapReduce（分布式<strong>计算</strong>框架）：解决海量数据计算</p></li><li><mark class="hl-label blue">官网</mark> <p><a href="http://hadoop.apache.org/">http://hadoop.apache.org/</a></p></li><li><mark class="hl-label red">广义上Hadoop指的是围绕Hadoop打造的大数据生态圈。</mark> <p><img src="/2022/11/12/HadoopBase/2022-11-12-22-38-08.png" alt="广义Hadoop"></p></li></ul><h5 id="Hadoop发展简史"><a href="#Hadoop发展简史" class="headerlink" title="Hadoop发展简史"></a>Hadoop发展简史</h5><blockquote class="pullquote right"><p><img src="/2022/11/12/HadoopBase/2022-11-12-22-42-09.png" alt="Hadoop之父"></p></blockquote><ul><li><mark class="hl-label blue">Hadoop之父</mark> <p><strong>Doug Cutting</strong></p></li><li><mark class="hl-label blue">Hadoop起源于ApacheLucene子项目：Nutch</mark> <p>Nutch的设计目标是构建一个大型的全网搜索引擎。<br>遇到瓶颈：如何解决数十亿网页的存储和索引问题</p></li><li><mark class="hl-label red">Google三篇论文</mark> <p>《The Google file system》：谷歌分布式文件系统GFS<br>《MapReduce: Simplified Data Processing on Large Clusters》：谷歌分布式计算框架MapReduce<br>《Bigtable: A Distributed Storage System for Structured Data》：谷歌结构化数据存储系统</p></li></ul><h5 id="Hadoop现状"><a href="#Hadoop现状" class="headerlink" title="Hadoop现状"></a>Hadoop现状</h5><ul><li><strong>HDFS</strong>作为分布式文件存储系统，处在<strong>生态圈的底层与核心地位</strong>；</li><li><strong>YARN</strong>作为分布式通用的集群资源管理系统和任务调度平台，<strong>支撑各种计算引擎运行</strong>，保证了Hadoop地位；</li><li><strong>MapReduce</strong>作为大数据生态圈第一代分布式计算引擎，由于自身设计的模型所产生的弊端，导致企业一线<strong>几乎不再直接使用</strong>MapReduce进行编程处理，但是很多软件的底层依然在使用MapReduce引擎来处理数据。</li></ul><div class="note info modern"><ol><li>狭义上Hadoop指软件，广义上Hadoop指生态圈</li><li>Hadoop之父Doug Cutting</li><li>Hadoop起源于Nutch项目</li><li>受Google3篇论文启发</li><li>2008年开源给Apache软件基金会</li></ol></div><h4 id="Hadoop特性优点、国内外应用"><a href="#Hadoop特性优点、国内外应用" class="headerlink" title="Hadoop特性优点、国内外应用"></a>Hadoop特性优点、国内外应用</h4><h5 id="Hadoop特性优点"><a href="#Hadoop特性优点" class="headerlink" title="Hadoop特性优点"></a>Hadoop特性优点</h5><ol><li><p><strong>扩容能力</strong> scalability<br>Hadoop是在可用的计算机集群间分配数据并完成计算任务的，这些集群可方便灵活的方式扩展到数以千计的节点。</p></li><li><p><strong>成本低</strong> Economical<br>Hadoop集群允许通过部署普通廉价的机器组成集群来处理大数据，以至于成本很低。看重的是集群整体能力。</p></li><li><p><strong>效率高</strong> efficiency<br>通过<strong>并发数据</strong>，Hadoop可以在节点之间动态<strong>并行</strong>的移动数据，使得速度非常快。</p></li><li><p>可靠性 reliability<br>能自动维护数据的多份复制，并且在任务失败后能自动地重新部署（redeploy）计算任务。所以Hadoop的按位存储和处理数据的能力值得人们信赖。</p></li></ol><h5 id="Hadoop国外应用"><a href="#Hadoop国外应用" class="headerlink" title="Hadoop国外应用"></a>Hadoop国外应用</h5><ul><li><p>Yahoo<br>支持广告系统<br>用户行为分析<br>支持Web搜索<br>反垃圾邮件系统</p></li><li><p>Facebook<br>存储处理数据挖掘和日志统计<br>构建基于Hadoop数据仓库平台（Apache Hive来自FB）</p></li><li><p>IBM<br>蓝云基础设施构建<br>商业化Hadoop发行、解决方案支持</p></li></ul><h5 id="Hadoop国内应用"><a href="#Hadoop国内应用" class="headerlink" title="Hadoop国内应用"></a>Hadoop国内应用</h5><ul><li><p>百度<br>用户搜索表征的需求数据、阿拉丁爬虫数据存储<br>数据分析和挖掘竞价排名</p></li><li><p>阿里巴巴<br>为电子商务网络平台提供底层的基础计算和存储服务<br>交易数据、信用数据</p></li><li><p>腾讯<br>用户关系数据<br>基于Hadoop、Hive构建TDW（腾讯分布式数据仓库）</p></li><li><p>华为<br>对Hadoop的HA方案，以及HBase领域有深入研究</p></li></ul><div class="note info modern"><ul><li><p>Hadoop成功的魅力—<strong>通用性</strong><br>精准区分做什么和怎么做<br>做什么属于业务问题怎么做属于技术问题。<br>用户负责业务Hadoop负责技术</p></li><li><p>Hadoop成功的魅力—<strong>简单</strong><br><strong>一个东西你用起来比较简单，可不是你的能力！</strong></p></li></ul></div><h4 id="Hadoop发行版本、架构变迁"><a href="#Hadoop发行版本、架构变迁" class="headerlink" title="Hadoop发行版本、架构变迁"></a>Hadoop发行版本、架构变迁</h4><h5 id="Hadoop发行版本"><a href="#Hadoop发行版本" class="headerlink" title="Hadoop发行版本"></a>Hadoop发行版本</h5><p><img src="/2022/11/12/HadoopBase/2022-11-12-23-32-21.png" alt="Hadoop发行版本"></p><ul><li><p>Apache开源社区版本<br><a href="http://hadoop.apache.org/">http://hadoop.apache.org/</a></p></li><li><p>商业发行版本<br>Cloudera: <a href="https://www.cloudera.com/products/open-source/apache-hadoop.html">https://www.cloudera.com/products/open-source/apache-hadoop.html</a><br>Hortonworks: <a href="https://www.cloudera.com/products/hdp.html">https://www.cloudera.com/products/hdp.html</a></p></li></ul><h5 id="Hadoop架构变迁（1-0-2-0变迁）"><a href="#Hadoop架构变迁（1-0-2-0变迁）" class="headerlink" title="Hadoop架构变迁（1.0-2.0变迁）"></a>Hadoop架构变迁（1.0-2.0变迁）</h5><ul><li><p>Hadoop 1.0<br>HDFS（分布式文件存储）<br>MapReduce（资源管理和分布式数据处理）</p></li><li><p>Hadoop 2.0<br>HDFS（分布式文件存储）<br>MapReduce（分布式数据处理）<br><strong>YARN</strong>（集群资源管理、任务调度）</p></li></ul><p><img src="/2022/11/12/HadoopBase/2022-11-12-23-38-22.png" alt="Hadoop架构变迁（1.0-2.0变迁）"></p><h5 id="Hadoop架构变迁（3-0新版本）"><a href="#Hadoop架构变迁（3-0新版本）" class="headerlink" title="Hadoop架构变迁（3.0新版本）"></a>Hadoop架构变迁（3.0新版本）</h5><p><img src="/2022/11/12/HadoopBase/2022-11-12-23-39-05.png" alt="Hadoop架构变迁（3.0新版本）"><br>Hadoop 3.0架构组件和Hadoop 2.0类似,<strong>3.0着重于性能优化</strong>。</p><ul><li><p>通用方面<br>精简内核、类路径隔离、shell脚本重构</p></li><li><p>Hadoop HDFS<br>EC纠删码、多NameNode支持</p></li><li><p>Hadoop MapReduce<br>任务本地化优化、内存参数自动推断</p></li><li><p>Hadoop YARN<br>Timeline Service V2、队列配置</p></li></ul><h3 id="Apache-Hadoop集群搭建"><a href="#Apache-Hadoop集群搭建" class="headerlink" title="Apache Hadoop集群搭建"></a>Apache Hadoop集群搭建</h3><h4 id="Hadoop集群简介"><a href="#Hadoop集群简介" class="headerlink" title="Hadoop集群简介"></a>Hadoop集群简介</h4><ul><li>Hadoop集群包括两个集群：HDFS集群、YARN集群</li><li>两个集群<strong>逻辑上分离、通常物理上在一起</strong>(可单独启动，部署于一台计算机)</li><li>两个集群都是标准的<strong>主从架构</strong>集群</li></ul><p><img src="/2022/11/12/HadoopBase/2022-11-12-23-46-13.png" alt="Hadoop集群"><br><img src="/2022/11/12/HadoopBase/2022-11-12-23-48-36.png" alt="Hadoop集群"></p><ul><li><p>逻辑上分离<br>两个集群<strong>互相之间没有依赖、互不影响</strong></p></li><li><p>物理上在一起<br>某些角色进程往往<strong>部署在同一台物理服务器上</strong></p></li><li><p>MapReduce集群呢？<br>MapReduce是计算框架、代码层面的组件没有集群之说</p></li></ul><h4 id="Hadoop集群模式-分布式-安装（Cluster-mode）"><a href="#Hadoop集群模式-分布式-安装（Cluster-mode）" class="headerlink" title="Hadoop集群模式(分布式)安装（Cluster mode）"></a>Hadoop集群模式(分布式)安装（Cluster mode）</h4><p>详细的集群搭建步骤可参考<a href="/2022/10/25/HadoopClusterBuilding3-3-4/" title="Hadoop 3.3.4 集群搭建">Hadoop 3.3.4 集群搭建</a></p><h5 id="Hadoop源码编译"><a href="#Hadoop源码编译" class="headerlink" title="Hadoop源码编译"></a>Hadoop源码编译</h5><ul><li>安装包、源码包下载地址<br><a href="https://archive.apache.org/dist/hadoop/common/">https://archive.apache.org/dist/hadoop/common/</a><br><img src="/2022/11/12/HadoopBase/2022-11-13-00-08-55.png" alt="Hadoop版本"></li><li>为什么要重新编译Hadoop源码?<br>匹配不同<strong>操作系统本地库环境</strong>，Hadoop某些操作比如压缩、IO需要调用系统本地库（<em>.so|</em>.dll）<br><strong>修改源码、重构源码</strong></li><li>如何编译Hadoop<br>源码包根目录下文件：BUILDING.txt<br><img src="/2022/11/12/HadoopBase/2022-11-13-00-09-25.png" alt="如何编译Hadoop"></li></ul><h5 id="Step1-集群角色规划"><a href="#Step1-集群角色规划" class="headerlink" title="Step1:集群角色规划"></a>Step1:集群角色规划</h5><ul><li><p>角色规划的准则<br>根据软件工作特性和服务器硬件资源情况合理分配<br>比如依赖内存工作的NameNode是不是部署在大内存机器上？</p></li><li><p>角色规划注意事项<br><strong>资源上有抢夺冲突的，尽量不要部署在一起</strong><br><strong>工作上需要互相配合的。尽量部署在一起</strong></p></li></ul><div class="table-container"><table><thead><tr><th>服务器</th><th>运行角色</th></tr></thead><tbody><tr><td>node1.itcast.cn</td><td>namenode datanode resourcemanager nodemanager</td></tr><tr><td>node2.itcast.cn</td><td>secondarynamenode datanode nodemanager</td></tr><tr><td>node3.itcast.cn</td><td>datanode nodemanager</td></tr></tbody></table></div><h5 id="Step2-服务器基础环境准备"><a href="#Step2-服务器基础环境准备" class="headerlink" title="Step2:服务器基础环境准备"></a>Step2:服务器基础环境准备</h5><ul><li><p>主机名（3台机器）<br><code>vim /etc/hostname</code></p></li><li><p>Hosts映射（3台机器）<br><code>vim /etc/hosts</code></p></li><li><p>防火墙关闭（3台机器）<br><code>systemctl stop firewalld.service</code> #关闭防火墙<br><code>systemctl disable firewalld.service</code> #禁止防火墙开启自启</p></li><li><p>ssh免密登录<br><code>ssh-keygen</code>#4个回车生成公钥、私钥<br><code>ssh-copy-id node1</code>、<code>ssh-copy-id node2</code>、<code>ssh-copy-id node3</code></p></li><li><p>集群时间同步（3台机器）<br><code>yum -y install ntpdate</code><br><code>ntpdate ntp4.aliyun.com</code></p></li><li><p>创建统一工作目录（3台机器）</p></li></ul><h5 id="Step3-上传安装包、解压安装包"><a href="#Step3-上传安装包、解压安装包" class="headerlink" title="Step3:上传安装包、解压安装包"></a>Step3:上传安装包、解压安装包</h5><ul><li>JDK 1.8安装（3台机器）</li><li>上传、解压Hadoop安装包</li></ul><h5 id="Step4-Hadoop安装包目录结构"><a href="#Step4-Hadoop安装包目录结构" class="headerlink" title="Step4:Hadoop安装包目录结构"></a>Step4:Hadoop安装包目录结构</h5><div class="table-container"><table><thead><tr><th>目录</th><th>说明</th></tr></thead><tbody><tr><td><strong>bin</strong></td><td>Hadoop最基本的<strong>管理脚本</strong>和使用脚本的目录，这些脚本是sbin目录下管理脚本的基础实现，用户可以直接使用这些脚本管理和使用Hadoop。</td></tr><tr><td><strong>etc</strong></td><td>Hadoop<strong>配置文件</strong>所在的目录</td></tr><tr><td>include</td><td>对外提供的编程库头文件（具体动态库和静态库在lib目录中），这些头文件均是用C++定义的，通常用于C++程序访问HDFS或者编写MapReduce程序。</td></tr><tr><td>lib</td><td>该目录包含了Hadoop对外提供的编程动态库和静态库，与include目录中的头文件结合使用。</td></tr><tr><td>libexec</td><td>各个服务对用的shell配置文件所在的目录，可用于配置日志输出、启动参数（比如JVM参数）等基本信息。</td></tr><tr><td><strong>sbin</strong></td><td>Hadoop管理脚本所在的目录，主要包含HDFS和YARN中各类服务的<strong>启动/关闭脚本</strong>。</td></tr><tr><td><strong>share</strong></td><td>Hadoop各个模块编译后的<strong>jar包</strong>所在的目录，<strong>官方自带示例</strong>。</td></tr></tbody></table></div><h5 id="配置文件概述"><a href="#配置文件概述" class="headerlink" title="配置文件概述"></a>配置文件概述</h5><ul><li><p>官网文档<br><a href="https://hadoop.apache.org/docs/">https://hadoop.apache.org/docs/</a></p></li><li><p>第一类1个: <strong>hadoop-env.sh</strong></p></li><li><p>第二类4个：xxxx-site.xml ,site表示的是用户定义的配置，会覆盖default中的默认配置。</p><ul><li><strong>core-site.xml</strong> 核心模块配置</li><li><strong>hdfs-site.xml</strong> hdfs文件系统模块配置</li><li><strong>mapred-site.xml</strong> MapReduce模块配置</li><li><strong>yarn-site.xml</strong> yarn模块配置</li></ul></li><li><p>第三类1个：<strong>workers</strong></p></li><li>上述的配置文件目录：$HADOOP_HOME/etc/hadoop</li></ul><h5 id="Step5-编辑Hadoop配置文件-hadoop-env-sh"><a href="#Step5-编辑Hadoop配置文件-hadoop-env-sh" class="headerlink" title="Step5:编辑Hadoop配置文件 hadoop-env.sh"></a>Step5:编辑Hadoop配置文件 hadoop-env.sh</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=jdk安装路径</span><br><span class="line"><span class="comment">#文件最后添加</span></span><br><span class="line"><span class="built_in">export</span> HDFS_NAMENODE_USER=rootexport HDFS_DATANODE_USER=root</span><br><span class="line"><span class="built_in">export</span> HDFS_SECONDARYNAMENODE_USER=root</span><br><span class="line"><span class="built_in">export</span> YARN_RESOURCEMANAGER_USER=root</span><br><span class="line"><span class="built_in">export</span> YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure><h5 id="Step5-编辑Hadoop配置文件-core-site-xml"><a href="#Step5-编辑Hadoop配置文件-core-site-xml" class="headerlink" title="Step5:编辑Hadoop配置文件 core-site.xml"></a>Step5:编辑Hadoop配置文件 core-site.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置默认使用的文件系统Hadoop支持file、HDFS、GFS、ali|Amazon云等文件系统--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://node1:8020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--设置Hadoop本地保存数据路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>/export/data/hadoop-3.3.0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--设置HDFS web UI用户身份--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.http.staticuser.user<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>root<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--整合hive 用户代理设置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.hosts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.proxyuser.root.groups<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--垃圾桶文件保存时间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.trash.interval<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1440<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Step5-编辑Hadoop配置文件hdfs-site-xml"><a href="#Step5-编辑Hadoop配置文件hdfs-site-xml" class="headerlink" title="Step5:编辑Hadoop配置文件hdfs-site.xml"></a>Step5:编辑Hadoop配置文件hdfs-site.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置SNN进程运行机器位置信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node2:9868<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Step5-编辑Hadoop配置文件-mapred-site-xml"><a href="#Step5-编辑Hadoop配置文件-mapred-site-xml" class="headerlink" title="Step5:编辑Hadoop配置文件 mapred-site.xml"></a>Step5:编辑Hadoop配置文件 mapred-site.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置MR程序默认运行模式：yarn集群模式local本地模式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--MR程序历史服务器端地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--历史服务器web端地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.app.mapreduce.am.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.env<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>HADOOP_MAPRED_HOME=$&#123;HADOOP_HOME&#125;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Step5-编辑Hadoop配置文件-yarn-site-xml"><a href="#Step5-编辑Hadoop配置文件-yarn-site-xml" class="headerlink" title="Step5:编辑Hadoop配置文件 yarn-site.xml"></a>Step5:编辑Hadoop配置文件 yarn-site.xml</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置YARN集群主角色运行机器位置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>node1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--是否将对容器实施物理内存限制--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.pmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--是否将对容器实施虚拟内存限制。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--开启日志聚集--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--设置yarn历史服务器地址--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://node1:19888/jobhistory/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--保存的时间7天--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>604800<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="Step5-编辑Hadoop配置文件-workers"><a href="#Step5-编辑Hadoop配置文件-workers" class="headerlink" title="Step5:编辑Hadoop配置文件 workers"></a>Step5:编辑Hadoop配置文件 workers</h5><pre><code class="highlight plaintext">node1.itcast.cnnode2.itcast.cnnode3.itcast.cn</code></pre><h5 id="Step6-分发同步安装包"><a href="#Step6-分发同步安装包" class="headerlink" title="Step6:分发同步安装包"></a>Step6:分发同步安装包</h5><ul><li>在node1机器上将Hadoop安装包scp同步到其他机器</li></ul><h5 id="Step7-配置Hadoop环境变量"><a href="#Step7-配置Hadoop环境变量" class="headerlink" title="Step7:配置Hadoop环境变量"></a>Step7:配置Hadoop环境变量</h5><ul><li><p>在node1上配置Hadoop环境变量<br><code>vim /etc/profile</code><br><code>export HADOOP_HOME=hadoop安装路径</code><br><code>export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</code></p></li><li><p>将修改后的环境变量同步其他机器<br><code>scp /etc/profile root@node2:/etc/</code><br><code>scp /etc/profile root@node3:/etc/</code></p></li><li><p>重新加载环境变量验证是否生效（3台机器）<br><code>source /etc/profile</code><br><code>hadoop</code> #验证环境变量是否生效</p></li></ul><h5 id="Step8-NameNode-format（格式化操作）"><a href="#Step8-NameNode-format（格式化操作）" class="headerlink" title="Step8:NameNode format（格式化操作）"></a>Step8:NameNode format（格式化操作）</h5><ul><li>首次启动HDFS时，必须对其进行格式化操作</li><li>format本质上是<strong>初始化工作，进行HDFS清理和准备工作</strong></li><li>命令：<br><code>hdfs namenode -format</code></li></ul><div class="note info modern"><ol><li>首次启动之前需要format操作;</li><li>format只能进行一次后续不再需要;</li><li>如果多次format除了造成数据丢失外，还会导致hdfs集群主从角色之间互不识别。通过删除所有机器hadoop.tmp.dir目录重新format解决</li></ol></div><h4 id="Hadoop集群启停命令、Web-UI"><a href="#Hadoop集群启停命令、Web-UI" class="headerlink" title="Hadoop集群启停命令、Web UI"></a>Hadoop集群启停命令、Web UI</h4><h5 id="手动逐个进程启停"><a href="#手动逐个进程启停" class="headerlink" title="手动逐个进程启停"></a>手动逐个进程启停</h5><p>每台机器上每次手动启动关闭一个角色进程,可以精准控制每个进程启停，避免群起群停。</p><ul><li><p>HDFS集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">hadoop2.x版本命令</span></span><br><span class="line">hadoop-daemon.sh start|stop namenode|datanode|secondarynamenode</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">hadoop3.x版本命令</span></span><br><span class="line">hdfs --daemon start|stop namenode|datanode|secondarynamenode</span><br></pre></td></tr></table></figure></li><li><p>YARN集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">hadoop2.x版本命令</span></span><br><span class="line">yarn-daemon.sh start|stop resourcemanager|nodemanager</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">hadoop3.x版本命令</span></span><br><span class="line">yarn --daemon start|stop resourcemanager|nodemanager</span><br></pre></td></tr></table></figure></li></ul><h5 id="shell脚本一键启停"><a href="#shell脚本一键启停" class="headerlink" title="shell脚本一键启停"></a>shell脚本一键启停</h5><p>在node1上，使用软件自带的shell脚本一键启动。前提：<strong>配置好机器之间的SSH免密登录和workers文件</strong>。</p><ul><li><p>HDFS集群<br><code>start-dfs.sh</code><br><code>stop-dfs.sh</code></p></li><li><p>YARN集群<br><code>start-yarn.sh</code><br><code>stop-yarn.sh</code></p></li><li><p>Hadoop集群<br><code>start-all.sh</code><br><code>stop-all.sh</code></p></li></ul><h5 id="进程状态、日志查看"><a href="#进程状态、日志查看" class="headerlink" title="进程状态、日志查看"></a>进程状态、日志查看</h5><ul><li>启动完毕之后可以使用<strong>jps命令</strong>查看进程是否启动成功</li><li>Hadoop启动日志路径：$HADOOP_HOME/logs/</li></ul><h5 id="HDFS集群web界面"><a href="#HDFS集群web界面" class="headerlink" title="HDFS集群web界面"></a>HDFS集群web界面</h5><p>地址：<a href="http://namenode_host:9870">http://namenode_host:9870</a></p><p>其中namenode_host是namenode运行所在机器的主机名或者ip<br>如果使用主机名访问，别忘了在Windows配置hosts<br><img src="/2022/11/12/HadoopBase/2022-11-13-17-27-37.png" alt="HDFS集群web界面"><br><img src="/2022/11/12/HadoopBase/2022-11-13-17-27-57.png" alt="HDFS集群web界面"></p><h5 id="YARN集群web界面"><a href="#YARN集群web界面" class="headerlink" title="YARN集群web界面"></a>YARN集群web界面</h5><p>地址：<a href="http://resourcemanager_host:8088">http://resourcemanager_host:8088</a></p><p>其中resourcemanager_host是resourcemanager运行所在机器的主机名或者ip<br>如果使用主机名访问，别忘了在Windows配置hosts<br><img src="/2022/11/12/HadoopBase/2022-11-13-17-28-12.png" alt="YARN集群web界面"></p><h4 id="Hadoop初体验"><a href="#Hadoop初体验" class="headerlink" title="Hadoop初体验"></a>Hadoop初体验</h4><h5 id="HDFS-初体验"><a href="#HDFS-初体验" class="headerlink" title="HDFS 初体验"></a>HDFS 初体验</h5><h6 id="shell命令操作"><a href="#shell命令操作" class="headerlink" title="shell命令操作"></a>shell命令操作</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoopfs-mkdir /itcast</span><br><span class="line">hadoopfs-put zookeeper.out/itcast</span><br><span class="line">hadoopfs-ls/</span><br></pre></td></tr></table></figure><h6 id="Web-UI页面操作"><a href="#Web-UI页面操作" class="headerlink" title="Web UI页面操作"></a>Web UI页面操作</h6><p><img src="/2022/11/12/HadoopBase/2022-11-13-17-34-40.png" alt="Web UI页面操作"></p><h5 id="MapReduce-YARN初体验"><a href="#MapReduce-YARN初体验" class="headerlink" title="MapReduce+YARN初体验"></a>MapReduce+YARN初体验</h5><p>执行Hadoop官方自带的MapReduce案例，评估圆周率π的值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $HADOOP_HOME/share/hadoop/mapreduce/</span><br><span class="line">hadoop jar hadoop-mapreduce-examples-3.3.0.jar pi 2 4</span><br></pre></td></tr></table></figure><p><img src="/2022/11/12/HadoopBase/2022-11-13-17-42-07.png" alt="MapReduce+YARN初体验"></p><h3 id="HDFS分布式文件系统基础"><a href="#HDFS分布式文件系统基础" class="headerlink" title="HDFS分布式文件系统基础"></a>HDFS分布式文件系统基础</h3><h4 id="文件系统、分布式文件系统"><a href="#文件系统、分布式文件系统" class="headerlink" title="文件系统、分布式文件系统"></a>文件系统、分布式文件系统</h4><h5 id="文件系统定义"><a href="#文件系统定义" class="headerlink" title="文件系统定义"></a>文件系统定义</h5><ul><li>文件系统是一种<strong>存储</strong>和<strong>组织数据</strong>的方法，实现了数据的存储、分级组织、访问和获取等操作，使得用户对文件访问和查找变得容易；</li><li>文件系统使用<strong>树形目录</strong>的<strong>抽象逻辑</strong>概念代替了硬盘等物理设备使用数据块的概念，用户不必关心数据底层存在硬盘哪里，只需要记住这个文件的所属目录和文件名即可；</li><li>文件系统通常使用硬盘和光盘这样的存储设备，并<strong>维护文件在设备中的物理位置</strong>。<br><img src="/2022/11/12/HadoopBase/2022-11-13-17-56-16.png" alt="文件系统"></li></ul><h5 id="传统常见的文件系统"><a href="#传统常见的文件系统" class="headerlink" title="传统常见的文件系统"></a>传统常见的文件系统</h5><ul><li>所谓传统常见的文件系统更多指的的<strong>单机的文件系统</strong>，也就是<strong>底层不会横跨多台机器</strong>实现。比如windows操作系统上的文件系统、Linux上的文件系统、FTP文件系统等等。</li><li>这些文件系统的共同特征包括：<ol><li>带有<strong>抽象的目录树结构</strong>，树都是从<strong>\/根目录开始</strong>往下蔓延；</li><li>树中节点分为两类：<strong>目录</strong>和<strong>文件</strong>；</li><li>从根目录开始，节点<strong>路径具有唯一性</strong>。</li></ol></li></ul><h5 id="数据、元数据"><a href="#数据、元数据" class="headerlink" title="数据、元数据"></a>数据、元数据</h5><h6 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h6><p>指存储的内容本身，比如文件、视频、图片等，这些<strong>数据底层最终是存储在磁盘</strong>等存储介质上的，一般<strong>用户无需关心</strong>，只需要基于目录树进行增删改查即可，实际针对数据的操作由文件系统完成。</p><h6 id="元数据"><a href="#元数据" class="headerlink" title="元数据"></a>元数据</h6><p>元数据（metadata）又称之为解释性数据，记录数据的数据；<br>文件系统元数据一般指<strong>文件大小、最后修改时间、底层存储位置、属性、所属用户、权限等信息</strong>。</p><p><img src="/2022/11/12/HadoopBase/2022-11-13-18-00-22.png" alt="元数据"></p><h5 id="海量数据存储遇到的问题"><a href="#海量数据存储遇到的问题" class="headerlink" title="海量数据存储遇到的问题"></a>海量数据存储遇到的问题</h5><ul><li><p><strong>成本高</strong><br>传统存储硬件通用性差，设备投资加上后期维护、<strong>升级扩容的成本非常高</strong>。<br><img src="/2022/11/12/HadoopBase/2022-11-13-18-12-07.png" alt="成本高"></p></li><li><p>如何支撑高效率的计算分析<br>传统存储方式意味着数据：存储是存储，计算是计算，当<strong>需要处理数据的时候把数据移动过来</strong>。<br>程序和数据存储是属于不同的技术厂商实现，无法有机统一整合在一起。</p></li><li><p><strong>性能低</strong><br><strong>单节点I/O性能瓶</strong>颈无法逾越，难以支撑海量数据的<strong>高并发高吞吐</strong>场景。</p></li><li><p><strong>可扩展性差</strong><br>无法实现快速部署和弹性扩展，动态扩容、缩容成本高，技术实现难度大。</p></li></ul><h4 id="分布式存储系统的核心属性及功能含义"><a href="#分布式存储系统的核心属性及功能含义" class="headerlink" title="分布式存储系统的核心属性及功能含义"></a>分布式存储系统的核心属性及功能含义</h4><p>分布式存储系统核心属性</p><ul><li>分布式存储</li><li>元数据记录</li><li>分块存储</li><li>副本机制</li></ul><h5 id="分布式存储的优点"><a href="#分布式存储的优点" class="headerlink" title="分布式存储的优点"></a>分布式存储的优点</h5><ul><li>问题：数据量大，单机存储遇到瓶颈</li><li>解决：<br>单机纵向扩展：磁盘不够加磁盘，有上限瓶颈限制<br><strong>多机横向扩展</strong>：机器不够加机器，理论上<strong>无限扩展</strong></li></ul><p><img src="/2022/11/12/HadoopBase/2022-11-13-18-16-54.png" alt="分布式存储"></p><h5 id="元数据记录的功能"><a href="#元数据记录的功能" class="headerlink" title="元数据记录的功能"></a>元数据记录的功能</h5><ul><li>问题：文件分布在不同机器上不利于寻找</li><li>解决：元数据记录下文件及其存储位置信息，<strong>快速定位文件位置</strong></li></ul><p><img src="/2022/11/12/HadoopBase/2022-11-13-18-18-30.png" alt="元数据记录的功能"></p><h5 id="分块存储好处"><a href="#分块存储好处" class="headerlink" title="分块存储好处"></a>分块存储好处</h5><ul><li>问题：文件过大导致单机存不下、上传下载效率低</li><li>解决：文件分块存储在不同机器，<strong>针对块并行操作提高效率</strong></li></ul><p><img src="/2022/11/12/HadoopBase/2022-11-13-18-20-30.png" alt="分块存储好处"></p><h5 id="副本机制的作用"><a href="#副本机制的作用" class="headerlink" title="副本机制的作用"></a>副本机制的作用</h5><ul><li>问题：硬件故障难以避免，数据易丢失</li><li>解决：不同机器设置备份，<strong>冗余存储，保障数据安全</strong></li></ul><p><img src="/2022/11/12/HadoopBase/2022-11-13-18-22-03.png" alt="副本机制的作用"></p><div class="note info modern"><ol><li><div class="hide-block"><button type="button" class="hide-button" style>分布式存储的优点是什么？ </button><div class="hide-content"><p><strong>无限扩展</strong>支撑海量数据存储</p></div></div></li><li><div class="hide-block"><button type="button" class="hide-button" style>元数据记录的功能是什么？ </button><div class="hide-content"><p>快速<strong>定位文件</strong>位置便于查找</p></div></div></li><li><div class="hide-block"><button type="button" class="hide-button" style>文件分块存储好处是什么？ </button><div class="hide-content"><p>针对块<strong>并行操作</strong>提高效率</p></div></div></li><li><div class="hide-block"><button type="button" class="hide-button" style>设置副本备份的作用是什么？ </button><div class="hide-content"><p>冗余存储保障<strong>数据安全</strong></p></div></div></li></ol></div><h4 id="HDFS简介"><a href="#HDFS简介" class="headerlink" title="HDFS简介"></a>HDFS简介</h4><ul><li><p>HDFS（Hadoop Distributed File System ），意为：<strong>Hadoop分布式文件系统</strong>。</p></li><li><p>是Apache Hadoop核心组件之一，作为<strong>大数据生态圈最底层</strong>的分布式存储服务而存在。也可以说大数据首先要解决的问题就是海量数据的存储问题。<br><img src="/2022/11/12/HadoopBase/2022-11-12-22-38-08.png" alt="广义Hadoop"></p></li><li><p>HDFS主要是<strong>解决大数据如何存储问题的</strong>。分布式意味着是HDFS是横跨在多台计算机上的存储系统。</p></li><li><p>HDFS是一种能够在普通硬件上运行的分布式文件系统，它是<strong>高度容错</strong>的，适应于具有大数据集的应用程序，它非常适于存储大型数据(比如TB 和PB)。</p></li><li><p>HDFS使用多台计算机存储文件, 并且提供<strong>统一的访问接口</strong>, 像是访问一个普通文件系统一样使用分布式文件系统。</p></li><li><p><img src="/2022/11/12/HadoopBase/2022-11-13-18-38-51.png" alt="HDFS简介"></p></li></ul><h4 id="HDFS起源发展、设计目标"><a href="#HDFS起源发展、设计目标" class="headerlink" title="HDFS起源发展、设计目标"></a>HDFS起源发展、设计目标</h4><h5 id="HDFS起源发展"><a href="#HDFS起源发展" class="headerlink" title="HDFS起源发展"></a>HDFS起源发展</h5><ul><li><p><strong>Doug Cutting</strong> 领导<strong>Nutch项目</strong>研发，Nutch的设计目标是构建一个大型的全网搜索引擎，包括网页抓取、索引、查询等功能。</p></li><li><p>随着爬虫抓取网页数量的增加，遇到了严重的可扩展性问题——<strong>如何解决数十亿网页的存储和索引问题</strong>。</p></li><li><p>2003年的时候, Google发表的论文为该问题提供了可行的解决方案。<br>《<strong>分布式文件系统（GFS）</strong>，可用于处理海量网页的存储》<br><img src="/2022/11/12/HadoopBase/2022-11-13-19-16-18.png" alt="GFS"></p></li><li><p>Nutch的开发人员完成了相应的开源实现HDFS，并从Nutch中剥离和MapReduce成为独立项目HADOOP。</p></li></ul><h5 id="HDFS设计目标"><a href="#HDFS设计目标" class="headerlink" title="HDFS设计目标"></a>HDFS设计目标</h5><ul><li>硬件故障（Hardware Failure）是常态，HDFS可能有成百上千的服务器组成，每一个组件都有可能出现故障。因此<strong>故障检测和自动快速恢复</strong>是HDFS的核心架构目标。</li><li>HDFS上的应用主要是以流式读取数据（Streaming Data Access）。HDFS被设计成用于批处理，而不是用户交互式的。相较于数据访问的反应时间，更<strong>注重数据访问的高吞吐量</strong>。</li><li>典型的HDFS文件大小是GB到TB的级别。所以，HDFS被调整成<strong>支持大文件（Large Data Sets）</strong>。它应该提供很高的聚合数据带宽，一个集群中支持数百个节点，一个集群中还应该支持千万级别的文件。</li><li>大部分HDFS应用对文件要求的是<strong>write-one-read-many</strong>访问模型。一个文件一旦<strong>创建、写入、关闭之后就不需要修改</strong>了。这一假设简化了数据一致性问题，使高吞吐量的数据访问成为可能。</li><li><strong>移动计算的代价比之移动数据的代价低</strong>。一个应用请求的计算，离它操作的数据越近就越高效。将计算移动到数据附近，比之将数据移动到应用所在显然更好。</li><li>HDFS被设计为可从一个平台<strong>轻松移植</strong>到另一个平台。这有助于将HDFS广泛用作大量应用程序的首选平台。</li></ul><h4 id="HDFS应用场景"><a href="#HDFS应用场景" class="headerlink" title="HDFS应用场景"></a>HDFS应用场景</h4><p><img src="/2022/11/12/HadoopBase/2022-11-13-20-17-58.png" alt="HDFS应用场景"></p><h4 id="HDFS重要特性"><a href="#HDFS重要特性" class="headerlink" title="HDFS重要特性"></a>HDFS重要特性</h4><blockquote class="pullquote right"><p><img src="/2022/11/12/HadoopBase/2022-11-13-20-19-47.png" alt="HDFS"></p></blockquote><h5 id="整体概述"><a href="#整体概述" class="headerlink" title="整体概述"></a>整体概述</h5><ul><li>主从架构</li><li>分块存储</li><li>副本机制</li><li>元数据记录</li><li>抽象统一的目录树结构（namespace）</li></ul><h5 id="（1）主从架构"><a href="#（1）主从架构" class="headerlink" title="（1）主从架构"></a>（1）主从架构</h5><ul><li>HDFS集群是标准的master/slave主从架构集群。</li><li>一般一个HDFS集群是有一个Namenode和一定数目的Datanode组成。</li><li><strong>Namenode是HDFS主节点，Datanode是HDFS从节点，两种角色各司其职，共同协调</strong>完成分布式的文件存储服务。</li><li>官方架构图中是<strong>一主五从</strong>模式，其中五个从角色位于两个机架（Rack）的不同服务器上。</li></ul><h5 id="（2）分块存储"><a href="#（2）分块存储" class="headerlink" title="（2）分块存储"></a>（2）分块存储</h5><ul><li>HDFS中的文件在<strong>物理上是分块存储（block）</strong>的，默认大小是128M（134217728），不足128M则本身就是一块。</li><li>块的大小可以通过配置参数来规定，参数位于hdfs-default.xml中：dfs.blocksize。</li></ul><p><img src="/2022/11/12/HadoopBase/2022-11-13-20-30-29.png" alt="分块存储"></p><h5 id="（3）副本机制"><a href="#（3）副本机制" class="headerlink" title="（3）副本机制"></a>（3）副本机制</h5><ul><li>文件的所有block都会有副本。副本系数可以在文件创建的时候指定，也可以在之后通过命令改变。</li><li>副本数由参数dfs.replication控制，<strong>默认值是3</strong>，也就是会<strong>额外再复制2份</strong>，连同本身总共3份副本。</li></ul><h5 id="（4）元数据管理"><a href="#（4）元数据管理" class="headerlink" title="（4）元数据管理"></a>（4）元数据管理</h5><p>在HDFS中，Namenode管理的元数据具有两种类型：</p><ul><li><p><strong>文件自身属性信息</strong><br>文件名称、权限，修改时间，文件大小，复制因子，数据块大小。</p></li><li><p><strong>文件块位置映射信息</strong><br>记录文件块和DataNode之间的映射信息，即哪个块位于哪个节点上。</p></li></ul><h5 id="（5）namespace"><a href="#（5）namespace" class="headerlink" title="（5）namespace"></a>（5）namespace</h5><ul><li>HDFS支持传统的<strong>层次型文件组织结构</strong>。用户可以创建目录，然后将文件保存在这些目录里。文件系统名字空间的层次结构和大多数现有的文件系统类似：用户可以创建、删除、移动或重命名文件。</li><li>Namenode负责维护文件系统的namespace名称空间，任何对文件系统名称空间或属性的修改都将被Namenode记录下来。</li><li>HDFS会给客户端提供一个<strong>统一的抽象目录树</strong>，客户端通过路径来访问文件，形如：hdfs://namenode:port/dir-a/dir-b/dir-c/file.data。</li></ul><h5 id="（6）数据块存储"><a href="#（6）数据块存储" class="headerlink" title="（6）数据块存储"></a>（6）数据块存储</h5><ul><li>文件的各个block的<strong>具体存储管理由DataNode节点承担</strong>。</li><li>每一个block都可以在多个DataNode上存储。</li></ul><h3 id="HDFS-shell操作"><a href="#HDFS-shell操作" class="headerlink" title="HDFS shell操作"></a>HDFS shell操作</h3><h4 id="HDFS-shell命令行解释说明"><a href="#HDFS-shell命令行解释说明" class="headerlink" title="HDFS shell命令行解释说明"></a>HDFS shell命令行解释说明</h4><p><strong>命令行界面</strong>（英语：command-line interface，缩写：CLI），是指用户通过键盘输入指令，计算机接收到指令后，予以执行一种人际交互方式。</p><p>Hadoop提供了文件系统的shell命令行客户端: <code>hadoop fs [generic options]</code></p><h5 id="文件系统协议"><a href="#文件系统协议" class="headerlink" title="文件系统协议"></a>文件系统协议</h5><ul><li>HDFS Shell CLI支持操作多种文件系统，包括本地文件系统（file:///）、分布式文件系统（hdfs://nn:8020）等</li><li>具体操作的是什么文件系统取决于命令中文件路径<strong>URL中的前缀协议</strong>。</li><li>如果没有指定前缀，则将会读取环境变量中的<code>fs.defaultFS</code>属性，以该属性值作为默认文件系统。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -ls file:/// #操作本地文件系统</span><br><span class="line">hadoop fs -ls hdfs://node1:8020/ #操作HDFS分布式文件系统</span><br><span class="line">hadoop fs -ls / #直接根目录，没有指定协议将加载读取fs.defaultFS值</span><br></pre></td></tr></table></figure><h5 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h5><ul><li>hadoop dfs 只能操作HDFS文件系统（包括与Local FS间的操作），不过已经Deprecated；</li><li>hdfs dfs 只能操作HDFS文件系统相关（包括与Local FS间的操作）,常用；</li><li><code>hadoop fs</code> 可操作任意文件系统，不仅仅是hdfs文件系统，使用范围更广；</li></ul><p>目前版本来看，官方最终推荐使用的是hadoop fs。当然hdfs dfs在市面上的使用也比较多。</p><h5 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h5><ul><li>HDFS文件系统的操作命令很多和Linux类似，因此学习成本相对较低。</li><li>可以通过<code>hadoop fs -help</code>命令来查看每个命令的详细用法。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Usage: hadoop fs [generic options]</span><br><span class="line">[-appendToFile&lt;localsrc&gt; ... &lt;dst&gt;]</span><br><span class="line">[-cat [-ignoreCrc] &lt;src&gt; ...]</span><br><span class="line">……</span><br><span class="line">-appendToFile&lt;localsrc&gt; ... &lt;dst&gt; :</span><br><span class="line">Appends the contents of all the given local files to the given dst file. The dst</span><br><span class="line">file will be created if it does not exist. If &lt;localSrc&gt; is -, then the input is</span><br><span class="line">read from stdin.</span><br><span class="line">-cat [-ignoreCrc] &lt;src&gt; ... :</span><br><span class="line">Fetch all files that match the file pattern &lt;src&gt; and display their content on</span><br><span class="line">stdout.</span><br></pre></td></tr></table></figure><h4 id="HDFS-shell命令行常用操作"><a href="#HDFS-shell命令行常用操作" class="headerlink" title="HDFS shell命令行常用操作"></a>HDFS shell命令行常用操作</h4><h5 id="创建文件夹"><a href="#创建文件夹" class="headerlink" title="创建文件夹"></a>创建文件夹</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -mkdir [-p] &lt;path&gt; ...</span><br></pre></td></tr></table></figure><ul><li><code>path</code> 为待创建的目</li><li><code>-p</code>选项的行为与Unix mkdir -p非常相似，它<strong>会创建路径中的各级父目录</strong>。</li></ul><h5 id="查看指定目录下内容"><a href="#查看指定目录下内容" class="headerlink" title="查看指定目录下内容"></a>查看指定目录下内容</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -ls [-h] [-R] [&lt;path&gt; ...]</span><br></pre></td></tr></table></figure><ul><li><code>path</code> 指定目录路径</li><li><code>-h</code> 人性化显示文件size</li><li><code>-R</code> 递归查看指定目录及其子目录</li></ul><h5 id="上传文件到HDFS指定目录下"><a href="#上传文件到HDFS指定目录下" class="headerlink" title="上传文件到HDFS指定目录下"></a>上传文件到HDFS指定目录下</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -put [-f] [-p] &lt;localsrc&gt; ... &lt;dst&gt;</span><br></pre></td></tr></table></figure><ul><li><code>-f</code> 覆盖目标文件（已存在下）</li><li><code>-p</code> 保留访问和修改时间，所有权和权限。</li><li><code>localsrc</code> 本地文件系统（客户端所在机器）</li><li><code>dst</code> 目标文件系统（HDFS）</li></ul><h5 id="查看HDFS文件内容"><a href="#查看HDFS文件内容" class="headerlink" title="查看HDFS文件内容"></a>查看HDFS文件内容</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -cat &lt;src&gt; ...</span><br></pre></td></tr></table></figure><p>读取指定文件全部内容，显示在标准输出控制台。<br>注意：对于<strong>大文件内容读取，慎重</strong>。</p><h5 id="下载HDFS文件"><a href="#下载HDFS文件" class="headerlink" title="下载HDFS文件"></a>下载HDFS文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -get [-f] [-p] &lt;src&gt; ... &lt;localdst&gt;</span><br></pre></td></tr></table></figure><ul><li>下载文件到本地文件系统指定目录，localdst必须是目录</li><li><code>-f</code> 覆盖目标文件（已存在下）</li><li><code>-p</code> 保留访问和修改时间，所有权和权限。</li></ul><h5 id="拷贝HDFS文件"><a href="#拷贝HDFS文件" class="headerlink" title="拷贝HDFS文件"></a>拷贝HDFS文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -cp [-f] &lt;src&gt; ... &lt;dst&gt;</span><br></pre></td></tr></table></figure><ul><li><code>-f</code> 覆盖目标文件（已存在下）</li></ul><h5 id="追加数据到HDFS文件中"><a href="#追加数据到HDFS文件中" class="headerlink" title="追加数据到HDFS文件中"></a>追加数据到HDFS文件中</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -appendToFile&lt;localsrc&gt; ... &lt;dst&gt;</span><br></pre></td></tr></table></figure><p>将所有给定本地文件的内容追加到给定dst文件。<br>dst如果文件不存在，将创建该文件。<br>注意：<strong>appendToFile 是将当地文件内容追加的到 hadoop 上的文件（不能hadoop上的文件1 追加给 hadoop上的文件2）</strong></p><h5 id="HDFS数据移动操作"><a href="#HDFS数据移动操作" class="headerlink" title="HDFS数据移动操作"></a>HDFS数据移动操作</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop fs -mv &lt;src&gt; ... &lt;dst&gt;</span><br></pre></td></tr></table></figure><p>移动文件到指定文件夹下<br>可以使用该命令移动数据，重命名文件的名称</p><h5 id="HDFS-shell其他命令"><a href="#HDFS-shell其他命令" class="headerlink" title="HDFS shell其他命令"></a>HDFS shell其他命令</h5><p>命令官方指导文档<br><a href="https://hadoop.apache.org/docs/">https://hadoop.apache.org/docs/</a><br><a href="https://hadoop.apache.org/docs/r3.3.4/hadoop-project-dist/hadoop-common/FileSystemShell.html">https://hadoop.apache.org/docs/r3.3.4/hadoop-project-dist/hadoop-common/FileSystemShell.html</a></p><p>常见的操作自己最好能够记住，其他操作可以根据需要查询文档使用。<br>命令属于<strong>多用多会，孰能生巧，不用就忘</strong>。</p><h3 id="HDFS工作流程与机制"><a href="#HDFS工作流程与机制" class="headerlink" title="HDFS工作流程与机制"></a>HDFS工作流程与机制</h3><h4 id="HDFS集群角色与职责"><a href="#HDFS集群角色与职责" class="headerlink" title="HDFS集群角色与职责"></a>HDFS集群角色与职责</h4><h5 id="官方架构图"><a href="#官方架构图" class="headerlink" title="官方架构图"></a>官方架构图</h5><p><img src="/2022/11/12/HadoopBase/2022-11-13-20-19-47.png" alt="HDFS"></p><h5 id="主角色：namenode"><a href="#主角色：namenode" class="headerlink" title="主角色：namenode"></a>主角色：namenode</h5><p><img src="/2022/11/12/HadoopBase/2022-11-17-00-10-53.png" alt="namenode"></p><ul><li><code>NameNode</code>是Hadoop分布式文件系统的核心，架构中的主角色。</li><li><strong>NameNode维护和管理文件系统元数据</strong>，包括名称空间目录树结构、文件和块的位置信息、访问权限等信息。</li><li>基于此，<strong>NameNode成为了访问HDFS的唯一入口</strong>。</li><li>NameNode内部通过<strong>内存</strong>和<strong>磁盘文件</strong>两种方式管理元数据。</li><li>其中磁盘上的元数据文件包括Fsimage内存元数据镜像文件和edits log（Journal）编辑日志。</li></ul><h5 id="从角色：datanode"><a href="#从角色：datanode" class="headerlink" title="从角色：datanode"></a>从角色：datanode</h5><blockquote class="pullquote right"><p><img src="/2022/11/12/HadoopBase/2022-11-17-00-16-51.png" alt="datanode"></p></blockquote><ul><li><code>DataNode</code>是Hadoop HDFS中的从角色，负责<strong>具体的数据块存储</strong>。</li><li>DataNode的数量决定了HDFS集群的整体数据存储能力。通过和NameNode配合维护着数据块。</li></ul><h5 id="主角色辅助角色：secondarynamenode"><a href="#主角色辅助角色：secondarynamenode" class="headerlink" title="主角色辅助角色：secondarynamenode"></a>主角色辅助角色：secondarynamenode</h5><ul><li>Secondary NameNode充当NameNode的辅助节点，但不能替代NameNode。</li><li>主要是帮助主角色进行元数据文件的合并动作。可以通俗的理解为主角色的“秘书”。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-00-18-47.png" alt="secondarynamenode"></li></ul><h5 id="namenode职责"><a href="#namenode职责" class="headerlink" title="namenode职责"></a>namenode职责</h5><ul><li>NameNode仅<strong>存储HDFS的元数据</strong>：文件系统中所有文件的目录树，并跟踪整个集群中的文件，不存储实际数据。</li><li>NameNode知道HDFS中任何<strong>给定文件的块列表及其位置</strong>。使用此信息NameNode知道如何从块中构建文件。</li><li>NameNode<strong>不持久化存储每个文件中各个块所在的datanode的位置信息</strong>，这些信息会在系统启动时从DataNode重建。</li><li>NameNode是Hadoop集群中的<strong>单点故障</strong>。</li><li>NameNode所在机器通常会配置有<strong>大量内存（RAM）</strong>。</li></ul><h5 id="datanode职责"><a href="#datanode职责" class="headerlink" title="datanode职责"></a>datanode职责</h5><ul><li>DataNode负责<strong>最终数据块block的存储</strong>。是集群的<strong>从角色</strong>，也称为Slave。</li><li>DataNode启动时，会将自己<strong>注册</strong>到NameNode并<strong>汇报</strong>自己负责持有的块列表。</li><li>当某个DataNode关闭时，不会影响数据的可用性。NameNode将安排由其他DataNode管理的块进行副本复制。</li><li>DataNode所在机器通常配置有大量的<strong>硬盘</strong>空间，因为实际数据存储在DataNode中。</li></ul><h4 id="HDFS写数据流程（上传文件）"><a href="#HDFS写数据流程（上传文件）" class="headerlink" title="HDFS写数据流程（上传文件）"></a>HDFS写数据流程（上传文件）</h4><h5 id="写数据完整流程图"><a href="#写数据完整流程图" class="headerlink" title="写数据完整流程图"></a>写数据完整流程图</h5><p><img src="/2022/11/12/HadoopBase/2022-11-17-00-25-38.png" alt="写数据完整流程图"></p><h5 id="核心概念—Pipeline管道"><a href="#核心概念—Pipeline管道" class="headerlink" title="核心概念—Pipeline管道"></a>核心概念—Pipeline管道</h5><ul><li><code>Pipeline</code>，中文翻译为管道。这是HDFS在上传文件写数据过程中采用的一种数据传输方式。</li><li>客户端将数据块写入第一个数据节点，第一个数据节点保存数据之后再将块复制到第二个数据节点，后者保存后将其复制到第三个数据节点。</li><li>为什么datanode之间采用pipeline线性传输，而不是一次给三个datanode拓扑式传输呢？</li><li>因为数据以管道的方式，<strong>顺序的沿着一个方向传输，这样能够充分利用每个机器的带宽，避免网络瓶颈和高延迟时的连接，最小化推送所有数据的延时</strong>。</li><li>在线性推送模式下，每台机器所有的出口宽带都用于以最快的速度传输数据，而不是在多个接受者之间分配宽带。</li></ul><h5 id="核心概念—ACK应答响应"><a href="#核心概念—ACK应答响应" class="headerlink" title="核心概念—ACK应答响应"></a>核心概念—ACK应答响应</h5><p><img src="/2022/11/12/HadoopBase/2022-11-17-00-31-42.png" alt="核心概念"></p><ul><li>ACK (Acknowledge character）即是确认字符，在数据通信中，接收方发给发送方的一种传输类控制字符。表示发来的数据已确认接收无误。</li><li>在HDFS pipeline管道传输数据的过程中，传输的反方向会进行ACK校验，确保数据传输安全。</li></ul><h5 id="核心概念—默认3副本存储策略"><a href="#核心概念—默认3副本存储策略" class="headerlink" title="核心概念—默认3副本存储策略"></a>核心概念—默认3副本存储策略</h5><ul><li>默认副本存储策略是由BlockPlacementPolicyDefault指定。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-00-34-22.png" alt="默认3副本存储策略"></li><li>第一块副本：优先客户端本地，否则随机</li><li>第二块副本：不同于第一块副本的不同机架。</li><li>第三块副本：第二块副本相同机架不同机器。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-00-35-49.png" alt="默认3副本存储策略"></li></ul><h5 id="写数据完整流程图文字描述"><a href="#写数据完整流程图文字描述" class="headerlink" title="写数据完整流程图文字描述"></a>写数据完整流程图文字描述</h5><ol><li>HDFS客户端创建对象实例<code>DistributedFileSystem</code>，该对象中封装了与HDFS文件系统操作的相关方法。</li><li>调用DistributedFileSystem对象的create()方法，通过<code>RPC</code>(远程过程调用)请求NameNode创建文件。<br>NameNode执行各种检查判断：目标文件是否存在、父目录是否存在、客户端是否具有创建该文件的权限。检查通过，NameNode就会为本次请求记下一条记录，返回<code>FSDataOutputStream输出流</code>对象给客户端用于写数据。</li><li>客户端通过FSDataOutputStream输出流开始写入数据。</li><li>客户端写入数据时，将数据分成一个个数据包（<strong>packet 默认64k</strong>）,内部组件<code>DataStreamer</code>请求NameNode挑选出适合存储数据副本的一组DataNode地址，默认是3副本存储。<br>DataStreamer将数据包流式传输到<code>pipeline</code>的第一个DataNode,该DataNode存储数据包并将它发送到pipeline的第二个DataNode。同样，第二个DataNode存储数据包并且发送给第三个（也是最后一个）DataNode。</li><li>传输的反方向上，会通过<code>ACK机制</code>校验数据包传输是否成功；</li><li>客户端完成数据写入后，在FSDataOutputStream输出流上调用close()方法关闭。</li><li>DistributedFileSystem联系NameNode告知其文件写入完成，等待NameNode确认。<br>因为namenode已经知道文件由哪些块组成（DataStream请求分配数据块），因此仅需等待最小复制块即可成功返回。<br>最小复制是由参数dfs.namenode.replication.min指定，默认是1.</li></ol><h4 id="HDFS读数据流程（下载文件）"><a href="#HDFS读数据流程（下载文件）" class="headerlink" title="HDFS读数据流程（下载文件）"></a>HDFS读数据流程（下载文件）</h4><h5 id="读数据完整流程图"><a href="#读数据完整流程图" class="headerlink" title="读数据完整流程图"></a>读数据完整流程图</h5><p><img src="/2022/11/12/HadoopBase/2022-11-17-00-46-15.png" alt="读数据完整流程图"></p><ol><li>HDFS客户端创建对象实例<code>DistributedFileSystem</code>，调用该对象的open()方法来打开希望读取的文件。</li><li>DistributedFileSystem使用RPC调用namenode来确定<strong>文件中前几个块的块位置（分批次读取）信息</strong>。<br>对于每个块，namenode返回具有该块所有副本的datanode位置地址列表，并且该地址列表是排序好的，与客户端的网络拓扑距离近的排序靠前。</li><li>DistributedFileSystem将FSDataInputStream输入流返回到客户端以供其读取数据。</li><li>客户端在FSDataInputStream输入流上调用read()方法。然后，已存储DataNode地址的InputStream连接到文件中第一个块的最近的DataNode。数据从DataNode流回客户端，结果客户端可以在流上重复调用read（）。</li><li>当该块结束时，FSDataInputStream将关闭与DataNode的连接，然后寻找下一个block块的最佳datanode位置。这些操作对用户来说是透明的。所以用户感觉起来它一直在读取一个连续的流。<br>客户端从流中读取数据时，也会根据需要询问NameNode来<strong>检索下一批数据块的DataNode位置信息</strong>。</li><li>一旦客户端完成读取，就对FSDataInputStream调用close()方法。</li></ol><h2 id="Hadoop-MapReduce与Hadoop-YARN"><a href="#Hadoop-MapReduce与Hadoop-YARN" class="headerlink" title="Hadoop MapReduce与Hadoop YARN"></a>Hadoop MapReduce与Hadoop YARN</h2><h3 id="Hadoop-MapReduce"><a href="#Hadoop-MapReduce" class="headerlink" title="Hadoop MapReduce"></a>Hadoop MapReduce</h3><h4 id="MapReduce思想"><a href="#MapReduce思想" class="headerlink" title="MapReduce思想"></a>MapReduce思想</h4><blockquote class="pullquote right"><p><img src="/2022/11/12/HadoopBase/2022-11-17-10-15-37.png" alt="分而治之"></p></blockquote><ul><li>MapReduce的思想核心是“<strong>先分再合，分而治之</strong>”。</li><li>所谓“分而治之”就是<strong>把一个复杂的问题，按照一定的“分解”方法分为等价的规模较小的若干部分，然后逐个解决，分别找出各部分的结果，然后把各部分的结果组成整个问题的最终结果</strong>。</li><li>这种思想来源于日常生活与工作时的经验。即使是发布过论文实现分布式计算的谷歌也只是实现了这种思想，而不是自己原创。</li><li>Map表示第一阶段，负责“<strong>拆分</strong>”：即把复杂的任务<strong>分解为若干个“简单的子任务”来并行处理</strong>。可以进行拆分的前提是这些小任务可以并行计算，彼此间几乎<strong>没有依赖关系</strong>。</li><li>Reduce表示第二阶段，负责“<strong>合并</strong>”：即对map阶段的结果进行全局汇总。</li><li>这两个阶段合起来正是MapReduce思想的体现。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-10-17-49.png" alt="apReduce思想"></li><li>一个比较形象的例子解释MapReduce<br>要数停车场中的所有停放车的总数量。<br>你数第一列，我数第二列…这就是Map阶段，人越多，能够同时数车的人就越多，速度就越快。<br>数完之后，聚到一起，把所有人的统计数加在一起。这就是Reduce合并汇总阶段。<br><img src="/2022/11/12/HadoopBase/2022-11-17-10-19-06.png" alt="MapReduce思想"></li></ul><h4 id="Hadoop-MapReduce设计构思"><a href="#Hadoop-MapReduce设计构思" class="headerlink" title="Hadoop MapReduce设计构思"></a>Hadoop MapReduce设计构思</h4><h5 id="（1）如何对付大数据处理场景"><a href="#（1）如何对付大数据处理场景" class="headerlink" title="（1）如何对付大数据处理场景"></a>（1）如何对付大数据处理场景</h5><ul><li>对相互间不具有计算依赖关系的大数据计算任务，实现并行最自然的办法就是<strong>采取MapReduce分而治之</strong>的策略。</li><li>首先Map阶段进行拆分，把大数据拆分成若干份小数据，多个程序同时并行计算产生中间结果；然后是Reduce聚合阶段，通过程序对并行的结果进行最终的汇总计算，得出最终的结果。</li><li><strong>不可拆分的计算任务或相互间有依赖关系的数据无法进行并行计算</strong>！</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-10-24-30.png" alt="MapReduce思想"></li></ul><h5 id="（2）构建抽象编程模型"><a href="#（2）构建抽象编程模型" class="headerlink" title="（2）构建抽象编程模型"></a>（2）构建抽象编程模型</h5><ul><li><p>MapReduce借鉴了<strong>函数式</strong>语言中的思想，用<strong>Map</strong>和<strong>Reduce</strong>两个函数提供了高层的并行编程抽象模型。<br>map: 对一组数据元素进行某种重复式的处理；<br>reduce: 对Map的中间结果进行某种进一步的结果整理。<br><img src="/2022/11/12/HadoopBase/2022-11-17-10-29-25.png" alt="构建抽象编程模型"></p></li><li><p>MapReduce中定义了如下的Map和Reduce两个抽象的编程接口，由用户去编程实现:<br>map: (k1; v1) → (k2; v2)<br>reduce: (k2; [v2]) → (k3; v3)</p></li><li><p>通过以上两个编程接口，大家可以看出MapReduce处理的数据类型是<code>&lt;key,value&gt;键值对</code>。</p></li></ul><h5 id="（3）统一架构、隐藏底层细节"><a href="#（3）统一架构、隐藏底层细节" class="headerlink" title="（3）统一架构、隐藏底层细节"></a>（3）统一架构、隐藏底层细节</h5><ul><li>如何提供统一的计算框架，如果没有统一封装底层细节，那么程序员则需要考虑诸如数据存储、划分、分发、结果收集、错误恢复等诸多细节；为此，MapReduce设计并提供了统一的计算框架，为程序员隐藏了绝大多数系统层面的处理细节。</li><li>MapReduce最大的亮点在于通过抽象模型和计算框架把需要<strong>做什么(what need to do)</strong>与具体<strong>怎么做(how to do)</strong>分开了，为程序员提供一个抽象和高层的编程接口和框架。</li><li><strong>程序员仅需要关心其应用层的具体计算问题，仅需编写少量的处理应用本身计算问题的业务程序代码</strong>。</li><li>至于如何具体完成这个并行计算任务所相关的诸多系统层细节被隐藏起来,交给计算框架去处理：从分布代码的执行，到大到数千小到单个节点集群的自动调度使用。</li></ul><h4 id="Hadoop-MapReduce介绍"><a href="#Hadoop-MapReduce介绍" class="headerlink" title="Hadoop MapReduce介绍"></a>Hadoop MapReduce介绍</h4><h5 id="分布式计算概念"><a href="#分布式计算概念" class="headerlink" title="分布式计算概念"></a>分布式计算概念</h5><ul><li><strong>分布式计算</strong>是一种计算方法，和<strong>集中式计算</strong>是相对的。</li><li>随着计算技术的发展，有些应用需要非常巨大的计算能力才能完成，如果采用集中式计算，需要耗费相当长的时间来完成。</li><li>分布式计算<strong>将该应用分解成许多小的部分，分配给多台计算机进行处理</strong>。这样可以节约整体计算时间，大大提高计算效率。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-10-37-36.png" alt="分布式计算概念"></li></ul><h5 id="Hadoop-MapReduce概述"><a href="#Hadoop-MapReduce概述" class="headerlink" title="Hadoop MapReduce概述"></a>Hadoop MapReduce概述</h5><ul><li>Hadoop MapReduce是一个<strong>分布式计算框架</strong>，用于轻松编写分布式应用程序，这些应用程序以可靠，容错的方式并行处理大型硬件集群（数千个节点）上的大量数据（多TB数据集）。</li><li>MapReduce是一种面向海量数据处理的一种指导思想，也是一种用于对大规模数据进行分布式计算的编程模型。</li></ul><h5 id="MapReduce产生背景"><a href="#MapReduce产生背景" class="headerlink" title="MapReduce产生背景"></a>MapReduce产生背景</h5><ul><li>MapReduce最早由<strong>Google</strong>于2004年在一篇名为《MapReduce:SimplifiedData Processingon Large Clusters》的<strong>论文</strong>中提出。</li><li>论文中谷歌把分布式数据处理的过程拆分为Map和Reduce两个操作函数（受到函数式编程语言的启发），随后被Apache Hadoop参考并作为开源版本提供支持，叫做Hadoop MapReduce。</li><li>它的出现解决了人们在最初面临海量数据束手无策的问题，同时它还是<strong>易于使用和高度可扩展的</strong>，使得开发者无需关系分布式系统底层的复杂性即可很容易的编写分布式数据处理程序，并在成千上万台普通的商用服务器中运行。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-10-51-39.png" alt="MapReduce产生背景"></li></ul><h5 id="MapReduce特点"><a href="#MapReduce特点" class="headerlink" title="MapReduce特点"></a>MapReduce特点</h5><ul><li><p><strong>易于编程</strong><br>Mapreduce框架提供了用于二次开发的接口；简单地实现一些接口，就可以完成一个分布式程序。任务计算交给计算框架去处理，将分布式程序部署到hadoop集群上运行，集群节点可以扩展到成百上千个等。</p></li><li><p><strong>良好的扩展性</strong><br>当计算机资源不能得到满足的时候，可以通过增加机器来扩展它的计算能力。基于MapReduce的分布式计算得特点可以随节点数目增长保持近似于线性的增长，这个特点是MapReduce处理海量数据的关键，通过将计算节点增至几百或者几千可以很容易地处理数百TB甚至PB级别的离线数据。</p></li><li><p><strong>高容错性</strong><br>Hadoop集群是分布式搭建和部署得，任何单一机器节点宕机了，它可以把上面的计算任务转移到另一个节点上运行，不影响整个作业任务得完成，过程完全是由Hadoop内部完成的。</p></li><li><p><strong>适合海量数据的离线处理</strong><br>可以处理GB、TB和PB级别得数据量</p></li></ul><h5 id="MapReduce局限性"><a href="#MapReduce局限性" class="headerlink" title="MapReduce局限性"></a>MapReduce局限性</h5><p>MapReduce虽然有很多的优势，也有相对得局限性，局限性不代表不能做，而是在有些场景下实现的效果比较差，并不适合用MapReduce来处理，主要表现在以下结果方面：</p><ul><li><p><strong>实时计算性能差</strong><br>MapReduce主要应用于离线作业，无法作到秒级或者是亚秒级得数据响应。</p></li><li><p><strong>不能进行流式计算</strong><br>流式计算特点是数据是源源不断得计算，并且数据是动态的；而MapReduce作为一个离线计算框架，主要是针对静态数据集得，数据是不能动态变化得。</p></li></ul><h5 id="MapReduce实例进程"><a href="#MapReduce实例进程" class="headerlink" title="MapReduce实例进程"></a>MapReduce实例进程</h5><p>一个完整的MapReduce程序在分布式运行时有<strong>三类</strong></p><ul><li><code>MRAppMaster</code>：负责整个MR程序的过程调度及状态协调</li><li><code>MapTask</code>：负责map阶段的整个数据处理流程</li><li><code>ReduceTask</code>：负责reduce阶段的整个数据处理流程</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-10-56-12.png" alt="MapReduce实例进程"></li></ul><h5 id="MapReduce阶段组成"><a href="#MapReduce阶段组成" class="headerlink" title="MapReduce阶段组成"></a>MapReduce阶段组成</h5><ul><li>一个MapReduce编程模型中<strong>只能包含一个Map阶段和一个Reduce阶段，或者只有Map阶段</strong>；</li><li>不能有诸如多个map阶段、多个reduce阶段的情景出现；</li><li>如果用户的业务逻辑非常复杂，那就只能多个MapReduce程序串行运行。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-10-57-30.png" alt="阶段组成"></li></ul><h5 id="MapReduce数据类型"><a href="#MapReduce数据类型" class="headerlink" title="MapReduce数据类型"></a>MapReduce数据类型</h5><ul><li>注意：整个MapReduce程序中，数据都是以<strong>kv键值对的形式流转</strong>的；</li><li>在实际编程解决各种业务问题中，需要考虑每个阶段的输入输出kv分别是什么；</li><li>MapReduce内置了很多默认属性，比如排序、分组等，都和数据的k有关，所以说kv的类型数据确定及其重要的</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-10-58-42.png" alt="MapReduce数据类型"></li></ul><h4 id="Hadoop-MapReduce官方示例"><a href="#Hadoop-MapReduce官方示例" class="headerlink" title="Hadoop MapReduce官方示例"></a>Hadoop MapReduce官方示例</h4><ul><li>一个最终完整版本的MR程序需要<strong>用户编写的代码</strong>和<strong>Hadoop自己实现的代码</strong>整合在一起才可以；</li><li>其中用户负责map、reduce两个阶段的业务问题，Hadoop负责底层所有的技术问题；</li><li>由于MapReduce计算引擎天生的弊端（慢），当下企业中直接使用率已经日薄西山了，所以在<strong>企业中工作很少涉及到MapReduce直接编程</strong>，但是某些软件的背后还依赖MapReduce引擎。</li><li>可以通过官方提供的示例来<strong>感受MapReduce及其内部执行流程</strong>，因为后续的新的计算引擎比如Spark，当中就有MapReduce深深的影子存在。</li></ul><h5 id="MapReduce示例说明"><a href="#MapReduce示例说明" class="headerlink" title="MapReduce示例说明"></a>MapReduce示例说明</h5><ul><li>示例程序路径：<code>$HADOOP_HOME/share/hadoop/mapreduce/</code></li><li>示例程序：hadoop-mapreduce-examples-3.3.0.jar</li><li>MapReduce程序提交命令：<code>[hadoop jar|yarn jar] hadoop-mapreduce-examples-3.3.0.jar args…</code></li><li>提交到哪里去？<strong>提交到YARN集群上分布式执行</strong>。</li></ul><h5 id="评估圆周率π（PI）的值"><a href="#评估圆周率π（PI）的值" class="headerlink" title="评估圆周率π（PI）的值"></a>评估圆周率π（PI）的值</h5><p>Hadoop MapReduce示例提供了Monte Carlo方法计算圆周率。</p><h6 id="Monte-Carlo方法"><a href="#Monte-Carlo方法" class="headerlink" title="Monte Carlo方法"></a>Monte Carlo方法</h6><blockquote class="pullquote right"><p><img src="/2022/11/12/HadoopBase/2022-11-17-22-42-30.png" alt="评估圆周率π（PI）的值"></p></blockquote><p>假设正方形边长为1，圆半径也为1，那么1/4圆的面积为：$\frac{1}{4} \pi r^2$</p><p>在正方形内随机撒点，分布于1/4圆内的数量假设为a ，分布于圆外的数量为b，N则是所产生的总数：$N=a+b$</p><p>那么数量a与N的比值应与1/4圆面积及正方形面积成正比，于是：$\frac{\pi}{4}:1=a:N$</p><script type="math/tex; mode=display">\pi = \frac{4a}{N}</script><h6 id="评估圆周率π参数设置"><a href="#评估圆周率π参数设置" class="headerlink" title="评估圆周率π参数设置"></a>评估圆周率π参数设置</h6><p>运行MapReduce程序评估一下圆周率的值，执行中可以去YARN页面上观察程序的执行的情况。</p><ul><li>第一个参数：pi表示MapReduce程序执行圆周率计算任务；</li><li>第二个参数：用于指定map阶段运行的任务task次数，并发度，这里是10；</li><li>第三个参数：用于指定每个map任务取样的个数，这里是50。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar hadoop-mapreduce-examples-3.3.0.jar pi 10 50</span><br></pre></td></tr></table></figure><h5 id="wordcount单词词频统计"><a href="#wordcount单词词频统计" class="headerlink" title="wordcount单词词频统计"></a>wordcount单词词频统计</h5><details class="toggle"><summary class="toggle-button" style>1.txt</summary><div class="toggle-content"><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hello tom hello allen hello</span><br><span class="line">allen tom mac apple</span><br><span class="line">hello allen apple</span><br><span class="line">hello apple spark allen hadoop spark</span><br></pre></td></tr></table></figure></div></details><p>WordCount中文叫做单词统计、词频统计；<br>指的是统计指定文件中，每个<strong>单词出现的总次数</strong>。</p><h6 id="WordCount概述"><a href="#WordCount概述" class="headerlink" title="WordCount概述"></a>WordCount概述</h6><p>WordCount算是大数据计算领域经典的入门案例，相当于Hello World。</p><p>虽然WordCount业务极其简单，但关键是能够通过案例<strong>感受背后MapReduce的执行流程和默认的行为机制</strong>。</p><p><img src="/2022/11/12/HadoopBase/2022-11-17-22-49-46.png" alt="WordCount"></p><h6 id="WordCount编程实现思路"><a href="#WordCount编程实现思路" class="headerlink" title="WordCount编程实现思路"></a>WordCount编程实现思路</h6><ul><li>map阶段的核心：把输入的<strong>数据经过切割，全部标记1</strong>，因此输出就是&lt;单词，1&gt;。</li><li><strong>shuffle阶段核心：经过MR程序内部自带默认的排序分组等功能，把key相同的单词会作为一组数据构成新的kv对</strong>。</li><li>reduce阶段核心：处理shuffle完的一组数据，该组数据就是该单词所有的键值对。对所有的1进行累加求和，就是单词的总次数。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-22-51-54.png" alt="WordCount"></li></ul><h6 id="WordCount程序提交"><a href="#WordCount程序提交" class="headerlink" title="WordCount程序提交"></a>WordCount程序提交</h6><ul><li><p>上传文本文件1.txt(写入一些单词)到HDFS文件系统的/input目录下，如果没有这个目录，使用shell创建<br><code>hadoop fs -mkdir /input</code><br><code>hadoop fs -put 1.txt /input</code></p></li><li><p>执行官方MapReduce实例，对上述文件进行单词次数统计<br>第一个参数：wordcount表示执行单词统计任务；<br>第二个参数：指定输入文件的路径；<br>第三个参数：指定输出结果的路径（该路径不能已存在）；</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hadoop jar hadoop-mapreduce-examples-3.3.0.jar wordcount /input /output</span><br></pre></td></tr></table></figure><h4 id="Map阶段执行流程"><a href="#Map阶段执行流程" class="headerlink" title="Map阶段执行流程"></a>Map阶段执行流程</h4><h5 id="WordCount执行流程图"><a href="#WordCount执行流程图" class="headerlink" title="WordCount执行流程图"></a>WordCount执行流程图</h5><p><img src="/2022/11/12/HadoopBase/2022-11-17-22-51-54.png" alt="WordCount"></p><h5 id="MapReduce整体执行流程图"><a href="#MapReduce整体执行流程图" class="headerlink" title="MapReduce整体执行流程图"></a>MapReduce整体执行流程图</h5><p><img src="/2022/11/12/HadoopBase/2022-11-17-23-04-23.png" alt="MapReduce整体执行流程图"></p><h5 id="Map阶段执行过程"><a href="#Map阶段执行过程" class="headerlink" title="Map阶段执行过程"></a>Map阶段执行过程</h5><blockquote class="pullquote right"><p><img src="/2022/11/12/HadoopBase/2022-11-17-23-05-01.png" alt="Map阶段执行过程"></p></blockquote><ul><li><p>第一阶段：把输入目录下文件按照一定的标准逐个进行<strong>逻辑切片</strong>，形成切片规划。<br>默认Split size = Block size（128M），每一个切片由一个MapTask处理。（getSplits）</p></li><li><p>第二阶段：对切片中的数据按照一定的规则读取解析返回<key,value>对。<br>默认是<strong>按行读取数据</strong>。key是每一行的起始位置偏移量，value是本行的文本内容。（TextInputFormat）</key,value></p></li><li><p>第三阶段：调用Mapper类中的<strong>map方法处理数据</strong>。<br>每读取解析出来的一个<key,value> ，调用一次map方法。</key,value></p></li><li><p>第四阶段：按照一定的规则对Map输出的键值对进行<strong>分区partition</strong>。默认不分区，因为只有一个reducetask。<br>分区的数量就是reducetask运行的数量。</p></li><li><p>第五阶段：Map输出数据写入<strong>内存缓冲区</strong>，达到比例溢出到磁盘上。<strong>溢出spill</strong>的时候根据key进行<strong>排序sort</strong>。<br>默认根据key字典序排序。</p></li><li><p>第六阶段：对所有溢出文件进行最终的<strong>merge合并</strong>，成为一个文件。</p></li></ul><h4 id="Reduce阶段执行流程"><a href="#Reduce阶段执行流程" class="headerlink" title="Reduce阶段执行流程"></a>Reduce阶段执行流程</h4><ul><li>第一阶段：ReduceTask会主动从MapTask<strong>复制拉取</strong>属于需要自己处理的数据。</li><li>第二阶段：把拉取来数据，全部进行<strong>合并merge</strong>，即把分散的数据合并成一个大的数据。再对合并后的数据<strong>排序</strong>。</li><li>第三阶段是对排序后的键值对<strong>调用reduce方法</strong>。<strong>键相等</strong>的键值对调用一次reduce方法。最后把这些输出的键值对写入到HDFS文件中。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-23-16-08.png" alt="Reduce阶段执行流程"></li></ul><h4 id="Shuffle机制"><a href="#Shuffle机制" class="headerlink" title="Shuffle机制"></a>Shuffle机制</h4><h5 id="shuffle概念"><a href="#shuffle概念" class="headerlink" title="shuffle概念"></a>shuffle概念</h5><ul><li><code>Shuffle</code>的本意是洗牌、混洗的意思，把一组有规则的数据尽量打乱成无规则的数据。</li><li>而在MapReduce中，Shuffle更像是洗牌的<strong>逆</strong>过程，指的是<strong>将map端的无规则输出按指定的规则“打乱”成具有一定规则的数据，以便reduce端接收处理</strong>。</li><li><strong>一般把从Map产生输出开始到Reduce取得数据作为输入之前的过程称作shuffle</strong>。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-23-56-07.png" alt="shuffle概念"></li></ul><h5 id="Map端Shuffle"><a href="#Map端Shuffle" class="headerlink" title="Map端Shuffle"></a>Map端Shuffle</h5><ul><li>Collect阶段：将MapTask的结果收集输出到默认大小为100M的环形缓冲区，保存之前会对key进行分区的计算，默认Hash分区。</li><li>Spill阶段：当内存中的数据量达到一定的阀值的时候，就会将数据写入本地磁盘，在将数据写入磁盘之前需要对数据进行一次排序的操作，如果配置了combiner，还会将有相同分区号和key的数据进行排序。</li><li>Merge阶段：把所有溢出的临时文件进行一次合并操作，以确保一个MapTask最终只产生一个中间数据文件。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-23-57-34.png" alt="Map端Shuffle"></li></ul><h5 id="Reducer端shuffle"><a href="#Reducer端shuffle" class="headerlink" title="Reducer端shuffle"></a>Reducer端shuffle</h5><ul><li>Copy阶段：ReduceTask启动Fetcher线程到已经完成MapTask的节点上复制一份属于自己的数据。</li><li>Merge阶段：在ReduceTask远程复制数据的同时，会在后台开启两个线程对内存到本地的数据文件进行合并操作。</li><li>Sort阶段：在对数据进行合并的同时，会进行排序操作，由于MapTask阶段已经对数据进行了局部的排序，ReduceTask只需保证Copy的数据的最终整体有效性即可。</li><li><img src="/2022/11/12/HadoopBase/2022-11-17-23-58-30.png" alt="Reducer端shuffle"></li></ul><h5 id="shuffle机制弊端"><a href="#shuffle机制弊端" class="headerlink" title="shuffle机制弊端"></a>shuffle机制弊端</h5><ul><li>Shuffle是MapReduce程序的核心与精髓，是MapReduce的灵魂所在。</li><li>Shuffle也是MapReduce被诟病最多的地方所在。MapReduce相比较于Spark、Flink计算引擎慢的原因，跟Shuffle机制有很大的关系。</li><li>Shuffle中<strong>频繁涉及到数据在内存、磁盘之间的多次往复</strong>。</li></ul><h3 id="Hadoop-YARN"><a href="#Hadoop-YARN" class="headerlink" title="Hadoop YARN"></a>Hadoop YARN</h3><h4 id="Hadoop-YARN介绍"><a href="#Hadoop-YARN介绍" class="headerlink" title="Hadoop YARN介绍"></a>Hadoop YARN介绍</h4><h5 id="YARN简介"><a href="#YARN简介" class="headerlink" title="YARN简介"></a>YARN简介</h5><ul><li>Apache Hadoop YARN （Yet Another Resource Negotiator，另一种资源协调者）是一种新的Hadoop资源管理器。</li><li>YARN是一个<code>通用</code><strong>资源管理系统</strong>和<strong>调度平台</strong>，可为上层应用提供统一的资源管理和调度。</li><li>它的引入为集群在利用率、资源统一管理和数据共享等方面带来了巨大好处。</li><li><img src="/2022/11/12/HadoopBase/2022-11-18-00-02-20.png" alt="YARN简介"></li></ul><h5 id="YARN功能说明"><a href="#YARN功能说明" class="headerlink" title="YARN功能说明"></a>YARN功能说明</h5><ul><li><strong>资源管理系统</strong>：集群的硬件资源，和程序运行相关，比如内存、CPU等。</li><li><strong>调度平台</strong>：多个程序同时申请计算资源如何分配，调度的规则（算法）。</li><li><strong>通用</strong>：不仅仅支持MapReduce程序，理论上<strong>支持各种计算程序</strong>。YARN不关心你干什么，只关心你要资源，在有的情况下给你，用完之后还我。</li></ul><h5 id="YARN概述"><a href="#YARN概述" class="headerlink" title="YARN概述"></a>YARN概述</h5><ul><li>可以把Hadoop YARN理解为相当于一个分布式的操作系统平台，而MapReduce等计算程序则相当于运行于操作系统之上的应用程序，<strong>YARN为这些程序提供运算所需的资源</strong>（内存、CPU等）。</li><li>Hadoop能有今天这个地位，YARN可以说是功不可没。因为有了YARN ，更多计算框架可以接入到HDFS中，而不单单是MapReduce，<strong>正是因为YARN的包容，使得其他计算框架能专注于计算性能的提升</strong>。</li><li>HDFS可能不是最优秀的大数据存储系统，但却是应用最广泛的大数据存储系统，YARN功不可没。</li></ul><h4 id="Hadoop-YARN架构、组件"><a href="#Hadoop-YARN架构、组件" class="headerlink" title="Hadoop YARN架构、组件"></a>Hadoop YARN架构、组件</h4><h5 id="YARN官方架构图"><a href="#YARN官方架构图" class="headerlink" title="YARN官方架构图"></a>YARN官方架构图</h5><p><img src="/2022/11/12/HadoopBase/2022-11-18-00-05-28.png" alt="YARN官方架构图"></p><h5 id="官方架构图中出现的概念"><a href="#官方架构图中出现的概念" class="headerlink" title="官方架构图中出现的概念"></a>官方架构图中出现的概念</h5><ul><li><img src="/2022/11/12/HadoopBase/2022-11-18-00-06-43.png" alt="官方架构图中出现的概念"></li><li>Client</li><li>Container容器（资源的抽象）</li></ul><h5 id="YARN3大组件"><a href="#YARN3大组件" class="headerlink" title="YARN3大组件"></a>YARN3大组件</h5><ul><li><p><strong>ResourceManager（RM）</strong><br>YARN集群中的主角色，决定系统中所有应用程序之间<strong>资源分配的最终权限，即最终仲裁者</strong>。<br>接收用户的作业提交，并通过NM分配、管理各个机器上的计算资源。</p></li><li><p><strong>NodeManager（NM）</strong><br>YARN中的从角色，一台机器上一个，负责<strong>管理本机器上的计算资源</strong>。<br>根据RM命令，启动Container容器、监视容器的资源使用情况。并且向RM主角色汇报资源使用情况。</p></li><li><p><strong>ApplicationMaster（AM）</strong><br>用户提交的每个应用程序均包含一个AM。<br><strong>应用程序内的“老大”</strong>，负责程序内部各阶段的资源申请，监督程序的执行情况。</p></li></ul><h4 id="程序提交YARN交互流程"><a href="#程序提交YARN交互流程" class="headerlink" title="程序提交YARN交互流程"></a>程序提交YARN交互流程</h4><h5 id="核心交互流程"><a href="#核心交互流程" class="headerlink" title="核心交互流程"></a>核心交互流程</h5><ul><li>MR作业提交Client—&gt;RM</li><li>资源的申请MrAppMaster—&gt;RM</li><li>MR作业状态汇报Container（Map|Reduce Task）—&gt;Container（MrAppMaster）</li><li>节点的状态汇报NM—&gt;RM</li></ul><h5 id="交互流程概述"><a href="#交互流程概述" class="headerlink" title="交互流程概述"></a>交互流程概述</h5><p>当用户向YARN 中提交一个应用程序后，YARN将分两个阶段运行该应用程序。</p><ul><li>第一个阶段是<strong>客户端申请资源启动运行本次程序的ApplicationMaster</strong>；</li><li>第二个阶段是由<strong>ApplicationMaster根据本次程序内部具体情况，为它申请资源，并监控它的整个运行过程</strong>，直到运行完成。</li></ul><h5 id="MR提交YARN交互流程"><a href="#MR提交YARN交互流程" class="headerlink" title="MR提交YARN交互流程"></a>MR提交YARN交互流程</h5><ul><li>第1步、用户通过客户端向YARN中ResourceManager提交应用程序（比如hadoop jar提交MR程序）。</li><li>第2步、ResourceManager为该应用程序分配第一个Container（容器），并与对应的NodeManager通信，要求它在这个Container中启动这个应用程序的ApplicationMaster。</li><li>第3步、ApplicationMaster启动成功之后，首先向ResourceManager注册并保持通信，这样用户可以直接通过ResourceManage查看应用程序的运行状态（处理了百分之几）。</li><li>第4步、AM为本次程序内部的各个Task任务向RM申请资源，并监控它的运行状态。</li></ul><p><img src="/2022/11/12/HadoopBase/2022-11-18-00-15-11.png" alt="YARN核心交互流程"></p><ul><li>第5步、一旦ApplicationMaster 申请到资源后，便与对应的NodeManager 通信，要求它启动任务。</li><li>第6步、NodeManager 为任务设置好运行环境后，将任务启动命令写到一个脚本中，并通过运行该脚本启动任务。</li><li>第7步、各个任务通过某个RPC 协议向ApplicationMaster 汇报自己的状态和进度，以让ApplicationMaster 随时掌握各个任务的运行状态，从而可以在任务失败时重新启动任务。在应用程序运行过程中，用户可随时通过RPC 向ApplicationMaster 查询应用程序的当前运行状态。</li><li>第8步、应用程序运行完成后，ApplicationMaster 向ResourceManager 注销并关闭自己。</li></ul><h4 id="YARN资源调度器Scheduler"><a href="#YARN资源调度器Scheduler" class="headerlink" title="YARN资源调度器Scheduler"></a>YARN资源调度器Scheduler</h4><h5 id="MR程序提交YARN交互流程"><a href="#MR程序提交YARN交互流程" class="headerlink" title="MR程序提交YARN交互流程"></a>MR程序提交YARN交互流程</h5><p><img src="/2022/11/12/HadoopBase/2022-11-18-00-24-33.png" alt="YARN资源调度器Scheduler"></p><h5 id="如何理解资源调度"><a href="#如何理解资源调度" class="headerlink" title="如何理解资源调度"></a>如何理解资源调度</h5><ul><li>在理想情况下，应用程序提出的请求将立即得到YARN批准。但是实际中，<strong>资源是有限的</strong>，并且在<strong>繁忙的群集上</strong>，应用程序通常将需要等待其某些请求得到满足。YARN调度程序的工作是<strong>根据一些定义的策略为应用程序分配资源</strong>。</li><li>在YARN中，负责给应用分配资源的就是<code>Scheduler</code>，它是ResourceManager的核心组件之一。Scheduler完全专用于调度作业，它无法跟踪应用程序的状态。</li><li>一般而言，调度是一个难题，并且没有一个“最佳”策略，为此，YARN提供了多种调度器和可配置的策略供选择。</li></ul><h5 id="调度器策略"><a href="#调度器策略" class="headerlink" title="调度器策略"></a>调度器策略</h5><ul><li><p>三种调度器<br><code>FIFO Scheduler</code>（先进先出调度器）、<code>Capacity Scheduler</code>（容量调度器）、<code>Fair Scheduler</code>（公平调度器）。</p></li><li><p>Apache版本YARN默认使用<code>Capacity Scheduler</code>。</p></li><li>如果需要使用其他的调度器，可以在yarn-site.xml中的yarn.resourcemanager.scheduler.class进行配置。</li><li><img src="/2022/11/12/HadoopBase/2022-11-18-00-27-16.png" alt="三种调度器"></li></ul><div class="tabs" id="diaoduqi"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#diaoduqi-1"><b>FIFO Scheduler</b></button></li><li class="tab"><button type="button" data-href="#diaoduqi-2"><b>Capacity Scheduler</b></button></li><li class="tab"><button type="button" data-href="#diaoduqi-3"><b>Fair Scheduler</b></button></li></ul><div class="tab-contents"><div class="tab-item-content" id="diaoduqi-1"><p><mark class="hl-label green">FIFO&nbsp;Scheduler概述</mark> </p><p><img src="/2022/11/12/HadoopBase/2022-11-18-00-28-28.png" alt="FIFO Schedule"></p><ul><li><code>FIFO Scheduler</code>是Hadoop1.x中JobTracker原有的调度器实现，此调度器在YARN中保留了下来。</li><li>FIFO Scheduler是一个<strong>先进先出</strong>的思想，即<strong>先提交的应用先运行</strong>。调度工作不考虑优先级和范围，适用于负载较低的小规模集群。当使用大型共享集群时，它的效率较低且会导致一些问题。</li><li>FIFO Scheduler拥有一个控制全局的队列queue，默认queue名称为default，该调度器会获取当前集群上所有的资源信息作用于这个全局的queue。</li></ul><p><mark class="hl-label green">FIFO&nbsp;Scheduler优势、坏处</mark> </p><ul><li><p>优势：<br>无需配置、先到先得、易于执行</p></li><li><p>坏处：<br>任务的优先级不会变高，因此高优先级的作业需要等待<br>不适合共享集群</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="diaoduqi-2"><p><mark class="hl-label green">Capacity&nbsp;Scheduler概述</mark> </p><p><img src="/2022/11/12/HadoopBase/2022-11-18-00-34-07.png" alt="Capacity Scheduler"></p><ul><li>Capacity Scheduler容量调度是<strong>Apache Hadoop3.x默认调度策略</strong>。该策略允许<strong>多个组织共享整个集群资源</strong>，每个组织可以获得集群的一部分计算能力。<strong>通过为每个组织分配专门的队列，然后再为每个队列分配一定的集群资源</strong>，这样整个集群就可以通过设置多个队列的方式给多个组织提供服务了。</li><li>Capacity可以理解成一个个的资源队列，这个资源队列是用户自己去分配的。队列内部又可以垂直划分，这样一个组织内部的多个成员就可以共享这个队列资源了，在一个队列内部，资源的调度是采用的是先进先出(FIFO)策略。</li></ul><p><mark class="hl-label green">Capacity&nbsp;Scheduler资源队列划分</mark> </p><p>Capacity Scheduler调度器以队列为单位划分资源。简单通俗点来说，就是一个个队列有独立的资源，队列的结构和资源是可以进行配置的。</p><p><img src="/2022/11/12/HadoopBase/2022-11-18-00-35-41.png" alt="Capacity Scheduler资源队列划分"></p><p><mark class="hl-label green">Capacity&nbsp;Scheduler特性优势</mark> </p><ul><li><p><strong>层次化的队列设计</strong>（Hierarchical Queues）<br>层次化的管理，可以更容易、更合理分配和限制资源的使用。</p></li><li><p><strong>容量保证</strong>（Capacity Guarantees）<br>每个队列上都可以设置一个资源的占比，保证每个队列都不会占用整个集群的资源。</p></li><li><p><strong>安全</strong>（Security）<br>每个队列有严格的访问控制。用户只能向自己的队列里面提交任务，而且不能修改或者访问其他队列的任务。</p></li><li><p><strong>弹性分配</strong>（Elasticity）<br>空闲的资源可以被分配给任何队列。<br>当多个队列出现争用的时候，则会按照权重比例进行平衡。</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="diaoduqi-3"><p><mark class="hl-label green">Fair&nbsp;Scheduler概述</mark> </p><p><img src="/2022/11/12/HadoopBase/2022-11-18-00-38-13.png" alt="Fair Scheduler概述"></p><ul><li><strong>Fair Scheduler叫做公平调度</strong>，提供了YARN应用程序<strong>公平地共享大型集群中资源</strong>的另一种方式。使所有应用在平均情况下随着时间的流逝可以获得相等的资源份额。</li><li>Fair Scheduler设计目标是为所有的应用分配公平的资源（对公平的定义通过参数来设置）。</li><li>公平调度可以在多个队列间工作，允许资源共享和抢占。</li></ul><p><mark class="hl-label green">如何理解公平共享</mark> </p><ul><li>有两个用户A和B，每个用户都有自己的队列。</li><li>A启动一个作业，由于没有B的需求，它分配了集群所有可用的资源。</li><li>然后B在A的作业仍在运行时启动了一个作业，经过一段时间，A,B各自作业都使用了一半的资源。</li><li>现在，如果B用户在其他作业仍在运行时开始第二个作业，它将与B的另一个作业共享其资源，因此B的每个作业将拥有资源的四分之一，而A的继续将拥有一半的资源。结果是资源在用户之间公平地共享。</li></ul><p><mark class="hl-label green">Fair&nbsp;特性优势</mark> </p><ul><li><strong>分层队列</strong>：队列可以按层次结构排列以划分资源，并可以配置权重以按特定比例共享集群。</li><li><strong>基于用户或组的队列映射</strong>：可以根据提交任务的用户名或组来分配队列。如果任务指定了一个队列,则在该队列中提交任务。</li><li><strong>资源抢占</strong>：根据应用的配置，抢占和分配资源可以是友好的或是强制的。默认不启用资源抢占。</li><li><strong>保证最小配额</strong>：可以设置队列最小资源，允许将保证的最小份额分配给队列，保证用户可以启动任务。当队列不能满足最小资源时,可以从其它队列抢占。当队列资源使用不完时,可以给其它队列使用。这对于确保某些用户、组或生产应用始终获得足够的资源。</li><li><strong>允许资源共享</strong>：即当一个应用运行时,如果其它队列没有任务执行,则可以使用其它队列,当其它队列有应用需要资源时再将占用的队列释放出来。所有的应用都从资源队列中分配资源。</li><li><strong>默认不限制每个队列和用户可以同时运行应用的数量</strong>。可以配置来限制队列和用户并行执行的应用数量。限制并行执行应用数量不会导致任务提交失败,超出的应用会在队列中等待。</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/2022/11/07/TypeScript/"/>
      <url>/2022/11/07/TypeScript/</url>
      
        <content type="html"><![CDATA[<h2 id="TypeScript-介绍"><a href="#TypeScript-介绍" class="headerlink" title="TypeScript 介绍"></a>TypeScript 介绍</h2><h3 id="TypeScript-是什么"><a href="#TypeScript-是什么" class="headerlink" title="TypeScript 是什么"></a>TypeScript 是什么</h3><p>TypeScript（简称：TS）是JavaScript 的<strong>超集</strong>（JS 有的TS 都有）。<br>TypeScript = <strong>Type</strong> + JavaScript（在JS 基础之上，为JS 添加了<strong>类型支持</strong>）。<br>TypeScript 是微软开发的开源编程语言，可以在任何运行JavaScript 的地方运行。</p><h3 id="TypeScript-为什么要为JS-添加类型支持？"><a href="#TypeScript-为什么要为JS-添加类型支持？" class="headerlink" title="TypeScript 为什么要为JS 添加类型支持？"></a>TypeScript 为什么要为JS 添加类型支持？</h3><p>背景：JS 的类型系统存在“先天缺陷”，JS 代码中绝大部分错误都是<strong>类型</strong>错误（Uncaught TypeError）。<br>问题：增加了找Bug、改Bug 的时间，严重影响开发效率。</p><p>从编程语言的动静来区分，TypeScript 属于静态类型的编程语言，JS 属于动态类型的编程语言。<br>静态类型：编译期做类型检查； 动态类型：执行期做类型检查。<br>代码编译和代码执行的顺序：1 编译2 执行。</p><p>对于JS 来说：需要等到代码真正去执行的时候才能发现错误（晚）。<br>对于TS 来说：在代码编译的时候（代码执行前）就可以发现错误（早）。<br>并且，配合VSCode 等开发工具，TS 可以<strong>提前到在编写代码的同时</strong>就发现代码中的错误，<strong>减少找Bug、改Bug 时间</strong>。</p><h3 id="TypeScript-相比JS-的优势"><a href="#TypeScript-相比JS-的优势" class="headerlink" title="TypeScript 相比JS 的优势"></a>TypeScript 相比JS 的优势</h3><ol><li>更早（写代码的同时）发现错误，减少找Bug、改Bug 时间，提升开发效率。</li><li>程序中任何位置的代码都有代码提示，随时随地的安全感，增强了开发体验。</li><li>强大的类型系统提升了代码的可维护性，使得重构代码更加容易。</li><li>支持最新的ECMAScript 语法，优先体验最新的语法，让你走在前端技术的最前沿。</li><li>TS 类型推断机制，不需要在代码中的每个地方都显示标注类型，让你在享受优势的同时，尽量降低了成本。</li></ol><p>除此之外，Vue 3 源码使用TS 重写、Angular 默认支持TS、React 与TS 完美配合，TypeScript 已成为大中型前端<br>项目的首先编程语言。</p><h2 id="TypeScript-初体验"><a href="#TypeScript-初体验" class="headerlink" title="TypeScript 初体验"></a>TypeScript 初体验</h2><h3 id="安装编译TS-的工具包"><a href="#安装编译TS-的工具包" class="headerlink" title="安装编译TS 的工具包"></a>安装编译TS 的工具包</h3><p><strong>Node.js/浏览器，只认识JS 代码，不认识TS 代码。需要先将TS 代码转化为JS 代码，然后才能运行。</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g typescript</span><br></pre></td></tr></table></figure><p><strong>typescript 包</strong>：用来编译TS 代码的包，提供了tsc 命令，实现了TS -&gt; JS 的转化。<br>验证是否安装成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc -v</span><br></pre></td></tr></table></figure><p><img src="/2022/11/07/TypeScript/2022-11-07-17-37-21.png" alt="ts"></p><h3 id="编译并运行TS-代码"><a href="#编译并运行TS-代码" class="headerlink" title="编译并运行TS 代码"></a>编译并运行TS 代码</h3><ol><li>创建hello.ts 文件（注意：TS 文件的后缀名为<code>.ts</code>）。</li><li>将TS 编译为JS：在终端中输入命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc hello.ts</span><br></pre></td></tr></table></figure>（此时，在同级目录中会出现一个同名的JS 文件）。</li><li>执行JS 代码：在终端中输入命令。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node hello.js</span><br></pre></td></tr></table></figure></li></ol><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  graph LRid1[创建 ts 文件] --&gt; id2[编译 Ts] --&gt; id3[执行 js]  </pre></div><p>说明：所有合法的JS 代码都是TS 代码，有JS 基础只需要学习TS 的类型即可。<br>注意：由TS 编译生成的<strong>JS 文件</strong>，代码中就没有<strong>类型信息</strong>了。</p><h3 id="简化运行TS-的步骤"><a href="#简化运行TS-的步骤" class="headerlink" title="简化运行TS 的步骤"></a>简化运行TS 的步骤</h3><p>问题描述：每次修改代码后，都要重复执行两个命令，才能运行TS 代码，太繁琐。<br>简化方式：使用<strong>ts-node 包</strong>，直接在Node.js 中执行TS 代码。<br>安装命令：（ts-node 包提供了ts-node 命令）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g ts-node</span><br></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ts-node .ts文件</span><br></pre></td></tr></table></figure><p>解释：ts-node 命令在内部偷偷的将TS -&gt; JS，然后，再运行JS 代码。</p><h2 id="TypeScript-常用类型"><a href="#TypeScript-常用类型" class="headerlink" title="TypeScript 常用类型"></a>TypeScript 常用类型</h2><p>TypeScript 是JS 的超集，TS 提供了JS 的所有功能，并且额外的增加了：<strong>类型系统</strong>。</p><ul><li>所有的JS 代码都是TS 代码。</li><li>JS 有类型（比如，number/string 等），但是<strong>JS 不会检查变量的类型是否发生变化</strong>，而 <strong>TS 会检查</strong>。</li><li>TypeScript 类型系统的主要优势：可以<strong>显示标记出代码中的意外行为</strong>，从而降低了发生错误的可能性。</li></ul><h3 id="类型注解"><a href="#类型注解" class="headerlink" title="类型注解"></a>类型注解</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age :<span class="built_in">number</span> = <span class="number">18</span></span><br></pre></td></tr></table></figure><p>说明：代码中的<code>: number</code> 就是类型注解。<br>作用：为变量<strong>添加类型约束</strong>。比如，上述代码中，约定变量age 的类型为number（数值类型）。<br>解释：<strong>约定了什么类型，就只能给变量赋值该类型的值</strong>，否则，就会报错。</p><h3 id="常用基础类型概述"><a href="#常用基础类型概述" class="headerlink" title="常用基础类型概述"></a>常用基础类型概述</h3><ol><li>JS 已有类型<ul><li>原始类型：number/string/boolean/null/undefined/symbol。</li><li>对象类型：object（包括，数组、对象、函数等对象）。</li></ul></li><li>TS 新增类型<br> -联合类型、自定义类型（类型别名）、接口、元组、字面量类型、枚举、void、any 等。</li></ol><h3 id="原始类型"><a href="#原始类型" class="headerlink" title="原始类型"></a>原始类型</h3><p><code>number</code>/<code>string</code>/<code>boolean</code>/<code>null</code>/<code>undefined</code>/<code>symbol</code></p><p>特点：简单。这些类型，完全按照JS 中类型的名称来书写。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> =<span class="number">18</span> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: <span class="built_in">string</span> = <span class="string">&#x27;name&#x27;</span></span><br><span class="line"><span class="keyword">let</span>  <span class="attr">judge</span>: <span class="built_in">boolean</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h3><p>object（包括，数组、对象、函数等对象）。<br>特点：对象类型，在TS 中更加细化，<strong>每个具体的对象都有自己的类型语法</strong>。</p><p>数组类型的两种写法：（推荐使用 <code>number[]</code> 写法）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">number</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strings</span>: <span class="title class_">Array</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br></pre></td></tr></table></figure><p>需求：数组中既有number 类型，又有string 类型，这个数组的类型应该如何写？</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: (<span class="built_in">number</span> | <span class="built_in">string</span>)[]=[<span class="number">1</span>,<span class="string">&#x27;a&#x27;</span>,<span class="number">3</span>,<span class="string">&#x27;b&#x27;</span>]</span><br></pre></td></tr></table></figure><p>解释：<code>|</code> （竖线）在TS 中叫做<strong>联合类型</strong>（由两个或多个其他类型组成的类型，表示可以是这些类型中的任意一种）。<br>注意：这是TS 中联合类型的语法，只有一根竖线，不要与JS 中的或（||）混淆了。</p><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><p>类型别名（自定义类型）：为任意类型起别名。<br>使用场景：当同一类型（复杂）被多次使用时，可以通过类型别名，简化该类型的使用。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">CustomArray</span> = (<span class="built_in">number</span> | <span class="built_in">string</span>)[]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>: <span class="title class_">CustomArray</span> = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>: <span class="title class_">CustomArray</span> = [<span class="number">1</span>, <span class="string">&#x27;x&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;y&#x27;</span>]</span><br></pre></td></tr></table></figure><p>解释：</p><ol><li>使用<code>type</code> 关键字来创建类型别名。</li><li>类型别名（比如，此处的CustomArray），可以是任意合法的变量名称。</li><li>创建类型别名后，直接<strong>使用该类型别名作为变量的类型注解</strong>即可。</li></ol><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>函数的类型实际上指的是：函数<strong>参数</strong>和<strong>返回值</strong>的类型。<br>为函数指定类型的两种方式：</p><ol><li>单独指定参数、返回值的类型：<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> add = (<span class="attr">num1</span>: <span class="built_in">number</span>, <span class="attr">num2</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>同时指定参数、返回值的类型：<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">add</span>: <span class="function">(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span> = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>解释：当函数作为表达式时，可以通过<strong>类似箭头函数形式的语法</strong><code>(num1: number, num2: number) =&gt; number</code>来为函数添加类型。<br>注意：这种形式只适用于函数表达式。</li></ol><p>如果函数没有返回值，那么，函数返回值类型为：<code>void</code>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params">name: <span class="built_in">string</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello&#x27;</span>, name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用函数实现某个功能时，参数可以传也可以不传。这种情况下，在给函数参数指定类型时，就用到<strong>可选参数</strong>了。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mySlice</span>(<span class="params">start: <span class="built_in">number</span>, end?: <span class="built_in">number</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;起始索引：&#x27;</span>, start, <span class="string">&#x27;结束索引：&#x27;</span>, end)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">mySlice</span>(<span class="number">10</span>)</span><br><span class="line"><span class="title function_">mySlice</span>(<span class="number">1</span>)</span><br><span class="line"><span class="title function_">mySlice</span>(<span class="number">1</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><details class="toggle"><summary class="toggle-button" style>输出结果</summary><div class="toggle-content"><p>起始索引： 10 结束索引： undefined<br>起始索引： 1 结束索引： undefined<br>起始索引： 1 结束索引： 3</p></div></details><p>可选参数：在可传可不传的参数名称后面添加<code>?</code>（问号）。<br>注意：<strong>可选参数只能出现在参数列表的最后</strong>，也就是说可选参数后面不能再出现必选参数。</p><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><p>JS 中的对象是由属性和方法构成的，而TS 中对象的类型就是在<strong>描述对象的结构</strong>（有什么类型的属性和方法）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span>; <span class="title function_">sayHi</span>(): <span class="built_in">void</span>; <span class="title function_">greet</span>(<span class="attr">name</span>: <span class="built_in">string</span>): <span class="built_in">void</span> &#125; = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">greet</span>(<span class="params">name</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>直接使用{} 来描述对象结构。属性采用<code>属性名: 类型</code>的形式；方法采用<code>方法名(): 返回值类型</code>的形式。</li><li>如果方法有参数，就在方法名后面的小括号中指定参数类型（比如：<code>greet(name: string): void</code>）。</li><li>在一行代码中指定对象的多个属性类型时，使用;（分号）来分隔。<ul><li>如果一行代码只指定一个属性类型（通过换行来分隔多个属性类型），可以去掉;（分号）。</li><li>方法的类型也可以使用箭头函数形式（比如：{ <code>sayHi: () =&gt; void</code> }）。</li></ul></li></ol><p>对象的属性或方法，也可以是可选的，此时就用到<strong>可选属性</strong>了。<br>比如，我们在使用 myaxios({ … }) 时，如果发送GET 请求，method 属性就可以省略。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myAxios</span>(<span class="params">config: &#123; url: <span class="built_in">string</span>; method?: <span class="built_in">string</span> &#125;</span>) &#123;&#125;</span><br><span class="line"><span class="title function_">myAxios</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>可选属性</strong>的语法与函数可选参数的语法一致，都使用<code>?</code>（问号）来表示。</p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>当一个对象类型被多次使用时，一般会使用<strong>接口（interface）</strong>来描述对象的类型，达到<strong>复用</strong>的目的。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="title function_">sayHi</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">person</span>: <span class="title class_">IPerson</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;name&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>使用<code>interface</code> 关键字来声明接口。</li><li>接口名称（比如，此处的IPerson），可以是任意合法的变量名称。</li><li>声明接口后，直接<strong>使用接口名称作为变量的类型</strong>。</li><li>因为每一行只有一个属性类型，因此，属性类型后没有;（分号）。</li></ol><p><code>interface</code>（接口）和 <code>type</code>（类型别名）的对比：</p><ul><li>相同点：都可以给对象指定类型。<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IPerson</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="title function_">sayHi</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">IPerson</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="title function_">sayHi</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>不同点：<ul><li>接口，只能为对象指定类型。</li><li>类型别名，不仅可以为对象指定类型，实际上可以为任意类型指定别名。<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">NumStr</span> =num | <span class="built_in">string</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>如果两个接口之间有相同的属性或方法，可以将公共的属性或方法抽离出来，通过继承来实现复用。<br>比如，这两个接口都有x、y 两个属性，重复写两次，可以，但很繁琐。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point2D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point3D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>; <span class="attr">z</span>: <span class="built_in">number</span> &#125;</span><br></pre></td></tr></table></figure><p>更好的方式：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point2D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point3D</span> <span class="keyword">extends</span> <span class="title class_">Point2D</span> &#123; <span class="attr">z</span>: <span class="built_in">number</span> &#125;</span><br></pre></td></tr></table></figure><ol><li>使用 <code>extends</code>（继承）关键字实现了接口Point3D 继承Point2D。</li><li>继承后，Point3D 就有了Point2D 的所有属性和方法（此时，Point3D 同时有x、y、z 三个属性）。</li></ol><h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><p>场景：在地图中，使用经纬度坐标来标记位置信息。<br>可以使用数组来记录坐标，那么，该数组中只有两个元素，并且这两个元素都是数值类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">position</span>: <span class="built_in">number</span>[] = [<span class="number">27.123</span>,<span class="number">3.14159</span>]</span><br></pre></td></tr></table></figure><p>使用 <code>number[]</code> 的缺点：不严谨，因为该类型的数组中可以出现任意多个数字。</p><p>更好的方式：<strong>元组（Tuple）</strong>。<br>元组类型是另一种类型的数组，它<strong>确切地知道包含多少个元素，以及特定索引对应的类型</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">position</span>: [<span class="built_in">number</span>,<span class="built_in">number</span>] = [<span class="number">27.123</span>,<span class="number">3.14159</span>]</span><br></pre></td></tr></table></figure><ol><li>元组类型可以确切地标记出有多少个元素，以及每个元素的类型。</li><li>该示例中，元素有两个元素，每个元素的类型都是number。</li></ol><h3 id="类型推论"><a href="#类型推论" class="headerlink" title="类型推论"></a>类型推论</h3><p>在TS 中，某些没有明确指出类型的地方，TS 的类型推论机制会帮助提供类型。<br>换句话说：由于类型推论的存在，这些地方，类型注解可以省略不写！</p><p>发生类型推论的2 种常见场景：</p><ol><li>声明变量并初始化时<img src="/2022/11/07/TypeScript/2022-11-08-14-24-11.png" alt="ts"></li><li>决定函数返回值时<img src="/2022/11/07/TypeScript/2022-11-08-14-23-17.png" alt="ts"></li></ol><p>注意：这两种情况下，类型注解可以省略不写！<br>推荐：<strong>能省略类型注解的地方就省略</strong>（<del>偷懒</del>，充分利用TS类型推论的能力，提升开发效率）。<br>技巧：如果不知道类型，可以通过鼠标放在变量名称上，利用VSCode 的提示来查看类型。</p><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>有时候你会<strong>比TS 更加明确一个值的类型</strong>，此时，可以使用<code>类型断言</code>来指定更具体的类型。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com/&quot;</span> <span class="attr">id</span>=<span class="string">&quot;link&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2022/11/07/TypeScript/2022-11-08-14-35-12.png" alt="ts"><br>注意：getElementById 方法返回值的类型是HTMLElement，该类型只包含所有标签公共的属性或方法，不包含a<br>标签特有的href 等属性。<br>因此，<strong>这个类型太宽泛（不具体）</strong>，无法操作href 等 a 标签特有的属性或方法。<br>解决方式：这种情况下就需要<strong>使用类型断言指定更加具体的类型</strong>。</p><p><img src="/2022/11/07/TypeScript/2022-11-08-14-37-27.png" alt="类型断言"></p><ol><li>使用 <code>as</code> 关键字实现类型断言。</li><li>关键字 as 后面的类型是一个更加具体的类型（HTMLAnchorElement 是HTMLElement 的子类型）。</li><li>通过类型断言，aLink 的类型变得更加具体，这样就可以访问a 标签特有的属性或方法了。</li></ol><p>另一种语法，使用 <code>&lt;&gt;</code> 语法，这种语法形式不常用知道即可。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> aLink = &lt;<span class="title class_">HTMLAnchorElement</span>&gt;<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;link&#x27;</span>)</span><br></pre></td></tr></table></figure><p>技巧：在浏览器控制台，通过 <code>console.dir()</code> 打印 DOM 元素，在属性列表的最后面，即可看到该元素的类型。</p><h3 id="字面量类型"><a href="#字面量类型" class="headerlink" title="字面量类型"></a>字面量类型</h3><p>思考以下代码，两个变量的类型分别是什么？</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="string">&#x27;Hello TS&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">str2</span>: <span class="string">&#x27;Hello TS&#x27;</span> = <span class="string">&#x27;Hello TS&#x27;</span></span><br></pre></td></tr></table></figure><p>通过TS 类型推论机制，可以得到答案：</p><ol><li>str1 是一个变量（let），它的值可以是任意字符串，所以类型为：<code>string</code>。</li><li>str2 是一个常量（const），它的值不能变化只能是’Hello TS’，所以，它的类型为：<code>&quot;Hello TS&quot;</code>。</li></ol><p>注意：此处的”Hello TS”，就是一个<strong>字面量类型</strong>。也就是说某个特定的字符串也可以作为TS 中的类型。<br>除字符串外，任意的JS 字面量（比如，对象、数字等）都可以作为类型使用。</p><p>使用模式：<strong>字面量类型配合联合类型一起使用</strong>。<br>使用场景：用来表示<strong>一组明确的可选值列表</strong>。<br>比如，在贪吃蛇游戏中，游戏的方向的可选值只能是上、下、左、右中的任意一个。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">direction: <span class="string">&#x27;up&#x27;</span> | <span class="string">&#x27;down&#x27;</span> | <span class="string">&#x27;left&#x27;</span> | <span class="string">&#x27;right&#x27;</span></span>) &#123;&#125;</span><br></pre></td></tr></table></figure><p>解释：参数direction 的值只能是up/down/left/right 中的任意一个。<br>优势：相比于string 类型，使用字面量类型更加精确、严谨。</p><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>枚举的功能类似于字面量类型+联合类型组合的功能，也可以<strong>表示一组明确的可选值</strong>。<br>枚举：定义一组命名常量。它描述一个值，该值可以是这些命名常量中的一个。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123; <span class="title class_">Up</span>,<span class="title class_">Down</span>,<span class="title class_">Left</span>,<span class="title class_">Right</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">direction: Direction</span>) &#123;&#125;</span><br><span class="line"><span class="title function_">changeDirection</span>(<span class="title class_">Direction</span>.<span class="property">Left</span>)</span><br></pre></td></tr></table></figure><ol><li>使用 <code>enum</code> 关键字定义枚举。</li><li>约定枚举名称、枚举中的值以大写字母开头。</li><li>枚举中的多个值之间通过,（逗号）分隔。</li><li>定义好枚举后，直接使用<strong>枚举名称</strong>作为类型注解。</li></ol><p>注意：形参direction 的类型为枚举Direction，那么，实参的值就应该是枚举Direction 成员的任意一个。通过点（<code>.</code>）<strong>语法</strong>访问枚举的成员。</p><p>问题：我们把枚举成员作为了函数的实参，它的值是什么呢？<br>解释：通过将鼠标移入Direction.Up，可以看到枚举成员Up 的值为0。<br>注意：<strong>枚举成员是有值的</strong>，默认为：<strong>从0 开始自增的数值</strong>。<br>我们把，枚举成员的值为数字的枚举，称为：<strong>数字枚举</strong>。</p><p>也可以给枚举中的成员初始化值。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Down -&gt; 11,Left-&gt;12,Right-&gt;13</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123; <span class="title class_">Up</span> = <span class="number">10</span>, <span class="title class_">Down</span>, <span class="title class_">Left</span>, <span class="title class_">Right</span> &#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123; <span class="title class_">Up</span> = <span class="number">10</span>, <span class="title class_">Down</span> = <span class="number">4</span>, <span class="title class_">Left</span> = <span class="number">8</span>, <span class="title class_">Right</span> = <span class="number">16</span> &#125;</span><br></pre></td></tr></table></figure><p><strong>字符串枚举</strong>：枚举成员的值是字符串。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">  <span class="title class_">Up</span> = <span class="string">&#x27;UP&#x27;</span>,</span><br><span class="line">  <span class="title class_">Down</span> = <span class="string">&#x27;DOWN&#x27;</span>,</span><br><span class="line">  <span class="title class_">Left</span> = <span class="string">&#x27;LEFT&#x27;</span>,</span><br><span class="line">  <span class="title class_">Right</span> = <span class="string">&#x27;RIGHT&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：字符串枚举没有自增长行为，因此，字符串枚举的每个成员必须有初始值。</p><p>枚举是TS 为数不多的非JavaScript 类型级扩展（不仅仅是类型）的特性之一。<br>因为：其他类型仅仅被当做类型，而<strong>枚举不仅用作类型，还提供值</strong>（枚举成员都是有值的）。<br>也就是说，其他的类型会在编译为JS 代码时自动移除。但是，<strong>枚举类型会被编译为JS 代码</strong>！<br><img src="/2022/11/07/TypeScript/2022-11-08-17-20-25.png" alt="ts"><br>说明：枚举与前面讲到的字面量类型+联合类型组合的功能类似，都用来表示一组明确的可选值列表。<br>一般情况下，<strong>推荐使用字面量类型+联合类型组合的方式</strong>，因为相比枚举，这种方式更加直观、简洁、高效。</p><h3 id="any-类型"><a href="#any-类型" class="headerlink" title="any 类型"></a>any 类型</h3><p>原则：<strong>不推荐使用any</strong>！这会让TypeScript 变为“AnyScript”（失去TS 类型保护的优势）。<br>因为当值的类型为any 时，可以对该值进行任意操作，并且不会有代码提示。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="built_in">any</span> = &#123; <span class="attr">x</span>:<span class="number">0</span> &#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="property">bar</span> = <span class="number">100</span></span><br><span class="line"><span class="title function_">obj</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="attr">n</span>: <span class="built_in">number</span> = obj</span><br></pre></td></tr></table></figure><p>以上操作都不会有任何类型错误提示，即使可能存在错误！<br>尽可能的避免使用any 类型，除非临时使用any 来“避免”书写很长、很复杂的类型！<br>其他隐式具有any 类型的情况：</p><ol><li>声明变量不提供类型也不提供默认值</li><li>函数参数不加类型。</li></ol><p>注意：因为不推荐使用any，所以，这两种情况下都应该提供类型！</p><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>众所周知，JS 中提供了typeof 操作符，用来在JS 中获取数据的类型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&quot;Hello world&quot;</span>) <span class="comment">//打印 string</span></span><br></pre></td></tr></table></figure><p>实际上，<strong>TS 也提供了typeof 操作符</strong>：可以在类型上下文中引用变量或属性的类型（类型查询）。<br>使用场景：根据已有变量的值，获取该值的类型，来简化类型书写。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatPoint</span>(<span class="params">point: &#123; x: <span class="built_in">number</span>; y: <span class="built_in">number</span> &#125;</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简化书写</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">formatPoint</span>(<span class="params">point: <span class="keyword">typeof</span> p</span>) &#123;&#125;</span><br></pre></td></tr></table></figure><ol><li>使用typeof 操作符来获取变量p 的类型，结果与第一种（对象字面量形式的类型）相同。</li><li>typeof 出现在<strong>类型注解的位置</strong>（参数名称的冒号后面）所处的环境就在类型上下文（区别于JS 代码）。</li><li>注意：typeof 只能用来查询变量或属性的类型，无法查询其他形式的类型（比如，函数调用的类型）。<figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">ret</span>: <span class="keyword">typeof</span> <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)<span class="comment">//错误写法</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="TypeScript-高级类型"><a href="#TypeScript-高级类型" class="headerlink" title="TypeScript 高级类型"></a>TypeScript 高级类型</h2><h3 id="class-类"><a href="#class-类" class="headerlink" title="class 类"></a>class 类</h3><p>TypeScript 全面支持ES2015 中引入的 <code>class</code> 关键字，并为其添加了类型注解和其他语法（比如，可见性修饰符等）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br></pre></td></tr></table></figure><ol><li>根据TS 中的类型推论，可以知道Person 类的实例对象p 的类型是 <code>Person</code>。</li><li>TS 中的class，<strong>不仅提供了class 的语法功能，也作为一种类型存在</strong>。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  gender = <span class="string">&#x27;男&#x27;</span></span><br><span class="line">  <span class="comment">// gender: string = &#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>声明成员age，类型为number（没有初始值）。</li><li>声明成员gender，并设置初始值，此时，可省略类型注解（TS 类型推论为string 类型）。</li></ol><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">gender</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">age: <span class="built_in">number</span>, gender: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>成员初始化（比如，age: number）后，才可以通过this.age 来访问实例成员。</li><li>需要为构造函数指定类型注解，否则会被隐式推断为any；构造函数不需要返回值类型。</li></ol><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  x = <span class="number">1</span></span><br><span class="line">  y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">scale</span>(<span class="params">n: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> *= n</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> *= n</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法的类型注解（参数和返回值）与函数用法相同。</p><h4 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h4><p>类继承的两种方式：1 <code>extends</code>（继承父类） 2 <code>implements</code>（实现接口）。<br>说明：JS 中只有extends，而implements 是TS 提供的。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">move</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Moving along&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;汪！&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>通过 <code>extends</code> 关键字实现继承。</li><li>子类Dog 继承父类Animal，则Dog 的实例对象dog 就同时具有了父类Animal 和子类Dog 的所有属性和方法。</li></ol><h4 id="类成员可见性"><a href="#类成员可见性" class="headerlink" title="类成员可见性"></a>类成员可见性</h4><p>类成员可见性：可以使用TS 来<strong>控制class 的方法或属性对于class 外的代码是否可见</strong>。<br>可见性修饰符包括：1 public（公有的） 2 protected（受保护的） 3 private（私有的）。</p><ol><li><p><code>public</code>：表示<strong>公有的、公开的</strong>，<strong>公有成员可以被任何地方访问</strong>，默认可见性，所以，<strong>可以直接省略</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">move</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Moving along!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>protected</code>：表示<strong>受保护的</strong>，<strong>仅对其声明所在类和子类中（非实例对象）可见</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="comment">// 这个方法是受保护的</span></span><br><span class="line">  <span class="keyword">protected</span> <span class="title function_">move</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Moving along!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">move</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;旺旺！&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure></li><li><p><code>private</code>：表示<strong>私有的，只在当前类中可见</strong>，对<strong>实例对象以及子类也是不可见的</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">move</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Moving along!&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">walk</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">move</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="readonly"><a href="#readonly" class="headerlink" title="readonly"></a>readonly</h4><p>除了可见性修饰符之外，还有一个常见修饰符就是： <code>readonly</code>（只读修饰符）。<br>readonly：表示<strong>只读，用来防止在构造函数之外对属性进行赋值</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="comment">// 只读属性</span></span><br><span class="line">  <span class="comment">// 注意：只要是 readonly 来修饰的属性，必须手动提供明确的类型</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">18</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">age: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>使用 <code>readonly</code> 关键字修饰该属性是只读的，注意<strong>只能修饰属性不能修饰方法</strong>。</li><li>注意：属性age 后面的类型注解（比如，此处的number）如果不加，则age 的类型为18 （字面量类型）。</li><li><strong>接口或者{} 表示的对象类型，也可以使用readonly</strong>。</li></ol><h3 id="类型兼容性"><a href="#类型兼容性" class="headerlink" title="类型兼容性"></a>类型兼容性</h3><p>两种类型系统：1 Structural Type System（结构化类型系统） 2 Nominal Type System（标明类型系统）。<br><strong>TS 采用的是结构化类型系统</strong>，也叫做duck typing（鸭子类型），<strong>类型检查关注的是值所具有的形状</strong>。<br>也就是说，在结构类型系统中，如果两个对象具有相同的形状，则认为它们属于同一类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point2D</span> &#123;<span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>: <span class="title class_">Point</span> = <span class="keyword">new</span> <span class="title class_">Point2D</span>()</span><br></pre></td></tr></table></figure><ol><li>Point 和Point2D 是两个名称不同的类。</li><li>变量p 的类型被显示标注为Point 类型，但是，它的值却是Point2D 的实例，并且没有类型错误。</li><li>因为TS 是结构化类型系统，只检查Point 和Point2D 的结构是否相同（相同，都具有x 和y 两个属性，属性类型也相同）。</li><li>但是，如果在Nominal Type System 中（比如，C#、Java 等），它们是不同的类，类型无法兼容。</li></ol><p>注意：在结构化类型系统中，如果两个对象具有相同的形状，则认为它们属于同一类型，这种说法并不准确。<br>更准确的说法：对于对象类型来说，y 的成员至少与x 相同，则x 兼容y（<strong>成员多的可以赋值给少的</strong>）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point3D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>; <span class="attr">z</span>: <span class="built_in">number</span>; &#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">p</span>: <span class="title class_">Point</span> = <span class="keyword">new</span> <span class="title class_">Point3D</span>()</span><br></pre></td></tr></table></figure><ol><li>Point3D 的成员至少与Point 相同，则Point 兼容Point3D。</li><li>所以，成员多的Point3D 可以赋值给成员少的Point。</li></ol><h4 id="接口兼容性"><a href="#接口兼容性" class="headerlink" title="接口兼容性"></a>接口兼容性</h4><p>除了class 之外，TS 中的其他类型也存在相互兼容的情况，包括：1 接口兼容性2 函数兼容性等。<br>接口之间的兼容性，类似于class。并且，class 和interface 之间也可以兼容。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point2D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">p1</span>: <span class="title class_">Point</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p2</span>: <span class="title class_">Point2D</span> = p1</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point3D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; ;<span class="attr">y</span>: <span class="built_in">number</span>; <span class="attr">z</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">p3</span>: <span class="title class_">Point3D</span></span><br><span class="line">p2 = p3</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point4D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>; <span class="attr">z</span>: <span class="built_in">number</span>&#125;</span><br><span class="line"><span class="attr">p2</span>: <span class="title class_">Point2D</span> = <span class="keyword">new</span> <span class="title class_">Point4D</span>()</span><br></pre></td></tr></table></figure><h4 id="函数兼容性"><a href="#函数兼容性" class="headerlink" title="函数兼容性"></a>函数兼容性</h4><p>函数之间兼容性比较复杂，需要考虑：1 参数个数2 参数类型3 返回值类型。</p><ol><li><p><strong>参数个数</strong>，参数多的兼容参数少的（或者说，<strong>参数少的可以赋值给多的</strong>）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f1</span>: <span class="variable constant_">F1</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f2</span>: <span class="variable constant_">F2</span> =f1</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;&#125;)</span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><ol><li>参数少的可以赋值给参数多的，所以，f1 可以赋值给f2。</li><li>数组forEach 方法的第一个参数是回调函数，该示例中类型为：(value: string, index: number, array: string[]) =&gt; void。</li><li><strong>在JS 中省略用不到的函数参数实际上是很常见的，这样的使用方式，促成了TS 中函数类型之间的兼容性</strong>。</li><li>并且因为回调函数是有类型的，所以，TS 会自动推导出参数item、index、array 的类型。</li></ol></li><li><p><strong>参数类型</strong>，相同位置的参数类型要相同（原始类型）或兼容（对象类型）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">F1</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="function">(<span class="params">a: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f1</span>: <span class="variable constant_">F1</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f2</span>: <span class="variable constant_">F2</span> = f1</span><br></pre></td></tr></table></figure><p>函数类型F2 兼容函数类型F1，因为F1 和F2 的第一个参数类型相同。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>; &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point3D</span> &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>; <span class="attr">z</span>: <span class="built_in">number</span>; &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F2</span> = <span class="function">(<span class="params">p: Point2D</span>) =&gt;</span> <span class="built_in">void</span> <span class="comment">// 相当于有 2 个参数</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F3</span> = <span class="function">(<span class="params">p: Point3D</span>) =&gt;</span> <span class="built_in">void</span> <span class="comment">// 相当于有 3 个参数</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f2</span>: <span class="variable constant_">F2</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f3</span>: <span class="variable constant_">F3</span> = f2</span><br></pre></td></tr></table></figure><p><strong>将对象拆开，把每个属性看做一个个参数</strong>，则，参数少的（f2）可以赋值给参数多的（f3）。</p></li><li><p><strong>返回值类型</strong>，只关注返回值类型本身即可：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="variable constant_">F5</span> = <span class="function">() =&gt;</span> <span class="built_in">string</span></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F6</span> = <span class="function">() =&gt;</span> <span class="built_in">string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f5</span>: <span class="variable constant_">F5</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f6</span>: <span class="variable constant_">F6</span> = f5</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F7</span> = <span class="function">() =&gt;</span> &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="variable constant_">F8</span> = <span class="function">() =&gt;</span> &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">f7</span>: <span class="variable constant_">F7</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">f8</span>: <span class="variable constant_">F8</span></span><br><span class="line">f7 = f8</span><br></pre></td></tr></table></figure><ol><li>如果返回值类型是原始类型，此时两个类型要相同，比如，左侧类型F5 和F6。</li><li>如果<strong>返回值类型是对象类型</strong>，此时<strong>成员多的可以赋值给成员少的</strong>，比如，右侧类型F7 和F8。</li></ol></li></ol><h3 id="交叉类型"><a href="#交叉类型" class="headerlink" title="交叉类型"></a>交叉类型</h3><p>交叉类型（<code>&amp;</code>）：功能类似于接口继承（extends），<strong>用于组合多个类型为一个类型</strong>（常用于对象类型）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123; <span class="attr">name</span>: <span class="built_in">string</span> &#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Contact</span> &#123; <span class="attr">phone</span>: <span class="built_in">string</span> &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PersonDetail</span> = <span class="title class_">Person</span> &amp; <span class="title class_">Contact</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="title class_">PersonDetail</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">  <span class="attr">phone</span>: <span class="string">&#x27;133....&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用交叉类型后，新的类型PersonDetail 就<strong>同时具备</strong>了Person 和Contact 的所有属性类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PersonDetail</span> = &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">phone</span>: <span class="built_in">string</span> &#125;</span><br></pre></td></tr></table></figure><p>交叉类型（&amp;）和接口继承（extends）的对比：</p><ul><li>相同点：都可以实现对象类型的组合。</li><li>不同点：两种方式实现类型组合时，对于同名属性之间，<strong>处理类型冲突的方式不同</strong>。</li></ul><p><img src="/2022/11/07/TypeScript/2022-11-08-21-49-00.png" alt="交叉类型"><br>以上代码，接口继承会报错（类型不兼容）；交叉类型没有错误，可以简单的理解为:</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">fn</span>: <span class="function">(<span class="params">value: <span class="built_in">string</span> | <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">string</span></span><br></pre></td></tr></table></figure><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h4 id="泛型函数"><a href="#泛型函数" class="headerlink" title="泛型函数"></a>泛型函数</h4><p>泛型是可以在保证类型安全前提下，让函数等与多种类型一起工作，从而实现复用，常用于：函数、接口、class 中。</p><p>需求：创建一个id 函数，传入什么数据就返回该数据本身（也就是说，参数和返回值类型相同）。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">id</span>(<span class="params">value: <span class="built_in">number</span></span>):<span class="built_in">number</span> &#123;<span class="keyword">return</span> value &#125;</span><br></pre></td></tr></table></figure><p>比如，id(10) 调用以上函数就会直接返回10 本身。但是，该函数只接收数值类型，无法用于其他类型。<br>为了能让函数能够接受任意类型，可以将参数类型修改为any。但是，这样就失去了TS 的类型保护，类型不安全。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">id</span>(<span class="params">value: <span class="built_in">any</span></span>):<span class="built_in">any</span> &#123;<span class="keyword">return</span> value &#125;</span><br></pre></td></tr></table></figure><p><strong>泛型</strong>在<strong>保证类型安全</strong>（不丢失类型信息）的同时，可以<strong>让函数等与多种不同的类型一起工作</strong>，灵活可<strong>复用</strong>。<br>实际上，在C＃和Java 等编程语言中，泛型都是用来实现可复用组件功能的主要工具之一。</p><p>创建泛型函数：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> id&lt;<span class="title class_">Type</span>&gt;(<span class="attr">value</span>: <span class="title class_">Type</span>):<span class="title class_">Type</span> &#123; <span class="keyword">return</span>  value &#125;</span><br></pre></td></tr></table></figure><ol><li>语法：在函数名称的后面添加 <code>&lt;&gt;</code>（尖括号），尖括号中添加类型变量，比如此处的Type。</li><li><strong>类型变量</strong>Type，是一<strong>种特殊类型的变量，它处理类型</strong>而不是值。</li><li>该类型变量相当于一个类型容器，能够捕获用户提供的类型（具体是什么类型由用户调用该函数时指定）。</li><li>因为Type 是类型，因此可以将其作为函数参数和返回值的类型，表示参数和返回值具有相同的类型。</li><li>类型变量Type，可以是任意合法的变量名称。</li></ol><p>调用泛型函数：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = id&lt;<span class="built_in">number</span>&gt;(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">const</span> str = id&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;a&#x27;</span>)</span><br></pre></td></tr></table></figure><ol><li>语法：在函数名称的后面添加<code>&lt;&gt;</code>（尖括号），<strong>尖括号中指定具体的类型</strong>，比如，此处的number。</li><li>当传入类型number 后，这个类型就会被函数声明时指定的类型变量Type 捕获到。</li><li>此时，Type 的类型就是number，所以，函数id 参数和返回值的类型也都是number。</li></ol><p>这样，通过泛型就做到了让id 函数与多种不同的类型一起工作，实现了复用的同时保证了类型安全。</p><p>简化调用泛型函数：</p><p><img src="/2022/11/07/TypeScript/2022-11-08-22-57-41.png" alt="简化调用泛型函数"></p><ol><li>在调用泛型函数时，可以省略&lt;类型&gt; 来简化泛型函数的调用。</li><li>此时，TS 内部会采用一种叫做类型参数推断的机制，来根据传入的实参自动推断出类型变量Type 的类型。</li><li>比如，传入实参10，TS 会自动推断出变量num 的类型number，并作为Type 的类型。</li></ol><p>推荐：使用这种简化的方式调用泛型函数，使代码更短，更易于阅读。<br>说明：当编译器无法推断类型或者推断的类型不准确时，就需要显式地传入类型参数。</p><h4 id="泛型约束"><a href="#泛型约束" class="headerlink" title="泛型约束"></a>泛型约束</h4><p><strong>泛型约束</strong>：默认情况下，泛型函数的类型变量Type 可以代表多个类型，这导致无法访问任何属性。<br>比如，id(‘a’) 调用函数时获取参数的长度：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> id&lt;<span class="title class_">Type</span>&gt;(<span class="attr">value</span>: <span class="title class_">Type</span>):<span class="title class_">Type</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="property">length</span>)</span><br><span class="line">  <span class="keyword">return</span>  value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Type 可以代表任意类型，无法保证一定存在length 属性，比如number 类型就没有length。<br>此时，就需要为泛型添加约束来<strong>收缩类型</strong>（缩窄类型取值范围）。</p><p>添加泛型约束收缩类型，主要有以下两种方式：1 指定更加具体的类型2 添加约束。</p><ol><li><p>指定更加具体的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> id&lt;<span class="title class_">Type</span>&gt;(<span class="attr">value</span>: <span class="title class_">Type</span>[]): <span class="title class_">Type</span>[] &#123;</span><br><span class="line">  value.<span class="property">length</span></span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如，将类型修改为Type[]（Type 类型的数组），因为只要是数组就一定存在length 属性，因此就可以访问了。</p></li><li><p>添加约束</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ILength</span> &#123; <span class="attr">length</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">function</span> id&lt;<span class="title class_">Type</span> <span class="keyword">extends</span> <span class="title class_">ILength</span>&gt;(<span class="attr">value</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">  value.<span class="property">length</span></span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>创建描述约束的接口ILength，该接口要求提供length 属性。</li><li>通过 extends 关键字使用该接口，为泛型（类型变量）添加约束。</li><li>该约束表示：传入的类型必须具有length 属性。<br>注意：传入的实参（比如，数组）只要有length 属性即可，这也符合前面讲到的接口的类型兼容性。</li></ol></li></ol><p>泛型的类型变量可以有多个，并且类型变量之间还可以约束（比如，第二个类型变量受第一个类型变量约束）。<br>比如，创建一个函数来获取对象中属性的值：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> getProp&lt;<span class="title class_">Type</span>, <span class="title class_">Key</span> <span class="keyword">extends</span> keyof <span class="title class_">Type</span>&gt;(<span class="attr">obj</span>: <span class="title class_">Type</span>, <span class="attr">key</span>: <span class="title class_">Key</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>: <span class="string">&#x27;name&#x27;</span>,<span class="attr">age</span>: <span class="number">18</span>&#125;</span><br><span class="line"><span class="title function_">getProp</span>(person,<span class="string">&#x27;name&#x27;</span>)</span><br></pre></td></tr></table></figure><ol><li>添加了第二个类型变量Key，两个类型变量之间使用（<code>,</code>）逗号分隔。</li><li><code>keyof</code> 关键字<strong>接收一个对象类型，生成其键名称（可能是字符串或数字）的联合类型</strong>。</li><li>本示例中keyof Type 实际上获取的是 person 对象所有键的联合类型，也就是：’name’ | ‘age’。</li><li>类型变量Key 受Type 约束，可以理解为：Key 只能是Type 所有键中的任意一个，或者说只能访问对象中存在的属性。</li></ol><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><p><strong>泛型接口</strong>：接口也可以配合泛型来使用，以增加其灵活性，增强其复用性。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IdFunc</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="function">(<span class="params">value: Type</span>) =&gt;</span> <span class="title class_">Type</span></span><br><span class="line">  <span class="attr">ids</span>: <span class="function">() =&gt;</span> <span class="title class_">Type</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="title class_">IdFunc</span>&lt;<span class="built_in">number</span>&gt; = &#123;</span><br><span class="line">  <span class="title function_">id</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">ids</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>在接口名称的后面添加<code>&lt;类型变量&gt;</code>，那么，这个接口就变成了泛型接口。</li><li>接口的类型变量，对接口中所有其他成员可见，也就是接口中所有成员都可以使用类型变量。</li><li>使用泛型接口时，需要<strong>显式指定具体的类型</strong>（比如，此处的IdFunc\<number>）。</number></li><li>此时，id 方法的参数和返回值类型都是number；ids 方法的返回值类型是number[]。</li></ol><p>实际上，JS 中的数组在TS 中就是一个<strong>泛型接口</strong>。<br><img src="/2022/11/07/TypeScript/2022-11-08-22-38-09.png" alt="泛型"><br>解释：当我们在使用数组时，TS 会根据数组的不同类型，来自动将类型变量设置为相应的类型。<br>技巧：可以通过Ctrl + 鼠标左键（Mac：option + 鼠标左键）来查看具体的类型信息。</p><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><p><strong>泛型类</strong>：class 也可以配合泛型来使用。<br>比如，React 的class 组件的基类Component 就是泛型类，不同的组件有不同的props 和state。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IState</span> &#123; <span class="attr">count</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IProps</span> &#123; <span class="attr">maxLength</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InputCount</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">IProps</span>,<span class="title class_">IState</span>&gt;&#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="title class_">IState</span> = &#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;this.props.maxLength&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>React.Component 泛型类两个类型变量，分别指定props 和state 类型。</p><p>创建泛类型：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GenericNumber</span>&lt;<span class="title class_">NumType</span>&gt; &#123;</span><br><span class="line">  <span class="attr">defaultValue</span>: <span class="title class_">NumType</span></span><br><span class="line">  <span class="attr">add</span>: <span class="function">(<span class="params">x: NumType, y: NumType</span>) =&gt;</span> <span class="title class_">NumType</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>类似于泛型接口，在class 名称后面添加<code>&lt;类型变量&gt;</code>，这个类就变成了泛型类。</li><li>此处的add 方法，采用的是箭头函数形式的类型书写方式。</li></ol><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这种情况下，推荐明确指定 &lt;类型&gt;。因为 TS 无法推导出类型</span></span><br><span class="line"><span class="keyword">const</span> myNum = <span class="keyword">new</span> <span class="title class_">GenericNumber</span>() <span class="comment">//as GenericNumber&lt;number&gt;</span></span><br><span class="line">myNum.<span class="property">defaultValue</span> = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>类似于泛型接口，在创建class 实例时，在类名后面通过&lt;类型&gt; 来指定明确的类型。</p><h4 id="泛型工具类型"><a href="#泛型工具类型" class="headerlink" title="泛型工具类型"></a>泛型工具类型</h4><p><strong>泛型工具类型</strong>：TS 内置了一些常用的工具类型，来简化TS 中的一些常见操作。<br>说明：它们都是基于泛型实现的（泛型适用于多种类型，更加通用），并且是内置的，可以直接在代码中使用。<br>这些工具类型有很多，主要学习以下几个：</p><ol><li>Partial\<Type></Type></li><li>Readonly\<Type></Type></li><li>Pick<Type, keys></Type,></li><li>Record<Keys, type></Keys,></li></ol><div class="tabs" id="fanxing"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#fanxing-1">Partial</button></li><li class="tab"><button type="button" data-href="#fanxing-2">Readonly</button></li><li class="tab"><button type="button" data-href="#fanxing-3">Pick</button></li><li class="tab"><button type="button" data-href="#fanxing-4">Record</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="fanxing-1"><p>源码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>泛型工具类型- <code>Partial&lt;Type&gt;</code> <strong>用来构造（创建）一个类型，将Type 的所有属性全部变为可选。</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">children</span>: <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialProps</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Props</span>&gt;</span><br><span class="line"><span class="comment">//报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p1</span>: <span class="title class_">Props</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: [<span class="number">1</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不报错</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p2</span>: <span class="title class_">PartialProps</span> = &#123;</span><br><span class="line">  <span class="attr">children</span>: [<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>构造出来的新类型 PartialProps 结构和 Props 相同，但所有属性都变为可选的。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="fanxing-2"><p>源码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Readonly</span>&lt;T&gt; = &#123;</span><br><span class="line">    <span class="keyword">readonly</span> [P <span class="keyword">in</span> keyof T]: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>泛型工具类型- <code>Readonly&lt;Type&gt;</code> <strong>用来构造一个类型，将Type 的所有属性都设置为readonly（只读）</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">children</span>: <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReadonlyProps</span> = <span class="title class_">Readonly</span>&lt;<span class="title class_">Props</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p1</span>: <span class="title class_">ReadonlyProps</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  <span class="attr">children</span>: [<span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line">p1.<span class="property">id</span> = <span class="string">&#x27;2&#x27;</span> <span class="comment">//此行报错</span></span><br></pre></td></tr></table></figure><p>构造出来的新类型ReadonlyProps 结构和Props 相同，但所有属性都变为只读的。<br>当我们想重新给id 属性赋值时，就会报错：无法分配到”id” ，因为它是只读属性。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="fanxing-3"><p>源码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Pick</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T[P];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>泛型工具类型- <code>Pick&lt;Type, Keys&gt;</code> <strong>从Type 中选择一组属性来构造新类型</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">children</span>: <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PickProps</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Props</span>, <span class="string">&#x27;id&#x27;</span> | <span class="string">&#x27;title&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><ol><li>Pick 工具类型有两个类型变量：1 表示选择谁的属性2 表示选择哪几个属性。</li><li>其中第二个类型变量，如果只选择一个则只传入该属性名即可。</li><li><strong>第二个类型变量传入的属性只能是第一个类型变量中存在的属性</strong>。</li><li>构造出来的新类型PickProps，只有id 和title 两个属性类型。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="fanxing-4"><p>源码</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Record</span>&lt;K <span class="keyword">extends</span> keyof <span class="built_in">any</span>, T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> K]: T;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>泛型工具类型- <code>Record&lt;Keys,Type&gt;</code> <strong>构造一个对象类型，属性键为Keys，属性类型为Type</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">RecordObj</span> = <span class="title class_">Record</span>&lt;<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span> | <span class="string">&#x27;c&#x27;</span>, <span class="built_in">string</span>[]&gt;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="title class_">RecordObj</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: [<span class="string">&#x27;a&#x27;</span>],</span><br><span class="line">  <span class="attr">b</span>: [<span class="string">&#x27;b&#x27;</span>],</span><br><span class="line">  <span class="attr">c</span>: [<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Record 工具类型有两个类型变量：1 表示对象有哪些属性2 表示对象属性的类型。</li><li>构建的新对象类型RecordObj 表示：这个对象有三个属性分别为a/b/c，属性值的类型都是string[]。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="索引签名类型"><a href="#索引签名类型" class="headerlink" title="索引签名类型"></a>索引签名类型</h3><p>绝大多数情况下，我们都可以在使用对象前就确定对象的结构，并为对象添加准确的类型。<br>使用场景：<strong>当无法确定对象中有哪些属性</strong>（或者说对象中可以出现任意多个属性），此时，就用到索引<strong>签名类型</strong>了。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">AnyObject</span> &#123;</span><br><span class="line">  [<span class="attr">key</span>: <span class="built_in">string</span>]: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="title class_">AnyObject</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>使用<code>[key: string]</code>来约束该接口中允许出现的属性名称。表示只要是string 类型的属性名称，都可以出现在对象中。</li><li>这样，对象obj 中就可以出现任意多个属性（比如，a、b 等）。</li><li><code>key</code> <strong>只是一个占位符</strong>，可以换成任意合法的变量名称。</li><li>隐藏的前置知识：<strong>JS 中对象（{}）的键是string 类型的</strong>。</li></ol><p>在JS 中数组是一类特殊的对象，特殊在数组的键（索引）是数值类型。<br>并且，数组也可以出现任意多个元素。所以，在数组对应的泛型接口中，也用到了索引签名类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyArray</span>&lt;<span class="title class_">Type</span>&gt; &#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="title class_">Type</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr1</span>: <span class="title class_">MyArray</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br></pre></td></tr></table></figure><ol><li>MyArray 接口模拟原生的数组接口，并使用<code>[index: number]</code>来作为索引签名类型。</li><li>该索引签名类型表示：只要是number 类型的键（索引）都可以出现在数组中，或者说数组中可以有任意多个元素。</li><li>同时也符合数组索引是 number 类型这一前提。</li></ol><h3 id="映射类型"><a href="#映射类型" class="headerlink" title="映射类型"></a>映射类型</h3><p>映射类型：<strong>基于旧类型创建新类型（对象类型）</strong>，减少重复、提升开发效率。<br>比如，类型 PropKeys 有 x/y/z，另一个类型Type1 中也有x/y/z，并且 Type1 中 x/y/z 的类型相同：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PropKeys</span> = <span class="string">&#x27;x&#x27;</span> | <span class="string">&#x27;y&#x27;</span> | <span class="string">&#x27;z&#x27;</span> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Type1</span> = &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span>; <span class="attr">z</span>: <span class="built_in">number</span> &#125;</span><br></pre></td></tr></table></figure><p>这样书写没错，但 x/y/z 重复书写了两次。像这种情况，就可以使用映射类型来进行简化。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">PropKeys</span> = <span class="string">&#x27;x&#x27;</span> | <span class="string">&#x27;y&#x27;</span> | <span class="string">&#x27;z&#x27;</span> </span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Type2</span> = &#123; [<span class="title class_">Key</span> <span class="keyword">in</span> <span class="title class_">PropKeys</span>]: <span class="built_in">number</span> &#125;</span><br></pre></td></tr></table></figure><ol><li>映射类型是基于索引签名类型的，所以，该语法类似于索引签名类型，也使用了<code>[]</code>。</li><li><code>Key in PropKeys</code> 表示Key 可以是PropKeys 联合类型中的任意一个，类似于forin(let k in obj)。</li><li>使用映射类型创建的新对象类型Type2 和类型Type1 结构完全相同。</li><li>注意：<strong>映射类型只能在类型别名中使用，不能在接口中使用</strong>。</li></ol><p>映射类型除了根据联合类型创建新类型外，还可以根据对象类型来创建：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123; <span class="attr">a</span>: <span class="built_in">number</span>; <span class="attr">b</span>: <span class="built_in">string</span>; <span class="attr">c</span>: <span class="built_in">boolean</span> &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Type3</span> = &#123; [key <span class="keyword">in</span> keyof <span class="title class_">Props</span>]: <span class="built_in">number</span> &#125;</span><br></pre></td></tr></table></figure><ol><li>首先，先执行 <code>keyof Props</code> 获取到对象类型Props 中所有键的联合类型即，<code>&#39;a&#39; | &#39;b&#39; | &#39;c&#39;</code>。</li><li>然后，Key in … 就表示Key 可以是Props 中所有的键名称中的任意一个。</li></ol><p>实际上，<a href="#泛型工具类型">泛型工具类型</a>（比如，<code>Partial&lt;Type&gt;</code>）都是<strong>基于映射类型实现的</strong>：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = &#123;</span><br><span class="line">    [P <span class="keyword">in</span> keyof T]?: T[P];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123; <span class="attr">a</span>: <span class="built_in">number</span>; <span class="attr">b</span>: <span class="built_in">string</span>; <span class="attr">c</span>: <span class="built_in">boolean</span> &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialProps</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Props</span>&gt;</span><br></pre></td></tr></table></figure><ol><li><code>keyof T</code> 即 keyof Props 表示获取Props 的所有键，也就是：’a’ | ‘b’ | ‘c’。</li><li>在[] 后面添加<code>?</code>（问号），表示将这些属性变为可选的，以此来实现Partial 的功能。</li><li>冒号后面的<strong>T[P]表示获取T中每个键对应的类型</strong>。比如，如果是’a’ 则类型是number；如果是’b’ 则类型是string。</li><li>最终，新类型PartialProps 和旧类型Props 结构完全相同，只是让所有类型都变为可选了。</li></ol><p>刚刚用到的T[P] 语法，在TS 中叫做<strong>索引查询（访问）类型</strong>。<br>作用：<strong>用来查询属性的类型</strong>。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123; <span class="attr">a</span>: <span class="built_in">number</span>; <span class="attr">b</span>: <span class="built_in">string</span>; <span class="attr">c</span>: <span class="built_in">boolean</span> &#125;</span><br><span class="line"><span class="comment">//   type TypeA = number</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TypeA</span> = <span class="title class_">Props</span>[<span class="string">&#x27;a&#x27;</span>]</span><br></pre></td></tr></table></figure><p><code>Props[&#39;a&#39;]</code> 表示查询类型Props 中属性’a’ 对应的类型number。所以，TypeA 的类型为 number。<br>注意：<strong>[] 中的属性必须存在于被查询类型中</strong>，否则就会报错。</p><p>索引查询类型的其他使用方式：<strong>同时查询多个索引的类型</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123; <span class="attr">a</span>: <span class="built_in">number</span>; <span class="attr">b</span>: <span class="built_in">string</span>; <span class="attr">c</span>: <span class="built_in">boolean</span> &#125;</span><br><span class="line"><span class="comment">//使用字符串字面量的联合类型，获取属性a 和b 对应的类型，结果为： string | number</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TypeA</span> = <span class="title class_">Props</span>[<span class="string">&#x27;a&#x27;</span> | <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="comment">//使用keyof 操作符获取Props 中所有键对应的类型，结果为： string | number | boolean</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TypeB</span> = <span class="title class_">Props</span>[keyof <span class="title class_">Props</span>]</span><br></pre></td></tr></table></figure><h2 id="TypeScript-类型声明文件"><a href="#TypeScript-类型声明文件" class="headerlink" title="TypeScript 类型声明文件"></a>TypeScript 类型声明文件</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>今天几乎所有的JavaScript 应用都会引入许多第三方库来完成任务需求。<br>这些第三方库不管是否是用TS 编写的，最终都要编译成JS 代码，才能发布给开发者使用。<br>我们知道是TS 提供了类型，才有了代码提示和类型保护等机制。<br>但在项目开发中使用第三方库时，你会发现它们几乎都有相应的TS 类型，这些类型是怎么来的呢？类型声明文件<br><strong>类型声明文件：用来为已存在的JS 库提供类型信息</strong>。<br>这样在TS 项目中使用这些库时，就像用TS 一样，都会有代码提示、类型保护等机制了。</p><h3 id="TS-中的两种文件类型"><a href="#TS-中的两种文件类型" class="headerlink" title="TS 中的两种文件类型"></a>TS 中的两种文件类型</h3><p>TS 中有两种文件类型：1 <code>.ts</code> 文件2 <code>.d.ts</code> 文件。</p><ul><li><p>.ts 文件</p><ol><li>既包含类型信息又可执行代码。</li><li>可以被编译为.js 文件，然后，执行代码。</li><li>用途：编写程序代码的地方。</li></ol></li><li><p>.d.ts 文件</p><ol><li><strong>只包含类型信息</strong>的类型声明文件。</li><li>不会生成.js 文件，仅用于提供类型信息。</li><li>用途：为JS 提供类型信息。</li></ol></li></ul><p>总结：<strong>.ts 是implementation（代码实现文件）；.d.ts 是declaration（类型声明文件）。</strong><br>如果要为JS 库提供类型信息，要使用 <code>.d.ts</code> 文件。</p><h3 id="类型声明文件的使用说明"><a href="#类型声明文件的使用说明" class="headerlink" title="类型声明文件的使用说明"></a>类型声明文件的使用说明</h3><p>在使用TS 开发项目时，类型声明文件的使用包括以下两种方式：</p><ol><li>使用已有的类型声明文件</li><li>创建自己的类型声明文件</li></ol><p>学习顺序：<strong>先会用</strong>（别人的）<strong>再会写</strong>（自己的）。</p><h4 id="使用已有的类型声明文件"><a href="#使用已有的类型声明文件" class="headerlink" title="使用已有的类型声明文件"></a>使用已有的类型声明文件</h4><p>使用已有的类型声明文件：1. <strong>内置类型声明文件</strong>； 2. <strong>第三方库的类型声明文件</strong>。</p><h5 id="内置类型声明文件"><a href="#内置类型声明文件" class="headerlink" title="内置类型声明文件"></a>内置类型声明文件</h5><p>内置类型声明文件：<strong>TS 为JS 运行时可用的所有标准化内置API 都提供了声明文件</strong>。<br>比如，在使用数组时，数组所有方法都会有相应的代码提示以及类型信息：<br><img src="/2022/11/07/TypeScript/2022-11-09-14-38-59.png" alt="类型信息"><br>实际上这都是TS 提供的内置类型声明文件。<br>可以通过 <code>Ctrl + 鼠标左键</code>（Mac：option + 鼠标左键）来查看内置类型声明文件内容。<br>比如，查看forEach 方法的类型声明，在VSCode 中会自动跳转到 lib.es5.d.ts 类型声明文件中。<br>当然，像window、document 等BOM、DOM API 也都有相应的类型声明（lib.dom.d.ts）。</p><h5 id="第三方库的类型声明文件"><a href="#第三方库的类型声明文件" class="headerlink" title="第三方库的类型声明文件"></a>第三方库的类型声明文件</h5><p>第三方库的类型声明文件：目前，几乎所有常用的第三方库都有相应的类型声明文件。<br>第三方库的类型声明文件有两种存在形式： <strong>库自带类型声明文件</strong>和<strong>由DefinitelyTyped 提供</strong>。</p><ol><li><p>库自带类型声明文件<br><img src="/2022/11/07/TypeScript/2022-11-09-15-11-41.png" alt="axios"><br>这种情况下，正常导入该库，TS 就会自动加载库自己的类型声明文件，以提供该库的类型声明。</p></li><li><p>由DefinitelyTyped 提供。<br><a href="https://github.com/DefinitelyTyped/DefinitelyTyped/">DefinitelyTyped</a> 是一个github 仓库，用来提供高质量TypeScript 类型声明。可以通过npm/yarn 来下载该仓库提供的TS 类型声明包，这些包的名称格式为：<code>@types/*</code>。<br>比如，@types/react、@types/lodash 等。<br>说明：在实际项目开发时，如果你使用的第三方库没有自带的声明文件，VSCode 会给出明确的提示。<br><img src="/2022/11/07/TypeScript/2022-11-09-15-32-08.png" alt="@type"><br>解释：当安装<code>@types/*</code>类型声明包后，<strong>TS 也会自动加载该类声明包</strong>，以提供该库的类型声明。<br>补充：TS 官方文档提供了一个<a href="https://www.typescriptlang.org/dt/search?search=">页面</a>，可以来查询@types/* 库。</p></li></ol><h4 id="创建自己的类型声明文件"><a href="#创建自己的类型声明文件" class="headerlink" title="创建自己的类型声明文件"></a>创建自己的类型声明文件</h4><p>创建自己的类型声明文件：1. <strong>项目内共享类型</strong> 2. <strong>为已有JS 文件提供类型声明</strong>。</p><h5 id="项目内共享类型"><a href="#项目内共享类型" class="headerlink" title="项目内共享类型"></a>项目内共享类型</h5><p>项目内共享类型：如果多个 <code>.ts</code> 文件中都用到同一个类型，此时可以创建 <code>.d.ts</code> 文件提供该类型，<strong>实现类型共享</strong>。<br><figure class="highlight ts"><figcaption><span>a.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Props</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./index&#x27;</span></span><br><span class="line"><span class="comment">// type Props = &#123; x: number; y: number &#125;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p1</span>: <span class="title class_">Props</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight ts"><figcaption><span>b.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Props</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./index&#x27;</span></span><br><span class="line"><span class="comment">// type Props = &#123; x: number; y: number &#125;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">p2</span>: <span class="title class_">Props</span> = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">22</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><figure class="highlight ts"><figcaption><span>index.d.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123; <span class="attr">x</span>: <span class="built_in">number</span>; <span class="attr">y</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">Props</span> &#125;</span><br></pre></td></tr></table></figure><br>操作步骤：</p><ol><li>创建index<code>.d.ts</code> 类型声明文件。</li><li>创建需要共享的类型，并使用 <code>export</code> 导出（TS 中的类型也可以使用import/export 实现模块化功能）。</li><li>在需要使用共享类型的.ts 文件中，通过 <code>import</code> 导入即可（.d.ts 后缀导入时，直接省略）。</li></ol><h5 id="为已有JS-文件提供类型声明"><a href="#为已有JS-文件提供类型声明" class="headerlink" title="为已有JS 文件提供类型声明"></a>为已有JS 文件提供类型声明</h5><p>以下情况需要为已有JS 文件提供类型声明：</p><ol><li>在将JS 项目<a href="https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html">迁移</a>到TS 项目时，为了让已有的.js 文件有类型声明。</li><li>成为库作者，创建库给其他人使用。</li></ol><p>注意：<strong>类型声明文件的编写与模块化方式相关</strong>，不同的模块化方式有不同的写法。但由于历史原因，JS 模块化的发展经历过多种变化（AMD、CommonJS、UMD、ESModule 等），而TS 支持各种模块化形式的类型声明。这就导致，类型声明文件<a href="https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html">相关内容</a>又多又杂。</p><p>演示：基于最新的ESModule（import/export）来为已有.js 文件，创建类型声明文件。<br>开发环境准备：使用webpack 搭建，通过 <code>ts-loader</code> 处理.ts 文件。</p><h5 id="declare-关键字"><a href="#declare-关键字" class="headerlink" title="declare 关键字"></a>declare 关键字</h5><p>TS 项目中也可以使用.js 文件。<br>在导入.js 文件时，<strong>TS 会自动加载与.js 同名的.d.ts 文件</strong>，以提供类型声明。<br><code>declare</code> 关键字：用于类型声明，为其他地方（比如，.js 文件）已存在的变量声明类型，而不是创建一个新的变量。</p><ol><li>对于type、interface 等这些明确就是TS 类型的（只能在TS 中使用的），可以省略declare 关键字。</li><li>对于let、function 等具有双重含义（在JS、TS 中都能用），应该使用declare 关键字，明确指定此处用于类型声明。</li></ol><div class="tabs" id="declare"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#declare-1">utils.js</button></li><li class="tab"><button type="button" data-href="#declare-2">utils.d.ts</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="declare-1"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> count = <span class="number">10</span></span><br><span class="line"><span class="keyword">let</span> songName = <span class="string">&#x27;痴心绝对&#x27;</span></span><br><span class="line"><span class="keyword">let</span> position = &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">y</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">direction</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(direction)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">fomartPoint</span> = point =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前坐标：&#x27;</span>, point)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; count, songName, position, add, changeDirection, fomartPoint &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="declare-2"><p>为 utils.js 文件来提供类型声明</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">count</span>: <span class="built_in">number</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">songName</span>: <span class="built_in">string</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">let</span> <span class="attr">position</span>: <span class="title class_">Point</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">number</span></span>): <span class="built_in">number</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params"></span></span><br><span class="line"><span class="params">  direction: <span class="string">&#x27;up&#x27;</span> | <span class="string">&#x27;down&#x27;</span> | <span class="string">&#x27;left&#x27;</span> | <span class="string">&#x27;right&#x27;</span></span></span><br><span class="line"><span class="params"></span>): <span class="built_in">void</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FomartPoint</span> = <span class="function">(<span class="params">point: Point</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">const</span> <span class="attr">fomartPoint</span>: <span class="title class_">FomartPoint</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：类型提供好以后，需要使用 模块化方案 中提供的</span></span><br><span class="line"><span class="comment">//      模块化语法，来导出声明好的类型。然后，才能在</span></span><br><span class="line"><span class="comment">//      其他的 .ts 文件中使用</span></span><br><span class="line"><span class="keyword">export</span> &#123; count, songName, position, add, changeDirection, fomartPoint, <span class="title class_">Point</span> &#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="在React-中使用TypeScript"><a href="#在React-中使用TypeScript" class="headerlink" title="在React 中使用TypeScript"></a>在React 中使用TypeScript</h2><p>掌握 TS 中基础类型、高级类型的使用是不够啊的，如果要在前端项目开发中使用TS，还需要掌握React、Vue、Angular 等这些库或框架中提供的API 的类型，以及在TS 中是如何使用的。</p><p>接下来，我们以React 为例，来学习如何在React 项目中使用TS。包括以下内容：</p><ol><li><a href="#使用CRA创建支持TS的项目">使用 CRA 创建支持 TS 的项目</a></li><li><a href="#TS配置文件">TS 配置文件 <code>tsconfig.json</code></a></li><li><a href="#React中的常用类型">React 中的常用类型</a></li></ol><h3 id="使用CRA创建支持TS的项目"><a href="#使用CRA创建支持TS的项目" class="headerlink" title="使用CRA创建支持TS的项目"></a>使用CRA创建支持TS的项目</h3><p>React 脚手架工具create-react-app（简称：CRA）默认支持TypeScript。<br>创建支持TS 的项目命令：<code>npx create-react-app 项目名称--template</code> typescript。<br>当出现<code>Happy hacking!</code>，表示支持TS 的项目创建成功。</p><p>在已TS有项目中使用TS，请<a href="https://create-react-app.dev/docs/adding-typescript">参阅</a></p><p>相对于非TS 项目，目录结构主要由以下三个变化：</p><ol><li>项目根目录中增加了<code>tsconfig.json</code> 配置文件：指定 <strong>TS 的编译选项</strong>（比如，编译时是否移除注释）。</li><li>React 组件的文件扩展名变为：<code>*.tsx</code>。</li><li>src 目录中增加了<code>react-app-env.d.ts</code>：<strong>React 项目默认的类型声明文件</strong>。</li></ol><p><img src="/2022/11/07/TypeScript/2022-11-10-14-37-04.png" alt="对比"></p><h4 id="react-app-env-d-ts"><a href="#react-app-env-d-ts" class="headerlink" title="react-app-env.d.ts"></a>react-app-env.d.ts</h4><p>react-app-env.d.ts：<strong>React 项目默认的类型声明文件</strong>。<br><strong>三斜线指令</strong>：指定依赖的其他类型声明文件，types 表示依赖的类型声明文件包的名称。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;reference types=&quot;react-scripts&quot; /&gt;</span></span><br></pre></td></tr></table></figure><p>告诉TS 帮我加载 <code>react-scripts</code> 这个包提供的类型声明。<br>react-scripts 的类型声明文件包含了两部分类型：</p><ol><li>react、react-dom、node 的类型</li><li>图片、样式等模块的类型，以允许在代码中导入图片、SVG 等文件。</li></ol><p>TS 会自动加载该.d.ts 文件，以提供类型声明（通过修改tsconfig.json 中的include 配置来验证）。</p><h3 id="TS配置文件"><a href="#TS配置文件" class="headerlink" title="TS配置文件"></a>TS配置文件</h3><p><code>tsconfig.json</code>指定<strong>项目文件和项目编译所需的配置项</strong>。<br>注意：</p><ul><li>TS 的配置项非常多（100+），以 CRA 项目中的配置为例来学习。</li><li>所有的配置项都可以通过鼠标移入的方式，来查看配置项的解释说明。</li><li>其他的配置项用到时查<a href="https://www.typescriptlang.org/tsconfig/">tsconfig 文档</a>即可。</li></ul><details class="toggle"><summary class="toggle-button" style>CRA项目中tsconfig.json基本配置项</summary><div class="toggle-content"><p><strong>tsconfig 的解释说明</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 编译选项</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 生成代码的语言版本</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 指定要包含在编译中的 library</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;dom&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dom.iterable&quot;</span><span class="punctuation">,</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 允许 ts 编译器编译 js 文件</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 跳过声明文件的类型检查</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// es 模块 互操作，屏蔽 ESModule 和 CommonJS 之间的差异</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 允许通过 import x from &#x27;y&#x27; 即使模块没有显式指定 default 导出</span></span><br><span class="line">    <span class="attr">&quot;allowSyntheticDefaultImports&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 开启严格模式</span></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 对文件名称强制区分大小写</span></span><br><span class="line">    <span class="attr">&quot;forceConsistentCasingInFileNames&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 为 switch 语句启用错误报告</span></span><br><span class="line">    <span class="attr">&quot;noFallthroughCasesInSwitch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 生成代码的模块化标准</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esnext&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 模块解析（查找）策略</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 允许导入扩展名为.json的模块</span></span><br><span class="line">    <span class="attr">&quot;resolveJsonModule&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 是否将没有 import/export 的文件视为旧（全局而非模块化）脚本文件。</span></span><br><span class="line">    <span class="attr">&quot;isolatedModules&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 编译时不生成任何文件（只进行类型检查）</span></span><br><span class="line">    <span class="attr">&quot;noEmit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 指定将 JSX 编译成什么形式</span></span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;react-jsx&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 指定允许 ts 处理的目录</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></div></details><ol><li>tsconfig.json 文件所在目录为项目根目录（与package.json 同级）。</li><li>tsconfig.json 可以自动生成，命令：<code>tsc --init</code>。</li></ol><p>除了在tsconfig.json 文件中使用编译配置外，还可以通过命令行来使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc hello.ts --target es6</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>tsc 后<strong>带有输入文件</strong>时（比如，tsc hello.ts），将忽略tsconfig.json 文件。</li><li>tsc 后<strong>不带输入文件</strong>时（比如，tsc），才会启用tsconfig.json。</li></ol><p><strong>推荐使用tsconfig.json 配置文件。</strong></p><h3 id="React中的常用类型"><a href="#React中的常用类型" class="headerlink" title="React中的常用类型"></a>React中的常用类型</h3><p>前提说明：现在是基于class 组件来讲解React+TS 的使用（最新使用 React Hooks）。<br>在不使用TS 时，可以使用prop-types 库，为React 组件提供<a href="https://reactjs.org/docs/typechecking-with-proptypes.html">类型检查</a>。<br><strong>TS 项目中，推荐使用TypeScript 实现组件类型校验（代替PropTypes）。</strong><br>不管是React 还是Vue，只要是支持TS 的库，都提供了很多类型，来满足该库对类型的需求。<br>注意：</p><ol><li>React 项目是通过@types/react、@types/react-dom 类型声明包，来提供类型的。</li><li>这些包CRA 已帮我们安装好（react-app-env.d.ts），直接用即可。</li></ol><p>参考资料：<a href="https://reactjs.org/docs/static-type-checking.html">React文档-静态类型检查</a>、<a href="https://github.com/typescript-cheatsheets/react">React+TS备忘单</a>。</p><p>React 是<strong>组件化开发模式</strong>，React 开发主要任务就是写组件，两种组件：1.函数组件 2.class 组件。</p><h4 id="函数组件"><a href="#函数组件" class="headerlink" title="函数组件"></a>函数组件</h4><p>函数组件，主要包括以下内容：</p><ul><li>组件的类型</li><li>组件的属性（props）</li><li>组件属性的默认值（defaultProps）</li><li>事件绑定和事件对象</li></ul><p>函数组件的类型以及组件的属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> =&#123;<span class="attr">name</span>:<span class="built_in">string</span>; age?:<span class="built_in">number</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Hello</span>:<span class="variable constant_">FC</span>&lt;<span class="title class_">Props</span>&gt; = <span class="function">(<span class="params">&#123;name,age&#125;</span>) =&gt;</span> (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，我叫：&#123;name&#125;，我&#123;age&#125;岁了<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&lt;<span class="title class_">Hello</span> name=<span class="string">&quot;Huang&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>可以直接简化为（完全按照函数在TS 中的写法）：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Hello</span> = (<span class="params">&#123;name,age&#125;:Props</span>)=&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，我叫：&#123;name&#125;，我&#123;age&#125;岁了<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>函数组件属性的默认值（defaultProps）</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Hello</span> = (<span class="params">&#123;name,age&#125;:Props</span>)=&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，我叫：&#123;name&#125;，我&#123;age&#125;岁了<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Hello</span>.<span class="property">defaultProps</span>=&#123;</span><br><span class="line">  <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以直接简化为（完全按照函数在TS 中的写法）：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Hello</span> = (<span class="params">&#123;name,age =<span class="number">18</span> &#125;:Props</span>)=&gt; (</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，我叫：&#123;name&#125;，我&#123;age&#125;岁了<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>事件绑定和事件对象</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onClick=&#123;onClick&#125;&gt;点赞&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onClick</span> = (<span class="params"></span>)=&gt;&#123;&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onClick1</span> = (<span class="params">e:React.MouseEvent&lt;HTMLButtonElement&gt;</span>) =&gt;&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//再入，文本框</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">onChange</span>=(<span class="params">e:React.ChangeEvent&lt;HTMLInputElement&gt; </span>)=&gt;&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>);</span><br></pre></td></tr></table></figure><p>技巧：在JSX 中写事件处理程序（<code>e =&gt; &#123;&#125;</code>），然后，把鼠标放在e 上，利用TS 的<strong>类型推论</strong>来查看事件对象类型。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  鼠标放置查看类型</span></span><br><span class="line">&lt;input onChange = &#123;<span class="function"><span class="params">e</span>=&gt;</span>&#123;&#125;&#125; /&gt;</span><br></pre></td></tr></table></figure><h4 id="class组件"><a href="#class组件" class="headerlink" title="class组件"></a>class组件</h4><p>class 组件，主要包括以下内容：</p><ul><li>组件的类型、属性、事件</li><li>组件状态（state）</li></ul><p>class 组件的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">State</span>=&#123;<span class="attr">count</span>:<span class="built_in">number</span>&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span>=&#123;message?:<span class="built_in">string</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">c1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;&#125;              <span class="comment">// 无props state</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">c2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">Props</span>&gt;&#123;&#125;       <span class="comment">// 有props 无state</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">c3</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;&#123;&#125;,<span class="title class_">State</span>&gt;&#123;&#125;    <span class="comment">// 无props 有state</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">c4</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">Props</span>,<span class="title class_">State</span>&gt;&#123;&#125; <span class="comment">// 有props 有state</span></span><br></pre></td></tr></table></figure><p>class 组件的属性和属性默认值</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123;<span class="attr">name</span>: <span class="built_in">string</span>; age?:<span class="built_in">number</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Hello</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">Props</span>&gt;&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="attr">defaultProps</span>: <span class="title class_">Partial</span>&lt;<span class="title class_">Props</span>&gt; = &#123;</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;name,age&#125;=<span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，我叫：&#123;name&#125;，我&#123;age&#125;岁了<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简化</span></span><br><span class="line"><span class="keyword">const</span>&#123;name,age = <span class="number">18</span>&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br></pre></td></tr></table></figure><p>class 组件状态（state）和事件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">State</span> =&#123;<span class="attr">count</span>: <span class="built_in">number</span>&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Counter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;&#123;&#125;,<span class="title class_">State</span>&gt;&#123;</span><br><span class="line">  <span class="attr">state</span>:<span class="title class_">State</span>=&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">  onIncrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> +<span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="title function_">render</span>(): <span class="title class_">React</span>.<span class="property">ReactNode</span> &#123;</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;this.state.count&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.onIncrement&#125;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="TS案例"><a href="#TS案例" class="headerlink" title="TS案例"></a>TS案例</h2><h3 id="React-案例——todos"><a href="#React-案例——todos" class="headerlink" title="React 案例——todos"></a>React 案例——todos</h3><h4 id="要求文档"><a href="#要求文档" class="headerlink" title="要求文档"></a>要求文档</h4><details class="toggle"><summary class="toggle-button" style>todos案例要求文档</summary><div class="toggle-content"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># TS + React 实现 todos 案例</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 功能演示</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 展示任务列表</span><br><span class="line"><span class="bullet">2.</span> 添加任务</span><br><span class="line"></span><br><span class="line">父组件：App</span><br><span class="line">子组件：TodoAdd 、TodoList</span><br><span class="line"></span><br><span class="line"><span class="section">## 展示任务列表</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 思路</span></span><br><span class="line"></span><br><span class="line">使用<span class="code">`状态提升`</span>（为父组件提供状态，通过 props 传递给子组件）来实现 <span class="strong">**父→子**</span> 通讯。</span><br><span class="line"></span><br><span class="line"><span class="section">### 步骤</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 为父组件 App，提供状态（任务列表数据）和类型</span><br><span class="line"><span class="bullet">2.</span> 为子组件 TodoList 指定能够接收到的 props 类型</span><br><span class="line"><span class="bullet">3.</span> 将任务列表数据传递给 TodoList 组件</span><br><span class="line"></span><br><span class="line"><span class="section">### 优化</span></span><br><span class="line"></span><br><span class="line">使用类型声明文件，实现类型共享。</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 创建 todos.d.ts 文件</span><br><span class="line"><span class="bullet">2.</span> 将公共的类型移动到 todos.d.ts 文件中，并导出</span><br><span class="line"><span class="bullet">3.</span> 在用到该类型的组件（App、TodoList）中导入这些类型</span><br><span class="line"></span><br><span class="line"><span class="section">## 添加任务</span></span><br><span class="line"></span><br><span class="line"><span class="section">### 思路</span></span><br><span class="line"></span><br><span class="line">子组件获取到文本框的值，通过 <span class="strong">**子→父**</span> 通讯 将文本框的值传递给父组件。然后，在父组件中将任务添加到状态数据中。</span><br><span class="line"></span><br><span class="line"><span class="section">### 步骤</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 为子组件添加状态和属性及其类型：</span><br><span class="line"><span class="bullet">   -</span> 状态：文本框的值</span><br><span class="line"><span class="bullet">   -</span> 属性：回调函数，接收一个 string 类型的参数</span><br><span class="line"><span class="bullet">2.</span> 通过<span class="code">`受控组件`</span>方式获取到文本框的值</span><br><span class="line"><span class="bullet">3.</span> 在子组件文本框按下回车键时将数据传递给父组件</span><br><span class="line"><span class="bullet">4.</span> 父组件接收子组件传递过来的任务名称（文本框的值）</span><br><span class="line"><span class="bullet">5.</span> 将任务添加到父组件的状态数据中</span><br></pre></td></tr></table></figure></div></details><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><details class="toggle"><summary class="toggle-button" style>项目结构目录</summary><div class="toggle-content"><ul><li>项目根目录<ul><li>public</li><li>src<ul><li>components<ul><li>TodoAdd.tsx</li><li>TodoFooter.tsx</li><li>TodoList.tsx</li></ul></li><li>css<ul><li>todos-base.css</li><li>todos-index.css</li></ul></li><li>index.tsx</li><li>TodoApp.css</li><li>ToDoApp.tsx</li><li>todos.d.ts</li><li>其他文件</li></ul></li></ul></li></ul></div></details><h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><div class="tabs" id="todos"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#todos-1">index.tsx</button></li><li class="tab"><button type="button" data-href="#todos-2">ToDoApp.tsx</button></li><li class="tab"><button type="button" data-href="#todos-3">TodoAdd.tsx</button></li><li class="tab"><button type="button" data-href="#todos-4">TodoFooter.tsx</button></li><li class="tab"><button type="button" data-href="#todos-5">TodoList.tsx</button></li><li class="tab"><button type="button" data-href="#todos-6">todos.d.ts</button></li><li class="tab"><button type="button" data-href="#todos-7">ToDoApp.css</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="todos-1"><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactDOM</span> <span class="keyword">from</span> <span class="string">&#x27;react-dom/client&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ToDoApp</span> <span class="keyword">from</span> <span class="string">&#x27;./ToDoApp&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> reportWebVitals <span class="keyword">from</span> <span class="string">&#x27;./reportWebVitals&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="title class_">ReactDOM</span>.<span class="title function_">createRoot</span>(</span><br><span class="line">  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLElement</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">root.<span class="title function_">render</span>(</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ToDoApp</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">React.StrictMode</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title function_">reportWebVitals</span>();</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="todos-2"><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TodoAdd</span> <span class="keyword">from</span> <span class="string">&quot;./components/TodoAdd&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TodoFooter</span> <span class="keyword">from</span> <span class="string">&quot;./components/TodoFooter&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TodoList</span> <span class="keyword">from</span> <span class="string">&quot;./components/TodoList&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./ToDoApp.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span>&#123;<span class="title class_">TodoItem</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./todos&#x27;</span></span><br><span class="line"><span class="comment">//任务项的类型</span></span><br><span class="line"><span class="comment">// type TodoItem=&#123;</span></span><br><span class="line"><span class="comment">//     id: number</span></span><br><span class="line"><span class="comment">//     text :string</span></span><br><span class="line"><span class="comment">//     done: boolean</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//APP组件的状态类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Todos</span>=&#123;</span><br><span class="line">    <span class="attr">todos</span>: <span class="title class_">TodoItem</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">todos</span>:<span class="title class_">TodoItem</span>[] = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">text</span>:<span class="string">&#x27;吃饭&#x27;</span>,</span><br><span class="line">        <span class="attr">done</span>:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">id</span>:<span class="number">2</span>,</span><br><span class="line">        <span class="attr">text</span>:<span class="string">&#x27;休息&#x27;</span>,</span><br><span class="line">        <span class="attr">done</span>:<span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ToDoApp</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&lt;&#123;&#125;,<span class="title class_">Todos</span>&gt;&#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="title class_">Todos</span>=&#123;</span><br><span class="line">        todos</span><br><span class="line">    &#125;</span><br><span class="line">    addTodo=<span class="function">(<span class="params">text:<span class="built_in">string</span></span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// console.log(text);</span></span><br><span class="line">        <span class="keyword">const</span>&#123;todos&#125;=<span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">        <span class="keyword">const</span> id =todos.<span class="property">length</span>===<span class="number">0</span>?<span class="number">1</span>:todos[todos.<span class="property">length</span>-<span class="number">1</span>].<span class="property">id</span>+<span class="number">1</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">todos</span>:[...<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">todos</span>,</span><br><span class="line">                &#123;</span><br><span class="line">                    id,</span><br><span class="line">                    text,</span><br><span class="line">                    <span class="attr">done</span>:<span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;)       </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">&quot;todoapp&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;/* 添加任务 */&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">TodoAdd</span> <span class="attr">onAddToDo</span>=<span class="string">&#123;this.addTodo&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;toggle-all&quot;</span> <span class="attr">className</span>=<span class="string">&quot;toggle-all&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">htmlFor</span>=<span class="string">&quot;toggle-all&quot;</span>&gt;</span>Mark all as complete<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;/* 列表组件 */&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">TodoList</span> <span class="attr">list</span>=<span class="string">&#123;this.state.todos&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">              &#123;/* footer 组件 */&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">TodoFooter</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">          )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ToDoApp</span>;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="todos-3"><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="comment">//属性的类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span>=&#123;</span><br><span class="line">  <span class="title function_">onAddToDo</span>(<span class="attr">text</span>:<span class="built_in">string</span>):<span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//状态的类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">State</span>=&#123;</span><br><span class="line">  <span class="attr">text</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TodoAdd</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">Props</span>,<span class="title class_">State</span>&gt; &#123;</span><br><span class="line">  <span class="attr">state</span>:<span class="title class_">State</span>=&#123;</span><br><span class="line">    <span class="attr">text</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">  onChange= <span class="function">(<span class="params">e:React.ChangeEvent&lt;HTMLInputElement&gt;</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">      <span class="attr">text</span>:e.<span class="property">target</span>.<span class="property">value</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  onAdd=<span class="function">(<span class="params">e:React.KeyboardEvent&lt;HTMLInputElement&gt;</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//1.非空判断</span></span><br><span class="line">    <span class="keyword">const</span>&#123;text&#125;=<span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="comment">//去空格</span></span><br><span class="line">    <span class="keyword">if</span> (text.<span class="title function_">trim</span>()===<span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// console.log(e.keyCode)</span></span><br><span class="line">    <span class="comment">// console.log(e.code);</span></span><br><span class="line">    <span class="keyword">if</span>(e.<span class="property">code</span>===<span class="string">&#x27;Enter&#x27;</span>)&#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">props</span>.<span class="title function_">onAddToDo</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">text</span>)</span><br><span class="line">       <span class="comment">//2.清空文本框的值</span></span><br><span class="line">       <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">        <span class="attr">text</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">header</span> <span class="attr">className</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>todos<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">className</span>=<span class="string">&quot;new-todo&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">placeholder</span>=<span class="string">&quot;What needs to be done?&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">autoFocus</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">value</span>=<span class="string">&#123;this.state.text&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onChange</span>=<span class="string">&#123;this.onChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onKeyDown</span>=<span class="string">&#123;this.onAdd&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TodoAdd</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="todos-4"><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TodoFooter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">className</span>=<span class="string">&quot;footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;todo-count&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">strong</span>&gt;</span>0<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> item left</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;filters&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">className</span>=<span class="string">&quot;selected&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#/&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              All</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/active&quot;</span>&gt;</span>Active<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#/completed&quot;</span>&gt;</span>Completed<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;clear-completed&quot;</span>&gt;</span>Clear completed<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TodoFooter</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="todos-5"><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TodoItem</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../todos&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type TodoItem=&#123;</span></span><br><span class="line"><span class="comment">//     id: number</span></span><br><span class="line"><span class="comment">//     text :string</span></span><br><span class="line"><span class="comment">//     done: boolean</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span>&#123;</span><br><span class="line">    <span class="attr">list</span>: <span class="title class_">TodoItem</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TodoList</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">Props</span>&gt; &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">props</span>)</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&quot;todo-list&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;/* 编辑样式：editing  已完成样式：completed */&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;</span></span><br><span class="line"><span class="language-xml">            //map 遍历</span></span><br><span class="line"><span class="language-xml">            this.props.list.map(todo =&gt;&#123;</span></span><br><span class="line"><span class="language-xml">                return(</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;todo.id&#125;</span> <span class="attr">className</span>=<span class="string">&#123;todo.done</span> ? &#x27;<span class="attr">completed</span>&#x27; <span class="attr">:</span> &#x27;&#x27;&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;view&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">className</span>=<span class="string">&quot;toggle&quot;</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;todo.text&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&quot;destroy&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">className</span>=<span class="string">&quot;edit&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;Create a TodoMVC template&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                )</span></span><br><span class="line"><span class="language-xml">            &#125;)</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TodoList</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="todos-6"><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">TodoItem</span>=&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">number</span></span><br><span class="line">    text :<span class="built_in">string</span></span><br><span class="line">    <span class="attr">done</span>: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="todos-7"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">&#x27;./css/todos-base.css&#x27;</span>);</span><br><span class="line"><span class="keyword">@import</span> url(<span class="string">&#x27;./css/todos-index.css&#x27;</span>);</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="hide-block"><button type="button" class="hide-button" style>Code-Download    </button><div class="hide-content"><p><a href="/downloads/code/React-todos.zip">源码下载</a></p></div></div><h3 id="Project——Tic-Tac-Toe"><a href="#Project——Tic-Tac-Toe" class="headerlink" title="Project——Tic Tac Toe"></a>Project——Tic Tac Toe</h3><h4 id="Tic-Tac-Toe-演示"><a href="#Tic-Tac-Toe-演示" class="headerlink" title="Tic Tac Toe 演示"></a>Tic Tac Toe 演示</h4><p><a href="https://cmwlvip.github.io/game/TicTacToe/Tic-Tac-Toe.html">Tic Tac Toe</a></p><h4 id="Tic-Tac-Toe-实现思路"><a href="#Tic-Tac-Toe-实现思路" class="headerlink" title="Tic Tac Toe 实现思路"></a>Tic Tac Toe 实现思路</h4><details class="toggle"><summary class="toggle-button" style>游戏实现思路</summary><div class="toggle-content"><ul><li><p>单元格点击</p><ol><li>获取到所有元素的单元格列表</li><li>遍历单元格列表，给每一个单元格添加事件</li><li>给被点击的单元格添加类名 x</li></ol></li><li><p>切换玩家</p><ol><li>创建一个储存当前玩家的变量（currentPlayer），默认值为x</li><li>将添加单元格时写死的类名x，替换为变量</li><li>切换到另一个玩家：在添加类名（下棋完成一步）后，根据当前当前玩家，得到另一个玩家</li></ol></li><li><p>使用枚举修改当前玩家</p><ol><li>创建字符串枚举（Player），提供x和o两个成员</li><li>将成员X的值设置为：‘x’（类名）；将成员O的值设置为：‘o’（类名）</li><li>将变量（currentPlayer）的类型设置为Player枚举类型,默认值为Player.X</li><li>将所有用到x和o的地方全部用枚举成员代替</li></ol></li><li><p>判断平局</p><ol><li>创建变量（step），默认值为0</li><li>玩家下棋后让step加 1</li><li>判赢的代码后面，判断step是否等于9</li><li>如果等于9 说明是平局，不再执行后续代码</li></ol></li><li><p>展示获胜信息</p><ol><li>拿到相关的DOM元素</li><li>展示获胜信息面板（通过style属性）</li><li>展示获胜信息</li></ol></li><li><p>重新开始</p><ol><li>获取到重新开始按钮，并绑定事件</li><li>在点击事件中重置游戏数据</li><li>隐藏获胜信息，清空棋盘，移除单元格事件，重新给单元格绑定点击事件</li><li>重置下棋次数，重置默认玩家X，重置下棋提示 </li></ol></li></ul></div></details><h4 id="Tic-Tac-Toe-准备"><a href="#Tic-Tac-Toe-准备" class="headerlink" title="Tic Tac Toe 准备"></a>Tic Tac Toe 准备</h4><mark class="hl-label pink">项目html</mark> <figure class="highlight html"><figcaption><span>Tic&nbsp;Tac&nbsp;Toe.html</span><a href="/downloads/code/project/TicTacToe/Tic-Tac-Toe.html">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Tic Tac Toe<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 游戏面板（棋盘） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;bord&quot;</span><span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span><span class="attr">class</span>=<span class="string">&quot;cell&quot;</span><span class="attr">hover</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span><span class="attr">class</span>=<span class="string">&quot;cell&quot;</span><span class="attr">hover</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span><span class="attr">class</span>=<span class="string">&quot;cell&quot;</span><span class="attr">hover</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span><span class="attr">class</span>=<span class="string">&quot;cell&quot;</span><span class="attr">hover</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span><span class="attr">class</span>=<span class="string">&quot;cell&quot;</span><span class="attr">hover</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span><span class="attr">class</span>=<span class="string">&quot;cell&quot;</span><span class="attr">hover</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;row&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span><span class="attr">class</span>=<span class="string">&quot;cell last-row&quot;</span><span class="attr">hover</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span><span class="attr">class</span>=<span class="string">&quot;cell last-row&quot;</span><span class="attr">hover</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span><span class="attr">class</span>=<span class="string">&quot;cell last-row&quot;</span><span class="attr">hover</span>=<span class="string">&quot;x&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 游戏获取信息面板 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span> <span class="attr">class</span>=<span class="string">&quot;game-message&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;restart&quot;</span>&gt;</span>Restart 😜<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;winner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./Tic-Tac-Toe.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><mark class="hl-label pink">项目css</mark> <figure class="highlight css"><figcaption><span>Tic&nbsp;Tac&nbsp;Toe.css</span><a href="/downloads/code/project/TicTacToe/Tic-Tac-Toe.css">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>{</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span>{</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f9f2e7</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span>{</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*标题*/</span></span><br><span class="line"><span class="selector-tag">h1</span>{</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#477998</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*游戏内容容器*/</span></span><br><span class="line"><span class="selector-class">.container</span>{</span><br><span class="line">    <span class="comment">/* position: relative; */</span></span><br><span class="line">    <span class="attribute">width</span>: <span class="number">471px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">471px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#bord</span>{</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">471px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">471px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.row</span>{</span><br><span class="line">    <span class="attribute">display</span>: flex;<span class="comment">/*弹性布局 ，子元素的float clear vertical-align 将失效*/</span></span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.cell</span><span class="selector-class">.last-row</span>{</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">0</span>;</span><br><span class="line">} </span><br><span class="line"><span class="selector-class">.cell</span><span class="selector-pseudo">:last-child</span> {</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell</span>{</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">157px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">157px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">157px</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">6px</span> solid <span class="number">#546363</span>;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">6px</span> solid <span class="number">#546363</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">cursor</span> : pointer;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.no-hover</span> {</span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cell</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> {</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">attr</span>(hover);</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#747474fa</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.2</span>;<span class="comment">/*透明度 */</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.x</span><span class="selector-pseudo">::before</span>{</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;x&quot;</span>;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">21</span>, <span class="number">151</span>, <span class="number">238</span>);</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.o</span><span class="selector-pseudo">::before</span>{</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;o&quot;</span>;</span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">21</span>, <span class="number">238</span>, <span class="number">57</span>);</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.game-message</span> {</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">69</span>, <span class="number">133</span>, <span class="number">136</span>, <span class="number">0.4</span>);</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#winner</span> {</span><br><span class="line">    <span class="comment">/* font-family: sans-serif; */</span></span><br><span class="line">    <span class="attribute">color</span>: yellow;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="number">#ff0000</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-id">#restart</span> {</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">border-color</span>: <span class="number">#f9f2e7</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">2px</span> <span class="number">6px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.75</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#5682a1</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">120px</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure><h4 id="Tic-Tac-Toe——code"><a href="#Tic-Tac-Toe——code" class="headerlink" title="Tic Tac Toe——code"></a>Tic Tac Toe——code</h4><figure class="highlight ts"><figcaption><span>准备所需变量</span><a href="/downloads/code/project/TicTacToe/Tic-Tac-Toe.ts">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Player</span>{</span><br><span class="line">    X=<span class="string">&#x27;x&#x27;</span>,</span><br><span class="line">    O=<span class="string">&#x27;o&#x27;</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> cells=<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.cell&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cells)</span><br><span class="line"><span class="comment">//let gameBord=document.querySelector(&#x27;#bord&#x27;)</span></span><br><span class="line"><span class="comment">//console.log(gameBord)</span></span><br><span class="line"><span class="keyword">let</span>  hover = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;&#x27;</span>)<span class="comment">//hover 棋牌变换 X ，O  这样也能获取</span></span><br><span class="line"><span class="comment">// console.log(hover)</span></span><br><span class="line"><span class="keyword">let</span> message=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#message&#x27;</span>)<span class="keyword">as</span> <span class="title class_">HTMLDivElement</span></span><br><span class="line"><span class="keyword">let</span> winner=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#winner&#x27;</span>)<span class="keyword">as</span> <span class="title class_">HTMLParagraphElement</span></span><br><span class="line"><span class="keyword">let</span> restart=<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#restart&#x27;</span>)<span class="keyword">as</span> <span class="title class_">HTMLButtonElement</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">currentPlayer</span>:<span class="title class_">Player</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">step</span>:<span class="built_in">number</span></span><br><span class="line"><span class="keyword">let</span> winArry=[</span><br><span class="line">    [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>],[<span class="number">0</span>,<span class="number">3</span>,<span class="number">6</span>],[<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>],[<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>],[<span class="number">0</span>,<span class="number">4</span>,<span class="number">8</span>],[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>游戏主体</span><a href="/downloads/code/project/TicTacToe/Tic-Tac-Toe.ts">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">startGame</span>()</span><br><span class="line"><span class="comment">//重新开始</span></span><br><span class="line">restart.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,startGame)</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>开始函数</span><a href="/downloads/code/project/TicTacToe/Tic-Tac-Toe.ts">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">startGame</span>(<span class="params"></span>){</span><br><span class="line">    currentPlayer=<span class="title class_">Player</span>.<span class="property">X</span></span><br><span class="line">    step=<span class="number">0</span></span><br><span class="line">    message.<span class="property">style</span>.<span class="property">display</span>=<span class="string">&#x27;none&#x27;</span></span><br><span class="line">    cells.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>){</span><br><span class="line">    <span class="keyword">let</span> cell=item <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span></span><br><span class="line">    cell.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="title class_">Player</span>.<span class="property">X</span>,<span class="title class_">Player</span>.<span class="property">O</span>,<span class="string">&#x27;no-hover&#x27;</span>)</span><br><span class="line">    cell.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>,clickCell)</span><br><span class="line">    cell.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,clickCell,{<span class="attr">once</span>:<span class="literal">true</span>})</span><br><span class="line">    <span class="title function_">checkHover</span>()</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>点击函数</span><a href="/downloads/code/project/TicTacToe/Tic-Tac-Toe.ts">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clickCell</span>(<span class="params">event:MouseEvent</span>){</span><br><span class="line">    <span class="keyword">let</span> target=event.<span class="property">target</span> <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span> <span class="comment">//类型断言</span></span><br><span class="line">    target.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;no-hover&#x27;</span>,currentPlayer)<span class="comment">//元素将永远不会成为鼠标事件的target</span></span><br><span class="line">    <span class="comment">//调用判赢函数，判断是否获胜</span></span><br><span class="line">    <span class="keyword">let</span> isWin=<span class="title function_">checkWin</span>(currentPlayer)</span><br><span class="line">    <span class="keyword">if</span>(isWin)</span><br><span class="line">    {</span><br><span class="line">        message.<span class="property">style</span>.<span class="property">display</span>=<span class="string">&#x27;block&#x27;</span></span><br><span class="line">        winner.<span class="property">innerText</span>=currentPlayer+<span class="string">&#x27; won！！！&#x27;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前玩家获胜了&#x27;</span>,currentPlayer)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    step++</span><br><span class="line">    <span class="keyword">if</span>(step===<span class="number">9</span>)</span><br><span class="line">    {</span><br><span class="line">        message.<span class="property">style</span>.<span class="property">display</span>=<span class="string">&#x27;block&#x27;</span></span><br><span class="line">        winner.<span class="property">innerText</span>=<span class="string">&#x27;平局&#x27;</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;平局&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//切换玩家：根据当前当前玩家，得到另一个玩家</span></span><br><span class="line">    currentPlayer=currentPlayer===<span class="title class_">Player</span>.<span class="property">X</span>?<span class="title class_">Player</span>.<span class="property">O</span>:<span class="title class_">Player</span>.<span class="property">X</span></span><br><span class="line">    <span class="comment">//处理下一步提示</span></span><br><span class="line">    <span class="title function_">checkHover</span>()</span><br><span class="line">    <span class="comment">//gameBord.classList.remove(&#x27;x&#x27;,&#x27;o&#x27;)</span></span><br><span class="line">    <span class="comment">//gameBord.classList.add(currentPlayer) </span></span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>判赢函数</span><a href="/downloads/code/project/TicTacToe/Tic-Tac-Toe.ts">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkWin</span>(<span class="params">player:Player</span>):<span class="built_in">boolean</span>{</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        实现判赢函数</span></span><br><span class="line"><span class="comment">        1、使用some方法遍历数组，并使用some方法的返回值作为函数返回值</span></span><br><span class="line"><span class="comment">        2、在some方法的回调函数中，获取每种获胜情况对应的3 个单元格</span></span><br><span class="line"><span class="comment">        3、判断这三个单元格是否同时包含当前玩家类名</span></span><br><span class="line"><span class="comment">        4、如果包含，玩家获胜，返回true停止循环，</span></span><br><span class="line"><span class="comment">        否则继续下一次循环</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">let</span> isWin=winArry.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">item,idex</span>){</span><br><span class="line">            <span class="comment">// 获取每种获胜情况对应的3 个单元格</span></span><br><span class="line">            <span class="comment">// console.log(item)</span></span><br><span class="line">            <span class="comment">// let cell1=cells[item[0]]</span></span><br><span class="line">            <span class="comment">// let cell2=cells[item[1]]</span></span><br><span class="line">            <span class="comment">// let cell3=cells[item[2]]</span></span><br><span class="line">            <span class="comment">// console.log(cell1,cell2,cell3)</span></span><br><span class="line">            <span class="keyword">if</span>(</span><br><span class="line">                cells[item[<span class="number">0</span>]].<span class="property">classList</span>.<span class="title function_">contains</span>(player)&amp;&amp;</span><br><span class="line">                cells[item[<span class="number">1</span>]].<span class="property">classList</span>.<span class="title function_">contains</span>(player)&amp;&amp;</span><br><span class="line">                cells[item[<span class="number">2</span>]].<span class="property">classList</span>.<span class="title function_">contains</span>(player)</span><br><span class="line">            ){</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    })</span><br><span class="line">    <span class="keyword">return</span> isWin</span><br><span class="line">}</span><br></pre></td></tr></table></figure><figure class="highlight ts"><figcaption><span>（鼠标悬停）提示变更函数</span><a href="/downloads/code/project/TicTacToe/Tic-Tac-Toe.ts">view raw</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkHover</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="comment">// for (let i = 0; i &lt; hover.length; i++) {</span></span><br><span class="line">    <span class="comment">//     cells[i].setAttribute(&#x27;hover&#x27;, currentPlayer)</span></span><br><span class="line">    <span class="comment">// }</span></span><br><span class="line">    cells.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item,index</span>){</span><br><span class="line">        item.<span class="title function_">setAttribute</span>(<span class="string">&#x27;hover&#x27;</span>, currentPlayer)</span><br><span class="line">    })</span><br><span class="line">}</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Built-in Tag Plugins (Hexo内置标签外挂)</title>
      <link href="/2022/11/03/HexoTagPlugins/"/>
      <url>/2022/11/03/HexoTagPlugins/</url>
      
        <content type="html"><![CDATA[<p>Tag plugins are different from post tags. They are ported from Octopress and provide a useful way for you to quickly add specific content to your posts.</p><h2 id="标签外挂（Butterfly-Tag-Plugins）"><a href="#标签外挂（Butterfly-Tag-Plugins）" class="headerlink" title="标签外挂（Butterfly Tag Plugins）"></a>标签外挂（Butterfly Tag Plugins）</h2><div class="note info flat"><p>标签外挂是Hexo独有的功能，并不是标准的Markdown格式。</p><p>以下的写法，只适用于Butterfly主题，用在其它主题上不会有效果，甚至可能会报错。使用前请留意!</p></div><div class="note info warning flat"><p>标签外挂虽然能为主题带来一些额外的功能和UI方面的强化，但是，标签外挂也有明显的限制，使用时请留意。</p></div><h3 id="Note-Bootstrap-Callout"><a href="#Note-Bootstrap-Callout" class="headerlink" title="Note (Bootstrap Callout)"></a>Note (Bootstrap Callout)</h3><p>引导标注。</p><div class="tabs" id="note"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-1">通用设置</button></li><li class="tab"><button type="button" data-href="#note-2">用法一</button></li><li class="tab"><button type="button" data-href="#note-3">用法二（自定义icon）</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-1"><p>移植于next主题，并进行修改。</p><p>修改 <code>主题配置文件</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note tag style values:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout old alert style. Default.</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line">  <span class="comment">#  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line">  <span class="comment">#  - disabled  disable all CSS styles import of note tag.</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">simple</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line">  <span class="comment"># Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p><code>icons</code>和<code>light_bg_offset</code>只对方法一生效</p><p>Note 标签外挂有两种用法</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td><code>class</code></td><td>[可选]标识，不同的标识有不同的配色<br>(default / primary / success / info / warning / danger )</td></tr><tr><td><code>no-icon</code></td><td>[可选]不显示 icon</td></tr><tr><td><code>style</code></td><td>[可选]可以覆盖配置中的 style<br>(simple/modern/flat/disabled )</td></tr></tbody></table></div><p><strong>For example.</strong></p><div class="tabs" id="note-style"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-style-1">simple</button></li><li class="tab"><button type="button" data-href="#note-style-2">modern</button></li><li class="tab"><button type="button" data-href="#note-style-3">flat</button></li><li class="tab"><button type="button" data-href="#note-style-4">disabled</button></li><li class="tab"><button type="button" data-href="#note-style-5">no-icon</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-style-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;</span><br><span class="line">默认 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-style-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;</span><br><span class="line">默认 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-style-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;</span><br><span class="line">默认 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-style-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;</span><br><span class="line">默认 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-style-5"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;</span><br><span class="line">默认 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-3"><p><blockquote></blockquote></p><p></p><p>3.2.0 以上版本支</p><br>&lt;/blockquote&gt;<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p></p><div class="table-container"><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td><code>color</code></td><td>[可选]顔色<br>(default / blue / pink / red / purple / orange / green)</td></tr><tr><td><code>icon</code></td><td>[可选]可配置自定义 icon (只支持 <a href="http://www.fontawesome.com.cn/faicons/">fontawesome</a> 图标, 也可以配置 no-icon )</td></tr><tr><td><code>style</code></td><td>[可选] 可以覆盖配置中的 style<br>(simple/modern/flat/disabled)</td></tr></tbody></table></div><p><strong>For example.</strong></p><div class="tabs" id="note-style_color"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#note-style_color-1">simple</button></li><li class="tab"><button type="button" data-href="#note-style_color-2">modern</button></li><li class="tab"><button type="button" data-href="#note-style_color-3">flat</button></li><li class="tab"><button type="button" data-href="#note-style_color-4">disabled</button></li><li class="tab"><button type="button" data-href="#note-style_color-5">no-icon</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="note-style_color-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-style_color-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-style_color-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-style_color-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了….</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="note-style_color-5"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note blue no-icon %&#125;</span><br><span class="line">2021年快到了....</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note pink no-icon %&#125;</span><br><span class="line">小心开车 安全至上</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note red no-icon %&#125;</span><br><span class="line">这是三片呢？还是四片？</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note orange no-icon %&#125;</span><br><span class="line">你是刷 Visa 还是 UnionPay</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note purple no-icon %&#125;</span><br><span class="line">剪刀石头布</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% note green no-icon %&#125;</span><br><span class="line">前端最讨厌的浏览器</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了….</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Gallery相册图库"><a href="#Gallery相册图库" class="headerlink" title="Gallery相册图库"></a>Gallery相册图库</h3><blockquote><p>2.0.0以上提供</p></blockquote><p>一个图库集合。<br>写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;gallery-group-main&quot;&gt;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>options</th><th>description</th></tr></thead><tbody><tr><td><code>name</code></td><td>图库名字</td></tr><tr><td><code>description</code></td><td>图片描述</td></tr><tr><td><code>link</code></td><td>链接到对应相册的地址</td></tr><tr><td><code>img-url</code></td><td>图库封面的地址</td></tr></tbody></table></div><p>For example:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup &#x27;壁纸&#x27; &#x27;收藏的一些壁纸&#x27; &#x27;/Gallery/wallpaper&#x27; https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %&#125;</span><br><span class="line">&#123;% galleryGroup &#x27;漫威&#x27; &#x27;关于漫威的图片&#x27; &#x27;/Gallery/marvel&#x27; https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup &#x27;OH MY GIRL&#x27; &#x27;关于OH MY GIRL的图片&#x27; &#x27;/Gallery/ohmygirl&#x27; https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="https://pic1.imgdb.cn/item/6364a58416f2c2beb131f2c6.jpg" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">貂蝉</div>  <p>貂蝉壁纸</p>  <a href="/Gallery/%E8%B2%82%E8%9D%89"></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">壁纸</div>  <p>收藏的一些壁纸</p>  <a href="/Gallery/wallpaper"></a>  </figcaption>  </figure>    <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src="https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg" alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">OH MY GIRL</div>  <p>关于OH MY GIRL的图片</p>  <a href="/Gallery/ohmygirl"></a>  </figcaption>  </figure>  <!--   <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">漫威</div>  <p>关于漫威的图片</p>  <a href='/Gallery/marvel'></a>  </figcaption>  </figure>   --></div><h3 id="Gallery相册"><a href="#Gallery相册" class="headerlink" title="Gallery相册"></a>Gallery相册</h3><blockquote><p>2.0.0以上提供</p></blockquote><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。<br>The usage</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 图片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><p>For example</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt="1"><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt="2"><br><img src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg" alt="3"><br><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" alt="4"><br><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" alt="5"><br><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg" alt="6"><br><img src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg" alt="7"><br><img src="https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg" alt="8"></p>          </div><h3 id="tag-hide"><a href="#tag-hide" class="headerlink" title="tag-hide"></a>tag-hide</h3><blockquote><p>2.2.0以上提供</p></blockquote><div class="note warning flat"><p>请注意，tag-hide内的标签外挂content内都不建议有h1 - h6 等标题。因为Toc会把隐藏内容标题也显示出来，而且当滚动屏幕时，如果隐藏内容没有显示出来，会导致Toc的滚动出现异常。</p></div><p>如果你想把一些文字、内容隐藏起来，并提供按钮让用户点击显示。可以使用这个标签外挂。</p><div class="tabs" id="tag-hide"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#tag-hide-1">Inline</button></li><li class="tab"><button type="button" data-href="#tag-hide-2">Block</button></li><li class="tab"><button type="button" data-href="#tag-hide-3">Toggle</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="tag-hide-1"><p><code>inline</code> 在文本里面添加按钮隐藏内容，只限文字<br>( content不能包含英文逗号，可用<code>&amp;sbquo;</code>)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideInline content,display,bg,color %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td><code>content</code></td><td>文本内容</td></tr><tr><td><code>display</code></td><td>[可选]按钮显示的文字</td></tr><tr><td><code>bg</code></td><td>[可选]按钮的背景颜色</td></tr><tr><td><code>color</code></td><td>[可选]按钮的文字颜色</td></tr></tbody></table></div><p>For example</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">哪个英文字母最酷？ &#123;% hideInline 因为西装裤(C装酷),查看答案,#FF7242,#fff %&#125;</span><br><span class="line"></span><br><span class="line">门里站着一个人? &#123;% hideInline 闪 %&#125;</span><br></pre></td></tr></table></figure><p>哪个英文字母最酷？ <span class="hide-inline"><button type="button" class="hide-button" style="background-color: #FF7242;color: #fff">查看答案  </button><span class="hide-content">因为西装裤(C装酷)</span>&lt;/span&gt;</span></p><p>门里站着一个人? <span class="hide-inline"><button type="button" class="hide-button" style>Click  </button><span class="hide-content">闪</span>&lt;/span&gt;</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tag-hide-2"><p><code>block</code> 独立的block隐藏内容，可以隐藏很多内容，包括图片，代码块等等</p><p>( display 不能包含英文逗号，可用<code>&amp;sbquo;</code>)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td><code>content</code></td><td>文本内容</td></tr><tr><td><code>display</code></td><td>[可选]按钮显示的文字</td></tr><tr><td><code>bg</code></td><td>[可选]按钮的背景颜色</td></tr><tr><td><code>color</code></td><td>[可选]按钮的文字颜色</td></tr></tbody></table></div><p>For example</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">查看答案</span><br><span class="line">&#123;% hideBlock 查看答案 %&#125;</span><br><span class="line">傻子，怎么可能有答案</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><p>查看答案</p><div class="hide-block"><button type="button" class="hide-button" style>查看答案    </button><div class="hide-content"><p>傻子，怎么可能有答案</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="tag-hide-3"><blockquote><p>2.3.0以上支持</p></blockquote><p>如果你需要展示的内容太多，可以把它隐藏在收缩框里，需要时再把它展开。</p><p>( display 不能包含英文逗号，可用<code>&amp;sbquo;</code>)</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><p>For example</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideToggle Butterfly安装方法 %&#125;</span><br><span class="line">在你的博客根目录里</span><br><span class="line"></span><br><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line"></span><br><span class="line">如果想要安装比较新的dev分支，可以</span><br><span class="line"></span><br><span class="line">git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/Butterfly</span><br><span class="line"></span><br><span class="line">&#123;% endhideToggle %&#125;</span><br></pre></td></tr></table></figure><details class="toggle"><summary class="toggle-button" style>Butterfly安装方法</summary><div class="toggle-content"><p>在你的博客根目录里</p><p>git clone -b master <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/Butterfly</p><p>如果想要安装比较新的dev分支，可以</p><p>git clone -b dev <a href="https://github.com/jerryc127/hexo-theme-butterfly.git">https://github.com/jerryc127/hexo-theme-butterfly.git</a> themes/Butterfly</p></div></details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="mermaid"><a href="#mermaid" class="headerlink" title="mermaid"></a>mermaid</h3><p>使用mermaid标签可以绘制Flowchart（流程图）、Sequence diagram（时序图 ）、Class Diagram（类别图）、State Diagram（状态图）、Gantt（甘特图）和Pie Chart（圆形图），具体可以查看<a href="https://mermaid-js.github.io/mermaid/#/">mermaid文档</a><br>修改 <code>主题配置文件</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mermaid</span></span><br><span class="line"><span class="comment"># see https://github.com/mermaid-js/mermaid</span></span><br><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># built-in themes: default/forest/dark/neutral</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">dark</span></span><br></pre></td></tr></table></figure><p>The usage</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endmermaid %&#125;</span><br></pre></td></tr></table></figure><p>For example</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% mermaid %&#125;</span><br><span class="line">pie</span><br><span class="line"><span class="code">    title Key elements in Product X</span></span><br><span class="line"><span class="code">    &quot;Calcium&quot; : 42.96</span></span><br><span class="line"><span class="code">    &quot;Potassium&quot; : 50.05</span></span><br><span class="line"><span class="code">    &quot;Magnesium&quot; : 10.01</span></span><br><span class="line"><span class="code">    &quot;Iron&quot; :  5</span></span><br><span class="line"><span class="code">&#123;% endmermaid %&#125;</span></span><br></pre></td></tr></table></figure><div class="mermaid-wrap"><pre class="mermaid-src" hidden>  pie    title Key elements in Product X    &quot;Calcium&quot; : 42.96    &quot;Potassium&quot; : 50.05    &quot;Magnesium&quot; : 10.01    &quot;Iron&quot; :  5  </pre></div><h3 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h3><p>移植于next主题</p><p>The usage</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line">Unique name   : Unique name of tabs block tag without comma.</span><br><span class="line"><span class="code">                Will be used in #id&#x27;s as prefix for each tab with their index numbers.</span></span><br><span class="line"><span class="code">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.</span></span><br><span class="line"><span class="code">                Only for current url of post/page must be unique!</span></span><br><span class="line"><span class="code">[index]       : Index number of active tab.</span></span><br><span class="line"><span class="code">                If not specified, first tab (1) will be selected.</span></span><br><span class="line"><span class="code">                If index is -1, no tab will be selected. It&#x27;s will be something like spoiler.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code">[Tab caption] : Caption of current tab.</span></span><br><span class="line"><span class="code">                If not caption specified, unique name with tab index suffix will be used as caption of tab.</span></span><br><span class="line"><span class="code">                If not caption specified, but specified icon, caption will empty.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code">[@icon]       : FontAwesome icon name (full-name, look like &#x27;fas fa-font&#x27;)</span></span><br><span class="line"><span class="code">                Can be specified with or without space; e.g. &#x27;Tab caption @icon&#x27; similar to &#x27;Tab caption@icon&#x27;.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td><code>Unique name</code></td><td>不带逗号且唯一名称的 Tabs block。<br>将在#id中用作每个 Tab 索引号的前缀。<br>如果名称中有空格，对于生成#id所有空格都将替换为短划线。<br>仅对于当前 post/page 的网址必须是唯一的！</td></tr><tr><td><code>index</code></td><td>活动 Tab 的索引号。<br>如果未指定，将选择第1个 Tab。<br>如果索引为 -1，则不会选择任何选项卡。这将是类似剧透的东西。<br>[可选参数]</td></tr><tr><td><code>Tab caption</code></td><td>当前 Tab 的标题。<br>如果未指定标题，则<code>Unique name</code> 和索引作为后缀 将是 Tab 的标题。<br>[可选参数]</td></tr><tr><td><code>@icon</code></td><td>FontAwesome 图标名称  (全名, look like ‘fas fa-font’) <br>可以指定带或不带空格；e.g. ‘Tab caption @icon’ similar to ‘Tab caption@icon’.<br>更多图标请参考 <a href="http://www.fontawesome.com.cn/faicons/">Font Awesome 中文网</a><br>[可选参数]</td></tr></tbody></table></div><blockquote><p>Demo 1-预设选择第一个</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>Demo 2-预设选择tabs</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>Demo 3 - 没有预设值</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab。</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字。</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字 + icon。</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><blockquote><p>Demo 5-Tab nest tab<br><div class="tabs" id="for-example"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#for-example-1">出师表</button></li><li class="tab"><button type="button" data-href="#for-example-2">图库</button></li><li class="tab"><button type="button" data-href="#for-example-3">李白</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="for-example-1"><p>臣亮言：先帝创业未半而中道崩殂，今天下三分，益州疲弊，此诚危急存亡之秋也。然侍衞之臣不懈于内，忠志之士忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气，不宜妄自菲薄，引喻失义，以塞忠谏之路也。<br>宫中府中，俱为一体；陟罚臧否，不宜异同：若有作奸犯科及为忠善者，宜付有司论其刑赏，以昭陛下平明之理；不宜偏私，使内外异法也。<br>侍中、侍郎郭攸之、费祎、董允等，此皆良实，志虑忠纯，是以先帝简拔以遗陛下：愚以为宫中之事，事无大小，悉以谘之，然后施行，必能裨补阙漏，有所广益。<br>将军向宠，性行淑均，晓畅军事，试用于昔日，先帝称之曰“能”，是以众议举宠为督：愚以为营中之事，悉以谘之，必能使行阵和睦，优劣得所。<br>亲贤臣，远小人，此先汉所以兴隆也；亲小人，远贤臣，此后汉所以倾颓也。先帝在时，每与臣论此事，未嘗不叹息痛恨于桓、灵也。侍中、尚书、长史、参军，此悉贞良死节之臣，愿陛下亲之、信之，则汉室之隆，可计日而待也。<br>臣本布衣，躬耕于南阳，苟全性命于乱世，不求闻达于诸侯。先帝不以臣卑鄙，猥自枉屈，三顾臣于草庐之中，谘臣以当世之事，由是感激，遂许先帝以驱驰。后值倾覆，受任于败军之际，奉命于危难之间：尔来二十有一年矣。<br>先帝知臣谨慎，故临崩寄臣以大事也。受命以来，夙夜忧叹，恐託付不效，以伤先帝之明；故五月渡泸，深入不毛。今南方已定，兵甲已足，当奖率三军，北定中原，庶竭驽钝，攘除奸兇，兴复汉室，还于旧都。此臣所以报先帝而忠陛下之职分也。至于斟酌损益，进尽忠言，则攸之、祎、允之任也。<br>愿陛下託臣以讨贼兴复之效，不效，则治臣之罪，以告先帝之灵。若无兴德之言，则责攸之、祎、允等之慢，以彰其咎；陛下亦宜自谋，以谘诹善道，察纳雅言，深追先帝遗诏。臣不胜受恩感激。<br>今当远离，临表涕零，不知所言。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="for-example-2"><div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt="1"><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt="2"><br><img src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg" alt="3"><br><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" alt="4"><br><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" alt="5"><br><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg" alt="6"><br><img src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg" alt="7"><br><img src="https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg" alt="8"></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="for-example-3"><p>李白（701年5月19日－762年11月30日），字太白，号青莲居士，中国唐朝诗人，自言祖籍陇西成纪（今甘肃省天水市秦安县），先世西凉武昭王李暠之后，与李唐皇室同宗。幼时内迁，寄籍剑南道绵州（今四川省江油市青莲镇）。另外，郭沫若研究认为李白出生于吉尔吉斯碎叶河上的碎叶城，属唐安西都护府（今楚河州托克马克市），该説有一定影响。有「诗仙」、「诗侠」、「酒仙」、「谪仙人」等称唿，活跃于盛唐，为杰出的浪漫主义诗人。与杜甫合称「李杜」。被贺知章惊唿为「天上谪仙」。</p><p><div class="tabs" id="李白"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#李白-1">行路难</button></li><li class="tab"><button type="button" data-href="#李白-2">将进酒</button></li><li class="tab"><button type="button" data-href="#李白-3">清平调</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="李白-1"><p>金樽清酒斗十千，玉盘珍羞值万钱。<br>停杯投箸不能食，拔剑四顾心茫然。<br>欲渡黄河冰塞川，将登太行雪暗天。<br>閒来垂钓碧溪上，忽复乘舟梦日边。<br>行路难，行路难，多歧路，今安在？<br>长风破浪会有时，直挂云帆济沧海。<br>大道如青天，我独不得出。<br>羞逐长安社中儿，赤鸡白狗赌梨慄。<br>弹剑作歌奏苦声，曳裾王门不称情。<br>淮阴市井笑韩信，汉朝公卿忌贾生。<br>君不见昔时燕家重郭隗，拥篲折节无嫌猜。<br>剧辛乐毅感恩分，输肝剖胆效英才。<br>昭王白骨萦蔓草，谁人更扫黄金台？<br>行路难，归去来！<br>有耳莫洗颍川水，有口莫食首阳蕨。<br>含光混世贵无名，何用孤高比云月？<br>吾观自古贤达人，功成不退皆殒身。<br>子胥既弃吴江上，屈原终投湘水滨。<br>陆机雄才岂自保，李斯税驾苦不早。<br>华亭鹤唳讵可闻，上蔡苍鹰何足道。<br>君不见吴中张翰称达生，秋风忽忆江东行。<br>且乐生前一杯酒，何须身后千载名！</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="李白-2"><p>君不见，黄河之水天上来，<br>奔流到海不复回？<br>君不见，高堂明镜悲白髮，<br>朝如青丝暮成雪？<br>人生得意须尽欢，<br>莫使金樽空对月。<br>天生我材必有用，<br>千金散尽还复来。<br>烹羊宰牛且为乐，<br>会须一饮三百杯。<br>岑夫子，丹丘生，<br>将进酒，君莫停。<br>与君歌一曲，<br>请君为我侧耳听：<br>钟鼓馔玉不足贵，<br>但愿长醉不愿醒。<br>古来圣贤皆寂寞，<br>惟有饮者留其名。<br>陈王昔时宴平乐，<br>斗酒十千恣欢嚯。<br>主人何为言小钱？<br>径须沽取对君酌。<br>五花马，千金裘。<br>唿儿将出换美酒，<br>与尔同销万古愁。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="李白-3"><p>《清平调词三首》是唐代大诗人李白的组诗作品，共三首七言乐府诗。第一首从空间角度写，以牡丹花比杨贵妃的美艳；第二首从时间角度写，表现杨贵妃的受宠幸；第三首总承一、二两首，把牡丹和杨贵妃与君王糅合，融为一体。全诗构思精巧，辞藻艳丽，将花与人浑融在一起写，描绘出人花交映、迷离恍惚的景象，显示了诗人高超的艺术功力。</p></div></div></div></p><p></p><p><div class="tabs" id="清平调"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#清平调-1">清平调（一）</button></li><li class="tab"><button type="button" data-href="#清平调-2">清平调（二）</button></li><li class="tab"><button type="button" data-href="#清平调-3">清平调（三）</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="清平调-1"><p>云想衣裳花想容，春风拂槛露华浓；<br>若非羣玉山头见，会向瑶台月下逢。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button>&lt;/div&gt;<div class="tab-item-content" id="清平调-2"><p>一枝红艳露凝香，云雨巫山空断肠。<br>借问汉宫谁得似？可怜飞燕倚新粧。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="清平调-3"><p>名花倾国两相欢，常得君王带笑看。<br>解识春风无限恨，沉香亨北倚阑千。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div>&lt;/div&gt;&lt;/div&gt;<br>&lt;/p&gt;<button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button>&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;<br></div></div></div></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div></p></blockquote><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><blockquote><p>3.0以上适用</p></blockquote><p>The usage</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td><code>url</code></td><td>链接</td></tr><tr><td><code>text</code></td><td>按钮文字</td></tr><tr><td><code>icon</code></td><td>[可选]图标</td></tr><tr><td><code>color</code></td><td>[可选]改变按钮背景顔色(默认style时);改变按钮字体和边框顔色(style:outline时) default/blue/pink/red/purple/orange/green</td></tr><tr><td><code>style</code></td><td>[可选]按钮样式 实心(default) outline/留空</td></tr><tr><td><code>layout</code></td><td>[可选]按钮佈局 line(default) block/留空</td></tr><tr><td><code>position</code></td><td>[可选]按钮位置 前提：(layout:block) left(default) center/right/留空</td></tr><tr><td><code>size</code></td><td>[可选]按钮大小 larger/留空</td></tr></tbody></table></div><p>For example</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline %&#125;</span><br><span class="line">This is my website, click the button &#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,larger %&#125;</span><br></pre></td></tr></table></figure><p>This is my website, click the button <a class="btn-beautify " href="https://butterfly.js.org/" title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify " href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify outline" href="https://butterfly.js.org/" title="Butterfly"><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify outline" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><br>This is my website, click the button <a class="btn-beautify larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,block %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,block center larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,block right outline larger %&#125;</span><br></pre></td></tr></table></figure><a class="btn-beautify block" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify block center larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify block right outline larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><p><strong>more than one button in center.</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,green larger %&#125;</span><br></pre></td></tr></table></figure><a class="btn-beautify larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify blue larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify pink larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify red larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify purple larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify orange larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify green larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-center&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline blue larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline pink larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline red larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline purple larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline orange larger %&#125;</span><br><span class="line">&#123;% btn &#x27;https://butterfly.js.org/&#x27;,Butterfly,far fa-hand-point-right,outline green larger %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><div class="btn-center"><a class="btn-beautify outline larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline blue larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline pink larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline red larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline purple larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline orange larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a><a class="btn-beautify outline green larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></div><h3 id="inlineImg"><a href="#inlineImg" class="headerlink" title="inlineImg"></a>inlineImg</h3><p>主题中的图片都是默认以<code>块级元素</code>显示，如果你想以<code>内联元素</code>显示，可以使用这个标签外挂。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineImg [src] [height] %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td><code>src</code></td><td>图片链接</td></tr><tr><td><code>height</code></td><td>[可选]图片高度限制</td></tr></tbody></table></div><p>For example</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">你看我长得漂亮不</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://i.loli.net/2021/03/19/2P6ivUGsdaEXSFI.png</span>)</span><br><span class="line"></span><br><span class="line">我觉得很漂亮 &#123;% inlineImg https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png 150px %&#125;</span><br></pre></td></tr></table></figure><p>你看我长得漂亮不</p><p><img src="https://i.loli.net/2021/03/19/2P6ivUGsdaEXSFI.png" alt="pic"></p><p>我觉得很漂亮 <img class="inline-img" src="https://i.loli.net/2021/03/19/5M4jUB3ynq7ePgw.png" style="height:150px"></p><h3 id="label"><a href="#label" class="headerlink" title="label"></a>label</h3><blockquote><p>3.7.5 及以上版本适用</p></blockquote><p>高亮所需的文字</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label text color %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td><code>text</code></td><td>文字</td></tr><tr><td><code>color</code></td><td>[可选]背景颜色<br> default/blue/pink/red/purple/orange/green</td></tr></tbody></table></div><p>For example</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">臣亮言：&#123;% label 先帝 %&#125;创业未半，而&#123;% label 中道崩殂 blue %&#125;。今天下三分，&#123;% label 益州疲敝 pink %&#125;，此诚&#123;% label 危急存亡之秋 red %&#125;也！然侍衞之臣，不懈于内；&#123;% label 忠志之士 purple %&#125;，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。</span><br><span class="line">宫中、府中，俱为一体；陟罚臧否，不宜异同。若有&#123;% label 作奸 orange %&#125;、&#123;% label 犯科 green %&#125;，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</span><br></pre></td></tr></table></figure><p>臣亮言：<mark class="hl-label default">先帝</mark> 创业未半，而<mark class="hl-label blue">中道崩殂</mark> 。今天下三分，<mark class="hl-label pink">益州疲敝</mark> ，此诚<mark class="hl-label red">危急存亡之秋</mark> 也！然侍衞之臣，不懈于内；<mark class="hl-label purple">忠志之士</mark> ，忘身于外者，盖追先帝之殊遇，欲报之于陛下也。诚宜开张圣听，以光先帝遗德，恢弘志士之气；不宜妄自菲薄，引喻失义，以塞忠谏之路也。</p><p>宫中、府中，俱为一体；陟罚臧否，不宜异同。若有<mark class="hl-label orange">作奸</mark> 、<mark class="hl-label green">犯科</mark> ，及为忠善者，宜付有司，论其刑赏，以昭陛下平明之治；不宜偏私，使内外异法也。</p><h3 id="timeline"><a href="#timeline" class="headerlink" title="timeline"></a>timeline</h3><blockquote><p>4.0.0 以上支持</p></blockquote><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline title,color %&#125;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline title --&gt;</span><br><span class="line">xxxxx</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td><code>title</code></td><td>标题/时间线</td></tr><tr><td><code>color</code></td><td>timeline 颜色<br>default(留空) / blue / pink / red / purple / orange / green</td></tr></tbody></table></div><p>For example</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022 %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline undefined"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2022</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>01-02</p></div></div><div class="timeline-item-content"><p>这是测试页面</p></div></div></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,blue %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline blue"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2022</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>01-02</p></div></div><div class="timeline-item-content"><p>这是测试页面</p></div></div></div><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 2022,pink %&#125;</span><br><span class="line">&lt;!-- timeline 01-02 --&gt;</span><br><span class="line">这是测试页面</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><div class="timeline pink"><div class="timeline-item headline"><div class="timeline-item-title"><div class="item-circle"><p>2022</p></div></div></div><div class="timeline-item"><div class="timeline-item-title"><div class="item-circle"><p>01-02</p></div></div><div class="timeline-item-content"><p>这是测试页面</p></div></div></div><h3 id="flink"><a href="#flink" class="headerlink" title="flink"></a>flink</h3><blockquote><p>4.1.0 支持</p></blockquote><p>可在任何界面插入类似友情链接列表效果</p><p>内容格式与友情链接界面一样，支持 yml 格式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% flink %&#125;</span><br><span class="line">xxxxxx</span><br><span class="line">&#123;% endflink %&#125;</span><br></pre></td></tr></table></figure><p>For example</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;% flink %&#125;</span><br><span class="line"><span class="bullet">-</span> class<span class="emphasis">_name: 友情链接</span></span><br><span class="line"><span class="emphasis">  class_</span>desc: 那些人，那些事</span><br><span class="line">  link<span class="emphasis">_list:</span></span><br><span class="line"><span class="emphasis">    - name: Hexo</span></span><br><span class="line"><span class="emphasis">      link: https://hexo.io/zh-tw/</span></span><br><span class="line"><span class="emphasis">      avatar: https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line"><span class="emphasis">      descr: 快速、简单且强大的网志框架</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">- class_</span>name: 网站</span><br><span class="line">  class<span class="emphasis">_desc: 值得推荐的网站</span></span><br><span class="line"><span class="emphasis">  link_</span>list:</span><br><span class="line"><span class="bullet">    -</span> name: Youtube</span><br><span class="line"><span class="code">      link: https://www.youtube.com/</span></span><br><span class="line"><span class="code">      avatar: https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line"><span class="code">      descr: 视频网站</span></span><br><span class="line"><span class="code">    - name: Weibo</span></span><br><span class="line"><span class="code">      link: https://www.weibo.com/</span></span><br><span class="line"><span class="code">      avatar: https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line"><span class="code">      descr: 中国最大社交分享平台</span></span><br><span class="line"><span class="code">    - name: Twitter</span></span><br><span class="line"><span class="code">      link: https://twitter.com/</span></span><br><span class="line"><span class="code">      avatar: https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line"><span class="code">      descr: 社交分享平台</span></span><br><span class="line"><span class="code">&#123;% endflink %&#125;</span></span><br></pre></td></tr></table></figure><div class="flink"><div class="flink-name">友情链接</div><div class="flink-desc">那些人，那些事</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://hexo.io/zh-tw/" title="Hexo" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg" onerror="this.onerror=null;this.src="/img/friend_404.gif"" alt="Hexo">              </div>              <div class="flink-item-name">Hexo</div>               <div class="flink-item-desc" title="快速、简单且强大的网志框架">快速、简单且强大的网志框架</div>            </a>          </div></div><div class="flink-name">网站</div><div class="flink-desc">值得推荐的网站</div> <div class="flink-list">          <div class="flink-list-item">            <a href="https://www.youtube.com/" title="Youtube" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png" onerror="this.onerror=null;this.src="/img/friend_404.gif"" alt="Youtube">              </div>              <div class="flink-item-name">Youtube</div>               <div class="flink-item-desc" title="视频网站">视频网站</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://www.weibo.com/" title="Weibo" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png" onerror="this.onerror=null;this.src="/img/friend_404.gif"" alt="Weibo">              </div>              <div class="flink-item-name">Weibo</div>               <div class="flink-item-desc" title="中国最大社交分享平台">中国最大社交分享平台</div>            </a>          </div>          <div class="flink-list-item">            <a href="https://twitter.com/" title="Twitter" target="_blank">              <div class="flink-item-icon">                <img class="no-lightbox" src="https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png" onerror="this.onerror=null;this.src="/img/friend_404.gif"" alt="Twitter">              </div>              <div class="flink-item-name">Twitter</div>               <div class="flink-item-desc" title="社交分享平台">社交分享平台</div>            </a>          </div></div></div><h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><p>在文章中插入引言，可包含作者、来源、和标题。<br>别名：quote</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><p>例子1：没有提供参数，只是普通输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote %&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p></blockquote><p>例子2：引用书上的句子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class="line">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p><footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote><p>例子3：引用Twitter</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote @DevDocs https://twitter.com/devdocs/status/356095192085962752 %&#125;</span><br><span class="line">NEW: DevDocs now comes with syntax highlighting. http://devdocs.io</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io">http://devdocs.io</a></p><footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote><p>例子4：引用网络上的文章</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% blockquote Seth Godin http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span><br><span class="line">Every interaction is both precious and an opportunity to delight.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Every interaction is both precious and an opportunity to delight.</p><footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html">Welcome to Island Marketing</a></cite></footer></blockquote><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>别名：code</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] [additional options] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><p>其他可选操作 e.g. <code>line_number:false</code><br>| Extra Options | Description | Default |<br>| —————- | ————- | :———: |<br>| <code>line_number</code> | 显示行号 | true |<br>| <code>highlight</code> | 启用代码高亮 | true |<br>| <code>first_line</code> | 指定第一行号 | 1 |<br>| <code>mark</code> | 突出显示特定行，每个值用逗号分隔。使用短划线指定数字范围。  e.g <code>mark:1,4-7,10</code> 会高亮第 1, 4 到 7 以及第 10行。 | |<br>| <code>wrap</code> | 将代码块包装在\<table> | true |</table></p><p>例子1：普通代码块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock %&#125;</span><br><span class="line">alert(&#x27;Hello World!&#x27;);</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(&#x27;Hello World!&#x27;);</span><br></pre></td></tr></table></figure><p>例子2：指定语言</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock lang:objc %&#125;</span><br><span class="line">[rectangle setX: 10 y: 10 width: 20 height: 20];</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</span><br></pre></td></tr></table></figure><p>例子3：附加说明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock Array.map %&#125;</span><br><span class="line">array.map(callback[, thisArg])</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><figcaption><span>Array.map</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.map(callback[, thisArg])</span><br></pre></td></tr></table></figure><p>例子4：附加说明和网址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock _.compact http://underscorejs.org/#compact Underscore.js mark:1 line_number:false wrap:false %&#125;</span><br><span class="line">_.compact([0, 1, false, 2, &#x27;&#x27;, 3]);</span><br><span class="line">=&gt; [1, 2, 3]</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><pre><div class="caption"><span>_.compact</span><a href="http://underscorejs.org/#compact">Underscore.js</a></div><code class="highlight plaintext"><mark>_.compact([0, 1, false, 2, &#x27;&#x27;, 3]);</mark>=&gt; [1, 2, 3]</code></pre><h2 id="反引号代码块"><a href="#反引号代码块" class="headerlink" title="反引号代码块"></a>反引号代码块</h2><p>这与使用代码块相同，但使用三个反引号来分隔块。<br>``` [language] [title] [url] [link text] code snippet ```</p><h2 id="Pull-引用"><a href="#Pull-引用" class="headerlink" title="Pull 引用"></a>Pull 引用</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pullquote [class] %&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure><h3 id="Left"><a href="#Left" class="headerlink" title="Left"></a>Left</h3><blockquote class="pullquote left"><p>裸体一旦成为艺术，便是最圣洁的。</p></blockquote><p>年华错落了我们邂逅在光阴下的姻缘，流连的心缘漂泊在红尘里渐渐漂白了岁月的眷恋。凄凉却冷眼观望着繁华三千长长的画卷，生命流淌的岁岁年年婉转着你我一世的情深缘劫。<br>光阴的花开了谢，那生生世世的牵伴天荒地老也无怨。不死心的缘情缘劫放纵心愿予你的心缘无眠的抒写爱的誓言。你的一切总让我忘情的留恋，萦绕在心底的歌经久的吟唱着我爱你的无悔无边，就算爱你爱得心碎也无怨无怯。流走的时光在成长的年华烂漫青涩心愿间莹舞，裂开的心尖流淌着玫瑰香艳的红尘恒古牵恋。</p><h3 id="Right"><a href="#Right" class="headerlink" title="Right"></a>Right</h3><blockquote class="pullquote right"><p>道德一旦沦为虚伪，便是最下流的。</p></blockquote><p>年华错落了我们邂逅在光阴下的姻缘，流连的心缘漂泊在红尘里渐渐漂白了岁月的眷恋。凄凉却冷眼观望着繁华三千长长的画卷，生命流淌的岁岁年年婉转着你我一世的情深缘劫。<br>光阴的花开了谢，那生生世世的牵伴天荒地老也无怨。不死心的缘情缘劫放纵心愿予你的心缘无眠的抒写爱的誓言。你的一切总让我忘情的留恋，萦绕在心底的歌经久的吟唱着我爱你的无悔无边，就算爱你爱得心碎也无怨无怯。流走的时光在成长的年华烂漫青涩心愿间莹舞，裂开的心尖流淌着玫瑰香艳的红尘恒古牵恋。</p><h2 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</span><br></pre></td></tr></table></figure><p>好像加载不出来</p><h2 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure><p>还不明白怎么用</p><h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% iframe &#x27;https://cmwlvip.github.io/&#x27; 100% 300px %&#125;</span><br></pre></td></tr></table></figure><iframe src="https://cmwlvip.github.io/" width="100%" height="300px" frameborder="0" loading="lazy" allowfullscreen></iframe><h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [class names] /path/to/image [width] [height] &#x27;&quot;title text&quot; &quot;alt text&quot;&#x27; %&#125;</span><br></pre></td></tr></table></figure><p><strong>tip:图片宽高不要带px</strong>。<br><strong>For example.</strong></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% img [png] /HexoTagPlugins/hexo.png 160 90 &#x27;&quot;图片标题和鼠标放上时显示&quot; &quot;图片没有正常加载时显示&quot;&#x27; %&#125;</span><br></pre></td></tr></table></figure><img src="/2022/11/03/HexoTagPlugins/hexo.png" class="[png]" width="160" height="90" title="图片标题和鼠标放上时显示" alt="图片没有正常加载时显示"><h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p>在文章插入链接，并自动给外部链接添加<code>target=&quot;_blank&quot;</code>属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link text url [external] [title] %&#125;</span><br></pre></td></tr></table></figure><p><strong>tip:[external]不知道是什么</strong><br><a href="https://www.baidu.com/" title="不知道这是什么 title" target>百度一下</a></p><h2 id="Include-Code"><a href="#Include-Code" class="headerlink" title="Include Code"></a>Include Code</h2><p>在<code>source/downloads/code</code>文件夹中插入代码片段。可以通过配置中的<code>code_dir</code>选项指定文件夹位置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code [title] [lang:language] [from:line] [to:line] path/to/file %&#125;</span><br></pre></td></tr></table></figure><p>例子1：嵌入全部内容test.js</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript test.js %&#125;</span><br></pre></td></tr></table></figure><p>例子2：嵌入仅第三行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript from:3 to:3 test.js %&#125;</span><br></pre></td></tr></table></figure><p>例子3：嵌入5到8行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript from:5 to:8 test.js %&#125;</span><br></pre></td></tr></table></figure><p>例子4：嵌入5到末尾行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript from:5 test.js %&#125;</span><br></pre></td></tr></table></figure><p>例子5：嵌入首行到第8行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% include_code lang:javascript to:8 test.js %&#125;</span><br></pre></td></tr></table></figure><h2 id="YouTube"><a href="#YouTube" class="headerlink" title="YouTube"></a>YouTube</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% youtube video_id %&#125;</span><br></pre></td></tr></table></figure><p>id在url中</p><h2 id="Vimeo"><a href="#Vimeo" class="headerlink" title="Vimeo"></a>Vimeo</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% vimeo video_id [width] [height] %&#125;</span><br></pre></td></tr></table></figure><h2 id="Include-Posts"><a href="#Include-Posts" class="headerlink" title="Include Posts"></a>Include Posts</h2><p>包括指向其他帖子的链接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post_path filename %&#125;</span><br><span class="line">&#123;% post_link filename [title] [escape] %&#125;</span><br></pre></td></tr></table></figure><p>使用此标记时，可以忽略永久链接和文件夹信息，例如语言和日期。<br>例如: <code>&#123;% post_link my %&#125;</code>。<br>只要帖子的文件名 <code>my.md</code>，这将起作用,即使帖子位于<code>Source/posts/2015-02-my-family-holiday</code>，并且具有永久链接<code>2018/en/my</code>。<br>您可以自定义要显示的文本，而不是显示帖子的标题。不支持在 Markdown 语法 []() 中使用post_path。<br>默认情况下，帖子的标题和自定义文本会被转义。您可以使用转义选项禁用转义。</p><p><strong>For example.</strong></p><div class="tabs" id="include-posts"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#include-posts-1">显示贴子的标题</button></li><li class="tab"><button type="button" data-href="#include-posts-2">显示自定义文本</button></li><li class="tab"><button type="button" data-href="#include-posts-3">(escape)转义标题</button></li><li class="tab"><button type="button" data-href="#include-posts-4">不转义标题</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="include-posts-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post<span class="emphasis">_link TheCharmOfMarkdown %&#125;</span></span><br></pre></td></tr></table></figure><p><a href="/2022/10/27/TheCharmOfMarkdown/" title="了不起的 Markdown">了不起的 Markdown</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="include-posts-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post<span class="emphasis">_link TheCharmOfMarkdown &#x27;Markdown 的魅力&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><p><a href="/2022/10/27/TheCharmOfMarkdown/" title="了不起的 Markdown">Markdown 的魅力</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="include-posts-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post<span class="emphasis">_link HexoTagPlugins &#x27;How to use <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span> tag in title&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><p><a href="/2022/11/03/HexoTagPlugins/" title="Hexo Built-in Tag Plugins (Hexo内置标签外挂)">How to use &lt;b&gt; tag in title</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="include-posts-4"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% post<span class="emphasis">_link HexoTagPlugins &#x27;<span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>bold<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span> custom title&#x27; false %&#125;</span></span><br></pre></td></tr></table></figure><p><a href="/2022/11/03/HexoTagPlugins/" title="Hexo Built-in Tag Plugins (Hexo内置标签外挂)"><b>bold</b> custom title</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="Include-Assets"><a href="#Include-Assets" class="headerlink" title="Include Assets"></a>Include Assets</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_path filename %&#125;</span><br><span class="line">&#123;% asset_img filename [title] %&#125;</span><br><span class="line">&#123;% asset_link filename [title] [escape] %&#125;</span><br></pre></td></tr></table></figure><p>好像是使用文章中出现的资源，<br>不知道怎么用</p><h2 id="Raw"><a href="#Raw" class="headerlink" title="Raw"></a>Raw</h2><p>如果某些内容导致帖子出现处理问题，请使用原始标记包装它以避免呈现错误。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实用快捷键</title>
      <link href="/2022/11/03/KeyboardShutcut/"/>
      <url>/2022/11/03/KeyboardShutcut/</url>
      
        <content type="html"><![CDATA[<div class="note info modern"><p><strong>Windows 系统下</strong></p></div><h2 id="“最好的Java开发工具”——IDEA"><a href="#“最好的Java开发工具”——IDEA" class="headerlink" title="“最好的Java开发工具”——IDEA"></a>“最好的Java开发工具”——IDEA</h2><h3 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h3><h4 id="main-方法"><a href="#main-方法" class="headerlink" title="main 方法"></a>main 方法</h4><p>main方法快捷键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psvm + Tab</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出语句"><a href="#输出语句" class="headerlink" title="输出语句"></a>输出语句</h4><p>输出语句快捷键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sout + Tab</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println();</span><br></pre></td></tr></table></figure><h3 id="光标"><a href="#光标" class="headerlink" title="光标"></a>光标</h3><div class="table-container"><table><thead><tr><th style="text-align:center">功能</th><th style="text-align:center">有小键盘</th><th style="text-align:center">无小键盘</th></tr></thead><tbody><tr><td style="text-align:center">移动到行首</td><td style="text-align:center">Home</td><td style="text-align:center">Fn + ←</td></tr><tr><td style="text-align:center">移动到行尾</td><td style="text-align:center">End</td><td style="text-align:center">Fn + →</td></tr></tbody></table></div><h2 id="浏览器——Edge"><a href="#浏览器——Edge" class="headerlink" title="浏览器——Edge"></a>浏览器——Edge</h2><h3 id="打开开发工具的键盘快捷方式"><a href="#打开开发工具的键盘快捷方式" class="headerlink" title="打开开发工具的键盘快捷方式"></a>打开开发工具的键盘快捷方式</h3><div class="table-container"><table><thead><tr><th>操作</th><th>快捷键</th></tr></thead><tbody><tr><td>打开“<strong>控制台</strong>”工具</td><td><code>Ctrl</code> + <code>Shift</code> + <code>J</code></td></tr><tr><td>打开“<strong>元素</strong>”工具</td><td><code>Ctrl</code> + <code>Shift</code> + <code>C</code></td></tr></tbody></table></div>]]></content>
      
      
      <categories>
          
          <category> 快捷键 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
            <tag> IDEA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>了不起的 Markdown</title>
      <link href="/2022/10/27/TheCharmOfMarkdown/"/>
      <url>/2022/10/27/TheCharmOfMarkdown/</url>
      
        <content type="html"><![CDATA[<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>支持：底线(-&#x2F;&#x3D;) 和 #</p><h5 id="底线的语法"><a href="#底线的语法" class="headerlink" title="底线的语法"></a>底线的语法</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">标题内容</span></span><br><span class="line"><span class="section">======</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">标题内容</span></span><br><span class="line"><span class="section">--------</span></span><br></pre></td></tr></table></figure><ol><li>&#x3D;表示一级标题</li><li>-表示二级标题</li><li>底线符号的数量至少2个</li><li>这种语法只支持这两级标题</li></ol><h5 id="语法"><a href="#语法" class="headerlink" title="#语法"></a>#语法</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># + 空格 + 标题内容</span></span><br></pre></td></tr></table></figure><ol><li>在行首插入#可标记出标题</li><li>#的个数表示了标题的等级</li><li>建议在#后加一个空格</li><li>Markdown中最多只支持前六级标题</li></ol><p>使用规范:</p><ol><li>推荐使用#的语法。</li><li>标题的前后都要空1行（除非标题在文档开头）。</li><li>#与标题文本之间也要有1个空格，否则会导致阅读困难。</li><li>不要有多余的空格，结尾不要有空格。</li><li>建议标题的结尾不要有标点符号。</li><li>建议标题要尽量简短，方便引用。</li></ol><h4 id="粗体和斜体"><a href="#粗体和斜体" class="headerlink" title="粗体和斜体"></a>粗体和斜体</h4><p>粗体由两个* 或两个_包裹，斜体由1个* 或1个_包裹。</p><h5 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">**加粗内容**</span></span><br><span class="line">或</span><br><span class="line"><span class="strong">__加粗内容__</span></span><br></pre></td></tr></table></figure><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*斜体内容*</span></span><br><span class="line">或</span><br><span class="line"><span class="emphasis">_斜体内容_</span></span><br></pre></td></tr></table></figure><p>使用规范：</p><ol><li>建议粗体使用2个*包裹，斜体使用1个* 包裹。</li><li>在粗体和斜体语法标记的内部，建议不要有空格。</li></ol><h3 id="段落与换行"><a href="#段落与换行" class="headerlink" title="段落与换行"></a>段落与换行</h3><ol><li>如果行与行之间没有空行，则会被视为同一段落。</li><li>如果行与行之间有空行，则会被视为不同的段落。</li><li>空行是指行内什么都没有，或者只有空格和制表符。</li></ol><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>支持：有序列表和无序列表</p><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数字序号(1 2 ...) + 英文句号 + 空格 + 列表内容</span><br><span class="line">或</span><br><span class="line">( 1) 2) ...) + 空格 + 列表内容</span><br></pre></td></tr></table></figure><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">*/+/- + 英文句号 + 空格 + 列表内容</span></span><br></pre></td></tr></table></figure><p>使用规范：建议使用-标记无序列表，*容易与斜体混淆，+不流行。</p><h5 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h5><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">第一层列表</span><br><span class="line">TAB + 第二层列表</span><br><span class="line">TAB + TAB + 第三层列表</span><br></pre></td></tr></table></figure><p>语法说明：</p><ol><li>列表中可以嵌套列表。</li><li>有序列表和无序列表也可以互相嵌套。</li></ol><h5 id="列表使用规范"><a href="#列表使用规范" class="headerlink" title="列表使用规范"></a>列表使用规范</h5><ol><li>如果一个列表中的每个列表项都只有1行，建议列表项之间不要有空行。</li><li>如果列表项中有换行，建议在列表项之间空1行。</li><li>建议在列表前&#x2F;后都空1行。</li><li>列表标记使用英文半角符句号<code>.</code>、右括号<code>)</code>。</li><li>列表标记与列表内容的空格不能少；列表<code>Enter</code>换行默认生成新的列表项，列表项换行可<code>Shift + Enter</code>。</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 列表的使用</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 这个列表</span><br><span class="line">有换行</span><br><span class="line"></span><br><span class="line"><span class="bullet">2.</span> 这个列表无换行</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>效果如下：</p><ol><li><p>这个列表<br>有换行</p></li><li><p>这个列表无换行</p></li></ol><h4 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h4><p>语法：</p><ol><li>分隔线须使用至少3个以上的 *&#x2F;-&#x2F;_ 来标记。</li><li>行内不能有其他的字符。</li><li>可以在标记符中间加上空格。</li><li>建议同一文章使用一样的符号标记分隔线，且数量形式一样。</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 星号</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">*</span> <span class="emphasis">* *</span> <span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">*</span>**</span><span class="strong">****</span><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"># 减号</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong">---</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">- - -</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">----------</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"># 下划线</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">___</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">_ _ _</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">__________</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"></span></span></span><br></pre></td></tr></table></figure><p>分隔线如下：</p><hr><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">图片替代文字</span>](<span class="link">图片地址 &quot;【可选参数】鼠标悬停于图片的提示信息&quot;</span>)</span><br><span class="line"></span><br><span class="line">图片也可以引用链接</span><br><span class="line"></span><br><span class="line">![<span class="string">图片替代文字</span>][<span class="symbol">pic</span>]</span><br><span class="line"> </span><br><span class="line">[<span class="symbol">pic</span>]: <span class="link">url &quot;【可选】&quot;</span></span><br></pre></td></tr></table></figure><p>语法：</p><ol><li>图片替代文字在图片无法正常显示时会比较有用，正常情况下可以为空。</li><li>图片地址可以是本地图片的路径也可以是网络图片的地址。</li><li>本地图片支持相对路径和绝对路径两种方式。</li></ol><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><h4 id="文字链接"><a href="#文字链接" class="headerlink" title="文字链接"></a>文字链接</h4><p>文字链接就是把链接地址直接写在文本中。语法是用方括号包裹链接文字，后面紧跟着括号包裹的链接地址。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">链接文字</span>](<span class="link">链接地址 &quot;【可选参数】鼠标悬停于链接文字的提示信息&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在日常工作中我们常用的地址有[<span class="string">baidu</span>](<span class="link">https://www.baidu.com</span>)和[<span class="string">GitHub</span>](<span class="link">https://www.github.com</span>)</span><br></pre></td></tr></table></figure><h4 id="引用链接"><a href="#引用链接" class="headerlink" title="引用链接"></a>引用链接</h4><p>引用链接是把链接地址作为“<strong>变量</strong>”先在Markdown文件的页尾定义好，然后在正文中进行引用。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在正文中引用链接标记可以理解为引用定义好的变量；</span><br><span class="line"></span><br><span class="line">[<span class="string">链接文字</span>][<span class="symbol">链接标记</span>]</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">[链接文字也是链接标记]</span><br><span class="line"></span><br><span class="line">在底部定义链接标记，可以理解为定义一个地址变量；</span><br><span class="line"></span><br><span class="line">[<span class="symbol">链接标记</span>]:<span class="link">链接地址</span></span><br></pre></td></tr></table></figure><p>语法说明：</p><ol><li>链接标记可以有字母、数字、空格和标点符号。</li><li>链接标记不区分大小写。</li><li>定义的链接内容可以放在当前文件的任意位置，建议放在页尾。</li><li>当链接地址为网络地址时要以 http&#x2F;https开头，否则会被识别为本地地址。</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在日常工作中我们常用的地址有[<span class="string">百度</span>][<span class="symbol">baidu</span>]和[GitHub]。</span><br><span class="line">[<span class="symbol">baidu</span>]:<span class="link">https://www.baidu.com/</span></span><br><span class="line">[<span class="symbol">GitHub</span>]:<span class="link">https://www.github.com/</span></span><br></pre></td></tr></table></figure><p>在日常工作中我们常用的地址有<a href="https://www.baidu.com/">百度</a>和<a href="https://www.github.com/">GitHub</a>。</p><h4 id="网址链接"><a href="#网址链接" class="headerlink" title="网址链接"></a>网址链接</h4><p>在Markdown中，将网络地址或邮箱地址使用&lt;&gt;包裹起来会被自动转换为超链接。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">URL</span> <span class="attr">或</span> <span class="attr">邮箱地址</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><a href="https://www.baidu.com/">https://www.baidu.com</a><br>使用规范：</p><ol><li>建议链接标题有意义</li><li>使用&lt;&gt;包裹自动连接，虽然不使用也能连接</li><li>自动连接要以http&#x2F;https开头</li></ol><h3 id="行内代码与代码块"><a href="#行内代码与代码块" class="headerlink" title="行内代码与代码块"></a>行内代码与代码块</h3><h4 id="行内代码"><a href="#行内代码" class="headerlink" title="行内代码"></a>行内代码</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">`代码`</span></span><br></pre></td></tr></table></figure><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><p>在Markdown中，代码块以Tab键或4个空格开头。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">以 Tab 键开头：</span><br><span class="line"><span class="code">    def test()&#123;</span></span><br><span class="line"><span class="code">        print(&#x27;hello&#x27;)</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">以 4 个空格开头</span><br><span class="line"><span class="code">    def test()&#123;</span></span><br><span class="line"><span class="code">        print(&#x27;hello&#x27;)</span></span><br><span class="line"><span class="code">    &#125;</span></span><br></pre></td></tr></table></figure><p><strong>Tip：</strong> 因为代码块使用Tab键或4个空格开头的效果不够直观，很多扩展语法（如GFM）提供了围栏代码块，并且支持语法高亮。</p><p>使用规范：</p><ol><li><p>除行内代码可以使用`包裹以外，如果我们想转义或强调某些字符，也可以使用`包裹。</p></li><li><p>如果代码超过1行，请使用围栏代码块（扩展语法），并显式地声明语言，这样做便于阅读，并且可以显示语法高亮。</p></li><li><p>如果我们编写的是简单的代码片段，使用4个空格缩进的代码块也许更清晰。</p></li><li><p>很多Shell命令都要粘贴到终端中去执行，因此最好避免在Shell命令中使用任何换行操作；<br>可以在行尾使用一个\，这样既能避免命令换行，又能提高源码的可读性。</p></li><li><p>建议不要在没有输出内容的Shell命令前加$。<br>在命令没有输出内容的情况下，$是没有必要的，因为内容全是命令，我们不会把命令和输出的内容混淆。<br>推荐：<code>pipenv shell</code><br>不推荐：<code>$ pipenv shell</code></p></li><li><p>建议在有输出内容的Shell命令前加上$，这样会比较容易区分命令和输出的内容。</p></li></ol><p>推荐：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&quot;test&quot;</span></span></span><br><span class="line">test</span><br></pre></td></tr></table></figure><p>不推荐：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;test&quot;</span><br><span class="line">test</span><br></pre></td></tr></table></figure><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>在Markdown中，引用由<code>&gt;</code>来标记。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt; 引用内容</span></span><br></pre></td></tr></table></figure><p>语法说明：</p><ol><li>多行引用也可以在每一行的开头都插入<code>&gt;</code>。</li><li>在引用中可以嵌套引用。</li><li>在引用中可以使用其他的Markdown语法。</li><li>段落与换行的格式在引用中也是适用的。</li></ol><p>使用规范：</p><ol><li>建议在引用的标记符号<code>&gt;</code>之后添加一个空格。</li><li>建议每一行引用都使用符号<code>&gt;</code>。</li><li>不要在引用中添加空行。</li></ol><h3 id="转义"><a href="#转义" class="headerlink" title="转义"></a>转义</h3><p>当我们想在Markdown文件中插入一些标记符号，但又不想让这些符号被渲染时，可以使用<code>\</code>进行转义。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\特殊符号</span><br></pre></td></tr></table></figure><p>可被转义的特殊符号：</p><ul><li>\ 反斜线</li><li>` 反引号</li><li>* 星号</li><li>_ 底线</li><li>{} 花括号</li><li>[] 方括号</li><li>() 圆括号</li><li># 井字号</li><li>+ 加号</li><li>- 减号</li><li>. 英文句号</li><li>! 英文感叹号</li></ul><h2 id="扩展语法GFM"><a href="#扩展语法GFM" class="headerlink" title="扩展语法GFM"></a>扩展语法GFM</h2><p>在众多Markdown扩展语法中，GitHub Flavored Markdown（简称GFM）无疑是目前最流行的，它提供了包括表格、任务列表、删除线、围栏代码、Emoji等在内的标记语法</p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~被删除的文字~~</span><br></pre></td></tr></table></figure><p><del>被删除的文字</del></p><h3 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h3><p>使用<code>:</code>包裹表情代码即可</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">:表情代码:</span><br><span class="line">:+1:</span><br><span class="line">:-1:</span><br><span class="line">:heart:</span><br></pre></td></tr></table></figure><p>更多的表情符号请参考<a href="http://www.webpagefx.com/tools/emoji-cheat-sheet/">http://www.webpagefx.com/tools/emoji-cheat-sheet/</a>。</p><h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><p>在标准语法中，由&lt;&gt;包裹的URL地址被自动识别并解析为超链接，使用GFM扩展语法则可以不使用&lt;&gt;包裹。<br><strong>注意：</strong>自动链接只识别以<code>www</code>或<code>http://</code>开头的URL地址。<br>如果不想使用自动链接，也可以使用&#96;包裹URL地址。</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 表头1 |表头2 | 表头3 |</span><br><span class="line">| :---- | :----: | ----: |</span><br><span class="line">| 内容1 | 内容2 | 内容3 |</span><br><span class="line">| 左对齐 | 居中对齐 | 右对齐 |</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">表头1</th><th align="center">表头2</th><th align="right">表头3</th></tr></thead><tbody><tr><td align="left">内容1</td><td align="center">内容2</td><td align="right">内容3</td></tr><tr><td align="left">左对齐</td><td align="center">居中对齐</td><td align="right">右对齐</td></tr></tbody></table><p>语法：</p><ol><li>单元格使用|来分隔，为了阅读更清晰，建议最前和最后都使用|。</li><li>单元格和|之间的空格会被移除。</li><li>表头与其他行使用<code>-</code>来分隔。</li><li>表格对齐格式如下:<ul><li>左对齐（默认）：<code>:-</code></li><li>右对齐：<code>-:</code></li><li>居中对齐：<code>:-:</code></li></ul></li><li>块级元素（代码区块、引用区块）不能插入表格中。</li></ol><p>使用规范：</p><ol><li>在表格的前、后各空1行。</li><li>在每一行最前和最后都使用|，每一行中的|要尽量都对齐。</li><li>不要使用庞大复杂的表格，那样会难以维护和阅读。</li></ol><p><strong>补充：</strong></p><ol><li>表格单元格换行可以用<code>&lt;br&gt;</code>。</li><li><strong>默认和左对齐还是又区别的，默认表头会居中，左对齐表头是左对齐的。</strong></li></ol><h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> [ ] 未勾选</span><br><span class="line"><span class="bullet">-</span> [x] 已勾选</span><br></pre></td></tr></table></figure><ul><li><input disabled type="checkbox"> 未勾选</li><li><input checked disabled type="checkbox"> 已勾选</li></ul><p>语法说明：</p><ol><li>任务列表以-+空格开头，由 [+空格&#x2F;x+] 组成。</li><li>x可以小写，也可以大写，有些编辑器可能不支持大写，所以为避免解析错误，推荐使用小写的x。</li><li>当方括号中的字符为空格时，复选框是未选中状态，为x时是选中状态。</li></ol><h3 id="围栏代码块"><a href="#围栏代码块" class="headerlink" title="围栏代码块"></a>围栏代码块</h3><p>在基础语法中，代码块使用Tab键或4个空格开头；在扩展语法中，围栏代码块使用连续3个&#96;或3个~包裹，还支持语法高亮，可读性和可维护性更强一些。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">~~~</span></span><br><span class="line"><span class="code">    代码</span></span><br><span class="line"><span class="code">~~~</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="code">```python</span></span><br><span class="line"><span class="code">    代码</span></span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure><h3 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h3><p>锚点，也称为书签，用来标记文档的特定位置，使用锚点可以跳转到当前文档或其他文档中指定的标记位置。</p><p>Markdown会被渲染成HTML页面，在HTML页面中可以通过锚点实现跳转；GitHub、GitBook项目文档中的目录也是通过锚点实现跳转的。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">锚点描述</span>](<span class="link">#锚点名</span>)</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用锚点 --&gt;</span><br><span class="line">语法参考 [<span class="string">基础语法</span>](<span class="link">#基础语法</span>) 或 [<span class="string">扩展语法</span>](<span class="link">#扩展语法GFM</span>)</span><br></pre></td></tr></table></figure><p>使用锚点：<br>语法参考 <a href="#%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95">基础语法</a> 或 <a href="#%E6%89%A9%E5%B1%95%E8%AF%AD%E6%B3%95GFM">扩展语法</a></p><p>语法说明：</p><ol><li>锚点名建议使用字母和数字，当然中文也是被支持的，但不排除有些网站支持得不够好。</li><li>锚点名是区分英文大小写的。</li><li>在锚点名中不能含有空格，也不能含有特殊字符。</li></ol><h2 id="Inline-HTML"><a href="#Inline-HTML" class="headerlink" title="Inline HTML"></a>Inline HTML</h2><h3 id="Markdown-是支持-HTML-的"><a href="#Markdown-是支持-HTML-的" class="headerlink" title="Markdown 是支持 HTML 的"></a>Markdown 是支持 HTML 的</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span>To reboot your computer, press <span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>ctrl<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>alt<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>+<span class="language-xml"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span></span>del<span class="language-xml"><span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span>.<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>To reboot your computer, press <kbd>ctrl</kbd>+<kbd>alt</kbd>+<kbd>del</kbd>.</p><h3 id="效果并不总是理想的"><a href="#效果并不总是理想的" class="headerlink" title="效果并不总是理想的"></a>效果并不总是理想的</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span></span><br><span class="line"><span class="code">    &lt;dt&gt;Definition list&lt;/dt&gt;</span></span><br><span class="line"><span class="code">    &lt;dd&gt;Is something people use sometimes.&lt;/dd&gt;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    &lt;dt&gt;Markdown in HTML&lt;/dt&gt;</span></span><br><span class="line"><span class="code">    &lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;</span></span><br><span class="line"><span class="code">&lt;/dl&gt;</span></span><br></pre></td></tr></table></figure><dl>    <dt>Definition list</dt>    <dd>Is something people use sometimes.</dd><pre><code>&lt;dt&gt;Markdown in HTML&lt;/dt&gt;&lt;dd&gt;Does *not* work **very** well. Use HTML &lt;em&gt;tags&lt;/em&gt;.&lt;/dd&gt;</code></pre></dl><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>表格单元格内换行：<code>&lt;br&gt;</code></p><h2 id="排版技巧"><a href="#排版技巧" class="headerlink" title="排版技巧"></a>排版技巧</h2><p>有句话叫“听过很多道理，却依然过不好这一生 ”，同样，看过很多文章，却还是不知道怎么排版才好看。其实好的排版就是好的设计，而设计总会遵循一定的规则，当没有人明确告诉我们什么是好的设计时，参考最通用、最流行的做法总是没错的，毕竟能被大众所接受，就是最好的证明。</p><h3 id="关于空格"><a href="#关于空格" class="headerlink" title="关于空格"></a>关于空格</h3><p><strong>建议中文和英文之间加空格，中文&#x2F;英文和数字之间也要加空格，</strong>不过有些编辑器和输入法（如百度输入法）会自动添加空隙，我们就没必要手动添加了，使用时请多注意。</p><h4 id="加空格的情况"><a href="#加空格的情况" class="headerlink" title="加空格的情况"></a>加空格的情况</h4><ul><li>英文标点符号（如, . ; : ?）与后面的字符之间需要加空格，与前面的字符之间不需要加空格。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">推荐：The world is like a mirror: Frown at it and it frowns at you; smile, and it smiles too.</span><br><span class="line">不推荐：The world is like a mirror:Frown at it and it frowns at you;smile,and it smiles too.</span><br></pre></td></tr></table></figure><ul><li>当在中文、英文中使用＞（半角）标识路径时，两边都需要加空格。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">推荐：Erase data and settings in Settings &gt; General &gt; Reset &gt; Erase all Content and Settings</span><br><span class="line">不推荐：Erase data and settings in Settings&gt; General&gt;Reset &gt;Erase all Content and Settings</span><br><span class="line">推荐：抹掉所有内容和设置的操作步骤：设置 &gt; 通用 &gt; 还原 &gt; 抹掉所有内容和设置</span><br><span class="line">不推荐：抹掉所有内容和设置的操作步骤：设置&gt;通用&gt;还原&gt;抹掉所有内容和设置</span><br></pre></td></tr></table></figure><h4 id="不加空格的情况"><a href="#不加空格的情况" class="headerlink" title="不加空格的情况"></a>不加空格的情况</h4><ul><li>中文标点符号和数字、中文、英文之间不需要添加空格。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">推荐：MacBook Pro（15英寸，2016年年末）</span><br><span class="line">不推荐：MacBook Pro （15英寸，2016年年末）</span><br></pre></td></tr></table></figure><ul><li>数字和百分号之间不需要添加空格。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">推荐：100%</span><br><span class="line">不推荐：100 %</span><br></pre></td></tr></table></figure><ul><li>数字和单位符号之间不需要添加空格。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">推荐：1GB</span><br><span class="line">不推荐：1 GB</span><br></pre></td></tr></table></figure><ul><li>英文和数字组合成的名字之间不需要添加空格。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">推荐：双核Intel Core i7处理器</span><br><span class="line">不推荐：双核Intel Core i 7处理器</span><br></pre></td></tr></table></figure><ul><li><p>当&#x2F;（半角）表示“或”、“路径”时，与前后的字符之间均不加空格。</p></li><li><p>货币符号后不加空格。</p></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">推荐：售价￥100</span><br><span class="line">不推荐：售价￥ 100</span><br></pre></td></tr></table></figure><ul><li>负号后不加空格。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">推荐：1-2=-1</span><br><span class="line">不推荐：1-2=- 1</span><br></pre></td></tr></table></figure><h3 id="全角和半角"><a href="#全角和半角" class="headerlink" title="全角和半角"></a>全角和半角</h3><p>全角：中文标点符号是全角，占两个字节。<br>半角：英文标点符号和数字是半角，占1个字节。<br>全角：，。；：！？<br>半角：,.;:!?</p><ul><li>在中文排版中，要使用全角标点符号。</li><li>在英文排版中，要使用半角标点符号。</li></ul><h3 id="正确的英文大小写"><a href="#正确的英文大小写" class="headerlink" title="正确的英文大小写"></a>正确的英文大小写</h3><p>错误的写法：IPhone7、MacOS<br>正确的写法：iPhone7、macOS</p><p>专有名词要使用正确的大小写，请参考它们的官方文档。<br>正确：macOS、iPhone、iPad Pro、Macbook Pro、iOS、GitHub</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop 3.3.4 集群搭建</title>
      <link href="/2022/10/25/HadoopClusterBuilding3-3-4/"/>
      <url>/2022/10/25/HadoopClusterBuilding3-3-4/</url>
      
        <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>虚拟机：Oracle VM VirtualBox<br>操作系统： Centos8<br>Hadoop版本：3.3.4<br>JDK版本：1.8<br>免密登录（SSH协议）：MobaXterm</p><h2 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h2><h3 id="打开Oracle-VM-VirtualBox并新建虚拟机"><a href="#打开Oracle-VM-VirtualBox并新建虚拟机" class="headerlink" title="打开Oracle VM VirtualBox并新建虚拟机"></a>打开Oracle VM VirtualBox并新建虚拟机</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-10-34-44.png" alt="VM."><br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-10-36-41.png" alt="新建虚拟机."></p><h3 id="内存选择"><a href="#内存选择" class="headerlink" title="内存选择"></a>内存选择</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-10-46-50.png" alt="运行内存选择2GB."></p><h3 id="选择现在创建虚拟硬盘"><a href="#选择现在创建虚拟硬盘" class="headerlink" title="选择现在创建虚拟硬盘"></a>选择现在创建虚拟硬盘</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-10-54-23.png" alt="虚拟硬盘."></p><h3 id="设置虚拟硬盘文件类型"><a href="#设置虚拟硬盘文件类型" class="headerlink" title="设置虚拟硬盘文件类型"></a>设置虚拟硬盘文件类型</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-10-55-43.png" alt="VDI."></p><h3 id="建议动态分配"><a href="#建议动态分配" class="headerlink" title="建议动态分配"></a>建议动态分配</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-10-58-25.png" alt="动态分配."></p><h3 id="设置虚拟硬盘大小"><a href="#设置虚拟硬盘大小" class="headerlink" title="设置虚拟硬盘大小"></a>设置虚拟硬盘大小</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-01-22.png" alt="16GB."><br><strong>注意：创建完先不要打开，先进行环境配置</strong><br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-12-14.png" alt="设置."></p><h3 id="设置存储"><a href="#设置存储" class="headerlink" title="设置存储"></a>设置存储</h3><p>选择虚拟盘Centos8，用于启动<br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-15-13.png" alt="虚拟盘."></p><h3 id="设置虚拟机网卡"><a href="#设置虚拟机网卡" class="headerlink" title="设置虚拟机网卡"></a>设置虚拟机网卡</h3><p>这里要设置双网卡，后面才能与主机与外网进行连接<br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-17-57.png" alt="1."><br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-18-21.png" alt="2."></p><h3 id="启动创建的虚拟机"><a href="#启动创建的虚拟机" class="headerlink" title="启动创建的虚拟机"></a>启动创建的虚拟机</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-23-06.png" alt="启动虚拟机."><br><strong>注：虚拟机鼠标到桌面是<code>右Ctrl</code></strong></p><h3 id="选择语言"><a href="#选择语言" class="headerlink" title="选择语言"></a>选择语言</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-26-46.png" alt="语言."></p><h3 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-32-32.png" alt="时间."><br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-33-29.png" alt="上海."></p><h3 id="设置网络"><a href="#设置网络" class="headerlink" title="设置网络"></a>设置网络</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-36-50.png" alt="网络."><br>将网卡打开即可，后面还可更改</p><h3 id="设置root账户"><a href="#设置root账户" class="headerlink" title="设置root账户"></a>设置root账户</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-40-27.png" alt="root."><br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-11-43-23.png" alt="密码."><br>可创建新用户也可以不创建，但注意区分密码</p><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p>到此，虚拟机创建完成</p><h2 id="Linux系统网络配置"><a href="#Linux系统网络配置" class="headerlink" title="Linux系统网络配置"></a>Linux系统网络配置</h2><h3 id="图形界面与字符界面"><a href="#图形界面与字符界面" class="headerlink" title="图形界面与字符界面"></a>图形界面与字符界面</h3><p>图形界面到字符界面：<code>Ctrl+Alt+F2/F3</code><br>字符界面到图形界面：<code>Ctrl+Alt+F1</code></p><h3 id="root权限登录"><a href="#root权限登录" class="headerlink" title="root权限登录"></a>root权限登录</h3><p>登录…</p><h3 id="主机名"><a href="#主机名" class="headerlink" title="主机名"></a>主机名</h3><p>查看主机名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure><p>修改主机名，这里改成名字缩写加序号，便于管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname 主机名</span><br></pre></td></tr></table></figure><h3 id="配置IP映射"><a href="#配置IP映射" class="headerlink" title="配置IP映射"></a>配置IP映射</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-14-57-50.png" alt="IP映射."><br>保存并退出，底行命令下<code>wq</code></p><h3 id="配置网络参数"><a href="#配置网络参数" class="headerlink" title="配置网络参数"></a>配置网络参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-enpOs8</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-15-10-32.png" alt="配置IP."><br>重启虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><ul><li>ONBOOT&#x3D;yes：表示启动这块网卡</li><li>BOOTPROTO&#x3D;static：表示静态路由协议，保持IP固定</li><li>IPADDR：虚拟机IP地址，与前面映射一致</li><li>GATEWAY：虚拟机网关，一般是将IP地址最后一位数变成2</li><li>NETMASK：虚拟机掩码，配置为255.255.255.0即可</li></ul><p>另一块网卡(ifcfg-enpOs3)保持打开即可</p><h3 id="配置效果验证"><a href="#配置效果验证" class="headerlink" title="配置效果验证"></a>配置效果验证</h3><p>Linux下查看网卡信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-15-21-26.png" alt="ifconfig."><br>enpOs8下出现自己配置的静态IP，说明配置成功<br>再执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping www.baidu.com</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-15-26-41.png" alt="ping baidu."><br>有数据传输说明网络正常，<code>Ctrl+c</code>退出当前命令。<br>window系统下打开cmd窗口执行如下命令，地址为设置的虚拟机地址。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ping</span> <span class="number">192</span>.<span class="number">168</span>.<span class="number">56</span>.<span class="number">201</span></span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-15-30-38.png" alt="ping 虚拟机."><br>有数据传输说明主机与虚拟机建立联系。<br>到此虚拟机网络配置完成！</p><h2 id="虚拟机克隆"><a href="#虚拟机克隆" class="headerlink" title="虚拟机克隆"></a>虚拟机克隆</h2><h3 id="右击虚拟机-01，点击复制"><a href="#右击虚拟机-01，点击复制" class="headerlink" title="右击虚拟机 01，点击复制"></a>右击虚拟机 01，点击复制</h3><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-19-14-49.png" alt="克隆."><br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-19-15-25.png" alt="完全复制."></p><h3 id="按如上步骤设置主机名与IP地址"><a href="#按如上步骤设置主机名与IP地址" class="headerlink" title="按如上步骤设置主机名与IP地址"></a>按如上步骤设置主机名与IP地址</h3><p>重复上述步骤<br><strong>注意：与之前设置的 IP 映射一致</strong></p><h3 id="复制好-03-虚拟机"><a href="#复制好-03-虚拟机" class="headerlink" title="复制好 03 虚拟机"></a>复制好 03 虚拟机</h3><p>进行同样的配置</p><h2 id="SSH-服务配置"><a href="#SSH-服务配置" class="headerlink" title="SSH 服务配置"></a>SSH 服务配置</h2><h3 id="打开-MobaXterm-远程连接工具"><a href="#打开-MobaXterm-远程连接工具" class="headerlink" title="打开 MobaXterm 远程连接工具"></a>打开 MobaXterm 远程连接工具</h3><p>点击导航栏上的”Session”,然后单击”SSH”<br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-18-51-16.png" alt="SSH."><br>点击 OK，设置好 MobaXterm 的密码后，输入 root 用户密码后即可实现远程登录。<br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-18-57-19.png" alt="SSH."><br>到此，虚拟机远程密码登录实现！<br>虚拟机在 Oracle VM VirtualBox 即可在 MobaXterm 实现对单台虚拟机的操作。<br><strong>同理：对 02，03 虚拟机实现 SSH 免密登录</strong></p><h3 id="删除虚拟机的-x2F-ssh-目录。"><a href="#删除虚拟机的-x2F-ssh-目录。" class="headerlink" title="删除虚拟机的~&#x2F;.ssh 目录。"></a>删除虚拟机的~&#x2F;.ssh 目录。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# rm -rf .ssh</span><br><span class="line">[root@hsq02 ~]# rm -rf .ssh</span><br><span class="line">[root@hsq03 ~]# rm -rf .ssh</span><br></pre></td></tr></table></figure><h3 id="在-01-虚拟机上新建-SSH-公私密钥对。"><a href="#在-01-虚拟机上新建-SSH-公私密钥对。" class="headerlink" title="在 01 虚拟机上新建 SSH 公私密钥对。"></a>在 01 虚拟机上新建 SSH 公私密钥对。</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# ssh-keygen -t rsa -P &#x27;&#x27; -f ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h3 id="实现在-01-虚拟机上免密登录-02，03-虚拟机"><a href="#实现在-01-虚拟机上免密登录-02，03-虚拟机" class="headerlink" title="实现在 01 虚拟机上免密登录 02，03 虚拟机"></a>实现在 01 虚拟机上免密登录 02，03 虚拟机</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# ssh-copy-id root@hsq01</span><br><span class="line">[root@hsq01 ~]# ssh-copy-id root@hsq02</span><br><span class="line">[root@hsq01 ~]# ssh-copy-id root@hsq03</span><br></pre></td></tr></table></figure><p><strong>提示：出现(yes&#x2F;no)?,输入yes，Enter 即可。</strong></p><h3 id="验证-SSH-免密登录是否配置成功"><a href="#验证-SSH-免密登录是否配置成功" class="headerlink" title="验证 SSH 免密登录是否配置成功"></a>验证 SSH 免密登录是否配置成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">[root@hsq01]# </span><span class="language-bash">ssh hsq02</span></span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-19-30-30.png" alt="hsq02."><br>如此表示登录成功！<br>输入<code>exit</code>，Enter 即可退回 01 虚拟机。</p><h2 id="Hadoop-集群搭建"><a href="#Hadoop-集群搭建" class="headerlink" title="Hadoop 集群搭建"></a>Hadoop 集群搭建</h2><p>提示：<br><strong>Window 下安装好的安装包直接通过 MobaXterm 拖入即可</strong></p><h3 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h3><h4 id="将-JDK8-安装包放到如下目录"><a href="#将-JDK8-安装包放到如下目录" class="headerlink" title="将 JDK8 安装包放到如下目录"></a>将 JDK8 安装包放到如下目录</h4><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-19-38-27.png" alt="拖入."></p><h4 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# tar -zxvf (安装包name)jdk-8u341-linux-x64.tar.gz -C /usr/local/</span><br></pre></td></tr></table></figure><h4 id="配置-JDK-系统环境变量"><a href="#配置-JDK-系统环境变量" class="headerlink" title="配置 JDK 系统环境变量"></a>配置 JDK 系统环境变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# vi /etc/profile</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-19-48-54.png" alt="JAVA_HOME."></p><h4 id="使配置文件生效"><a href="#使配置文件生效" class="headerlink" title="使配置文件生效"></a>使配置文件生效</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="JDK-环境验证"><a href="#JDK-环境验证" class="headerlink" title="JDK 环境验证"></a>JDK 环境验证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-19-51-25.png" alt="java -version."><br>到此JDK安装和配置成功。</p><h3 id="安装-Hadoop"><a href="#安装-Hadoop" class="headerlink" title="安装 Hadoop"></a>安装 Hadoop</h3><h4 id="将-Hadoop-安装包-放到如下目录"><a href="#将-Hadoop-安装包-放到如下目录" class="headerlink" title="将 Hadoop 安装包 放到如下目录"></a>将 Hadoop 安装包 放到如下目录</h4><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-17-19-38-27.png" alt="拖入."></p><h4 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# tar -zxvf (安装包name)/root/hadoop-3.3.4.gz -C /usr/local/</span><br></pre></td></tr></table></figure><h4 id="配置-Hadoop-环境变量"><a href="#配置-Hadoop-环境变量" class="headerlink" title="配置 Hadoop 环境变量"></a>配置 Hadoop 环境变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# vi /etc/profile</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-10-04-52.png" alt="HADOOP_HOME."></p><h4 id="让配置文件生效"><a href="#让配置文件生效" class="headerlink" title="让配置文件生效"></a>让配置文件生效</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# source /etc/profile</span><br></pre></td></tr></table></figure><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# hadoop -version</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-10-12-28.png" alt="hadoop version."></p><h3 id="Hadoop-集群配置"><a href="#Hadoop-集群配置" class="headerlink" title="Hadoop 集群配置"></a>Hadoop 集群配置</h3><h4 id="修改-hadoop-env-sh-文件"><a href="#修改-hadoop-env-sh-文件" class="headerlink" title="修改 hadoop-env.sh 文件"></a>修改 hadoop-env.sh 文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# cd $HADOOP_HOME</span><br><span class="line">[root@hsq01 hadoop-3.3.4]# cd etc/hadoop</span><br><span class="line">[root@hsq01 hadoop]# vi hadoop-env.sh</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-10-22-11.png" alt="hadoop-env.sh."></p><h4 id="配置-core-site-xml-文件"><a href="#配置-core-site-xml-文件" class="headerlink" title="配置 core-site.xml 文件"></a>配置 core-site.xml 文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 hadoop]# vi core-site.xml</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-10-27-01.png" alt="core-site.xml."></p><h4 id="配置-hdfs-site-xml"><a href="#配置-hdfs-site-xml" class="headerlink" title="配置 hdfs-site.xml"></a>配置 hdfs-site.xml</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 hadoop]# vi hdfs-site.xml</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-10-31-01.png" alt="hdfs-site.xml."></p><h4 id="配置-mapred-site-xml-文件"><a href="#配置-mapred-site-xml-文件" class="headerlink" title="配置 mapred-site.xml 文件"></a>配置 mapred-site.xml 文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 hadoop]# vi mapred-site.xml</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-10-33-59.png" alt="mapred-site.xml."></p><h4 id="配置-yarn-site-xml-文件"><a href="#配置-yarn-site-xml-文件" class="headerlink" title="配置 yarn-site.xml 文件"></a>配置 yarn-site.xml 文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 hadoop]# vi yarn-site.xml</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-10-38-03.png" alt="yarn-site.xml."></p><h4 id="设置从节点，也就是修改-workers-文件"><a href="#设置从节点，也就是修改-workers-文件" class="headerlink" title="设置从节点，也就是修改 workers 文件"></a>设置从节点，也就是修改 workers 文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 hadoop]# vi workers</span><br></pre></td></tr></table></figure><p>文件中的内容替换如下，即三个虚拟机 hostname，每个主机名占一行<br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-10-41-54.png" alt="workers."><br><strong>注意：Hadoop2.x版本是执行 <code>vi slaves</code></strong></p><h4 id="将主节点的配置分发到其他节点"><a href="#将主节点的配置分发到其他节点" class="headerlink" title="将主节点的配置分发到其他节点"></a>将主节点的配置分发到其他节点</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# scp /etc/profile hsq02:/etc/profile</span><br><span class="line">[root@hsq01 ~]# scp /etc/profile hsq03:/etc/profile</span><br><span class="line">[root@hsq01 ~]# scp -r /usr/local/hadoop-3.3.4 hsq02:/usr/local/</span><br><span class="line">[root@hsq01 ~]# scp -r /usr/local/hadoop-3.3.4 hsq03:/usr/local/</span><br><span class="line">[root@hsq01 ~]# scp -r /usr/local/jdk1.8.0_341 hsq02:/usr/local/</span><br><span class="line">[root@hsq01 ~]# scp -r /usr/local/jdk1.8.0_341 hsq03:/usr/local/</span><br></pre></td></tr></table></figure><p>执行完上述命令后，还需要再 02，03 虚拟机上分别执行 <code>source /etc/profile</code> 指令刷新配置文件。到处,整个集群所有节点都有了 Hadoop 运行所需要的环境和文件，Hadoop 集群安装配置完成。</p><h2 id="Hadoop-集群测试"><a href="#Hadoop-集群测试" class="headerlink" title="Hadoop 集群测试"></a>Hadoop 集群测试</h2><h3 id="格式化文件系统"><a href="#格式化文件系统" class="headerlink" title="格式化文件系统"></a>格式化文件系统</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# hdfs namenode -format</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# hadoop namenode -format</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-16-27.png" alt="格式化."><br><strong>注意：</strong></p><ul><li><strong>格式化只需要在 Hadoop 初次启动前执行一次即可；</strong></li><li>出现 <strong>has been successfully formatted</strong> 表明文件系统成功格式化；</li><li>否则，指令错误或者前面配置错误</li></ul><h3 id="启动和查看-Hadoop-进程"><a href="#启动和查看-Hadoop-进程" class="headerlink" title="启动和查看 Hadoop 进程"></a>启动和查看 Hadoop 进程</h3><h4 id="虚拟机01-主节点虚拟机-下启动-Hadoop-进程"><a href="#虚拟机01-主节点虚拟机-下启动-Hadoop-进程" class="headerlink" title="虚拟机01(主节点虚拟机)下启动 Hadoop 进程"></a>虚拟机01(主节点虚拟机)下启动 Hadoop 进程</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# start-dfs.sh</span><br><span class="line">[root@hsq01 ~]# start-yarn.sh</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-06-51.png" alt="启动Hadoop."></p><h4 id="查看-Hadoop-进程"><a href="#查看-Hadoop-进程" class="headerlink" title="查看 Hadoop 进程"></a>查看 Hadoop 进程</h4><p>① 在 01 虚拟机中查看。<br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-18-21.png" alt="01jps."><br>② 在 02 虚拟机中查看<br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-19-02.png" alt="02jps."><br>③ 在 03 虚拟机中查看<br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-19-26.png" alt="03jps."><br>此时，看到规划的 Hadoop 均已启动，则 Hadoop 全分布式搭建成功</p><h3 id="查看Web界面"><a href="#查看Web界面" class="headerlink" title="查看Web界面"></a>查看Web界面</h3><h4 id="先配置-window-下的-hosts-文件"><a href="#先配置-window-下的-hosts-文件" class="headerlink" title="先配置 window 下的 hosts 文件"></a>先配置 window 下的 hosts 文件</h4><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-24-53.png" alt="hosts."><br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-26-37.png" alt="保存hosts."><br>用VS Code 打开，用管理员身份保存修改即可</p><h4 id="关闭虚拟机防火墙"><a href="#关闭虚拟机防火墙" class="headerlink" title="关闭虚拟机防火墙"></a>关闭虚拟机防火墙</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure><p>三台虚拟机都执行</p><h4 id="window-下浏览器访问-http-hsq01-9870-和-http-hsq01-8088"><a href="#window-下浏览器访问-http-hsq01-9870-和-http-hsq01-8088" class="headerlink" title="window 下浏览器访问 http://hsq01:9870 和 http://hsq01:8088"></a>window 下浏览器访问 <a href="http://hsq01:9870/">http://hsq01:9870</a> 和 <a href="http://hsq01:8088/">http://hsq01:8088</a></h4><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-32-48.png" alt="9870."><br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-33-24.png" alt="8088."><br>到此，Hadoop 集群的 HDFS UI 界面和 YARN UI 界面通过 Web 界面均可访问，并且显示正常，便于通过 Web 界面对集群状态进行管理和查看。</p><h2 id="简单使用-Hadoop-集群"><a href="#简单使用-Hadoop-集群" class="headerlink" title="简单使用 Hadoop 集群"></a>简单使用 Hadoop 集群</h2><h3 id="新建-test-txt-文本"><a href="#新建-test-txt-文本" class="headerlink" title="新建 test.txt 文本"></a>新建 test.txt 文本</h3><p>在集群主节点 01 上的&#x2F;root&#x2F;目录下，使用<code>vi test.txt</code>新建一个 test.txt 文本文件，并编写内容</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是我的测试文件</span><br></pre></td></tr></table></figure><h3 id="上传-test-txt-到-HDFS-的-x2F-目录下"><a href="#上传-test-txt-到-HDFS-的-x2F-目录下" class="headerlink" title="上传 test.txt 到 HDFS 的 &#x2F; 目录下"></a>上传 test.txt 到 HDFS 的 &#x2F; 目录下</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# hdfs dfs -put test.txt /</span><br></pre></td></tr></table></figure><h3 id="查看上传的文件"><a href="#查看上传的文件" class="headerlink" title="查看上传的文件"></a>查看上传的文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hsq01 ~]# hdfs dfs -cat /test.txt</span><br></pre></td></tr></table></figure><p><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-45-43.png" alt="hdfs dfs -cat."></p><h3 id="通过-Web-界面下载文件，用记事本查看"><a href="#通过-Web-界面下载文件，用记事本查看" class="headerlink" title="通过 Web 界面下载文件，用记事本查看"></a>通过 Web 界面下载文件，用记事本查看</h3><p>刚刚的 Web 界面刷新<br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-49-09.png" alt="test.txt."><br>点击文件下载<br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-50-02.png" alt="download."><br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-50-46.png" alt="download."><br>打开<br><img src="/2022/10/25/HadoopClusterBuilding3-3-4/2022-10-18-11-51-30.png" alt="test.txt."><br>内容一致，表明 Hadoop 搭建成功！！！</p><p><strong>说明：之前使用 JDK 19 也成功搭建 Hadoop 集群，但 Web 界面无法下载上传的文件，没有解决，查阅资料说是使用的 JDK 版本过新(只是 Web 界面那有问题，没有找到合适方法解决)，所以建设使用稳定的 JDK 版本，新版本的 Hadoop 暂时没有遇到问题。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/22/hello-world/"/>
      <url>/2022/10/22/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/Gallery/wallpaper.html"/>
      <url>/Gallery/wallpaper.html</url>
      
        <content type="html"><![CDATA[<div class="fj-gallery"><p><img src="https://i.loli.net/2019/11/10/lP3rLNUBaGtSVzc.png" alt="1"><br><img src="https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png" alt="2"><br><img src="https://i.loli.net/2019/11/10/53eTB2uiNRlXwFP.png" alt="3"><br><img src="https://i.loli.net/2019/11/10/xthHmnbdNerWOqP.png" alt="4"><br><img src="https://i.loli.net/2019/11/10/rJbFpE65tmxPv7R.png" alt="5"><br><img src="https://i.loli.net/2019/11/10/bEJsXxewpOGuRD8.png" alt="6"><br><img src="https://i.loli.net/2019/11/10/71wgohfPHqXRbG9.png" alt="7"><br><img src="https://i.loli.net/2019/11/10/gcnavZbmepS8d4u.png" alt="8"><br><img src="https://i.loli.net/2019/11/10/3wkO7fuQpgda6vz.png" alt="9"><br><img src="https://i.loli.net/2019/11/10/egVhFWopA5mP2Hk.png" alt="10"></p>          </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/Gallery/ohmygirl.html"/>
      <url>/Gallery/ohmygirl.html</url>
      
        <content type="html"><![CDATA[<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt="1"><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt="2"><br><img src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg" alt="3"><br><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg" alt="4"><br><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg" alt="5"><br><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg" alt="6"><br><img src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg" alt="7"><br><img src="https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg" alt="8"></p>          </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/Gallery/%E8%B2%82%E8%9D%89.html"/>
      <url>/Gallery/%E8%B2%82%E8%9D%89.html</url>
      
        <content type="html"><![CDATA[<div class="fj-gallery"><p><img src="https://pic1.imgdb.cn/item/6364a57b16f2c2beb131e55a.jpg" alt="貂蝉——唤灵魅影"><br><img src="https://pic1.imgdb.cn/item/6364abd016f2c2beb13c6aac.jpg" alt="貂蝉——遇见胡旋1"><br><img src="https://pic1.imgdb.cn/item/6364a52216f2c2beb13178e4.jpg" alt="貂蝉——异域舞娘"><br><img src="https://pic1.imgdb.cn/item/6364a52216f2c2beb13178b5.jpg" alt="貂蝉——绝世舞姬"><br><img src="https://pic1.imgdb.cn/item/6364a52216f2c2beb13178d8.jpg" alt="貂蝉——圣诞恋歌"><br><img src="https://pic1.imgdb.cn/item/6364a56216f2c2beb131c7dd.jpg" alt="貂蝉——仲夏夜之梦"><br><img src="https://pic1.imgdb.cn/item/6364a56a16f2c2beb131d0ba.jpg" alt="貂蝉——逐梦之音"><br><img src="https://pic1.imgdb.cn/item/6364a52216f2c2beb1317895.jpg" alt="貂蝉——金色仲夏夜之梦"><br><img src="https://pic1.imgdb.cn/item/6364a52216f2c2beb13178cd.jpg" alt="貂蝉——猫影幻舞"><br><img src="https://pic1.imgdb.cn/item/6364a55c16f2c2beb131c06e.jpg" alt="貂蝉——遇见胡旋"></p>          </div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/downloads/code/React-todos/ToDoApp.css"/>
      <url>/downloads/code/React-todos/ToDoApp.css</url>
      
        <content type="html"><![CDATA[@import url('./css/todos-base.css');@import url('./css/todos-index.css');]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/downloads/code/React-todos/todos-base.css"/>
      <url>/downloads/code/React-todos/todos-base.css</url>
      
        <content type="html"><![CDATA[hr {margin: 20px 0;border: 0;border-top: 1px dashed #c5c5c5;border-bottom: 1px dashed #f7f7f7;}.learn a {font-weight: normal;text-decoration: none;color: #b83f45;}.learn a:hover {text-decoration: underline;color: #787e7e;}.learn h3,.learn h4,.learn h5 {margin: 10px 0;font-weight: 500;line-height: 1.2;color: #000;}.learn h3 {font-size: 24px;}.learn h4 {font-size: 18px;}.learn h5 {margin-bottom: 0;font-size: 14px;}.learn ul {padding: 0;margin: 0 0 30px 25px;}.learn li {line-height: 20px;}.learn p {font-size: 15px;font-weight: 300;line-height: 1.3;margin-top: 0;margin-bottom: 0;}#issue-count {display: none;}.quote {border: none;margin: 20px 0 60px 0;}.quote p {font-style: italic;}.quote p:before {content: '“';font-size: 50px;opacity: .15;position: absolute;top: -20px;left: 3px;}.quote p:after {content: '”';font-size: 50px;opacity: .15;position: absolute;bottom: -42px;right: 3px;}.quote footer {position: absolute;bottom: -40px;right: 0;}.quote footer img {border-radius: 3px;}.quote footer a {margin-left: 5px;vertical-align: middle;}.speech-bubble {position: relative;padding: 10px;background: rgba(0, 0, 0, .04);border-radius: 5px;}.speech-bubble:after {content: '';position: absolute;top: 100%;right: 30px;border: 13px solid transparent;border-top-color: rgba(0, 0, 0, .04);}.learn-bar > .learn {position: absolute;width: 272px;top: 8px;left: -300px;padding: 10px;border-radius: 5px;background-color: rgba(255, 255, 255, .6);transition-property: left;transition-duration: 500ms;}@media (min-width: 899px) {.learn-bar {width: auto;padding-left: 300px;}.learn-bar > .learn {left: 8px;}}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/downloads/code/React-todos/todos-index.css"/>
      <url>/downloads/code/React-todos/todos-index.css</url>
      
        <content type="html"><![CDATA[html,body {margin: 0;padding: 0;}button {margin: 0;padding: 0;border: 0;background: none;font-size: 100%;vertical-align: baseline;font-family: inherit;font-weight: inherit;color: inherit;-webkit-appearance: none;appearance: none;-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;}body {font: 14px 'Helvetica Neue', Helvetica, Arial, sans-serif;line-height: 1.4em;background: #f5f5f5;color: #4d4d4d;min-width: 230px;max-width: 550px;margin: 0 auto;-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;font-weight: 300;}:focus {outline: 0;}.hidden {display: none;}.todoapp {background: #fff;margin: 130px 0 40px 0;position: relative;box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2),            0 25px 50px 0 rgba(0, 0, 0, 0.1);}.todoapp input::-webkit-input-placeholder {font-style: italic;font-weight: 300;color: #e6e6e6;}.todoapp input::-moz-placeholder {font-style: italic;font-weight: 300;color: #e6e6e6;}.todoapp input::input-placeholder {font-style: italic;font-weight: 300;color: #e6e6e6;}.todoapp h1 {position: absolute;top: -155px;width: 100%;font-size: 100px;font-weight: 100;text-align: center;color: rgba(175, 47, 47, 0.15);-webkit-text-rendering: optimizeLegibility;-moz-text-rendering: optimizeLegibility;text-rendering: optimizeLegibility;}.new-todo,.edit {position: relative;margin: 0;width: 100%;font-size: 24px;font-family: inherit;font-weight: inherit;line-height: 1.4em;border: 0;color: inherit;padding: 6px;border: 1px solid #999;box-shadow: inset 0 -1px 5px 0 rgba(0, 0, 0, 0.2);box-sizing: border-box;-webkit-font-smoothing: antialiased;-moz-osx-font-smoothing: grayscale;}.new-todo {padding: 16px 16px 16px 60px;border: none;background: rgba(0, 0, 0, 0.003);box-shadow: inset 0 -2px 1px rgba(0,0,0,0.03);}.main {position: relative;z-index: 2;border-top: 1px solid #e6e6e6;}.toggle-all {width: 1px;height: 1px;border: none; /* Mobile Safari */opacity: 0;position: absolute;right: 100%;bottom: 100%;}.toggle-all + label {width: 60px;height: 34px;font-size: 0;position: absolute;top: -52px;left: -13px;-webkit-transform: rotate(90deg);transform: rotate(90deg);}.toggle-all + label:before {content: '❯';font-size: 22px;color: #e6e6e6;padding: 10px 27px 10px 27px;}.toggle-all:checked + label:before {color: #737373;}.todo-list {margin: 0;padding: 0;list-style: none;}.todo-list li {position: relative;font-size: 24px;border-bottom: 1px solid #ededed;}.todo-list li:last-child {border-bottom: none;}.todo-list li.editing {border-bottom: none;padding: 0;}.todo-list li.editing .edit {display: block;width: 506px;padding: 12px 16px;margin: 0 0 0 43px;}.todo-list li.editing .view {display: none;}.todo-list li .toggle {text-align: center;width: 40px;/* auto, since non-WebKit browsers doesn't support input styling */height: auto;position: absolute;top: 0;bottom: 0;margin: auto 0;border: none; /* Mobile Safari */-webkit-appearance: none;appearance: none;}.todo-list li .toggle {opacity: 0;}.todo-list li .toggle + label {/*Firefox requires `#` to be escaped - https://bugzilla.mozilla.org/show_bug.cgi?id=922433IE and Edge requires *everything* to be escaped to render, so we do that instead of just the `#` - https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/7157459/*/background-image: url('data:image/svg+xml;utf8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%2240%22%20height%3D%2240%22%20viewBox%3D%22-10%20-18%20100%20135%22%3E%3Ccircle%20cx%3D%2250%22%20cy%3D%2250%22%20r%3D%2250%22%20fill%3D%22none%22%20stroke%3D%22%23ededed%22%20stroke-width%3D%223%22/%3E%3C/svg%3E');background-repeat: no-repeat;background-position: center left;}.todo-list li .toggle:checked + label {background-image: url('data:image/svg+xml;utf8,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%20width%3D%2240%22%20height%3D%2240%22%20viewBox%3D%22-10%20-18%20100%20135%22%3E%3Ccircle%20cx%3D%2250%22%20cy%3D%2250%22%20r%3D%2250%22%20fill%3D%22none%22%20stroke%3D%22%23bddad5%22%20stroke-width%3D%223%22/%3E%3Cpath%20fill%3D%22%235dc2af%22%20d%3D%22M72%2025L42%2071%2027%2056l-4%204%2020%2020%2034-52z%22/%3E%3C/svg%3E');}.todo-list li label {word-break: break-all;padding: 15px 15px 15px 60px;display: block;line-height: 1.2;transition: color 0.4s;}.todo-list li.completed label {color: #d9d9d9;text-decoration: line-through;}.todo-list li .destroy {display: none;position: absolute;top: 0;right: 10px;bottom: 0;width: 40px;height: 40px;margin: auto 0;font-size: 30px;color: #cc9a9a;margin-bottom: 11px;transition: color 0.2s ease-out;}.todo-list li .destroy:hover {color: #af5b5e;}.todo-list li .destroy:after {content: '×';}.todo-list li:hover .destroy {display: block;}.todo-list li .edit {display: none;}.todo-list li.editing:last-child {margin-bottom: -1px;}.footer {color: #777;padding: 10px 15px;height: 20px;text-align: center;border-top: 1px solid #e6e6e6;}.footer:before {content: '';position: absolute;right: 0;bottom: 0;left: 0;height: 50px;overflow: hidden;box-shadow: 0 1px 1px rgba(0, 0, 0, 0.2),            0 8px 0 -3px #f6f6f6,            0 9px 1px -3px rgba(0, 0, 0, 0.2),            0 16px 0 -6px #f6f6f6,            0 17px 2px -6px rgba(0, 0, 0, 0.2);}.todo-count {float: left;text-align: left;}.todo-count strong {font-weight: 300;}.filters {margin: 0;padding: 0;list-style: none;position: absolute;right: 0;left: 0;}.filters li {display: inline;}.filters li a {color: inherit;margin: 3px;padding: 3px 7px;text-decoration: none;border: 1px solid transparent;border-radius: 3px;}.filters li a:hover {border-color: rgba(175, 47, 47, 0.1);}.filters li a.selected {border-color: rgba(175, 47, 47, 0.2);}.clear-completed,html .clear-completed:active {float: right;position: relative;line-height: 20px;text-decoration: none;cursor: pointer;}.clear-completed:hover {text-decoration: underline;}.info {margin: 65px auto 0;color: #bfbfbf;font-size: 10px;text-shadow: 0 1px 0 rgba(255, 255, 255, 0.5);text-align: center;}.info p {line-height: 1;}.info a {color: inherit;text-decoration: none;font-weight: 400;}.info a:hover {text-decoration: underline;}/*Hack to remove background from Mobile Safari.Can't use it globally since it destroys checkboxes in Firefox*/@media screen and (-webkit-min-device-pixel-ratio:0) {.toggle-all,.todo-list li .toggle {background: none;}.todo-list li .toggle {height: 40px;}}@media (max-width: 430px) {.footer {height: 50px;}.filters {bottom: 10px;}}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/downloads/code/project/TicTacToe/Tic-Tac-Toe.html"/>
      <url>/downloads/code/project/TicTacToe/Tic-Tac-Toe.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html lang="en"><head>    <meta charset="UTF-8">    <meta http-equiv="X-UA-Compatible" content="IE=edge">    <meta name="viewport" content="width=device-width, initial-scale=1.0">    <link rel="stylesheet" href="./Tic-Tac-Toe.css">    <title>Tic Tac Toe(井字棋)</title></head><body>    <h1>Tic Tac Toe</h1><div class="container">    <!-- 游戏面板（棋盘） --><div id="bord" class>    <div class="row">        <div name class="cell" hover="x"></div>        <div name class="cell" hover="x"></div>        <div name class="cell" hover="x"></div>    </div>    <div class="row">        <div name class="cell" hover="x"></div>        <div name class="cell" hover="x"></div>        <div name class="cell" hover="x"></div>    </div>     <div class="row">        <div name class="cell last-row" hover="x"></div>        <div name class="cell last-row" hover="x"></div>        <div name class="cell last-row" hover="x"></div>    </div>    <!-- 游戏获取信息面板 -->    </div>    <div id="message" class="game-message">        <button id="restart">Restart 😜</button>        <p id="winner"></p>    </div></div> <script src="./Tic-Tac-Toe.js"></script>  </body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/downloads/code/project/TicTacToe/Tic-Tac-Toe.js"/>
      <url>/downloads/code/project/TicTacToe/Tic-Tac-Toe.js</url>
      
        <content type="html"><![CDATA[var Player;(function (Player) {    Player["X"] = "x";    Player["O"] = "o";})(Player || (Player = {}));var cells = document.querySelectorAll('.cell');console.log(cells);//let gameBord=document.querySelector('#bord')//console.log(gameBord)var hover = document.getElementsByName(''); //hover 棋牌变换 X ，O  这样也能获取// console.log(hover)var message = document.querySelector('#message');var winner = document.querySelector('#winner');var restart = document.querySelector('#restart');var currentPlayer;var step;var winArry = [    [0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];// console.log(winArry[0])// console.log(winArry[1][1])startGame();//重新开始restart.addEventListener('click', startGame);//开始函数function startGame() {    currentPlayer = Player.X;    step = 0;    message.style.display = 'none';    cells.forEach(function (item) {        var cell = item;        cell.classList.remove(Player.X, Player.O, 'no-hover');        cell.removeEventListener('click', clickCell);        cell.addEventListener('click', clickCell, { once: true });        checkHover();    });}// cells.forEach(function(item){//     //console.log(item)//     let cell=item as HTMLDivElement//     cell.addEventListener('click',clickCell,{once:true})// })//棋盘中单元格的click事件处理程序function clickCell(event) {    var target = event.target; //类型断言    target.classList.add('no-hover', currentPlayer); //元素将永远不会成为鼠标事件的target    //调用判赢函数，判断是否获胜    var isWin = checkWin(currentPlayer);    if (isWin) {        message.style.display = 'block';        winner.innerText = currentPlayer + ' won！！！';        console.log('当前玩家获胜了', currentPlayer);        return;    }    step++;    if (step === 9) {        message.style.display = 'block';        winner.innerText = '平局';        console.log('平局');        return;    }    //切换玩家：根据当前当前玩家，得到另一个玩家    currentPlayer = currentPlayer === Player.X ? Player.O : Player.X;    //处理下一步提示    checkHover();    //gameBord.classList.remove('x','o')    //gameBord.classList.add(currentPlayer) }//实现判赢函数function checkWin(player) {    /*    实现判赢函数    1、使用some方法遍历数组，并使用some方法的返回值作为函数返回值    2、在some方法的回调函数中，获取每种获胜情况对应的3 个单元格    3、判断这三个单元格是否同时包含当前玩家类名    4、如果包含，玩家获胜，返回true停止循环，    否则继续下一次循环     */    var isWin = winArry.some(function (item, idex) {        // 获取每种获胜情况对应的3 个单元格        // console.log(item)        // let cell1=cells[item[0]]        // let cell2=cells[item[1]]        // let cell3=cells[item[2]]        // console.log(cell1,cell2,cell3)        if (cells[item[0]].classList.contains(player) &&            cells[item[1]].classList.contains(player) &&            cells[item[2]].classList.contains(player)) {            return true;        }        return false;    });    return isWin;}//处理下一步提示function checkHover() {    // for (let i = 0; i < hover.length; i++) {    //     cells[i].setAttribute('hover', currentPlayer)    // }    cells.forEach(function (item, index) {        item.setAttribute('hover', currentPlayer);    });}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/downloads/code/project/TicTacToe/Tic-Tac-Toe.css"/>
      <url>/downloads/code/project/TicTacToe/Tic-Tac-Toe.css</url>
      
        <content type="html"><![CDATA[p{    margin:0;}body{    background-color: #f9f2e7;}div{    display: block;}/*标题*/h1{    text-align: center;    font-size: 60px;    color: #477998;}/*游戏内容容器*/.container{    /* position: relative; */    width: 471px;    height: 471px;    margin: 0 auto;}#bord{    height: 471px;    width: 471px;}.row{    display: flex;/*弹性布局 ，子元素的float clear vertical-align 将失效*/}.cell.last-row{    border-bottom: 0;} .cell:last-child {    border-right: 0;}.cell{    flex: 1;    width: 157px;    height: 157px;    line-height: 157px;    box-sizing: border-box;    border-right: 6px solid #546363;    border-bottom: 6px solid #546363;    text-align: center;    cursor : pointer;}.no-hover {    pointer-events: none;}.cell:hover::before {    content: attr(hover);    font-size: 100px;    color: #747474fa;    display: block;    opacity: 0.2;/*透明度 */}.x::before{    content: "x";    font-size:100px;    color: rgb(21, 151, 238);    display: block;}.o::before{    content: "o";    font-size:100px;    color: rgb(21, 238, 57);    display: block;}.game-message {    display: none;    position: absolute;    top: 0;    left: 0;    right: 0;    bottom: 0;    background-color: rgba(69, 133, 136, 0.4);    text-align: center;}#winner {    /* font-family: sans-serif; */    color: yellow;    text-shadow: 0 0 6px #ff0000;    font-size: 40px;    margin-top: 100px;}#restart {    font-size: 30px;    padding: 10px;    border-radius: 15px;    border-color: #f9f2e7;    box-shadow: 0px 2px 6px 2px rgba(0, 0, 0, 0.75);    color: #5682a1;    margin-top: 120px;}]]></content>
      
    </entry>
    
    
  
</search>
